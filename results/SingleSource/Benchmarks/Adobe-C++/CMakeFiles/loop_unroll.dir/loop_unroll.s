	.file	"loop_unroll.cpp"
	.text
	.globl	_Z13record_resultdPKc           # -- Begin function _Z13record_resultdPKc
	.p2align	5
	.type	_Z13record_resultdPKc,@function
_Z13record_resultdPKc:                  # @_Z13record_resultdPKc
# %bb.0:
	addi.d	$sp, $sp, -48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	fst.d	$fs0, $sp, 0                    # 8-byte Folded Spill
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$fp, $a0
	fmov.d	$fs0, $fa0
	pcalau12i	$s0, %pc_hi20(current_test)
	beqz	$a2, .LBB0_2
# %bb.1:
	ld.w	$a0, $s0, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB0_4
.LBB0_2:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB0_5
# %bb.3:                                # %._crit_edge
	move	$a2, $a0
	ld.w	$a0, $s0, %pc_lo12(current_test)
.LBB0_4:
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fs0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s0, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 0                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB0_5:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end0:
	.size	_Z13record_resultdPKc, .Lfunc_end0-_Z13record_resultdPKc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z9summarizePKciiii
.LCPI1_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.text
	.globl	_Z9summarizePKciiii
	.p2align	5
	.type	_Z9summarizePKciiii,@function
_Z9summarizePKciiii:                    # @_Z9summarizePKciiii
# %bb.0:
	addi.d	$sp, $sp, -128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 24                   # 8-byte Folded Spill
	pcalau12i	$s6, %pc_hi20(current_test)
	ld.w	$fp, $s6, %pc_lo12(current_test)
	move	$s0, $a4
	move	$s2, $a2
	move	$s3, $a1
	move	$s5, $a0
	pcalau12i	$s7, %pc_hi20(results)
	blez	$fp, .LBB1_3
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $s7, %pc_lo12(results)
	addi.d	$s4, $a0, 8
	ori	$s1, $zero, 12
	.p2align	4, , 16
.LBB1_2:                                # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s4, 0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	slt	$a1, $a0, $s1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s1, $a1
	or	$s1, $a1, $a0
	addi.d	$fp, $fp, -1
	addi.d	$s4, $s4, 16
	bnez	$fp, .LBB1_2
	b	.LBB1_4
.LBB1_3:
	ori	$s1, $zero, 12
.LBB1_4:                                # %._crit_edge
	addi.w	$a1, $s1, -12
	pcalau12i	$a0, %pc_hi20(.L.str.1)
	addi.d	$a0, $a0, %pc_lo12(.L.str.1)
	pcalau12i	$a2, %pc_hi20(.L.str.2)
	addi.d	$s4, $a2, %pc_lo12(.L.str.2)
	move	$a2, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.3)
	addi.d	$a0, $a0, %pc_lo12(.L.str.3)
	move	$a1, $s1
	move	$a2, $s4
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	movgr2fr.d	$fs0, $zero
	blez	$a0, .LBB1_10
# %bb.5:                                # %.lr.ph45.preheader
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s5, $sp, 16                    # 8-byte Folded Spill
	movgr2fr.w	$fa0, $s3
	movgr2fr.w	$fa1, $s2
	pcalau12i	$a0, %pc_hi20(.LCPI1_0)
	fld.d	$fa2, $a0, %pc_lo12(.LCPI1_0)
	ffint.d.w	$fa0, $fa0
	ffint.d.w	$fa1, $fa1
	fmul.d	$fa0, $fa0, $fa1
	fdiv.d	$fs1, $fa0, $fa2
	pcalau12i	$a0, %pc_hi20(.L.str.4)
	addi.d	$s2, $a0, %pc_lo12(.L.str.4)
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$s3, $a0, %pc_lo12(.L.str.5)
	move	$s8, $zero
	move	$s4, $zero
	move	$fp, $zero
	.p2align	4, , 16
.LBB1_6:                                # %.lr.ph45
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$s0, $s7, %pc_lo12(results)
	add.d	$a0, $s0, $s8
	ld.d	$s5, $a0, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	fldx.d	$fa0, $s0, $s8
	fld.d	$fa1, $s0, 0
	sub.w	$a2, $s1, $a0
	fdiv.d	$fa2, $fs1, $fa0
	fdiv.d	$fa1, $fa0, $fa1
	movfr2gr.d	$a5, $fa0
	movfr2gr.d	$a6, $fa2
	movfr2gr.d	$a7, $fa1
	move	$a0, $s2
	move	$a1, $s4
	move	$a3, $s3
	move	$a4, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	addi.d	$fp, $fp, 1
	addi.w	$s4, $s4, 1
	addi.d	$s8, $s8, 16
	blt	$fp, $a0, .LBB1_6
# %bb.7:                                # %.preheader39
	ld.d	$s5, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	blez	$a0, .LBB1_10
# %bb.8:                                # %.lr.ph49
	ld.d	$a1, $s7, %pc_lo12(results)
	movgr2fr.d	$fs0, $zero
	.p2align	4, , 16
.LBB1_9:                                # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $a1, 0
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB1_9
.LBB1_10:                               # %._crit_edge50
	movfr2gr.d	$a2, $fs0
	pcalau12i	$a0, %pc_hi20(.L.str.6)
	addi.d	$a0, $a0, %pc_lo12(.L.str.6)
	move	$a1, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	beqz	$s0, .LBB1_15
# %bb.11:                               # %._crit_edge50
	ld.w	$a0, $s6, %pc_lo12(current_test)
	ori	$a1, $zero, 2
	blt	$a0, $a1, .LBB1_15
# %bb.12:                               # %.lr.ph54
	ld.d	$a0, $s7, %pc_lo12(results)
	fld.d	$fs1, $a0, 0
	addi.d	$fp, $a0, 16
	movgr2fr.d	$fs0, $zero
	ori	$s0, $zero, 1
	.p2align	4, , 16
.LBB1_13:                               # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $fp, 0
	fdiv.d	$fa0, $fa0, $fs1
	pcaddu18i	$ra, %call36(log)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s6, %pc_lo12(current_test)
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$s0, $s0, 1
	addi.d	$fp, $fp, 16
	blt	$s0, $a0, .LBB1_13
# %bb.14:                               # %._crit_edge55
	addi.d	$a0, $a0, -1
	movgr2fr.w	$fa0, $a0
	ffint.d.w	$fa0, $fa0
	fdiv.d	$fa0, $fs0, $fa0
	pcaddu18i	$ra, %call36(exp)
	jirl	$ra, $ra, 0
	movfr2gr.d	$a2, $fa0
	pcalau12i	$a0, %pc_hi20(.L.str.7)
	addi.d	$a0, $a0, %pc_lo12(.L.str.7)
	move	$a1, $s5
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
.LBB1_15:
	st.w	$zero, $s6, %pc_lo12(current_test)
	fld.d	$fs1, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.Lfunc_end1:
	.size	_Z9summarizePKciiii, .Lfunc_end1-_Z9summarizePKciiii
                                        # -- End function
	.globl	_Z17summarize_simplefP8_IO_FILEPKc # -- Begin function _Z17summarize_simplefP8_IO_FILEPKc
	.p2align	5
	.type	_Z17summarize_simplefP8_IO_FILEPKc,@function
_Z17summarize_simplefP8_IO_FILEPKc:     # @_Z17summarize_simplefP8_IO_FILEPKc
# %bb.0:
	addi.d	$sp, $sp, -128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	pcalau12i	$s5, %pc_hi20(current_test)
	ld.w	$fp, $s5, %pc_lo12(current_test)
	move	$s0, $a1
	move	$s7, $a0
	pcalau12i	$s3, %pc_hi20(results)
	blez	$fp, .LBB2_3
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $s3, %pc_lo12(results)
	addi.d	$s2, $a0, 8
	ori	$s1, $zero, 12
	.p2align	4, , 16
.LBB2_2:                                # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s2, 0
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	slt	$a1, $a0, $s1
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s1, $a1
	or	$s1, $a1, $a0
	addi.d	$fp, $fp, -1
	addi.d	$s2, $s2, 16
	bnez	$fp, .LBB2_2
	b	.LBB2_4
.LBB2_3:
	ori	$s1, $zero, 12
.LBB2_4:                                # %._crit_edge
	addi.w	$a2, $s1, -12
	pcalau12i	$a0, %pc_hi20(.L.str.8)
	addi.d	$a1, $a0, %pc_lo12(.L.str.8)
	pcalau12i	$a0, %pc_hi20(.L.str.2)
	addi.d	$s2, $a0, %pc_lo12(.L.str.2)
	move	$a0, $s7
	move	$a3, $s2
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.9)
	addi.d	$a1, $a0, %pc_lo12(.L.str.9)
	move	$a0, $s7
	move	$a2, $s1
	move	$a3, $s2
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s5, %pc_lo12(current_test)
	movgr2fr.d	$fs0, $zero
	blez	$a0, .LBB2_10
# %bb.5:                                # %.lr.ph32.preheader
	st.d	$s0, $sp, 16                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.10)
	addi.d	$a0, $a0, %pc_lo12(.L.str.10)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.L.str.5)
	addi.d	$s2, $a0, %pc_lo12(.L.str.5)
	move	$s8, $zero
	move	$s4, $zero
	move	$fp, $zero
	.p2align	4, , 16
.LBB2_6:                                # %.lr.ph32
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$s6, $s3, %pc_lo12(results)
	add.d	$a0, $s6, $s8
	move	$s0, $s5
	ld.d	$s5, $a0, 8
	move	$a0, $s5
	pcaddu18i	$ra, %call36(strlen)
	jirl	$ra, $ra, 0
	ldx.d	$a6, $s6, $s8
	sub.w	$a3, $s1, $a0
	move	$a0, $s7
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	move	$a2, $s4
	move	$a4, $s2
	move	$a5, $s5
	move	$s5, $s0
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s0, %pc_lo12(current_test)
	addi.d	$fp, $fp, 1
	addi.w	$s4, $s4, 1
	addi.d	$s8, $s8, 16
	blt	$fp, $a0, .LBB2_6
# %bb.7:                                # %.preheader
	ld.d	$s0, $sp, 16                    # 8-byte Folded Reload
	blez	$a0, .LBB2_10
# %bb.8:                                # %.lr.ph36
	ld.d	$a1, $s3, %pc_lo12(results)
	movgr2fr.d	$fs0, $zero
	.p2align	4, , 16
.LBB2_9:                                # =>This Inner Loop Header: Depth=1
	fld.d	$fa0, $a1, 0
	fadd.d	$fs0, $fs0, $fa0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 16
	bnez	$a0, .LBB2_9
.LBB2_10:                               # %._crit_edge37
	movfr2gr.d	$a3, $fs0
	pcalau12i	$a0, %pc_hi20(.L.str.6)
	addi.d	$a1, $a0, %pc_lo12(.L.str.6)
	move	$a0, $s7
	move	$a2, $s0
	pcaddu18i	$ra, %call36(fprintf)
	jirl	$ra, $ra, 0
	st.w	$zero, $s5, %pc_lo12(current_test)
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.Lfunc_end2:
	.size	_Z17summarize_simplefP8_IO_FILEPKc, .Lfunc_end2-_Z17summarize_simplefP8_IO_FILEPKc
                                        # -- End function
	.globl	_Z11start_timerv                # -- Begin function _Z11start_timerv
	.p2align	5
	.type	_Z11start_timerv,@function
_Z11start_timerv:                       # @_Z11start_timerv
# %bb.0:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a0, $a1, %pc_lo12(start_time)
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end3:
	.size	_Z11start_timerv, .Lfunc_end3-_Z11start_timerv
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z5timerv
.LCPI4_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.text
	.globl	_Z5timerv
	.p2align	5
	.type	_Z5timerv,@function
_Z5timerv:                              # @_Z5timerv
# %bb.0:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(start_time)
	ld.d	$a1, $a1, %pc_lo12(start_time)
	pcalau12i	$a2, %pc_hi20(end_time)
	pcalau12i	$a3, %pc_hi20(.LCPI4_0)
	fld.d	$fa0, $a3, %pc_lo12(.LCPI4_0)
	sub.d	$a1, $a0, $a1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	st.d	$a0, $a2, %pc_lo12(end_time)
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end4:
	.size	_Z5timerv, .Lfunc_end4-_Z5timerv
                                        # -- End function
	.globl	main                            # -- Begin function main
	.p2align	5
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$s0, $a0
	ori	$s1, $zero, 2
	pcalau12i	$s8, %pc_hi20(iterations)
	pcalau12i	$a0, %pc_hi20(init_value)
	addi.d	$s2, $a0, %pc_lo12(init_value)
	blt	$s0, $s1, .LBB5_3
# %bb.1:
	move	$fp, $a1
	ld.d	$a0, $a1, 8
	ori	$a2, $zero, 10
	move	$a1, $zero
	pcaddu18i	$ra, %call36(__isoc23_strtol)
	jirl	$ra, $ra, 0
	st.w	$a0, $s8, %pc_lo12(iterations)
	beq	$s0, $s1, .LBB5_3
# %bb.2:
	ld.d	$a0, $fp, 16
	move	$a1, $zero
	pcaddu18i	$ra, %call36(strtod)
	jirl	$ra, $ra, 0
	fst.d	$fa0, $s2, 0
.LBB5_3:                                # %vector.ph
	st.d	$s2, $sp, 16                    # 8-byte Folded Spill
	fld.d	$fa0, $s2, 0
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a0, $fa0
	vreplgr2vr.w	$vr0, $a0
	lu12i.w	$a0, -8
	ori	$a0, $a0, 768
	pcalau12i	$a1, %pc_hi20(data32)
	addi.d	$a1, $a1, %pc_lo12(data32)
	lu12i.w	$a3, 7
	ori	$a2, $a3, 3328
	ori	$a3, $a3, 3344
	.p2align	4, , 16
.LBB5_4:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	add.d	$a4, $a1, $a0
	vstx	$vr0, $a4, $a2
	addi.d	$a0, $a0, 32
	vstx	$vr0, $a4, $a3
	bnez	$a0, .LBB5_4
# %bb.5:                                # %_Z4fillIPiiEvT_S1_T0_.exit
	pcalau12i	$a0, %pc_hi20(data32)
	addi.d	$s7, $a0, %pc_lo12(data32)
	pcalau12i	$a0, %pc_hi20(.L.str.11)
	addi.d	$a1, $a0, %pc_lo12(.L.str.11)
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi25EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string+2047)
	addi.d	$s5, $a0, %pc_lo12(temp_string+2047)
	addi.d	$fp, $s5, 453
	lu12i.w	$a0, 1
	ori	$s6, $a0, 3904
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s0, $s5, 553
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s5, 653
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s2, $s5, 753
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s3, $s5, 853
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s4, $s5, 953
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s4
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s5, $s5, 1053
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s5
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.12)
	addi.d	$a1, $a0, %pc_lo12(.L.str.12)
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi25EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s4
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s5
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.13)
	addi.d	$a1, $a0, %pc_lo12(.L.str.13)
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi25EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s4
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s5
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.14)
	addi.d	$a1, $a0, %pc_lo12(.L.str.14)
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi25EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s4
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s7
	move	$a1, $s6
	move	$a2, $s5
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s8, %pc_lo12(iterations)
	bstrpick.d	$a1, $a0, 62, 61
	add.w	$a0, $a0, $a1
	srli.d	$a0, $a0, 2
	st.w	$a0, $s8, %pc_lo12(iterations)
	pcalau12i	$a0, %pc_hi20(dataDouble+16)
	addi.d	$a0, $a0, %pc_lo12(dataDouble+16)
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	vldrepl.d	$vr0, $a1, 0
	.p2align	4, , 16
.LBB5_6:                                # %vector.body9
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a0, -16
	vst	$vr0, $a0, 0
	addi.d	$s6, $s6, -4
	addi.d	$a0, $a0, 32
	bnez	$s6, .LBB5_6
# %bb.7:                                # %_Z4fillIPddEvT_S1_T0_.exit
	pcalau12i	$a0, %pc_hi20(dataDouble)
	addi.d	$s6, $a0, %pc_lo12(dataDouble)
	pcalau12i	$a0, %pc_hi20(.L.str.15)
	addi.d	$a1, $a0, %pc_lo12(.L.str.15)
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi25EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	lu12i.w	$a0, 1
	ori	$s7, $a0, 3904
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s4
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s5
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.16)
	addi.d	$a1, $a0, %pc_lo12(.L.str.16)
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi25EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s4
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s5
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.17)
	addi.d	$a1, $a0, %pc_lo12(.L.str.17)
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi25EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s4
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s5
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.L.str.18)
	addi.d	$a1, $a0, %pc_lo12(.L.str.18)
	move	$a0, $s6
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi25EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s4
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $s6
	move	$a1, $s7
	move	$a2, $s5
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	move	$a0, $zero
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.Lfunc_end5:
	.size	main, .Lfunc_end5-main
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
.LCPI6_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB6_17
# %bb.1:                                # %.preheader48.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -31
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 64
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t1, $zero, 32
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -504557
	ori	$s1, $a0, 1792
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB6_3
	.p2align	4, , 16
.LBB6_2:                                # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB6_3 Depth=1
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB6_17
.LBB6_3:                                # %.preheader48
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_5 Depth 2
                                        #     Child Loop BB6_11 Depth 2
                                        #     Child Loop BB6_14 Depth 2
	blt	$s0, $t1, .LBB6_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB6_3 Depth=1
	move	$a1, $zero
	move	$a2, $zero
	move	$a0, $zero
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB6_5:                                # %.lr.ph
                                        #   Parent Loop BB6_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -64
	ld.w	$a5, $a3, -60
	ld.w	$a6, $a3, -56
	ld.w	$a7, $a3, -52
	ld.w	$t0, $a3, -48
	add.d	$a4, $a5, $a4
	ld.w	$a5, $a3, -44
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -40
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -36
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -32
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -28
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -24
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -20
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -16
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -12
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -8
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -4
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 0
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 4
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 8
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 12
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 16
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 20
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 24
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 28
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 32
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 36
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 40
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 44
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 48
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 52
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 56
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 60
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $a5
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 32
	addi.d	$a1, $a1, 32
	addi.d	$a3, $a3, 128
	blt	$a2, $s6, .LBB6_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB6_3 Depth=1
	addi.w	$a2, $a1, 0
	blt	$a2, $s0, .LBB6_8
	b	.LBB6_15
	.p2align	4, , 16
.LBB6_7:                                #   in Loop: Header=BB6_3 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	addi.w	$a2, $a1, 0
	bge	$a2, $s0, .LBB6_15
.LBB6_8:                                # %.lr.ph54.preheader
                                        #   in Loop: Header=BB6_3 Depth=1
	sub.d	$a3, $s7, $a1
	ori	$a2, $zero, 8
	bgeu	$a3, $a2, .LBB6_10
# %bb.9:                                #   in Loop: Header=BB6_3 Depth=1
	move	$a2, $a1
	b	.LBB6_13
	.p2align	4, , 16
.LBB6_10:                               # %vector.ph
                                        #   in Loop: Header=BB6_3 Depth=1
	move	$a4, $a3
	bstrins.d	$a4, $zero, 2, 0
	add.d	$a2, $a4, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a1, $a0, 2
	move	$a1, $a4
	.p2align	4, , 16
.LBB6_11:                               # %vector.body
                                        #   Parent Loop BB6_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a1, $a1, -8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB6_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB6_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a3, $a4, .LBB6_15
.LBB6_13:                               # %.lr.ph54.preheader70
                                        #   in Loop: Header=BB6_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a2, $a1, 2
	sub.d	$a2, $s7, $a2
	.p2align	4, , 16
.LBB6_14:                               # %.lr.ph54
                                        #   Parent Loop BB6_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.d	$a0, $a0, $s2
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB6_14
.LBB6_15:                               # %._crit_edge
                                        #   in Loop: Header=BB6_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB6_2
# %bb.16:                               #   in Loop: Header=BB6_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t1, $zero, 32
	b	.LBB6_2
.LBB6_17:                               # %._crit_edge57
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB6_19
# %bb.18:                               # %._crit_edge57
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB6_21
.LBB6_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB6_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB6_21:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI6_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI6_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB6_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end6:
	.size	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end6-_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
.LCPI7_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB7_17
# %bb.1:                                # %.preheader47.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -30
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 60
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t1, $zero, 31
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -226646
	ori	$s1, $a0, 3400
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB7_3
	.p2align	4, , 16
.LBB7_2:                                # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB7_3 Depth=1
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB7_17
.LBB7_3:                                # %.preheader47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_5 Depth 2
                                        #     Child Loop BB7_11 Depth 2
                                        #     Child Loop BB7_14 Depth 2
	blt	$s0, $t1, .LBB7_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB7_3 Depth=1
	move	$a1, $zero
	move	$a2, $zero
	move	$a0, $zero
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB7_5:                                # %.lr.ph
                                        #   Parent Loop BB7_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -60
	ld.w	$a5, $a3, -56
	ld.w	$a6, $a3, -52
	ld.w	$a7, $a3, -48
	ld.w	$t0, $a3, -44
	add.d	$a4, $a5, $a4
	ld.w	$a5, $a3, -40
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -36
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -32
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -28
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -24
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -20
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -16
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -12
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -8
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -4
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 0
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 4
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 8
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 12
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 16
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 20
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 24
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 28
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 32
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 36
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 40
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 44
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 48
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 52
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 56
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 60
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $a5
	add.d	$a4, $a4, $a6
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 31
	addi.d	$a1, $a1, 31
	addi.d	$a3, $a3, 124
	blt	$a2, $s6, .LBB7_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB7_3 Depth=1
	addi.w	$a2, $a1, 0
	blt	$a2, $s0, .LBB7_8
	b	.LBB7_15
	.p2align	4, , 16
.LBB7_7:                                #   in Loop: Header=BB7_3 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	addi.w	$a2, $a1, 0
	bge	$a2, $s0, .LBB7_15
.LBB7_8:                                # %.lr.ph53.preheader
                                        #   in Loop: Header=BB7_3 Depth=1
	sub.d	$a3, $s7, $a1
	ori	$a2, $zero, 8
	bgeu	$a3, $a2, .LBB7_10
# %bb.9:                                #   in Loop: Header=BB7_3 Depth=1
	move	$a2, $a1
	b	.LBB7_13
	.p2align	4, , 16
.LBB7_10:                               # %vector.ph
                                        #   in Loop: Header=BB7_3 Depth=1
	move	$a4, $a3
	bstrins.d	$a4, $zero, 2, 0
	add.d	$a2, $a4, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a1, $a0, 2
	move	$a1, $a4
	.p2align	4, , 16
.LBB7_11:                               # %vector.body
                                        #   Parent Loop BB7_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a1, $a1, -8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB7_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB7_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a3, $a4, .LBB7_15
.LBB7_13:                               # %.lr.ph53.preheader69
                                        #   in Loop: Header=BB7_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a2, $a1, 2
	sub.d	$a2, $s7, $a2
	.p2align	4, , 16
.LBB7_14:                               # %.lr.ph53
                                        #   Parent Loop BB7_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.d	$a0, $a0, $s2
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB7_14
.LBB7_15:                               # %._crit_edge
                                        #   in Loop: Header=BB7_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB7_2
# %bb.16:                               #   in Loop: Header=BB7_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t1, $zero, 31
	b	.LBB7_2
.LBB7_17:                               # %._crit_edge56
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB7_19
# %bb.18:                               # %._crit_edge56
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB7_21
.LBB7_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB7_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB7_21:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI7_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI7_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB7_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end7:
	.size	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end7-_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
.LCPI8_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB8_17
# %bb.1:                                # %.preheader46.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -29
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 60
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 30
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 51266
	ori	$s1, $a0, 912
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB8_3
	.p2align	4, , 16
.LBB8_2:                                # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB8_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB8_17
.LBB8_3:                                # %.preheader46
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_5 Depth 2
                                        #     Child Loop BB8_11 Depth 2
                                        #     Child Loop BB8_14 Depth 2
	blt	$s0, $t2, .LBB8_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB8_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB8_5:                                # %.lr.ph
                                        #   Parent Loop BB8_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -60
	ld.w	$a6, $a4, -56
	ld.w	$a7, $a4, -52
	ld.w	$t0, $a4, -48
	ld.w	$t1, $a4, -44
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 52
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 56
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 30
	addi.d	$a2, $a2, 30
	addi.d	$a4, $a4, 120
	blt	$a3, $s6, .LBB8_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB8_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB8_8
	b	.LBB8_15
	.p2align	4, , 16
.LBB8_7:                                #   in Loop: Header=BB8_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB8_15
.LBB8_8:                                # %.lr.ph52.preheader
                                        #   in Loop: Header=BB8_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB8_10
# %bb.9:                                #   in Loop: Header=BB8_3 Depth=1
	move	$a3, $a2
	b	.LBB8_13
	.p2align	4, , 16
.LBB8_10:                               # %vector.ph
                                        #   in Loop: Header=BB8_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB8_11:                               # %vector.body
                                        #   Parent Loop BB8_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB8_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB8_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB8_15
.LBB8_13:                               # %.lr.ph52.preheader70
                                        #   in Loop: Header=BB8_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB8_14:                               # %.lr.ph52
                                        #   Parent Loop BB8_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB8_14
.LBB8_15:                               # %._crit_edge
                                        #   in Loop: Header=BB8_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB8_2
# %bb.16:                               #   in Loop: Header=BB8_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 30
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB8_2
.LBB8_17:                               # %._crit_edge55
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB8_19
# %bb.18:                               # %._crit_edge55
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB8_21
.LBB8_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB8_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB8_21:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI8_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI8_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB8_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end8:
	.size	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end8-_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
.LCPI9_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB9_17
# %bb.1:                                # %.preheader45.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -28
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 56
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 29
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 329177
	ori	$s1, $a0, 2520
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB9_3
	.p2align	4, , 16
.LBB9_2:                                # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB9_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB9_17
.LBB9_3:                                # %.preheader45
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_5 Depth 2
                                        #     Child Loop BB9_11 Depth 2
                                        #     Child Loop BB9_14 Depth 2
	blt	$s0, $t2, .LBB9_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB9_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB9_5:                                # %.lr.ph
                                        #   Parent Loop BB9_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -56
	ld.w	$a6, $a4, -52
	ld.w	$a7, $a4, -48
	ld.w	$t0, $a4, -44
	ld.w	$t1, $a4, -40
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 0
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 40
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 44
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 48
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 52
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 56
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 29
	addi.d	$a2, $a2, 29
	addi.d	$a4, $a4, 116
	blt	$a3, $s6, .LBB9_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB9_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB9_8
	b	.LBB9_15
	.p2align	4, , 16
.LBB9_7:                                #   in Loop: Header=BB9_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB9_15
.LBB9_8:                                # %.lr.ph51.preheader
                                        #   in Loop: Header=BB9_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB9_10
# %bb.9:                                #   in Loop: Header=BB9_3 Depth=1
	move	$a3, $a2
	b	.LBB9_13
	.p2align	4, , 16
.LBB9_10:                               # %vector.ph
                                        #   in Loop: Header=BB9_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB9_11:                               # %vector.body
                                        #   Parent Loop BB9_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB9_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB9_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB9_15
.LBB9_13:                               # %.lr.ph51.preheader69
                                        #   in Loop: Header=BB9_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB9_14:                               # %.lr.ph51
                                        #   Parent Loop BB9_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB9_14
.LBB9_15:                               # %._crit_edge
                                        #   in Loop: Header=BB9_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB9_2
# %bb.16:                               #   in Loop: Header=BB9_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 29
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB9_2
.LBB9_17:                               # %._crit_edge54
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB9_19
# %bb.18:                               # %._crit_edge54
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB9_21
.LBB9_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB9_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB9_21:                               # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI9_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI9_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB9_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end9:
	.size	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end9-_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
.LCPI10_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB10_17
# %bb.1:                                # %.preheader44.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -27
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 56
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 28
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -441487
	ori	$s1, $a0, 32
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB10_3
	.p2align	4, , 16
.LBB10_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB10_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB10_17
.LBB10_3:                               # %.preheader44
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_5 Depth 2
                                        #     Child Loop BB10_11 Depth 2
                                        #     Child Loop BB10_14 Depth 2
	blt	$s0, $t2, .LBB10_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB10_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB10_5:                               # %.lr.ph
                                        #   Parent Loop BB10_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -56
	ld.w	$a6, $a4, -52
	ld.w	$a7, $a4, -48
	ld.w	$t0, $a4, -44
	ld.w	$t1, $a4, -40
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 0
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 40
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 44
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 48
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 52
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 28
	addi.d	$a2, $a2, 28
	addi.d	$a4, $a4, 112
	blt	$a3, $s6, .LBB10_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB10_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB10_8
	b	.LBB10_15
	.p2align	4, , 16
.LBB10_7:                               #   in Loop: Header=BB10_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB10_15
.LBB10_8:                               # %.lr.ph50.preheader
                                        #   in Loop: Header=BB10_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB10_10
# %bb.9:                                #   in Loop: Header=BB10_3 Depth=1
	move	$a3, $a2
	b	.LBB10_13
	.p2align	4, , 16
.LBB10_10:                              # %vector.ph
                                        #   in Loop: Header=BB10_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB10_11:                              # %vector.body
                                        #   Parent Loop BB10_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB10_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB10_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB10_15
.LBB10_13:                              # %.lr.ph50.preheader68
                                        #   in Loop: Header=BB10_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB10_14:                              # %.lr.ph50
                                        #   Parent Loop BB10_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB10_14
.LBB10_15:                              # %._crit_edge
                                        #   in Loop: Header=BB10_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB10_2
# %bb.16:                               #   in Loop: Header=BB10_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 28
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB10_2
.LBB10_17:                              # %._crit_edge53
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB10_19
# %bb.18:                               # %._crit_edge53
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB10_21
.LBB10_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB10_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB10_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI10_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI10_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB10_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end10:
	.size	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end10-_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
.LCPI11_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB11_17
# %bb.1:                                # %.preheader43.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -26
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 52
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 27
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -163576
	ori	$s1, $a0, 1640
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB11_3
	.p2align	4, , 16
.LBB11_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB11_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB11_17
.LBB11_3:                               # %.preheader43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_5 Depth 2
                                        #     Child Loop BB11_11 Depth 2
                                        #     Child Loop BB11_14 Depth 2
	blt	$s0, $t2, .LBB11_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB11_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB11_5:                               # %.lr.ph
                                        #   Parent Loop BB11_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -52
	ld.w	$a6, $a4, -48
	ld.w	$a7, $a4, -44
	ld.w	$t0, $a4, -40
	ld.w	$t1, $a4, -36
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 0
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 40
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 44
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 48
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 52
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 27
	addi.d	$a2, $a2, 27
	addi.d	$a4, $a4, 108
	blt	$a3, $s6, .LBB11_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB11_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB11_8
	b	.LBB11_15
	.p2align	4, , 16
.LBB11_7:                               #   in Loop: Header=BB11_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB11_15
.LBB11_8:                               # %.lr.ph49.preheader
                                        #   in Loop: Header=BB11_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB11_10
# %bb.9:                                #   in Loop: Header=BB11_3 Depth=1
	move	$a3, $a2
	b	.LBB11_13
	.p2align	4, , 16
.LBB11_10:                              # %vector.ph
                                        #   in Loop: Header=BB11_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB11_11:                              # %vector.body
                                        #   Parent Loop BB11_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB11_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB11_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB11_15
.LBB11_13:                              # %.lr.ph49.preheader67
                                        #   in Loop: Header=BB11_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB11_14:                              # %.lr.ph49
                                        #   Parent Loop BB11_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB11_14
.LBB11_15:                              # %._crit_edge
                                        #   in Loop: Header=BB11_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB11_2
# %bb.16:                               #   in Loop: Header=BB11_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 27
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB11_2
.LBB11_17:                              # %._crit_edge52
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB11_19
# %bb.18:                               # %._crit_edge52
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB11_21
.LBB11_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB11_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB11_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI11_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI11_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB11_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end11:
	.size	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end11-_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi25EiE7do_testEPKiPKc,"axG",@progbits,_ZN14for_loop_testsILi25EiE7do_testEPKiPKc,comdat
	.weak	_ZN14for_loop_testsILi25EiE7do_testEPKiPKc # -- Begin function _ZN14for_loop_testsILi25EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi25EiE7do_testEPKiPKc,@function
_ZN14for_loop_testsILi25EiE7do_testEPKiPKc: # @_ZN14for_loop_testsILi25EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi17EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1700
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1900
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end12:
	.size	_ZN14for_loop_testsILi25EiE7do_testEPKiPKc, .Lfunc_end12-_ZN14for_loop_testsILi25EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
.LCPI13_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB13_17
# %bb.1:                                # %.preheader42.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -25
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 52
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$t2, $zero, 26
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB13_3
	.p2align	4, , 16
.LBB13_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB13_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB13_17
.LBB13_3:                               # %.preheader42
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_5 Depth 2
                                        #     Child Loop BB13_11 Depth 2
                                        #     Child Loop BB13_14 Depth 2
	blt	$s0, $t2, .LBB13_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB13_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB13_5:                               # %.lr.ph
                                        #   Parent Loop BB13_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -52
	ld.w	$a6, $a4, -48
	ld.w	$a7, $a4, -44
	ld.w	$t0, $a4, -40
	ld.w	$t1, $a4, -36
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 0
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 40
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 44
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 48
	add.d	$a5, $a5, $a7
	add.w	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	addu16i.d	$a0, $a0, 7146
	addi.w	$a0, $a0, -848
	addi.d	$a3, $a3, 26
	addi.d	$a2, $a2, 26
	addi.d	$a4, $a4, 104
	blt	$a3, $s6, .LBB13_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB13_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB13_8
	b	.LBB13_15
	.p2align	4, , 16
.LBB13_7:                               #   in Loop: Header=BB13_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB13_15
.LBB13_8:                               # %.lr.ph48.preheader
                                        #   in Loop: Header=BB13_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB13_10
# %bb.9:                                #   in Loop: Header=BB13_3 Depth=1
	move	$a3, $a2
	b	.LBB13_13
	.p2align	4, , 16
.LBB13_10:                              # %vector.ph
                                        #   in Loop: Header=BB13_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB13_11:                              # %vector.body
                                        #   Parent Loop BB13_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB13_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB13_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB13_15
.LBB13_13:                              # %.lr.ph48.preheader66
                                        #   in Loop: Header=BB13_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB13_14:                              # %.lr.ph48
                                        #   Parent Loop BB13_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB13_14
.LBB13_15:                              # %._crit_edge
                                        #   in Loop: Header=BB13_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB13_2
# %bb.16:                               #   in Loop: Header=BB13_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 26
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB13_2
.LBB13_17:                              # %._crit_edge51
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB13_19
# %bb.18:                               # %._crit_edge51
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB13_21
.LBB13_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB13_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB13_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI13_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI13_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB13_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end13:
	.size	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end13-_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
.LCPI14_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB14_17
# %bb.1:                                # %.preheader41.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -24
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 48
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 25
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 392247
	ori	$s1, $a0, 760
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB14_3
	.p2align	4, , 16
.LBB14_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB14_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB14_17
.LBB14_3:                               # %.preheader41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_5 Depth 2
                                        #     Child Loop BB14_11 Depth 2
                                        #     Child Loop BB14_14 Depth 2
	blt	$s0, $t2, .LBB14_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB14_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB14_5:                               # %.lr.ph
                                        #   Parent Loop BB14_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -48
	ld.w	$a6, $a4, -44
	ld.w	$a7, $a4, -40
	ld.w	$t0, $a4, -36
	ld.w	$t1, $a4, -32
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 0
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 32
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 40
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 44
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 48
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 25
	addi.d	$a2, $a2, 25
	addi.d	$a4, $a4, 100
	blt	$a3, $s6, .LBB14_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB14_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB14_8
	b	.LBB14_15
	.p2align	4, , 16
.LBB14_7:                               #   in Loop: Header=BB14_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB14_15
.LBB14_8:                               # %.lr.ph47.preheader
                                        #   in Loop: Header=BB14_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB14_10
# %bb.9:                                #   in Loop: Header=BB14_3 Depth=1
	move	$a3, $a2
	b	.LBB14_13
	.p2align	4, , 16
.LBB14_10:                              # %vector.ph
                                        #   in Loop: Header=BB14_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB14_11:                              # %vector.body
                                        #   Parent Loop BB14_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB14_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB14_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB14_15
.LBB14_13:                              # %.lr.ph47.preheader65
                                        #   in Loop: Header=BB14_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB14_14:                              # %.lr.ph47
                                        #   Parent Loop BB14_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB14_14
.LBB14_15:                              # %._crit_edge
                                        #   in Loop: Header=BB14_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB14_2
# %bb.16:                               #   in Loop: Header=BB14_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 25
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB14_2
.LBB14_17:                              # %._crit_edge50
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB14_19
# %bb.18:                               # %._crit_edge50
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB14_21
.LBB14_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB14_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB14_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI14_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI14_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB14_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end14:
	.size	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end14-_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
.LCPI15_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB15_17
# %bb.1:                                # %.preheader40.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -23
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 48
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 24
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -378418
	ori	$s1, $a0, 2368
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB15_3
	.p2align	4, , 16
.LBB15_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB15_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB15_17
.LBB15_3:                               # %.preheader40
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_5 Depth 2
                                        #     Child Loop BB15_11 Depth 2
                                        #     Child Loop BB15_14 Depth 2
	blt	$s0, $t2, .LBB15_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB15_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB15_5:                               # %.lr.ph
                                        #   Parent Loop BB15_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -48
	ld.w	$a6, $a4, -44
	ld.w	$a7, $a4, -40
	ld.w	$t0, $a4, -36
	ld.w	$t1, $a4, -32
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 0
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 32
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 40
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 44
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 24
	addi.d	$a2, $a2, 24
	addi.d	$a4, $a4, 96
	blt	$a3, $s6, .LBB15_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB15_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB15_8
	b	.LBB15_15
	.p2align	4, , 16
.LBB15_7:                               #   in Loop: Header=BB15_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB15_15
.LBB15_8:                               # %.lr.ph46.preheader
                                        #   in Loop: Header=BB15_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB15_10
# %bb.9:                                #   in Loop: Header=BB15_3 Depth=1
	move	$a3, $a2
	b	.LBB15_13
	.p2align	4, , 16
.LBB15_10:                              # %vector.ph
                                        #   in Loop: Header=BB15_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB15_11:                              # %vector.body
                                        #   Parent Loop BB15_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB15_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB15_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB15_15
.LBB15_13:                              # %.lr.ph46.preheader64
                                        #   in Loop: Header=BB15_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB15_14:                              # %.lr.ph46
                                        #   Parent Loop BB15_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB15_14
.LBB15_15:                              # %._crit_edge
                                        #   in Loop: Header=BB15_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB15_2
# %bb.16:                               #   in Loop: Header=BB15_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 24
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB15_2
.LBB15_17:                              # %._crit_edge49
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB15_19
# %bb.18:                               # %._crit_edge49
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB15_21
.LBB15_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB15_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB15_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI15_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI15_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB15_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end15:
	.size	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end15-_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
.LCPI16_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB16_17
# %bb.1:                                # %.preheader39.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -22
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 44
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 23
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -100507
	ori	$s1, $a0, 3976
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB16_3
	.p2align	4, , 16
.LBB16_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB16_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB16_17
.LBB16_3:                               # %.preheader39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_5 Depth 2
                                        #     Child Loop BB16_11 Depth 2
                                        #     Child Loop BB16_14 Depth 2
	blt	$s0, $t2, .LBB16_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB16_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB16_5:                               # %.lr.ph
                                        #   Parent Loop BB16_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -44
	ld.w	$a6, $a4, -40
	ld.w	$a7, $a4, -36
	ld.w	$t0, $a4, -32
	ld.w	$t1, $a4, -28
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 23
	addi.d	$a2, $a2, 23
	addi.d	$a4, $a4, 92
	blt	$a3, $s6, .LBB16_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB16_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB16_8
	b	.LBB16_15
	.p2align	4, , 16
.LBB16_7:                               #   in Loop: Header=BB16_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB16_15
.LBB16_8:                               # %.lr.ph45.preheader
                                        #   in Loop: Header=BB16_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB16_10
# %bb.9:                                #   in Loop: Header=BB16_3 Depth=1
	move	$a3, $a2
	b	.LBB16_13
	.p2align	4, , 16
.LBB16_10:                              # %vector.ph
                                        #   in Loop: Header=BB16_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB16_11:                              # %vector.body
                                        #   Parent Loop BB16_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB16_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB16_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB16_15
.LBB16_13:                              # %.lr.ph45.preheader63
                                        #   in Loop: Header=BB16_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB16_14:                              # %.lr.ph45
                                        #   Parent Loop BB16_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB16_14
.LBB16_15:                              # %._crit_edge
                                        #   in Loop: Header=BB16_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB16_2
# %bb.16:                               #   in Loop: Header=BB16_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 23
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB16_2
.LBB16_17:                              # %._crit_edge48
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB16_19
# %bb.18:                               # %._crit_edge48
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB16_21
.LBB16_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB16_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB16_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI16_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI16_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB16_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end16:
	.size	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end16-_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
.LCPI17_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB17_17
# %bb.1:                                # %.preheader38.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -21
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 44
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 22
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 177405
	ori	$s1, $a0, 1488
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB17_3
	.p2align	4, , 16
.LBB17_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB17_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB17_17
.LBB17_3:                               # %.preheader38
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_5 Depth 2
                                        #     Child Loop BB17_11 Depth 2
                                        #     Child Loop BB17_14 Depth 2
	blt	$s0, $t2, .LBB17_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB17_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB17_5:                               # %.lr.ph
                                        #   Parent Loop BB17_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -44
	ld.w	$a6, $a4, -40
	ld.w	$a7, $a4, -36
	ld.w	$t0, $a4, -32
	ld.w	$t1, $a4, -28
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 22
	addi.d	$a2, $a2, 22
	addi.d	$a4, $a4, 88
	blt	$a3, $s6, .LBB17_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB17_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB17_8
	b	.LBB17_15
	.p2align	4, , 16
.LBB17_7:                               #   in Loop: Header=BB17_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB17_15
.LBB17_8:                               # %.lr.ph44.preheader
                                        #   in Loop: Header=BB17_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB17_10
# %bb.9:                                #   in Loop: Header=BB17_3 Depth=1
	move	$a3, $a2
	b	.LBB17_13
	.p2align	4, , 16
.LBB17_10:                              # %vector.ph
                                        #   in Loop: Header=BB17_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB17_11:                              # %vector.body
                                        #   Parent Loop BB17_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB17_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB17_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB17_15
.LBB17_13:                              # %.lr.ph44.preheader62
                                        #   in Loop: Header=BB17_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB17_14:                              # %.lr.ph44
                                        #   Parent Loop BB17_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB17_14
.LBB17_15:                              # %._crit_edge
                                        #   in Loop: Header=BB17_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB17_2
# %bb.16:                               #   in Loop: Header=BB17_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 22
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB17_2
.LBB17_17:                              # %._crit_edge47
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB17_19
# %bb.18:                               # %._crit_edge47
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB17_21
.LBB17_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB17_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB17_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI17_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI17_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB17_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end17:
	.size	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end17-_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
.LCPI18_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 88                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	st.d	$a2, $sp, 136                   # 8-byte Folded Spill
	blez	$a2, .LBB18_17
# %bb.1:                                # %.preheader36.lr.ph
	move	$a1, $zero
	addi.w	$s4, $s0, -20
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 40
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 455316
	ori	$s1, $a0, 3096
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	b	.LBB18_3
	.p2align	4, , 16
.LBB18_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB18_3 Depth=1
	addi.w	$a1, $s3, 1
	ld.d	$a0, $sp, 136                   # 8-byte Folded Reload
	bge	$a1, $a0, .LBB18_17
.LBB18_3:                               # %.preheader36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_5 Depth 2
                                        #     Child Loop BB18_11 Depth 2
                                        #     Child Loop BB18_14 Depth 2
	st.d	$a1, $sp, 144                   # 8-byte Folded Spill
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB18_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB18_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB18_5:                               # %.lr.ph
                                        #   Parent Loop BB18_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -40
	ld.w	$a6, $a4, -36
	ld.w	$a7, $a4, -32
	ld.w	$t0, $a4, -28
	ld.w	$t1, $a4, -24
	ld.w	$t2, $a4, -20
	ld.w	$t3, $a4, -16
	ld.w	$t4, $a4, -12
	ld.w	$t5, $a4, -8
	ld.w	$t6, $a4, -4
	ld.w	$t7, $a4, 0
	ld.w	$t8, $a4, 4
	ld.w	$ra, $a4, 8
	ld.w	$s8, $a4, 12
	ld.w	$s7, $a4, 16
	ld.w	$s3, $a4, 20
	move	$s2, $s1
	move	$s1, $s4
	ld.w	$s4, $a4, 24
	ld.w	$a1, $a4, 28
	ld.w	$s0, $a4, 32
	ld.w	$s5, $a4, 36
	ld.w	$s6, $a4, 40
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	move	$s4, $s1
	move	$s1, $s2
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	add.d	$a1, $a1, $s6
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, 21
	addi.d	$a2, $a2, 21
	addi.d	$a4, $a4, 84
	blt	$a3, $s4, .LBB18_5
	b	.LBB18_7
	.p2align	4, , 16
.LBB18_6:                               #   in Loop: Header=BB18_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB18_7:                               # %.preheader
                                        #   in Loop: Header=BB18_3 Depth=1
	addi.w	$a3, $a2, 0
	ld.d	$s0, $sp, 128                   # 8-byte Folded Reload
	bge	$a3, $s0, .LBB18_15
# %bb.8:                                # %.lr.ph42.preheader
                                        #   in Loop: Header=BB18_3 Depth=1
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	bgeu	$a4, $a1, .LBB18_10
# %bb.9:                                #   in Loop: Header=BB18_3 Depth=1
	move	$a3, $a2
	b	.LBB18_13
	.p2align	4, , 16
.LBB18_10:                              # %vector.ph
                                        #   in Loop: Header=BB18_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB18_11:                              # %vector.body
                                        #   Parent Loop BB18_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB18_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB18_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB18_15
.LBB18_13:                              # %.lr.ph42.preheader60
                                        #   in Loop: Header=BB18_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB18_14:                              # %.lr.ph42
                                        #   Parent Loop BB18_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB18_14
.LBB18_15:                              # %._crit_edge
                                        #   in Loop: Header=BB18_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 120                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	beq	$a0, $a1, .LBB18_2
# %bb.16:                               #   in Loop: Header=BB18_3 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 136                   # 8-byte Folded Spill
	b	.LBB18_2
.LBB18_17:                              # %._crit_edge45
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB18_19
# %bb.18:                               # %._crit_edge45
	ld.w	$a0, $a4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB18_21
.LBB18_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB18_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a4, %pc_lo12(current_test)
.LBB18_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI18_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI18_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $a4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB18_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end18:
	.size	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end18-_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
.LCPI19_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 120                   # 8-byte Folded Spill
	blez	$a2, .LBB19_17
# %bb.1:                                # %.preheader35.lr.ph
	move	$a1, $zero
	addi.w	$s6, $s0, -19
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 40
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -315348
	ori	$s1, $a0, 608
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 112                   # 8-byte Folded Spill
	b	.LBB19_3
	.p2align	4, , 16
.LBB19_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB19_3 Depth=1
	addi.w	$a1, $s3, 1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	bge	$a1, $a0, .LBB19_17
.LBB19_3:                               # %.preheader35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_5 Depth 2
                                        #     Child Loop BB19_11 Depth 2
                                        #     Child Loop BB19_14 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB19_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB19_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB19_5:                               # %.lr.ph
                                        #   Parent Loop BB19_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -40
	ld.w	$a6, $a4, -36
	ld.w	$a7, $a4, -32
	ld.w	$t0, $a4, -28
	ld.w	$t1, $a4, -24
	ld.w	$t2, $a4, -20
	ld.w	$t3, $a4, -16
	ld.w	$t4, $a4, -12
	ld.w	$t5, $a4, -8
	ld.w	$t6, $a4, -4
	ld.w	$t7, $a4, 0
	ld.w	$t8, $a4, 4
	ld.w	$ra, $a4, 8
	ld.w	$s8, $a4, 12
	ld.w	$s7, $a4, 16
	ld.w	$s3, $a4, 20
	ld.w	$s4, $a4, 24
	ld.w	$a1, $a4, 28
	ld.w	$s0, $a4, 32
	ld.w	$s5, $a4, 36
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 20
	addi.d	$a2, $a2, 20
	addi.d	$a4, $a4, 80
	blt	$a3, $s6, .LBB19_5
	b	.LBB19_7
	.p2align	4, , 16
.LBB19_6:                               #   in Loop: Header=BB19_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB19_7:                               # %.preheader
                                        #   in Loop: Header=BB19_3 Depth=1
	addi.w	$a3, $a2, 0
	ld.d	$s0, $sp, 112                   # 8-byte Folded Reload
	bge	$a3, $s0, .LBB19_15
# %bb.8:                                # %.lr.ph41.preheader
                                        #   in Loop: Header=BB19_3 Depth=1
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB19_10
# %bb.9:                                #   in Loop: Header=BB19_3 Depth=1
	move	$a3, $a2
	b	.LBB19_13
	.p2align	4, , 16
.LBB19_10:                              # %vector.ph
                                        #   in Loop: Header=BB19_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB19_11:                              # %vector.body
                                        #   Parent Loop BB19_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB19_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB19_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB19_15
.LBB19_13:                              # %.lr.ph41.preheader59
                                        #   in Loop: Header=BB19_3 Depth=1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB19_14:                              # %.lr.ph41
                                        #   Parent Loop BB19_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB19_14
.LBB19_15:                              # %._crit_edge
                                        #   in Loop: Header=BB19_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	beq	$a0, $a1, .LBB19_2
# %bb.16:                               #   in Loop: Header=BB19_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	b	.LBB19_2
.LBB19_17:                              # %._crit_edge44
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB19_19
# %bb.18:                               # %._crit_edge44
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB19_21
.LBB19_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB19_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB19_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI19_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI19_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB19_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end19:
	.size	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end19-_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
.LCPI20_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	st.d	$a2, $sp, 128                   # 8-byte Folded Spill
	blez	$a2, .LBB20_17
# %bb.1:                                # %.preheader34.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -18
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 36
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -37437
	ori	$s1, $a0, 2216
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	b	.LBB20_3
	.p2align	4, , 16
.LBB20_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB20_3 Depth=1
	addi.w	$s5, $s5, 1
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	bge	$s5, $a0, .LBB20_17
.LBB20_3:                               # %.preheader34
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_5 Depth 2
                                        #     Child Loop BB20_11 Depth 2
                                        #     Child Loop BB20_14 Depth 2
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB20_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB20_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB20_5:                               # %.lr.ph
                                        #   Parent Loop BB20_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -36
	ld.w	$a6, $a4, -32
	ld.w	$a7, $a4, -28
	ld.w	$t0, $a4, -24
	ld.w	$t1, $a4, -20
	ld.w	$t2, $a4, -16
	ld.w	$t3, $a4, -12
	ld.w	$t4, $a4, -8
	ld.w	$t5, $a4, -4
	ld.w	$t6, $a4, 0
	ld.w	$t7, $a4, 4
	ld.w	$t8, $a4, 8
	ld.w	$ra, $a4, 12
	ld.w	$s8, $a4, 16
	ld.w	$s7, $a4, 20
	ld.w	$s3, $a4, 24
	ld.w	$s4, $a4, 28
	ld.w	$a1, $a4, 32
	ld.w	$s0, $a4, 36
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 19
	addi.d	$a2, $a2, 19
	addi.d	$a4, $a4, 76
	blt	$a3, $s6, .LBB20_5
	b	.LBB20_7
	.p2align	4, , 16
.LBB20_6:                               #   in Loop: Header=BB20_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB20_7:                               # %.preheader
                                        #   in Loop: Header=BB20_3 Depth=1
	addi.w	$a3, $a2, 0
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	bge	$a3, $s0, .LBB20_15
# %bb.8:                                # %.lr.ph40.preheader
                                        #   in Loop: Header=BB20_3 Depth=1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB20_10
# %bb.9:                                #   in Loop: Header=BB20_3 Depth=1
	move	$a3, $a2
	b	.LBB20_13
	.p2align	4, , 16
.LBB20_10:                              # %vector.ph
                                        #   in Loop: Header=BB20_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB20_11:                              # %vector.body
                                        #   Parent Loop BB20_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB20_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB20_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB20_15
.LBB20_13:                              # %.lr.ph40.preheader58
                                        #   in Loop: Header=BB20_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB20_14:                              # %.lr.ph40
                                        #   Parent Loop BB20_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB20_14
.LBB20_15:                              # %._crit_edge
                                        #   in Loop: Header=BB20_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB20_2
# %bb.16:                               #   in Loop: Header=BB20_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	b	.LBB20_2
.LBB20_17:                              # %._crit_edge43
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB20_19
# %bb.18:                               # %._crit_edge43
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB20_21
.LBB20_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB20_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB20_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI20_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI20_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB20_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end20:
	.size	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end20-_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi17EiE7do_testEPKiPKc,"axG",@progbits,_ZN14for_loop_testsILi17EiE7do_testEPKiPKc,comdat
	.weak	_ZN14for_loop_testsILi17EiE7do_testEPKiPKc # -- Begin function _ZN14for_loop_testsILi17EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi17EiE7do_testEPKiPKc,@function
_ZN14for_loop_testsILi17EiE7do_testEPKiPKc: # @_ZN14for_loop_testsILi17EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi9EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end21:
	.size	_ZN14for_loop_testsILi17EiE7do_testEPKiPKc, .Lfunc_end21-_ZN14for_loop_testsILi17EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
.LCPI22_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blez	$a2, .LBB22_17
# %bb.1:                                # %.preheader33.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -17
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 36
	st.d	$a1, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 240474
	ori	$s1, $a0, 3824
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	b	.LBB22_3
	.p2align	4, , 16
.LBB22_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB22_3 Depth=1
	addi.w	$s5, $s5, 1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	bge	$s5, $a0, .LBB22_17
.LBB22_3:                               # %.preheader33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_5 Depth 2
                                        #     Child Loop BB22_11 Depth 2
                                        #     Child Loop BB22_14 Depth 2
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB22_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB22_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB22_5:                               # %.lr.ph
                                        #   Parent Loop BB22_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -36
	ld.w	$a6, $a4, -32
	ld.w	$a7, $a4, -28
	ld.w	$t0, $a4, -24
	ld.w	$t1, $a4, -20
	ld.w	$t2, $a4, -16
	ld.w	$t3, $a4, -12
	ld.w	$t4, $a4, -8
	ld.w	$t5, $a4, -4
	ld.w	$t6, $a4, 0
	ld.w	$t7, $a4, 4
	ld.w	$t8, $a4, 8
	ld.w	$ra, $a4, 12
	ld.w	$s8, $a4, 16
	ld.w	$s7, $a4, 20
	ld.w	$s3, $a4, 24
	ld.w	$s4, $a4, 28
	ld.w	$a1, $a4, 32
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 18
	addi.d	$a2, $a2, 18
	addi.d	$a4, $a4, 72
	blt	$a3, $s6, .LBB22_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB22_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB22_8
	b	.LBB22_15
	.p2align	4, , 16
.LBB22_7:                               #   in Loop: Header=BB22_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB22_15
.LBB22_8:                               # %.lr.ph39.preheader
                                        #   in Loop: Header=BB22_3 Depth=1
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB22_10
# %bb.9:                                #   in Loop: Header=BB22_3 Depth=1
	move	$a3, $a2
	b	.LBB22_13
	.p2align	4, , 16
.LBB22_10:                              # %vector.ph
                                        #   in Loop: Header=BB22_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB22_11:                              # %vector.body
                                        #   Parent Loop BB22_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB22_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB22_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB22_15
.LBB22_13:                              # %.lr.ph39.preheader57
                                        #   in Loop: Header=BB22_3 Depth=1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB22_14:                              # %.lr.ph39
                                        #   Parent Loop BB22_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB22_14
.LBB22_15:                              # %._crit_edge
                                        #   in Loop: Header=BB22_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB22_2
# %bb.16:                               #   in Loop: Header=BB22_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	b	.LBB22_2
.LBB22_17:                              # %._crit_edge42
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB22_19
# %bb.18:                               # %._crit_edge42
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB22_21
.LBB22_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB22_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB22_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI22_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI22_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB22_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end22:
	.size	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end22-_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
.LCPI23_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	blez	$a1, .LBB23_17
# %bb.1:                                # %.preheader32.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -16
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 518386
	ori	$s1, $a0, 1336
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB23_3
	.p2align	4, , 16
.LBB23_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB23_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB23_17
.LBB23_3:                               # %.preheader32
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_5 Depth 2
                                        #     Child Loop BB23_11 Depth 2
                                        #     Child Loop BB23_14 Depth 2
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB23_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB23_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB23_5:                               # %.lr.ph
                                        #   Parent Loop BB23_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -32
	ld.w	$a6, $a4, -28
	ld.w	$a7, $a4, -24
	ld.w	$t0, $a4, -20
	ld.w	$t1, $a4, -16
	ld.w	$t2, $a4, -12
	ld.w	$t3, $a4, -8
	ld.w	$t4, $a4, -4
	ld.w	$t5, $a4, 0
	ld.w	$t6, $a4, 4
	ld.w	$t7, $a4, 8
	ld.w	$t8, $a4, 12
	ld.w	$ra, $a4, 16
	ld.w	$s8, $a4, 20
	ld.w	$s7, $a4, 24
	ld.w	$s3, $a4, 28
	ld.w	$s4, $a4, 32
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 17
	addi.d	$a2, $a2, 17
	addi.d	$a4, $a4, 68
	blt	$a3, $s6, .LBB23_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB23_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB23_8
	b	.LBB23_15
	.p2align	4, , 16
.LBB23_7:                               #   in Loop: Header=BB23_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB23_15
.LBB23_8:                               # %.lr.ph38.preheader
                                        #   in Loop: Header=BB23_3 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB23_10
# %bb.9:                                #   in Loop: Header=BB23_3 Depth=1
	move	$a3, $a2
	b	.LBB23_13
	.p2align	4, , 16
.LBB23_10:                              # %vector.ph
                                        #   in Loop: Header=BB23_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB23_11:                              # %vector.body
                                        #   Parent Loop BB23_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB23_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB23_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB23_15
.LBB23_13:                              # %.lr.ph38.preheader56
                                        #   in Loop: Header=BB23_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB23_14:                              # %.lr.ph38
                                        #   Parent Loop BB23_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB23_14
.LBB23_15:                              # %._crit_edge
                                        #   in Loop: Header=BB23_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	mul.d	$a2, $a2, $a3
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	add.w	$a2, $a2, $a3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB23_2
# %bb.16:                               #   in Loop: Header=BB23_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB23_2
.LBB23_17:                              # %._crit_edge41
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB23_19
# %bb.18:                               # %._crit_edge41
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB23_21
.LBB23_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB23_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB23_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI23_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI23_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB23_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end23:
	.size	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end23-_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
.LCPI24_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB24_17
# %bb.1:                                # %.preheader31.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -15
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -252279
	ori	$s1, $a0, 2944
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB24_3
	.p2align	4, , 16
.LBB24_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB24_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB24_17
.LBB24_3:                               # %.preheader31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_5 Depth 2
                                        #     Child Loop BB24_11 Depth 2
                                        #     Child Loop BB24_14 Depth 2
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB24_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB24_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB24_5:                               # %.lr.ph
                                        #   Parent Loop BB24_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -32
	ld.w	$a6, $a4, -28
	ld.w	$a7, $a4, -24
	ld.w	$t0, $a4, -20
	ld.w	$t1, $a4, -16
	ld.w	$t2, $a4, -12
	ld.w	$t3, $a4, -8
	ld.w	$t4, $a4, -4
	ld.w	$t5, $a4, 0
	ld.w	$t6, $a4, 4
	ld.w	$t7, $a4, 8
	ld.w	$t8, $a4, 12
	ld.w	$ra, $a4, 16
	ld.w	$s8, $a4, 20
	ld.w	$s7, $a4, 24
	ld.w	$s3, $a4, 28
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 16
	addi.d	$a2, $a2, 16
	addi.d	$a4, $a4, 64
	blt	$a3, $s6, .LBB24_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB24_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB24_8
	b	.LBB24_15
	.p2align	4, , 16
.LBB24_7:                               #   in Loop: Header=BB24_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB24_15
.LBB24_8:                               # %.lr.ph37.preheader
                                        #   in Loop: Header=BB24_3 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB24_10
# %bb.9:                                #   in Loop: Header=BB24_3 Depth=1
	move	$a3, $a2
	b	.LBB24_13
	.p2align	4, , 16
.LBB24_10:                              # %vector.ph
                                        #   in Loop: Header=BB24_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB24_11:                              # %vector.body
                                        #   Parent Loop BB24_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB24_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB24_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB24_15
.LBB24_13:                              # %.lr.ph37.preheader55
                                        #   in Loop: Header=BB24_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB24_14:                              # %.lr.ph37
                                        #   Parent Loop BB24_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB24_14
.LBB24_15:                              # %._crit_edge
                                        #   in Loop: Header=BB24_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	mul.d	$a2, $a2, $a3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB24_2
# %bb.16:                               #   in Loop: Header=BB24_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB24_2
.LBB24_17:                              # %._crit_edge40
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB24_19
# %bb.18:                               # %._crit_edge40
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB24_21
.LBB24_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB24_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB24_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI24_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI24_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB24_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end24:
	.size	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end24-_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
.LCPI25_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	blez	$a1, .LBB25_17
# %bb.1:                                # %.preheader30.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -14
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 28
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 25633
	ori	$s1, $a0, 456
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB25_3
	.p2align	4, , 16
.LBB25_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB25_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB25_17
.LBB25_3:                               # %.preheader30
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_5 Depth 2
                                        #     Child Loop BB25_11 Depth 2
                                        #     Child Loop BB25_14 Depth 2
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB25_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB25_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB25_5:                               # %.lr.ph
                                        #   Parent Loop BB25_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -28
	ld.w	$a6, $a4, -24
	ld.w	$a7, $a4, -20
	ld.w	$t0, $a4, -16
	ld.w	$t1, $a4, -12
	ld.w	$t2, $a4, -8
	ld.w	$t3, $a4, -4
	ld.w	$t4, $a4, 0
	ld.w	$t5, $a4, 4
	ld.w	$t6, $a4, 8
	ld.w	$t7, $a4, 12
	ld.w	$t8, $a4, 16
	ld.w	$ra, $a4, 20
	ld.w	$s8, $a4, 24
	ld.w	$s7, $a4, 28
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 15
	addi.d	$a2, $a2, 15
	addi.d	$a4, $a4, 60
	blt	$a3, $s6, .LBB25_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB25_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB25_8
	b	.LBB25_15
	.p2align	4, , 16
.LBB25_7:                               #   in Loop: Header=BB25_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB25_15
.LBB25_8:                               # %.lr.ph36.preheader
                                        #   in Loop: Header=BB25_3 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB25_10
# %bb.9:                                #   in Loop: Header=BB25_3 Depth=1
	move	$a3, $a2
	b	.LBB25_13
	.p2align	4, , 16
.LBB25_10:                              # %vector.ph
                                        #   in Loop: Header=BB25_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB25_11:                              # %vector.body
                                        #   Parent Loop BB25_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB25_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB25_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB25_15
.LBB25_13:                              # %.lr.ph36.preheader54
                                        #   in Loop: Header=BB25_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB25_14:                              # %.lr.ph36
                                        #   Parent Loop BB25_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB25_14
.LBB25_15:                              # %._crit_edge
                                        #   in Loop: Header=BB25_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB25_2
# %bb.16:                               #   in Loop: Header=BB25_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB25_2
.LBB25_17:                              # %._crit_edge39
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB25_19
# %bb.18:                               # %._crit_edge39
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB25_21
.LBB25_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB25_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB25_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI25_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI25_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB25_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end25:
	.size	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end25-_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
.LCPI26_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB26_17
# %bb.1:                                # %.preheader29.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -13
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 28
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 303544
	ori	$s1, $a0, 2064
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB26_3
	.p2align	4, , 16
.LBB26_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB26_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB26_17
.LBB26_3:                               # %.preheader29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_5 Depth 2
                                        #     Child Loop BB26_11 Depth 2
                                        #     Child Loop BB26_14 Depth 2
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB26_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB26_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB26_5:                               # %.lr.ph
                                        #   Parent Loop BB26_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -28
	ld.w	$a6, $a4, -24
	ld.w	$a7, $a4, -20
	ld.w	$t0, $a4, -16
	ld.w	$t1, $a4, -12
	ld.w	$t2, $a4, -8
	ld.w	$t3, $a4, -4
	ld.w	$t4, $a4, 0
	ld.w	$t5, $a4, 4
	ld.w	$t6, $a4, 8
	ld.w	$t7, $a4, 12
	ld.w	$t8, $a4, 16
	ld.w	$ra, $a4, 20
	ld.w	$s8, $a4, 24
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 14
	addi.d	$a2, $a2, 14
	addi.d	$a4, $a4, 56
	blt	$a3, $s6, .LBB26_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB26_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB26_8
	b	.LBB26_15
	.p2align	4, , 16
.LBB26_7:                               #   in Loop: Header=BB26_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB26_15
.LBB26_8:                               # %.lr.ph35.preheader
                                        #   in Loop: Header=BB26_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB26_10
# %bb.9:                                #   in Loop: Header=BB26_3 Depth=1
	move	$a3, $a2
	b	.LBB26_13
	.p2align	4, , 16
.LBB26_10:                              # %vector.ph
                                        #   in Loop: Header=BB26_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB26_11:                              # %vector.body
                                        #   Parent Loop BB26_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB26_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB26_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB26_15
.LBB26_13:                              # %.lr.ph35.preheader53
                                        #   in Loop: Header=BB26_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB26_14:                              # %.lr.ph35
                                        #   Parent Loop BB26_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB26_14
.LBB26_15:                              # %._crit_edge
                                        #   in Loop: Header=BB26_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB26_2
# %bb.16:                               #   in Loop: Header=BB26_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB26_2
.LBB26_17:                              # %._crit_edge38
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB26_19
# %bb.18:                               # %._crit_edge38
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB26_21
.LBB26_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB26_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB26_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI26_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI26_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB26_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end26:
	.size	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end26-_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
.LCPI27_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB27_17
# %bb.1:                                # %.preheader28.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -12
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 24
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB27_3
	.p2align	4, , 16
.LBB27_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB27_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB27_17
.LBB27_3:                               # %.preheader28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_5 Depth 2
                                        #     Child Loop BB27_11 Depth 2
                                        #     Child Loop BB27_14 Depth 2
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB27_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB27_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB27_5:                               # %.lr.ph
                                        #   Parent Loop BB27_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -24
	ld.w	$a6, $a4, -20
	ld.w	$a7, $a4, -16
	ld.w	$t0, $a4, -12
	ld.w	$t1, $a4, -8
	ld.w	$t2, $a4, -4
	ld.w	$t3, $a4, 0
	ld.w	$t4, $a4, 4
	ld.w	$t5, $a4, 8
	ld.w	$t6, $a4, 12
	ld.w	$t7, $a4, 16
	ld.w	$t8, $a4, 20
	ld.w	$ra, $a4, 24
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.w	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	addu16i.d	$a0, $a0, -29195
	addi.w	$a0, $a0, -424
	addi.d	$a3, $a3, 13
	addi.d	$a2, $a2, 13
	addi.d	$a4, $a4, 52
	blt	$a3, $s6, .LBB27_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB27_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB27_8
	b	.LBB27_15
	.p2align	4, , 16
.LBB27_7:                               #   in Loop: Header=BB27_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB27_15
.LBB27_8:                               # %.lr.ph34.preheader
                                        #   in Loop: Header=BB27_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB27_10
# %bb.9:                                #   in Loop: Header=BB27_3 Depth=1
	move	$a3, $a2
	b	.LBB27_13
	.p2align	4, , 16
.LBB27_10:                              # %vector.ph
                                        #   in Loop: Header=BB27_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB27_11:                              # %vector.body
                                        #   Parent Loop BB27_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB27_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB27_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB27_15
.LBB27_13:                              # %.lr.ph34.preheader52
                                        #   in Loop: Header=BB27_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB27_14:                              # %.lr.ph34
                                        #   Parent Loop BB27_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB27_14
.LBB27_15:                              # %._crit_edge
                                        #   in Loop: Header=BB27_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB27_2
# %bb.16:                               #   in Loop: Header=BB27_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB27_2
.LBB27_17:                              # %._crit_edge37
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB27_19
# %bb.18:                               # %._crit_edge37
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB27_21
.LBB27_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB27_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB27_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI27_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI27_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB27_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end27:
	.size	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end27-_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
.LCPI28_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB28_17
# %bb.1:                                # %.preheader27.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -11
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 24
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$ra, $zero, 12
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -189209
	ori	$s1, $a0, 1184
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB28_3
	.p2align	4, , 16
.LBB28_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB28_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB28_17
.LBB28_3:                               # %.preheader27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_5 Depth 2
                                        #     Child Loop BB28_11 Depth 2
                                        #     Child Loop BB28_14 Depth 2
	blt	$s0, $ra, .LBB28_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB28_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB28_5:                               # %.lr.ph
                                        #   Parent Loop BB28_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -24
	ld.w	$a6, $a4, -20
	ld.w	$a7, $a4, -16
	ld.w	$t0, $a4, -12
	ld.w	$t1, $a4, -8
	ld.w	$t2, $a4, -4
	ld.w	$t3, $a4, 0
	ld.w	$t4, $a4, 4
	ld.w	$t5, $a4, 8
	ld.w	$t6, $a4, 12
	ld.w	$t7, $a4, 16
	ld.w	$t8, $a4, 20
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 12
	addi.d	$a2, $a2, 12
	addi.d	$a4, $a4, 48
	blt	$a3, $s6, .LBB28_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB28_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB28_8
	b	.LBB28_15
	.p2align	4, , 16
.LBB28_7:                               #   in Loop: Header=BB28_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB28_15
.LBB28_8:                               # %.lr.ph33.preheader
                                        #   in Loop: Header=BB28_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB28_10
# %bb.9:                                #   in Loop: Header=BB28_3 Depth=1
	move	$a3, $a2
	b	.LBB28_13
	.p2align	4, , 16
.LBB28_10:                              # %vector.ph
                                        #   in Loop: Header=BB28_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB28_11:                              # %vector.body
                                        #   Parent Loop BB28_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB28_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB28_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB28_15
.LBB28_13:                              # %.lr.ph33.preheader51
                                        #   in Loop: Header=BB28_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB28_14:                              # %.lr.ph33
                                        #   Parent Loop BB28_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB28_14
.LBB28_15:                              # %._crit_edge
                                        #   in Loop: Header=BB28_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB28_2
# %bb.16:                               #   in Loop: Header=BB28_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$ra, $zero, 12
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB28_2
.LBB28_17:                              # %._crit_edge36
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB28_19
# %bb.18:                               # %._crit_edge36
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB28_21
.LBB28_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB28_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB28_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI28_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI28_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB28_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end28:
	.size	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end28-_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
.LCPI29_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB29_17
# %bb.1:                                # %.preheader26.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -10
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 20
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t8, $zero, 11
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 88702
	ori	$s1, $a0, 2792
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB29_3
	.p2align	4, , 16
.LBB29_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB29_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB29_17
.LBB29_3:                               # %.preheader26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_5 Depth 2
                                        #     Child Loop BB29_11 Depth 2
                                        #     Child Loop BB29_14 Depth 2
	blt	$s0, $t8, .LBB29_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB29_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB29_5:                               # %.lr.ph
                                        #   Parent Loop BB29_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -20
	ld.w	$a6, $a4, -16
	ld.w	$a7, $a4, -12
	ld.w	$t0, $a4, -8
	ld.w	$t1, $a4, -4
	ld.w	$t2, $a4, 0
	ld.w	$t3, $a4, 4
	ld.w	$t4, $a4, 8
	ld.w	$t5, $a4, 12
	ld.w	$t6, $a4, 16
	ld.w	$t7, $a4, 20
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 11
	addi.d	$a2, $a2, 11
	addi.d	$a4, $a4, 44
	blt	$a3, $s6, .LBB29_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB29_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB29_8
	b	.LBB29_15
	.p2align	4, , 16
.LBB29_7:                               #   in Loop: Header=BB29_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB29_15
.LBB29_8:                               # %.lr.ph32.preheader
                                        #   in Loop: Header=BB29_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB29_10
# %bb.9:                                #   in Loop: Header=BB29_3 Depth=1
	move	$a3, $a2
	b	.LBB29_13
	.p2align	4, , 16
.LBB29_10:                              # %vector.ph
                                        #   in Loop: Header=BB29_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB29_11:                              # %vector.body
                                        #   Parent Loop BB29_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB29_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB29_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB29_15
.LBB29_13:                              # %.lr.ph32.preheader50
                                        #   in Loop: Header=BB29_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB29_14:                              # %.lr.ph32
                                        #   Parent Loop BB29_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB29_14
.LBB29_15:                              # %._crit_edge
                                        #   in Loop: Header=BB29_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB29_2
# %bb.16:                               #   in Loop: Header=BB29_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t8, $zero, 11
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB29_2
.LBB29_17:                              # %._crit_edge35
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB29_19
# %bb.18:                               # %._crit_edge35
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB29_21
.LBB29_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB29_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB29_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI29_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI29_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB29_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end29:
	.size	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end29-_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi9EiE7do_testEPKiPKc,"axG",@progbits,_ZN14for_loop_testsILi9EiE7do_testEPKiPKc,comdat
	.weak	_ZN14for_loop_testsILi9EiE7do_testEPKiPKc # -- Begin function _ZN14for_loop_testsILi9EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi9EiE7do_testEPKiPKc,@function
_ZN14for_loop_testsILi9EiE7do_testEPKiPKc: # @_ZN14for_loop_testsILi9EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end30:
	.size	_ZN14for_loop_testsILi9EiE7do_testEPKiPKc, .Lfunc_end30-_ZN14for_loop_testsILi9EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
.LCPI31_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB31_17
# %bb.1:                                # %.preheader25.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -9
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 20
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t7, $zero, 10
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 366614
	ori	$s1, $a0, 304
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB31_3
	.p2align	4, , 16
.LBB31_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB31_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB31_17
.LBB31_3:                               # %.preheader25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_5 Depth 2
                                        #     Child Loop BB31_11 Depth 2
                                        #     Child Loop BB31_14 Depth 2
	blt	$s0, $t7, .LBB31_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB31_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB31_5:                               # %.lr.ph
                                        #   Parent Loop BB31_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -20
	ld.w	$a6, $a4, -16
	ld.w	$a7, $a4, -12
	ld.w	$t0, $a4, -8
	ld.w	$t1, $a4, -4
	ld.w	$t2, $a4, 0
	ld.w	$t3, $a4, 4
	ld.w	$t4, $a4, 8
	ld.w	$t5, $a4, 12
	ld.w	$t6, $a4, 16
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 10
	addi.d	$a2, $a2, 10
	addi.d	$a4, $a4, 40
	blt	$a3, $s6, .LBB31_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB31_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB31_8
	b	.LBB31_15
	.p2align	4, , 16
.LBB31_7:                               #   in Loop: Header=BB31_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB31_15
.LBB31_8:                               # %.lr.ph31.preheader
                                        #   in Loop: Header=BB31_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB31_10
# %bb.9:                                #   in Loop: Header=BB31_3 Depth=1
	move	$a3, $a2
	b	.LBB31_13
	.p2align	4, , 16
.LBB31_10:                              # %vector.ph
                                        #   in Loop: Header=BB31_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB31_11:                              # %vector.body
                                        #   Parent Loop BB31_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB31_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB31_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB31_15
.LBB31_13:                              # %.lr.ph31.preheader49
                                        #   in Loop: Header=BB31_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB31_14:                              # %.lr.ph31
                                        #   Parent Loop BB31_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB31_14
.LBB31_15:                              # %._crit_edge
                                        #   in Loop: Header=BB31_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB31_2
# %bb.16:                               #   in Loop: Header=BB31_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t7, $zero, 10
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB31_2
.LBB31_17:                              # %._crit_edge34
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB31_19
# %bb.18:                               # %._crit_edge34
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB31_21
.LBB31_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB31_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB31_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI31_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI31_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB31_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end31:
	.size	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end31-_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
.LCPI32_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB32_17
# %bb.1:                                # %.preheader24.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -8
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 16
	ori	$t6, $zero, 9
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -404051
	ori	$s1, $a0, 1912
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$fp, $a0, 1536
	b	.LBB32_3
	.p2align	4, , 16
.LBB32_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB32_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB32_17
.LBB32_3:                               # %.preheader24
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_5 Depth 2
                                        #     Child Loop BB32_11 Depth 2
                                        #     Child Loop BB32_14 Depth 2
	blt	$s0, $t6, .LBB32_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB32_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB32_5:                               # %.lr.ph
                                        #   Parent Loop BB32_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -16
	ld.w	$a6, $a4, -12
	ld.w	$a7, $a4, -8
	ld.w	$t0, $a4, -4
	ld.w	$t1, $a4, 0
	ld.w	$t2, $a4, 4
	ld.w	$t3, $a4, 8
	ld.w	$t4, $a4, 12
	ld.w	$t5, $a4, 16
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 9
	addi.d	$a2, $a2, 9
	addi.d	$a4, $a4, 36
	blt	$a3, $s6, .LBB32_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB32_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB32_8
	b	.LBB32_15
	.p2align	4, , 16
.LBB32_7:                               #   in Loop: Header=BB32_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB32_15
.LBB32_8:                               # %.lr.ph30.preheader
                                        #   in Loop: Header=BB32_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB32_10
# %bb.9:                                #   in Loop: Header=BB32_3 Depth=1
	move	$a3, $a2
	b	.LBB32_13
	.p2align	4, , 16
.LBB32_10:                              # %vector.ph
                                        #   in Loop: Header=BB32_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	alsl.d	$a0, $a2, $s8, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB32_11:                              # %vector.body
                                        #   Parent Loop BB32_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB32_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB32_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB32_15
.LBB32_13:                              # %.lr.ph30.preheader48
                                        #   in Loop: Header=BB32_3 Depth=1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB32_14:                              # %.lr.ph30
                                        #   Parent Loop BB32_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB32_14
.LBB32_15:                              # %._crit_edge
                                        #   in Loop: Header=BB32_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $fp
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB32_2
# %bb.16:                               #   in Loop: Header=BB32_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t6, $zero, 9
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB32_2
.LBB32_17:                              # %._crit_edge33
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB32_19
# %bb.18:                               # %._crit_edge33
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB32_21
.LBB32_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB32_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB32_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI32_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI32_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB32_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end32:
	.size	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end32-_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
.LCPI33_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB33_17
# %bb.1:                                # %.preheader23.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -7
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 16
	ori	$t5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -126140
	ori	$s1, $a0, 3520
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$fp, $a0, 1536
	b	.LBB33_3
	.p2align	4, , 16
.LBB33_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB33_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB33_17
.LBB33_3:                               # %.preheader23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_5 Depth 2
                                        #     Child Loop BB33_11 Depth 2
                                        #     Child Loop BB33_14 Depth 2
	blt	$s0, $t5, .LBB33_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB33_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB33_5:                               # %.lr.ph
                                        #   Parent Loop BB33_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -16
	ld.w	$a6, $a4, -12
	ld.w	$a7, $a4, -8
	ld.w	$t0, $a4, -4
	ld.w	$t1, $a4, 0
	ld.w	$t2, $a4, 4
	ld.w	$t3, $a4, 8
	ld.w	$t4, $a4, 12
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 8
	addi.d	$a2, $a2, 8
	addi.d	$a4, $a4, 32
	blt	$a3, $s6, .LBB33_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB33_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB33_8
	b	.LBB33_15
	.p2align	4, , 16
.LBB33_7:                               #   in Loop: Header=BB33_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB33_15
.LBB33_8:                               # %.lr.ph29.preheader
                                        #   in Loop: Header=BB33_3 Depth=1
	sub.d	$a4, $s7, $a2
	bgeu	$a4, $t5, .LBB33_10
# %bb.9:                                #   in Loop: Header=BB33_3 Depth=1
	move	$a3, $a2
	b	.LBB33_13
	.p2align	4, , 16
.LBB33_10:                              # %vector.ph
                                        #   in Loop: Header=BB33_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	alsl.d	$a0, $a2, $s8, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB33_11:                              # %vector.body
                                        #   Parent Loop BB33_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB33_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB33_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB33_15
.LBB33_13:                              # %.lr.ph29.preheader47
                                        #   in Loop: Header=BB33_3 Depth=1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB33_14:                              # %.lr.ph29
                                        #   Parent Loop BB33_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB33_14
.LBB33_15:                              # %._crit_edge
                                        #   in Loop: Header=BB33_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $fp
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB33_2
# %bb.16:                               #   in Loop: Header=BB33_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t5, $zero, 8
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB33_2
.LBB33_17:                              # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB33_19
# %bb.18:                               # %._crit_edge32
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB33_21
.LBB33_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB33_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB33_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI33_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI33_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB33_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end33:
	.size	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end33-_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
.LCPI34_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB34_17
# %bb.1:                                # %.preheader22.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -6
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 12
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t4, $zero, 7
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 151772
	ori	$s1, $a0, 1032
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB34_3
	.p2align	4, , 16
.LBB34_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB34_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB34_17
.LBB34_3:                               # %.preheader22
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_5 Depth 2
                                        #     Child Loop BB34_11 Depth 2
                                        #     Child Loop BB34_14 Depth 2
	blt	$s0, $t4, .LBB34_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB34_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB34_5:                               # %.lr.ph
                                        #   Parent Loop BB34_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -12
	ld.w	$a6, $a4, -8
	ld.w	$a7, $a4, -4
	ld.w	$t0, $a4, 0
	ld.w	$t1, $a4, 4
	ld.w	$t2, $a4, 8
	ld.w	$t3, $a4, 12
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 7
	addi.d	$a2, $a2, 7
	addi.d	$a4, $a4, 28
	blt	$a3, $s6, .LBB34_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB34_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB34_8
	b	.LBB34_15
	.p2align	4, , 16
.LBB34_7:                               #   in Loop: Header=BB34_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB34_15
.LBB34_8:                               # %.lr.ph28.preheader
                                        #   in Loop: Header=BB34_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB34_10
# %bb.9:                                #   in Loop: Header=BB34_3 Depth=1
	move	$a3, $a2
	b	.LBB34_13
	.p2align	4, , 16
.LBB34_10:                              # %vector.ph
                                        #   in Loop: Header=BB34_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB34_11:                              # %vector.body
                                        #   Parent Loop BB34_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB34_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB34_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB34_15
.LBB34_13:                              # %.lr.ph28.preheader46
                                        #   in Loop: Header=BB34_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB34_14:                              # %.lr.ph28
                                        #   Parent Loop BB34_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB34_14
.LBB34_15:                              # %._crit_edge
                                        #   in Loop: Header=BB34_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB34_2
# %bb.16:                               #   in Loop: Header=BB34_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t4, $zero, 7
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB34_2
.LBB34_17:                              # %._crit_edge31
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB34_19
# %bb.18:                               # %._crit_edge31
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB34_21
.LBB34_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB34_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB34_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI34_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI34_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB34_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end34:
	.size	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end34-_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
.LCPI35_0:
	.word	1                               # 0x1
	.word	7                               # 0x7
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI35_1:
	.word	0                               # 0x0
	.word	6                               # 0x6
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI35_2:
	.word	0                               # 0x0
	.word	5                               # 0x5
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI35_3:
	.word	4                               # 0x4
	.word	1                               # 0x1
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI35_4:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB35_22
# %bb.1:                                # %.preheader21.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -5
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t2, $zero, 6
	slt	$a0, $t2, $s6
	masknez	$a2, $t2, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 1
	slli.d	$s3, $a0, 1
	ori	$a2, $zero, 12
	mul.d	$a0, $a0, $a2
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 12
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 429683
	ori	$s1, $a0, 2640
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB35_3
	.p2align	4, , 16
.LBB35_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB35_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB35_22
.LBB35_3:                               # %.preheader21
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_8 Depth 2
                                        #     Child Loop BB35_11 Depth 2
                                        #     Child Loop BB35_16 Depth 2
                                        #     Child Loop BB35_19 Depth 2
	blt	$s0, $t2, .LBB35_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB35_3 Depth=1
	ori	$a0, $zero, 7
	bge	$s6, $a0, .LBB35_7
# %bb.5:                                #   in Loop: Header=BB35_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB35_10
	.p2align	4, , 16
.LBB35_6:                               #   in Loop: Header=BB35_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB35_12
	.p2align	4, , 16
.LBB35_7:                               # %vector.body50.preheader
                                        #   in Loop: Header=BB35_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB35_8:                               # %vector.body50
                                        #   Parent Loop BB35_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr1, $a0, -32
	vld	$vr2, $a0, -16
	pcalau12i	$a3, %pc_hi20(.LCPI35_0)
	vld	$vr3, $a3, %pc_lo12(.LCPI35_0)
	pcalau12i	$a3, %pc_hi20(.LCPI35_1)
	vld	$vr4, $a3, %pc_lo12(.LCPI35_1)
	vld	$vr5, $a0, 0
	vshuf.w	$vr3, $vr2, $vr1
	vshuf.w	$vr4, $vr2, $vr1
	vadd.w	$vr3, $vr3, $vr4
	pcalau12i	$a3, %pc_hi20(.LCPI35_2)
	vld	$vr4, $a3, %pc_lo12(.LCPI35_2)
	vreplvei.w	$vr6, $vr1, 2
	vpackev.w	$vr6, $vr5, $vr6
	vadd.w	$vr3, $vr3, $vr6
	vreplvei.w	$vr1, $vr1, 3
	vori.b	$vr6, $vr4, 0
	vshuf.w	$vr6, $vr5, $vr1
	pcalau12i	$a3, %pc_hi20(.LCPI35_3)
	vld	$vr1, $a3, %pc_lo12(.LCPI35_3)
	vadd.w	$vr3, $vr3, $vr6
	vreplvei.w	$vr6, $vr5, 3
	vreplvei.w	$vr5, $vr5, 2
	vshuf.w	$vr1, $vr2, $vr5
	vadd.w	$vr1, $vr3, $vr1
	vreplvei.w	$vr2, $vr2, 1
	vshuf.w	$vr4, $vr6, $vr2
	vadd.w	$vr1, $vr1, $vr4
	vreplgr2vr.w	$vr2, $fp
	vmadd.w	$vr0, $vr1, $vr2
	vreplgr2vr.w	$vr1, $s1
	vadd.w	$vr0, $vr0, $vr1
	addi.d	$a2, $a2, -2
	addi.d	$a0, $a0, 48
	bnez	$a2, .LBB35_8
# %bb.9:                                # %middle.block56
                                        #   in Loop: Header=BB35_3 Depth=1
	vpickve2gr.w	$a0, $vr0, 0
	vpickve2gr.w	$a2, $vr0, 1
	add.d	$a0, $a2, $a0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB35_12
.LBB35_10:                              # %.lr.ph.preheader62
                                        #   in Loop: Header=BB35_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB35_11:                              # %.lr.ph
                                        #   Parent Loop BB35_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -12
	ld.w	$a5, $a3, -8
	ld.w	$a6, $a3, -4
	ld.w	$a7, $a3, 0
	ld.w	$t0, $a3, 4
	ld.w	$t1, $a3, 8
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $t1
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 6
	addi.d	$a3, $a3, 24
	blt	$a2, $s6, .LBB35_11
.LBB35_12:                              # %.preheader
                                        #   in Loop: Header=BB35_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB35_20
# %bb.13:                               # %.lr.ph27.preheader
                                        #   in Loop: Header=BB35_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB35_15
# %bb.14:                               #   in Loop: Header=BB35_3 Depth=1
	move	$a3, $a2
	b	.LBB35_18
	.p2align	4, , 16
.LBB35_15:                              # %vector.ph
                                        #   in Loop: Header=BB35_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB35_16:                              # %vector.body
                                        #   Parent Loop BB35_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB35_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB35_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB35_20
.LBB35_18:                              # %.lr.ph27.preheader61
                                        #   in Loop: Header=BB35_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB35_19:                              # %.lr.ph27
                                        #   Parent Loop BB35_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB35_19
.LBB35_20:                              # %._crit_edge
                                        #   in Loop: Header=BB35_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB35_2
# %bb.21:                               #   in Loop: Header=BB35_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 6
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB35_2
.LBB35_22:                              # %._crit_edge30
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB35_24
# %bb.23:                               # %._crit_edge30
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB35_26
.LBB35_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB35_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB35_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI35_4)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI35_4)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB35_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end35:
	.size	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end35-_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
.LCPI36_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB36_22
# %bb.1:                                # %.preheader20.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -4
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t7, $zero, 5
	slt	$a0, $t7, $s6
	masknez	$a2, $t7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -209716
	ori	$a2, $a2, 3277
	lu32i.d	$a2, -209716
	lu52i.d	$a2, $a2, -820
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 1
	slli.d	$s3, $a0, 1
	slli.d	$a2, $a0, 3
	alsl.d	$a0, $a0, $a2, 1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 20
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 88                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -340981
	ori	$fp, $a0, 152
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB36_3
	.p2align	4, , 16
.LBB36_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB36_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB36_22
.LBB36_3:                               # %.preheader20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_8 Depth 2
                                        #     Child Loop BB36_11 Depth 2
                                        #     Child Loop BB36_16 Depth 2
                                        #     Child Loop BB36_19 Depth 2
	blt	$s0, $t7, .LBB36_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB36_3 Depth=1
	ori	$a0, $zero, 6
	bge	$s6, $a0, .LBB36_7
# %bb.5:                                #   in Loop: Header=BB36_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB36_10
	.p2align	4, , 16
.LBB36_6:                               #   in Loop: Header=BB36_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB36_12
	.p2align	4, , 16
.LBB36_7:                               # %vector.body49.preheader
                                        #   in Loop: Header=BB36_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	move	$a4, $s3
	.p2align	4, , 16
.LBB36_8:                               # %vector.body49
                                        #   Parent Loop BB36_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a3, -20
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, -16
	ld.w	$t0, $a3, 4
	ld.w	$t1, $a3, -12
	ld.w	$t2, $a3, 8
	ld.w	$t3, $a3, -8
	ld.w	$t4, $a3, 12
	ld.w	$t5, $a3, -4
	ld.w	$t6, $a3, 16
	add.d	$a5, $a7, $a5
	add.d	$a6, $t0, $a6
	add.d	$a5, $a5, $t1
	add.d	$a6, $a6, $t2
	add.d	$a5, $a5, $t3
	add.d	$a6, $a6, $t4
	add.d	$a5, $a5, $t5
	add.d	$a6, $a6, $t6
	mul.d	$a5, $a5, $s1
	mul.d	$a6, $a6, $s1
	add.d	$a0, $a0, $a5
	add.d	$a2, $a2, $a6
	add.d	$a0, $a0, $fp
	add.d	$a2, $a2, $fp
	addi.d	$a4, $a4, -2
	addi.d	$a3, $a3, 40
	bnez	$a4, .LBB36_8
# %bb.9:                                # %middle.block55
                                        #   in Loop: Header=BB36_3 Depth=1
	add.d	$a0, $a2, $a0
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 80                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB36_12
.LBB36_10:                              # %.lr.ph.preheader61
                                        #   in Loop: Header=BB36_3 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB36_11:                              # %.lr.ph
                                        #   Parent Loop BB36_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $fp
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 20
	blt	$a2, $s6, .LBB36_11
.LBB36_12:                              # %.preheader
                                        #   in Loop: Header=BB36_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB36_20
# %bb.13:                               # %.lr.ph26.preheader
                                        #   in Loop: Header=BB36_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB36_15
# %bb.14:                               #   in Loop: Header=BB36_3 Depth=1
	move	$a3, $a2
	b	.LBB36_18
	.p2align	4, , 16
.LBB36_15:                              # %vector.ph
                                        #   in Loop: Header=BB36_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB36_16:                              # %vector.body
                                        #   Parent Loop BB36_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB36_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB36_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB36_20
.LBB36_18:                              # %.lr.ph26.preheader60
                                        #   in Loop: Header=BB36_3 Depth=1
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB36_19:                              # %.lr.ph26
                                        #   Parent Loop BB36_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB36_19
.LBB36_20:                              # %._crit_edge
                                        #   in Loop: Header=BB36_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB36_2
# %bb.21:                               #   in Loop: Header=BB36_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t7, $zero, 5
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB36_2
.LBB36_22:                              # %._crit_edge29
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB36_24
# %bb.23:                               # %._crit_edge29
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB36_26
.LBB36_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB36_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB36_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI36_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI36_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB36_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end36:
	.size	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end36-_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
.LCPI37_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB37_22
# %bb.1:                                # %.preheader19.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -3
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t0, $zero, 4
	slt	$a0, $t0, $s6
	masknez	$a2, $t0, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a0, $a0, 5
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 64
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -63070
	ori	$s1, $a0, 1760
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB37_3
	.p2align	4, , 16
.LBB37_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB37_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB37_22
.LBB37_3:                               # %.preheader19
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_8 Depth 2
                                        #     Child Loop BB37_11 Depth 2
                                        #     Child Loop BB37_16 Depth 2
                                        #     Child Loop BB37_19 Depth 2
	blt	$s0, $t0, .LBB37_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB37_3 Depth=1
	ori	$a0, $zero, 29
	bge	$s6, $a0, .LBB37_7
# %bb.5:                                #   in Loop: Header=BB37_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB37_10
	.p2align	4, , 16
.LBB37_6:                               #   in Loop: Header=BB37_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB37_12
	.p2align	4, , 16
.LBB37_7:                               # %vector.body48.preheader
                                        #   in Loop: Header=BB37_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB37_8:                               # %vector.body48
                                        #   Parent Loop BB37_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 48
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -60
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 36
	ld.w	$a6, $a0, 52
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -56
	ld.w	$a4, $a0, -40
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 56
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -52
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 128
	bnez	$a2, .LBB37_8
# %bb.9:                                # %middle.block54
                                        #   in Loop: Header=BB37_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB37_12
.LBB37_10:                              # %.lr.ph.preheader60
                                        #   in Loop: Header=BB37_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB37_11:                              # %.lr.ph
                                        #   Parent Loop BB37_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, 4
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 16
	blt	$a2, $s6, .LBB37_11
.LBB37_12:                              # %.preheader
                                        #   in Loop: Header=BB37_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB37_20
# %bb.13:                               # %.lr.ph25.preheader
                                        #   in Loop: Header=BB37_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB37_15
# %bb.14:                               #   in Loop: Header=BB37_3 Depth=1
	move	$a3, $a2
	b	.LBB37_18
	.p2align	4, , 16
.LBB37_15:                              # %vector.ph
                                        #   in Loop: Header=BB37_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB37_16:                              # %vector.body
                                        #   Parent Loop BB37_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB37_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB37_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB37_20
.LBB37_18:                              # %.lr.ph25.preheader59
                                        #   in Loop: Header=BB37_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB37_19:                              # %.lr.ph25
                                        #   Parent Loop BB37_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB37_19
.LBB37_20:                              # %._crit_edge
                                        #   in Loop: Header=BB37_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB37_2
# %bb.21:                               #   in Loop: Header=BB37_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t0, $zero, 4
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB37_2
.LBB37_22:                              # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB37_24
# %bb.23:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB37_26
.LBB37_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB37_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB37_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI37_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI37_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB37_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end37:
	.size	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end37-_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
.LCPI38_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB38_22
# %bb.1:                                # %.preheader18.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -2
	bstrpick.d	$s7, $s0, 31, 0
	ori	$a7, $zero, 3
	slt	$a0, $a7, $s6
	masknez	$a2, $a7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 1
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a2, $a0, 4
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 48
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 214841
	ori	$s1, $a0, 3368
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB38_3
	.p2align	4, , 16
.LBB38_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB38_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB38_22
.LBB38_3:                               # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_8 Depth 2
                                        #     Child Loop BB38_11 Depth 2
                                        #     Child Loop BB38_16 Depth 2
                                        #     Child Loop BB38_19 Depth 2
	blt	$s0, $a7, .LBB38_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB38_3 Depth=1
	ori	$a0, $zero, 22
	bge	$s6, $a0, .LBB38_7
# %bb.5:                                #   in Loop: Header=BB38_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB38_10
	.p2align	4, , 16
.LBB38_6:                               #   in Loop: Header=BB38_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB38_12
	.p2align	4, , 16
.LBB38_7:                               # %vector.body47.preheader
                                        #   in Loop: Header=BB38_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB38_8:                               # %vector.body47
                                        #   Parent Loop BB38_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -48
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 24
	ld.w	$a6, $a0, 36
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -44
	ld.w	$a4, $a0, -32
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 28
	ld.w	$a6, $a0, 40
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -40
	ld.w	$a4, $a0, -28
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 44
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 96
	bnez	$a2, .LBB38_8
# %bb.9:                                # %middle.block53
                                        #   in Loop: Header=BB38_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB38_12
.LBB38_10:                              # %.lr.ph.preheader59
                                        #   in Loop: Header=BB38_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB38_11:                              # %.lr.ph
                                        #   Parent Loop BB38_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 12
	blt	$a2, $s6, .LBB38_11
.LBB38_12:                              # %.preheader
                                        #   in Loop: Header=BB38_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB38_20
# %bb.13:                               # %.lr.ph24.preheader
                                        #   in Loop: Header=BB38_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB38_15
# %bb.14:                               #   in Loop: Header=BB38_3 Depth=1
	move	$a3, $a2
	b	.LBB38_18
	.p2align	4, , 16
.LBB38_15:                              # %vector.ph
                                        #   in Loop: Header=BB38_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB38_16:                              # %vector.body
                                        #   Parent Loop BB38_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB38_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB38_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB38_20
.LBB38_18:                              # %.lr.ph24.preheader58
                                        #   in Loop: Header=BB38_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB38_19:                              # %.lr.ph24
                                        #   Parent Loop BB38_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB38_19
.LBB38_20:                              # %._crit_edge
                                        #   in Loop: Header=BB38_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB38_2
# %bb.21:                               #   in Loop: Header=BB38_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 3
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB38_2
.LBB38_22:                              # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB38_24
# %bb.23:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB38_26
.LBB38_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB38_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB38_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI38_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI38_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB38_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end38:
	.size	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end38-_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
.LCPI39_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB39_22
# %bb.1:                                # %.preheader17.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -1
	bstrpick.d	$s7, $s0, 31, 0
	ori	$a7, $zero, 2
	slt	$a0, $a7, $s6
	masknez	$a2, $a7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	srli.d	$a0, $a0, 1
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a0, $a0, 4
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 4
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 492753
	ori	$s1, $a0, 880
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB39_3
	.p2align	4, , 16
.LBB39_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB39_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB39_22
.LBB39_3:                               # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_8 Depth 2
                                        #     Child Loop BB39_11 Depth 2
                                        #     Child Loop BB39_16 Depth 2
                                        #     Child Loop BB39_19 Depth 2
	blt	$s0, $a7, .LBB39_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB39_3 Depth=1
	ori	$a0, $zero, 15
	bge	$s6, $a0, .LBB39_7
# %bb.5:                                #   in Loop: Header=BB39_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB39_10
	.p2align	4, , 16
.LBB39_6:                               #   in Loop: Header=BB39_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB39_12
	.p2align	4, , 16
.LBB39_7:                               # %vector.body46.preheader
                                        #   in Loop: Header=BB39_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB39_8:                               # %vector.body46
                                        #   Parent Loop BB39_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -32
	ld.w	$a4, $a0, -24
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 8
	ld.w	$a5, $a0, 16
	ld.w	$a6, $a0, 24
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -28
	ld.w	$a4, $a0, -20
	ld.w	$a5, $a0, -12
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 20
	ld.w	$a6, $a0, 28
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 64
	bnez	$a2, .LBB39_8
# %bb.9:                                # %middle.block52
                                        #   in Loop: Header=BB39_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB39_12
.LBB39_10:                              # %.lr.ph.preheader58
                                        #   in Loop: Header=BB39_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB39_11:                              # %.lr.ph
                                        #   Parent Loop BB39_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -4
	ld.w	$a5, $a3, 0
	add.d	$a4, $a5, $a4
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 8
	blt	$a2, $s6, .LBB39_11
.LBB39_12:                              # %.preheader
                                        #   in Loop: Header=BB39_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB39_20
# %bb.13:                               # %.lr.ph23.preheader
                                        #   in Loop: Header=BB39_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB39_15
# %bb.14:                               #   in Loop: Header=BB39_3 Depth=1
	move	$a3, $a2
	b	.LBB39_18
	.p2align	4, , 16
.LBB39_15:                              # %vector.ph
                                        #   in Loop: Header=BB39_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB39_16:                              # %vector.body
                                        #   Parent Loop BB39_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB39_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB39_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB39_20
.LBB39_18:                              # %.lr.ph23.preheader57
                                        #   in Loop: Header=BB39_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB39_19:                              # %.lr.ph23
                                        #   Parent Loop BB39_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB39_19
.LBB39_20:                              # %._crit_edge
                                        #   in Loop: Header=BB39_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB39_2
# %bb.21:                               #   in Loop: Header=BB39_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 2
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB39_2
.LBB39_22:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB39_24
# %bb.23:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB39_26
.LBB39_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB39_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB39_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI39_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI39_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB39_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end39:
	.size	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end39-_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
.LCPI40_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB40_14
# %bb.1:                                # %.preheader17.lr.ph
	move	$s5, $zero
	bstrpick.d	$s6, $s0, 31, 0
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$fp, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s3
	vreplgr2vr.w	$vr5, $fp
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s1, $a0, 1536
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB40_3
	.p2align	4, , 16
.LBB40_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB40_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB40_14
.LBB40_3:                               # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_8 Depth 2
                                        #     Child Loop BB40_11 Depth 2
	blez	$s0, .LBB40_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB40_3 Depth=1
	ori	$a0, $zero, 8
	bgeu	$s0, $a0, .LBB40_7
# %bb.5:                                #   in Loop: Header=BB40_3 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB40_10
	.p2align	4, , 16
.LBB40_6:                               #   in Loop: Header=BB40_3 Depth=1
	move	$a0, $zero
	b	.LBB40_12
	.p2align	4, , 16
.LBB40_7:                               # %vector.body.preheader
                                        #   in Loop: Header=BB40_3 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB40_8:                               # %vector.body
                                        #   Parent Loop BB40_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB40_8
# %bb.9:                                # %middle.block
                                        #   in Loop: Header=BB40_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s6, .LBB40_12
.LBB40_10:                              # %.lr.ph.preheader41
                                        #   in Loop: Header=BB40_3 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s6, $a3
	.p2align	4, , 16
.LBB40_11:                              # %.lr.ph
                                        #   Parent Loop BB40_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $fp
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB40_11
.LBB40_12:                              # %._crit_edge
                                        #   in Loop: Header=BB40_3 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s1
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB40_2
# %bb.13:                               #   in Loop: Header=BB40_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB40_2
.LBB40_14:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB40_16
# %bb.15:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB40_18
.LBB40_16:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB40_19
# %bb.17:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB40_18:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI40_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI40_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB40_19:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end40:
	.size	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end40-_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
.LCPI41_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB41_17
# %bb.1:                                # %.preheader48.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -31
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 64
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t1, $zero, 32
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -504557
	ori	$s1, $a0, 1792
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB41_3
	.p2align	4, , 16
.LBB41_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB41_3 Depth=1
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB41_17
.LBB41_3:                               # %.preheader48
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_5 Depth 2
                                        #     Child Loop BB41_11 Depth 2
                                        #     Child Loop BB41_14 Depth 2
	blt	$s0, $t1, .LBB41_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB41_3 Depth=1
	move	$a1, $zero
	move	$a2, $zero
	move	$a0, $zero
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB41_5:                               # %.lr.ph
                                        #   Parent Loop BB41_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -64
	ld.w	$a5, $a3, -60
	ld.w	$a6, $a3, -56
	ld.w	$a7, $a3, -52
	ld.w	$t0, $a3, -48
	add.d	$a4, $a5, $a4
	ld.w	$a5, $a3, -44
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -40
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -36
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -32
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -28
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -24
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -20
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -16
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -12
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -8
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -4
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 0
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 4
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 8
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 12
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 16
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 20
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 24
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 28
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 32
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 36
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 40
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 44
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 48
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 52
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 56
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 60
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $a5
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 32
	addi.d	$a1, $a1, 32
	addi.d	$a3, $a3, 128
	blt	$a2, $s6, .LBB41_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB41_3 Depth=1
	addi.w	$a2, $a1, 0
	blt	$a2, $s0, .LBB41_8
	b	.LBB41_15
	.p2align	4, , 16
.LBB41_7:                               #   in Loop: Header=BB41_3 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	addi.w	$a2, $a1, 0
	bge	$a2, $s0, .LBB41_15
.LBB41_8:                               # %.lr.ph54.preheader
                                        #   in Loop: Header=BB41_3 Depth=1
	sub.d	$a3, $s7, $a1
	ori	$a2, $zero, 8
	bgeu	$a3, $a2, .LBB41_10
# %bb.9:                                #   in Loop: Header=BB41_3 Depth=1
	move	$a2, $a1
	b	.LBB41_13
	.p2align	4, , 16
.LBB41_10:                              # %vector.ph
                                        #   in Loop: Header=BB41_3 Depth=1
	move	$a4, $a3
	bstrins.d	$a4, $zero, 2, 0
	add.d	$a2, $a4, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a1, $a0, 2
	move	$a1, $a4
	.p2align	4, , 16
.LBB41_11:                              # %vector.body
                                        #   Parent Loop BB41_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a1, $a1, -8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB41_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB41_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a3, $a4, .LBB41_15
.LBB41_13:                              # %.lr.ph54.preheader70
                                        #   in Loop: Header=BB41_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a2, $a1, 2
	sub.d	$a2, $s7, $a2
	.p2align	4, , 16
.LBB41_14:                              # %.lr.ph54
                                        #   Parent Loop BB41_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.d	$a0, $a0, $s2
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB41_14
.LBB41_15:                              # %._crit_edge
                                        #   in Loop: Header=BB41_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB41_2
# %bb.16:                               #   in Loop: Header=BB41_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t1, $zero, 32
	b	.LBB41_2
.LBB41_17:                              # %._crit_edge57
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB41_19
# %bb.18:                               # %._crit_edge57
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB41_21
.LBB41_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB41_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB41_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI41_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI41_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB41_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end41:
	.size	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end41-_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
.LCPI42_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB42_17
# %bb.1:                                # %.preheader47.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -30
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 60
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t1, $zero, 31
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -226646
	ori	$s1, $a0, 3400
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB42_3
	.p2align	4, , 16
.LBB42_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB42_3 Depth=1
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB42_17
.LBB42_3:                               # %.preheader47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_5 Depth 2
                                        #     Child Loop BB42_11 Depth 2
                                        #     Child Loop BB42_14 Depth 2
	blt	$s0, $t1, .LBB42_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB42_3 Depth=1
	move	$a1, $zero
	move	$a2, $zero
	move	$a0, $zero
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB42_5:                               # %.lr.ph
                                        #   Parent Loop BB42_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -60
	ld.w	$a5, $a3, -56
	ld.w	$a6, $a3, -52
	ld.w	$a7, $a3, -48
	ld.w	$t0, $a3, -44
	add.d	$a4, $a5, $a4
	ld.w	$a5, $a3, -40
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -36
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -32
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -28
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -24
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -20
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -16
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -12
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -8
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -4
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 0
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 4
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 8
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 12
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 16
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 20
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 24
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 28
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 32
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 36
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 40
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 44
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 48
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 52
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 56
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 60
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $a5
	add.d	$a4, $a4, $a6
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 31
	addi.d	$a1, $a1, 31
	addi.d	$a3, $a3, 124
	blt	$a2, $s6, .LBB42_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB42_3 Depth=1
	addi.w	$a2, $a1, 0
	blt	$a2, $s0, .LBB42_8
	b	.LBB42_15
	.p2align	4, , 16
.LBB42_7:                               #   in Loop: Header=BB42_3 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	addi.w	$a2, $a1, 0
	bge	$a2, $s0, .LBB42_15
.LBB42_8:                               # %.lr.ph53.preheader
                                        #   in Loop: Header=BB42_3 Depth=1
	sub.d	$a3, $s7, $a1
	ori	$a2, $zero, 8
	bgeu	$a3, $a2, .LBB42_10
# %bb.9:                                #   in Loop: Header=BB42_3 Depth=1
	move	$a2, $a1
	b	.LBB42_13
	.p2align	4, , 16
.LBB42_10:                              # %vector.ph
                                        #   in Loop: Header=BB42_3 Depth=1
	move	$a4, $a3
	bstrins.d	$a4, $zero, 2, 0
	add.d	$a2, $a4, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a1, $a0, 2
	move	$a1, $a4
	.p2align	4, , 16
.LBB42_11:                              # %vector.body
                                        #   Parent Loop BB42_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a1, $a1, -8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB42_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB42_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a3, $a4, .LBB42_15
.LBB42_13:                              # %.lr.ph53.preheader69
                                        #   in Loop: Header=BB42_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a2, $a1, 2
	sub.d	$a2, $s7, $a2
	.p2align	4, , 16
.LBB42_14:                              # %.lr.ph53
                                        #   Parent Loop BB42_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.d	$a0, $a0, $s2
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB42_14
.LBB42_15:                              # %._crit_edge
                                        #   in Loop: Header=BB42_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB42_2
# %bb.16:                               #   in Loop: Header=BB42_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t1, $zero, 31
	b	.LBB42_2
.LBB42_17:                              # %._crit_edge56
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB42_19
# %bb.18:                               # %._crit_edge56
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB42_21
.LBB42_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB42_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB42_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI42_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI42_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB42_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end42:
	.size	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end42-_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
.LCPI43_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB43_17
# %bb.1:                                # %.preheader46.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -29
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 60
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 30
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 51266
	ori	$s1, $a0, 912
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB43_3
	.p2align	4, , 16
.LBB43_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB43_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB43_17
.LBB43_3:                               # %.preheader46
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_5 Depth 2
                                        #     Child Loop BB43_11 Depth 2
                                        #     Child Loop BB43_14 Depth 2
	blt	$s0, $t2, .LBB43_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB43_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB43_5:                               # %.lr.ph
                                        #   Parent Loop BB43_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -60
	ld.w	$a6, $a4, -56
	ld.w	$a7, $a4, -52
	ld.w	$t0, $a4, -48
	ld.w	$t1, $a4, -44
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 52
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 56
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 30
	addi.d	$a2, $a2, 30
	addi.d	$a4, $a4, 120
	blt	$a3, $s6, .LBB43_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB43_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB43_8
	b	.LBB43_15
	.p2align	4, , 16
.LBB43_7:                               #   in Loop: Header=BB43_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB43_15
.LBB43_8:                               # %.lr.ph52.preheader
                                        #   in Loop: Header=BB43_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB43_10
# %bb.9:                                #   in Loop: Header=BB43_3 Depth=1
	move	$a3, $a2
	b	.LBB43_13
	.p2align	4, , 16
.LBB43_10:                              # %vector.ph
                                        #   in Loop: Header=BB43_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB43_11:                              # %vector.body
                                        #   Parent Loop BB43_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB43_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB43_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB43_15
.LBB43_13:                              # %.lr.ph52.preheader70
                                        #   in Loop: Header=BB43_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB43_14:                              # %.lr.ph52
                                        #   Parent Loop BB43_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB43_14
.LBB43_15:                              # %._crit_edge
                                        #   in Loop: Header=BB43_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB43_2
# %bb.16:                               #   in Loop: Header=BB43_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 30
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB43_2
.LBB43_17:                              # %._crit_edge55
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB43_19
# %bb.18:                               # %._crit_edge55
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB43_21
.LBB43_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB43_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB43_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI43_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI43_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB43_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end43:
	.size	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end43-_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
.LCPI44_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB44_17
# %bb.1:                                # %.preheader45.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -28
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 56
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 29
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 329177
	ori	$s1, $a0, 2520
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB44_3
	.p2align	4, , 16
.LBB44_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB44_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB44_17
.LBB44_3:                               # %.preheader45
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_5 Depth 2
                                        #     Child Loop BB44_11 Depth 2
                                        #     Child Loop BB44_14 Depth 2
	blt	$s0, $t2, .LBB44_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB44_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB44_5:                               # %.lr.ph
                                        #   Parent Loop BB44_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -56
	ld.w	$a6, $a4, -52
	ld.w	$a7, $a4, -48
	ld.w	$t0, $a4, -44
	ld.w	$t1, $a4, -40
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 0
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 40
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 44
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 48
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 52
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 56
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 29
	addi.d	$a2, $a2, 29
	addi.d	$a4, $a4, 116
	blt	$a3, $s6, .LBB44_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB44_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB44_8
	b	.LBB44_15
	.p2align	4, , 16
.LBB44_7:                               #   in Loop: Header=BB44_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB44_15
.LBB44_8:                               # %.lr.ph51.preheader
                                        #   in Loop: Header=BB44_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB44_10
# %bb.9:                                #   in Loop: Header=BB44_3 Depth=1
	move	$a3, $a2
	b	.LBB44_13
	.p2align	4, , 16
.LBB44_10:                              # %vector.ph
                                        #   in Loop: Header=BB44_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB44_11:                              # %vector.body
                                        #   Parent Loop BB44_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB44_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB44_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB44_15
.LBB44_13:                              # %.lr.ph51.preheader69
                                        #   in Loop: Header=BB44_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB44_14:                              # %.lr.ph51
                                        #   Parent Loop BB44_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB44_14
.LBB44_15:                              # %._crit_edge
                                        #   in Loop: Header=BB44_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB44_2
# %bb.16:                               #   in Loop: Header=BB44_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 29
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB44_2
.LBB44_17:                              # %._crit_edge54
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB44_19
# %bb.18:                               # %._crit_edge54
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB44_21
.LBB44_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB44_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB44_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI44_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI44_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB44_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end44:
	.size	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end44-_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
.LCPI45_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB45_17
# %bb.1:                                # %.preheader44.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -27
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 56
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 28
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -441487
	ori	$s1, $a0, 32
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB45_3
	.p2align	4, , 16
.LBB45_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB45_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB45_17
.LBB45_3:                               # %.preheader44
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_5 Depth 2
                                        #     Child Loop BB45_11 Depth 2
                                        #     Child Loop BB45_14 Depth 2
	blt	$s0, $t2, .LBB45_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB45_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB45_5:                               # %.lr.ph
                                        #   Parent Loop BB45_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -56
	ld.w	$a6, $a4, -52
	ld.w	$a7, $a4, -48
	ld.w	$t0, $a4, -44
	ld.w	$t1, $a4, -40
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 0
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 40
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 44
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 48
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 52
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 28
	addi.d	$a2, $a2, 28
	addi.d	$a4, $a4, 112
	blt	$a3, $s6, .LBB45_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB45_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB45_8
	b	.LBB45_15
	.p2align	4, , 16
.LBB45_7:                               #   in Loop: Header=BB45_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB45_15
.LBB45_8:                               # %.lr.ph50.preheader
                                        #   in Loop: Header=BB45_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB45_10
# %bb.9:                                #   in Loop: Header=BB45_3 Depth=1
	move	$a3, $a2
	b	.LBB45_13
	.p2align	4, , 16
.LBB45_10:                              # %vector.ph
                                        #   in Loop: Header=BB45_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB45_11:                              # %vector.body
                                        #   Parent Loop BB45_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB45_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB45_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB45_15
.LBB45_13:                              # %.lr.ph50.preheader68
                                        #   in Loop: Header=BB45_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB45_14:                              # %.lr.ph50
                                        #   Parent Loop BB45_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB45_14
.LBB45_15:                              # %._crit_edge
                                        #   in Loop: Header=BB45_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB45_2
# %bb.16:                               #   in Loop: Header=BB45_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 28
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB45_2
.LBB45_17:                              # %._crit_edge53
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB45_19
# %bb.18:                               # %._crit_edge53
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB45_21
.LBB45_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB45_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB45_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI45_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI45_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB45_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end45:
	.size	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end45-_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
.LCPI46_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB46_17
# %bb.1:                                # %.preheader43.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -26
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 52
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 27
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -163576
	ori	$s1, $a0, 1640
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB46_3
	.p2align	4, , 16
.LBB46_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB46_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB46_17
.LBB46_3:                               # %.preheader43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_5 Depth 2
                                        #     Child Loop BB46_11 Depth 2
                                        #     Child Loop BB46_14 Depth 2
	blt	$s0, $t2, .LBB46_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB46_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB46_5:                               # %.lr.ph
                                        #   Parent Loop BB46_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -52
	ld.w	$a6, $a4, -48
	ld.w	$a7, $a4, -44
	ld.w	$t0, $a4, -40
	ld.w	$t1, $a4, -36
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 0
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 40
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 44
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 48
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 52
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 27
	addi.d	$a2, $a2, 27
	addi.d	$a4, $a4, 108
	blt	$a3, $s6, .LBB46_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB46_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB46_8
	b	.LBB46_15
	.p2align	4, , 16
.LBB46_7:                               #   in Loop: Header=BB46_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB46_15
.LBB46_8:                               # %.lr.ph49.preheader
                                        #   in Loop: Header=BB46_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB46_10
# %bb.9:                                #   in Loop: Header=BB46_3 Depth=1
	move	$a3, $a2
	b	.LBB46_13
	.p2align	4, , 16
.LBB46_10:                              # %vector.ph
                                        #   in Loop: Header=BB46_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB46_11:                              # %vector.body
                                        #   Parent Loop BB46_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB46_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB46_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB46_15
.LBB46_13:                              # %.lr.ph49.preheader67
                                        #   in Loop: Header=BB46_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB46_14:                              # %.lr.ph49
                                        #   Parent Loop BB46_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB46_14
.LBB46_15:                              # %._crit_edge
                                        #   in Loop: Header=BB46_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB46_2
# %bb.16:                               #   in Loop: Header=BB46_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 27
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB46_2
.LBB46_17:                              # %._crit_edge52
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB46_19
# %bb.18:                               # %._crit_edge52
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB46_21
.LBB46_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB46_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB46_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI46_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI46_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB46_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end46:
	.size	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end46-_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi25EiE7do_testEPKiPKc,"axG",@progbits,_ZN16while_loop_testsILi25EiE7do_testEPKiPKc,comdat
	.weak	_ZN16while_loop_testsILi25EiE7do_testEPKiPKc # -- Begin function _ZN16while_loop_testsILi25EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi25EiE7do_testEPKiPKc,@function
_ZN16while_loop_testsILi25EiE7do_testEPKiPKc: # @_ZN16while_loop_testsILi25EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi17EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1700
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1900
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end47:
	.size	_ZN16while_loop_testsILi25EiE7do_testEPKiPKc, .Lfunc_end47-_ZN16while_loop_testsILi25EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
.LCPI48_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB48_17
# %bb.1:                                # %.preheader42.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -25
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 52
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$t2, $zero, 26
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB48_3
	.p2align	4, , 16
.LBB48_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB48_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB48_17
.LBB48_3:                               # %.preheader42
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_5 Depth 2
                                        #     Child Loop BB48_11 Depth 2
                                        #     Child Loop BB48_14 Depth 2
	blt	$s0, $t2, .LBB48_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB48_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB48_5:                               # %.lr.ph
                                        #   Parent Loop BB48_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -52
	ld.w	$a6, $a4, -48
	ld.w	$a7, $a4, -44
	ld.w	$t0, $a4, -40
	ld.w	$t1, $a4, -36
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 0
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 40
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 44
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 48
	add.d	$a5, $a5, $a7
	add.w	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	addu16i.d	$a0, $a0, 7146
	addi.w	$a0, $a0, -848
	addi.d	$a3, $a3, 26
	addi.d	$a2, $a2, 26
	addi.d	$a4, $a4, 104
	blt	$a3, $s6, .LBB48_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB48_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB48_8
	b	.LBB48_15
	.p2align	4, , 16
.LBB48_7:                               #   in Loop: Header=BB48_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB48_15
.LBB48_8:                               # %.lr.ph48.preheader
                                        #   in Loop: Header=BB48_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB48_10
# %bb.9:                                #   in Loop: Header=BB48_3 Depth=1
	move	$a3, $a2
	b	.LBB48_13
	.p2align	4, , 16
.LBB48_10:                              # %vector.ph
                                        #   in Loop: Header=BB48_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB48_11:                              # %vector.body
                                        #   Parent Loop BB48_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB48_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB48_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB48_15
.LBB48_13:                              # %.lr.ph48.preheader66
                                        #   in Loop: Header=BB48_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB48_14:                              # %.lr.ph48
                                        #   Parent Loop BB48_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB48_14
.LBB48_15:                              # %._crit_edge
                                        #   in Loop: Header=BB48_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB48_2
# %bb.16:                               #   in Loop: Header=BB48_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 26
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB48_2
.LBB48_17:                              # %._crit_edge51
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB48_19
# %bb.18:                               # %._crit_edge51
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB48_21
.LBB48_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB48_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB48_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI48_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI48_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB48_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end48:
	.size	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end48-_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
.LCPI49_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB49_17
# %bb.1:                                # %.preheader41.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -24
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 48
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 25
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 392247
	ori	$s1, $a0, 760
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB49_3
	.p2align	4, , 16
.LBB49_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB49_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB49_17
.LBB49_3:                               # %.preheader41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_5 Depth 2
                                        #     Child Loop BB49_11 Depth 2
                                        #     Child Loop BB49_14 Depth 2
	blt	$s0, $t2, .LBB49_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB49_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB49_5:                               # %.lr.ph
                                        #   Parent Loop BB49_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -48
	ld.w	$a6, $a4, -44
	ld.w	$a7, $a4, -40
	ld.w	$t0, $a4, -36
	ld.w	$t1, $a4, -32
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 0
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 32
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 40
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 44
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 48
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 25
	addi.d	$a2, $a2, 25
	addi.d	$a4, $a4, 100
	blt	$a3, $s6, .LBB49_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB49_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB49_8
	b	.LBB49_15
	.p2align	4, , 16
.LBB49_7:                               #   in Loop: Header=BB49_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB49_15
.LBB49_8:                               # %.lr.ph47.preheader
                                        #   in Loop: Header=BB49_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB49_10
# %bb.9:                                #   in Loop: Header=BB49_3 Depth=1
	move	$a3, $a2
	b	.LBB49_13
	.p2align	4, , 16
.LBB49_10:                              # %vector.ph
                                        #   in Loop: Header=BB49_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB49_11:                              # %vector.body
                                        #   Parent Loop BB49_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB49_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB49_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB49_15
.LBB49_13:                              # %.lr.ph47.preheader65
                                        #   in Loop: Header=BB49_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB49_14:                              # %.lr.ph47
                                        #   Parent Loop BB49_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB49_14
.LBB49_15:                              # %._crit_edge
                                        #   in Loop: Header=BB49_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB49_2
# %bb.16:                               #   in Loop: Header=BB49_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 25
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB49_2
.LBB49_17:                              # %._crit_edge50
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB49_19
# %bb.18:                               # %._crit_edge50
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB49_21
.LBB49_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB49_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB49_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI49_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI49_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB49_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end49:
	.size	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end49-_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
.LCPI50_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB50_17
# %bb.1:                                # %.preheader40.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -23
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 48
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 24
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -378418
	ori	$s1, $a0, 2368
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB50_3
	.p2align	4, , 16
.LBB50_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB50_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB50_17
.LBB50_3:                               # %.preheader40
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_5 Depth 2
                                        #     Child Loop BB50_11 Depth 2
                                        #     Child Loop BB50_14 Depth 2
	blt	$s0, $t2, .LBB50_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB50_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB50_5:                               # %.lr.ph
                                        #   Parent Loop BB50_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -48
	ld.w	$a6, $a4, -44
	ld.w	$a7, $a4, -40
	ld.w	$t0, $a4, -36
	ld.w	$t1, $a4, -32
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 0
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 32
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 40
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 44
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 24
	addi.d	$a2, $a2, 24
	addi.d	$a4, $a4, 96
	blt	$a3, $s6, .LBB50_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB50_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB50_8
	b	.LBB50_15
	.p2align	4, , 16
.LBB50_7:                               #   in Loop: Header=BB50_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB50_15
.LBB50_8:                               # %.lr.ph46.preheader
                                        #   in Loop: Header=BB50_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB50_10
# %bb.9:                                #   in Loop: Header=BB50_3 Depth=1
	move	$a3, $a2
	b	.LBB50_13
	.p2align	4, , 16
.LBB50_10:                              # %vector.ph
                                        #   in Loop: Header=BB50_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB50_11:                              # %vector.body
                                        #   Parent Loop BB50_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB50_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB50_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB50_15
.LBB50_13:                              # %.lr.ph46.preheader64
                                        #   in Loop: Header=BB50_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB50_14:                              # %.lr.ph46
                                        #   Parent Loop BB50_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB50_14
.LBB50_15:                              # %._crit_edge
                                        #   in Loop: Header=BB50_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB50_2
# %bb.16:                               #   in Loop: Header=BB50_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 24
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB50_2
.LBB50_17:                              # %._crit_edge49
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB50_19
# %bb.18:                               # %._crit_edge49
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB50_21
.LBB50_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB50_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB50_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI50_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI50_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB50_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end50:
	.size	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end50-_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
.LCPI51_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB51_17
# %bb.1:                                # %.preheader39.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -22
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 44
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 23
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -100507
	ori	$s1, $a0, 3976
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB51_3
	.p2align	4, , 16
.LBB51_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB51_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB51_17
.LBB51_3:                               # %.preheader39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_5 Depth 2
                                        #     Child Loop BB51_11 Depth 2
                                        #     Child Loop BB51_14 Depth 2
	blt	$s0, $t2, .LBB51_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB51_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB51_5:                               # %.lr.ph
                                        #   Parent Loop BB51_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -44
	ld.w	$a6, $a4, -40
	ld.w	$a7, $a4, -36
	ld.w	$t0, $a4, -32
	ld.w	$t1, $a4, -28
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 23
	addi.d	$a2, $a2, 23
	addi.d	$a4, $a4, 92
	blt	$a3, $s6, .LBB51_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB51_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB51_8
	b	.LBB51_15
	.p2align	4, , 16
.LBB51_7:                               #   in Loop: Header=BB51_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB51_15
.LBB51_8:                               # %.lr.ph45.preheader
                                        #   in Loop: Header=BB51_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB51_10
# %bb.9:                                #   in Loop: Header=BB51_3 Depth=1
	move	$a3, $a2
	b	.LBB51_13
	.p2align	4, , 16
.LBB51_10:                              # %vector.ph
                                        #   in Loop: Header=BB51_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB51_11:                              # %vector.body
                                        #   Parent Loop BB51_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB51_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB51_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB51_15
.LBB51_13:                              # %.lr.ph45.preheader63
                                        #   in Loop: Header=BB51_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB51_14:                              # %.lr.ph45
                                        #   Parent Loop BB51_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB51_14
.LBB51_15:                              # %._crit_edge
                                        #   in Loop: Header=BB51_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB51_2
# %bb.16:                               #   in Loop: Header=BB51_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 23
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB51_2
.LBB51_17:                              # %._crit_edge48
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB51_19
# %bb.18:                               # %._crit_edge48
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB51_21
.LBB51_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB51_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB51_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI51_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI51_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB51_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end51:
	.size	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end51-_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
.LCPI52_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB52_17
# %bb.1:                                # %.preheader38.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -21
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 44
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 22
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 177405
	ori	$s1, $a0, 1488
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB52_3
	.p2align	4, , 16
.LBB52_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB52_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB52_17
.LBB52_3:                               # %.preheader38
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_5 Depth 2
                                        #     Child Loop BB52_11 Depth 2
                                        #     Child Loop BB52_14 Depth 2
	blt	$s0, $t2, .LBB52_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB52_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB52_5:                               # %.lr.ph
                                        #   Parent Loop BB52_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -44
	ld.w	$a6, $a4, -40
	ld.w	$a7, $a4, -36
	ld.w	$t0, $a4, -32
	ld.w	$t1, $a4, -28
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 22
	addi.d	$a2, $a2, 22
	addi.d	$a4, $a4, 88
	blt	$a3, $s6, .LBB52_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB52_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB52_8
	b	.LBB52_15
	.p2align	4, , 16
.LBB52_7:                               #   in Loop: Header=BB52_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB52_15
.LBB52_8:                               # %.lr.ph44.preheader
                                        #   in Loop: Header=BB52_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB52_10
# %bb.9:                                #   in Loop: Header=BB52_3 Depth=1
	move	$a3, $a2
	b	.LBB52_13
	.p2align	4, , 16
.LBB52_10:                              # %vector.ph
                                        #   in Loop: Header=BB52_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB52_11:                              # %vector.body
                                        #   Parent Loop BB52_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB52_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB52_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB52_15
.LBB52_13:                              # %.lr.ph44.preheader62
                                        #   in Loop: Header=BB52_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB52_14:                              # %.lr.ph44
                                        #   Parent Loop BB52_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB52_14
.LBB52_15:                              # %._crit_edge
                                        #   in Loop: Header=BB52_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB52_2
# %bb.16:                               #   in Loop: Header=BB52_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 22
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB52_2
.LBB52_17:                              # %._crit_edge47
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB52_19
# %bb.18:                               # %._crit_edge47
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB52_21
.LBB52_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB52_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB52_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI52_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI52_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB52_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end52:
	.size	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end52-_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
.LCPI53_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 88                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	st.d	$a2, $sp, 136                   # 8-byte Folded Spill
	blez	$a2, .LBB53_17
# %bb.1:                                # %.preheader36.lr.ph
	move	$a1, $zero
	addi.w	$s4, $s0, -20
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 40
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 455316
	ori	$s1, $a0, 3096
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	b	.LBB53_3
	.p2align	4, , 16
.LBB53_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB53_3 Depth=1
	addi.w	$a1, $s3, 1
	ld.d	$a0, $sp, 136                   # 8-byte Folded Reload
	bge	$a1, $a0, .LBB53_17
.LBB53_3:                               # %.preheader36
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_5 Depth 2
                                        #     Child Loop BB53_11 Depth 2
                                        #     Child Loop BB53_14 Depth 2
	st.d	$a1, $sp, 144                   # 8-byte Folded Spill
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB53_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB53_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB53_5:                               # %.lr.ph
                                        #   Parent Loop BB53_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -40
	ld.w	$a6, $a4, -36
	ld.w	$a7, $a4, -32
	ld.w	$t0, $a4, -28
	ld.w	$t1, $a4, -24
	ld.w	$t2, $a4, -20
	ld.w	$t3, $a4, -16
	ld.w	$t4, $a4, -12
	ld.w	$t5, $a4, -8
	ld.w	$t6, $a4, -4
	ld.w	$t7, $a4, 0
	ld.w	$t8, $a4, 4
	ld.w	$ra, $a4, 8
	ld.w	$s8, $a4, 12
	ld.w	$s7, $a4, 16
	ld.w	$s3, $a4, 20
	move	$s2, $s1
	move	$s1, $s4
	ld.w	$s4, $a4, 24
	ld.w	$a1, $a4, 28
	ld.w	$s0, $a4, 32
	ld.w	$s5, $a4, 36
	ld.w	$s6, $a4, 40
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	move	$s4, $s1
	move	$s1, $s2
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	add.d	$a1, $a1, $s6
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, 21
	addi.d	$a2, $a2, 21
	addi.d	$a4, $a4, 84
	blt	$a3, $s4, .LBB53_5
	b	.LBB53_7
	.p2align	4, , 16
.LBB53_6:                               #   in Loop: Header=BB53_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB53_7:                               # %.preheader
                                        #   in Loop: Header=BB53_3 Depth=1
	addi.w	$a3, $a2, 0
	ld.d	$s0, $sp, 128                   # 8-byte Folded Reload
	bge	$a3, $s0, .LBB53_15
# %bb.8:                                # %.lr.ph42.preheader
                                        #   in Loop: Header=BB53_3 Depth=1
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	bgeu	$a4, $a1, .LBB53_10
# %bb.9:                                #   in Loop: Header=BB53_3 Depth=1
	move	$a3, $a2
	b	.LBB53_13
	.p2align	4, , 16
.LBB53_10:                              # %vector.ph
                                        #   in Loop: Header=BB53_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB53_11:                              # %vector.body
                                        #   Parent Loop BB53_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB53_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB53_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB53_15
.LBB53_13:                              # %.lr.ph42.preheader60
                                        #   in Loop: Header=BB53_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB53_14:                              # %.lr.ph42
                                        #   Parent Loop BB53_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB53_14
.LBB53_15:                              # %._crit_edge
                                        #   in Loop: Header=BB53_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 120                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	beq	$a0, $a1, .LBB53_2
# %bb.16:                               #   in Loop: Header=BB53_3 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 136                   # 8-byte Folded Spill
	b	.LBB53_2
.LBB53_17:                              # %._crit_edge45
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB53_19
# %bb.18:                               # %._crit_edge45
	ld.w	$a0, $a4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB53_21
.LBB53_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB53_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a4, %pc_lo12(current_test)
.LBB53_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI53_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI53_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $a4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB53_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end53:
	.size	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end53-_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
.LCPI54_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 120                   # 8-byte Folded Spill
	blez	$a2, .LBB54_17
# %bb.1:                                # %.preheader35.lr.ph
	move	$a1, $zero
	addi.w	$s6, $s0, -19
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 40
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -315348
	ori	$s1, $a0, 608
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 112                   # 8-byte Folded Spill
	b	.LBB54_3
	.p2align	4, , 16
.LBB54_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB54_3 Depth=1
	addi.w	$a1, $s3, 1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	bge	$a1, $a0, .LBB54_17
.LBB54_3:                               # %.preheader35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_5 Depth 2
                                        #     Child Loop BB54_11 Depth 2
                                        #     Child Loop BB54_14 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB54_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB54_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB54_5:                               # %.lr.ph
                                        #   Parent Loop BB54_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -40
	ld.w	$a6, $a4, -36
	ld.w	$a7, $a4, -32
	ld.w	$t0, $a4, -28
	ld.w	$t1, $a4, -24
	ld.w	$t2, $a4, -20
	ld.w	$t3, $a4, -16
	ld.w	$t4, $a4, -12
	ld.w	$t5, $a4, -8
	ld.w	$t6, $a4, -4
	ld.w	$t7, $a4, 0
	ld.w	$t8, $a4, 4
	ld.w	$ra, $a4, 8
	ld.w	$s8, $a4, 12
	ld.w	$s7, $a4, 16
	ld.w	$s3, $a4, 20
	ld.w	$s4, $a4, 24
	ld.w	$a1, $a4, 28
	ld.w	$s0, $a4, 32
	ld.w	$s5, $a4, 36
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 20
	addi.d	$a2, $a2, 20
	addi.d	$a4, $a4, 80
	blt	$a3, $s6, .LBB54_5
	b	.LBB54_7
	.p2align	4, , 16
.LBB54_6:                               #   in Loop: Header=BB54_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB54_7:                               # %.preheader
                                        #   in Loop: Header=BB54_3 Depth=1
	addi.w	$a3, $a2, 0
	ld.d	$s0, $sp, 112                   # 8-byte Folded Reload
	bge	$a3, $s0, .LBB54_15
# %bb.8:                                # %.lr.ph41.preheader
                                        #   in Loop: Header=BB54_3 Depth=1
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB54_10
# %bb.9:                                #   in Loop: Header=BB54_3 Depth=1
	move	$a3, $a2
	b	.LBB54_13
	.p2align	4, , 16
.LBB54_10:                              # %vector.ph
                                        #   in Loop: Header=BB54_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB54_11:                              # %vector.body
                                        #   Parent Loop BB54_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB54_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB54_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB54_15
.LBB54_13:                              # %.lr.ph41.preheader59
                                        #   in Loop: Header=BB54_3 Depth=1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB54_14:                              # %.lr.ph41
                                        #   Parent Loop BB54_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB54_14
.LBB54_15:                              # %._crit_edge
                                        #   in Loop: Header=BB54_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	beq	$a0, $a1, .LBB54_2
# %bb.16:                               #   in Loop: Header=BB54_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	b	.LBB54_2
.LBB54_17:                              # %._crit_edge44
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB54_19
# %bb.18:                               # %._crit_edge44
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB54_21
.LBB54_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB54_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB54_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI54_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI54_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB54_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end54:
	.size	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end54-_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
.LCPI55_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	st.d	$a2, $sp, 128                   # 8-byte Folded Spill
	blez	$a2, .LBB55_17
# %bb.1:                                # %.preheader34.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -18
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 36
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -37437
	ori	$s1, $a0, 2216
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	b	.LBB55_3
	.p2align	4, , 16
.LBB55_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB55_3 Depth=1
	addi.w	$s5, $s5, 1
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	bge	$s5, $a0, .LBB55_17
.LBB55_3:                               # %.preheader34
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_5 Depth 2
                                        #     Child Loop BB55_11 Depth 2
                                        #     Child Loop BB55_14 Depth 2
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB55_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB55_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB55_5:                               # %.lr.ph
                                        #   Parent Loop BB55_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -36
	ld.w	$a6, $a4, -32
	ld.w	$a7, $a4, -28
	ld.w	$t0, $a4, -24
	ld.w	$t1, $a4, -20
	ld.w	$t2, $a4, -16
	ld.w	$t3, $a4, -12
	ld.w	$t4, $a4, -8
	ld.w	$t5, $a4, -4
	ld.w	$t6, $a4, 0
	ld.w	$t7, $a4, 4
	ld.w	$t8, $a4, 8
	ld.w	$ra, $a4, 12
	ld.w	$s8, $a4, 16
	ld.w	$s7, $a4, 20
	ld.w	$s3, $a4, 24
	ld.w	$s4, $a4, 28
	ld.w	$a1, $a4, 32
	ld.w	$s0, $a4, 36
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 19
	addi.d	$a2, $a2, 19
	addi.d	$a4, $a4, 76
	blt	$a3, $s6, .LBB55_5
	b	.LBB55_7
	.p2align	4, , 16
.LBB55_6:                               #   in Loop: Header=BB55_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB55_7:                               # %.preheader
                                        #   in Loop: Header=BB55_3 Depth=1
	addi.w	$a3, $a2, 0
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	bge	$a3, $s0, .LBB55_15
# %bb.8:                                # %.lr.ph40.preheader
                                        #   in Loop: Header=BB55_3 Depth=1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB55_10
# %bb.9:                                #   in Loop: Header=BB55_3 Depth=1
	move	$a3, $a2
	b	.LBB55_13
	.p2align	4, , 16
.LBB55_10:                              # %vector.ph
                                        #   in Loop: Header=BB55_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB55_11:                              # %vector.body
                                        #   Parent Loop BB55_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB55_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB55_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB55_15
.LBB55_13:                              # %.lr.ph40.preheader58
                                        #   in Loop: Header=BB55_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB55_14:                              # %.lr.ph40
                                        #   Parent Loop BB55_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB55_14
.LBB55_15:                              # %._crit_edge
                                        #   in Loop: Header=BB55_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB55_2
# %bb.16:                               #   in Loop: Header=BB55_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	b	.LBB55_2
.LBB55_17:                              # %._crit_edge43
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB55_19
# %bb.18:                               # %._crit_edge43
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB55_21
.LBB55_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB55_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB55_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI55_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI55_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB55_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end55:
	.size	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end55-_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi17EiE7do_testEPKiPKc,"axG",@progbits,_ZN16while_loop_testsILi17EiE7do_testEPKiPKc,comdat
	.weak	_ZN16while_loop_testsILi17EiE7do_testEPKiPKc # -- Begin function _ZN16while_loop_testsILi17EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi17EiE7do_testEPKiPKc,@function
_ZN16while_loop_testsILi17EiE7do_testEPKiPKc: # @_ZN16while_loop_testsILi17EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi9EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end56:
	.size	_ZN16while_loop_testsILi17EiE7do_testEPKiPKc, .Lfunc_end56-_ZN16while_loop_testsILi17EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
.LCPI57_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blez	$a2, .LBB57_17
# %bb.1:                                # %.preheader33.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -17
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 36
	st.d	$a1, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 240474
	ori	$s1, $a0, 3824
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	b	.LBB57_3
	.p2align	4, , 16
.LBB57_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB57_3 Depth=1
	addi.w	$s5, $s5, 1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	bge	$s5, $a0, .LBB57_17
.LBB57_3:                               # %.preheader33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_5 Depth 2
                                        #     Child Loop BB57_11 Depth 2
                                        #     Child Loop BB57_14 Depth 2
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB57_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB57_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB57_5:                               # %.lr.ph
                                        #   Parent Loop BB57_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -36
	ld.w	$a6, $a4, -32
	ld.w	$a7, $a4, -28
	ld.w	$t0, $a4, -24
	ld.w	$t1, $a4, -20
	ld.w	$t2, $a4, -16
	ld.w	$t3, $a4, -12
	ld.w	$t4, $a4, -8
	ld.w	$t5, $a4, -4
	ld.w	$t6, $a4, 0
	ld.w	$t7, $a4, 4
	ld.w	$t8, $a4, 8
	ld.w	$ra, $a4, 12
	ld.w	$s8, $a4, 16
	ld.w	$s7, $a4, 20
	ld.w	$s3, $a4, 24
	ld.w	$s4, $a4, 28
	ld.w	$a1, $a4, 32
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 18
	addi.d	$a2, $a2, 18
	addi.d	$a4, $a4, 72
	blt	$a3, $s6, .LBB57_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB57_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB57_8
	b	.LBB57_15
	.p2align	4, , 16
.LBB57_7:                               #   in Loop: Header=BB57_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB57_15
.LBB57_8:                               # %.lr.ph39.preheader
                                        #   in Loop: Header=BB57_3 Depth=1
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB57_10
# %bb.9:                                #   in Loop: Header=BB57_3 Depth=1
	move	$a3, $a2
	b	.LBB57_13
	.p2align	4, , 16
.LBB57_10:                              # %vector.ph
                                        #   in Loop: Header=BB57_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB57_11:                              # %vector.body
                                        #   Parent Loop BB57_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB57_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB57_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB57_15
.LBB57_13:                              # %.lr.ph39.preheader57
                                        #   in Loop: Header=BB57_3 Depth=1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB57_14:                              # %.lr.ph39
                                        #   Parent Loop BB57_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB57_14
.LBB57_15:                              # %._crit_edge
                                        #   in Loop: Header=BB57_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB57_2
# %bb.16:                               #   in Loop: Header=BB57_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	b	.LBB57_2
.LBB57_17:                              # %._crit_edge42
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB57_19
# %bb.18:                               # %._crit_edge42
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB57_21
.LBB57_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB57_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB57_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI57_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI57_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB57_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end57:
	.size	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end57-_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
.LCPI58_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	blez	$a1, .LBB58_17
# %bb.1:                                # %.preheader32.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -16
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 518386
	ori	$s1, $a0, 1336
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB58_3
	.p2align	4, , 16
.LBB58_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB58_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB58_17
.LBB58_3:                               # %.preheader32
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_5 Depth 2
                                        #     Child Loop BB58_11 Depth 2
                                        #     Child Loop BB58_14 Depth 2
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB58_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB58_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB58_5:                               # %.lr.ph
                                        #   Parent Loop BB58_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -32
	ld.w	$a6, $a4, -28
	ld.w	$a7, $a4, -24
	ld.w	$t0, $a4, -20
	ld.w	$t1, $a4, -16
	ld.w	$t2, $a4, -12
	ld.w	$t3, $a4, -8
	ld.w	$t4, $a4, -4
	ld.w	$t5, $a4, 0
	ld.w	$t6, $a4, 4
	ld.w	$t7, $a4, 8
	ld.w	$t8, $a4, 12
	ld.w	$ra, $a4, 16
	ld.w	$s8, $a4, 20
	ld.w	$s7, $a4, 24
	ld.w	$s3, $a4, 28
	ld.w	$s4, $a4, 32
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 17
	addi.d	$a2, $a2, 17
	addi.d	$a4, $a4, 68
	blt	$a3, $s6, .LBB58_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB58_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB58_8
	b	.LBB58_15
	.p2align	4, , 16
.LBB58_7:                               #   in Loop: Header=BB58_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB58_15
.LBB58_8:                               # %.lr.ph38.preheader
                                        #   in Loop: Header=BB58_3 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB58_10
# %bb.9:                                #   in Loop: Header=BB58_3 Depth=1
	move	$a3, $a2
	b	.LBB58_13
	.p2align	4, , 16
.LBB58_10:                              # %vector.ph
                                        #   in Loop: Header=BB58_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB58_11:                              # %vector.body
                                        #   Parent Loop BB58_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB58_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB58_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB58_15
.LBB58_13:                              # %.lr.ph38.preheader56
                                        #   in Loop: Header=BB58_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB58_14:                              # %.lr.ph38
                                        #   Parent Loop BB58_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB58_14
.LBB58_15:                              # %._crit_edge
                                        #   in Loop: Header=BB58_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	mul.d	$a2, $a2, $a3
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	add.w	$a2, $a2, $a3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB58_2
# %bb.16:                               #   in Loop: Header=BB58_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB58_2
.LBB58_17:                              # %._crit_edge41
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB58_19
# %bb.18:                               # %._crit_edge41
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB58_21
.LBB58_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB58_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB58_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI58_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI58_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB58_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end58:
	.size	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end58-_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
.LCPI59_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB59_17
# %bb.1:                                # %.preheader31.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -15
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -252279
	ori	$s1, $a0, 2944
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB59_3
	.p2align	4, , 16
.LBB59_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB59_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB59_17
.LBB59_3:                               # %.preheader31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_5 Depth 2
                                        #     Child Loop BB59_11 Depth 2
                                        #     Child Loop BB59_14 Depth 2
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB59_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB59_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB59_5:                               # %.lr.ph
                                        #   Parent Loop BB59_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -32
	ld.w	$a6, $a4, -28
	ld.w	$a7, $a4, -24
	ld.w	$t0, $a4, -20
	ld.w	$t1, $a4, -16
	ld.w	$t2, $a4, -12
	ld.w	$t3, $a4, -8
	ld.w	$t4, $a4, -4
	ld.w	$t5, $a4, 0
	ld.w	$t6, $a4, 4
	ld.w	$t7, $a4, 8
	ld.w	$t8, $a4, 12
	ld.w	$ra, $a4, 16
	ld.w	$s8, $a4, 20
	ld.w	$s7, $a4, 24
	ld.w	$s3, $a4, 28
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 16
	addi.d	$a2, $a2, 16
	addi.d	$a4, $a4, 64
	blt	$a3, $s6, .LBB59_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB59_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB59_8
	b	.LBB59_15
	.p2align	4, , 16
.LBB59_7:                               #   in Loop: Header=BB59_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB59_15
.LBB59_8:                               # %.lr.ph37.preheader
                                        #   in Loop: Header=BB59_3 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB59_10
# %bb.9:                                #   in Loop: Header=BB59_3 Depth=1
	move	$a3, $a2
	b	.LBB59_13
	.p2align	4, , 16
.LBB59_10:                              # %vector.ph
                                        #   in Loop: Header=BB59_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB59_11:                              # %vector.body
                                        #   Parent Loop BB59_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB59_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB59_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB59_15
.LBB59_13:                              # %.lr.ph37.preheader55
                                        #   in Loop: Header=BB59_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB59_14:                              # %.lr.ph37
                                        #   Parent Loop BB59_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB59_14
.LBB59_15:                              # %._crit_edge
                                        #   in Loop: Header=BB59_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	mul.d	$a2, $a2, $a3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB59_2
# %bb.16:                               #   in Loop: Header=BB59_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB59_2
.LBB59_17:                              # %._crit_edge40
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB59_19
# %bb.18:                               # %._crit_edge40
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB59_21
.LBB59_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB59_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB59_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI59_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI59_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB59_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end59:
	.size	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end59-_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
.LCPI60_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	blez	$a1, .LBB60_17
# %bb.1:                                # %.preheader30.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -14
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 28
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 25633
	ori	$s1, $a0, 456
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB60_3
	.p2align	4, , 16
.LBB60_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB60_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB60_17
.LBB60_3:                               # %.preheader30
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_5 Depth 2
                                        #     Child Loop BB60_11 Depth 2
                                        #     Child Loop BB60_14 Depth 2
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB60_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB60_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB60_5:                               # %.lr.ph
                                        #   Parent Loop BB60_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -28
	ld.w	$a6, $a4, -24
	ld.w	$a7, $a4, -20
	ld.w	$t0, $a4, -16
	ld.w	$t1, $a4, -12
	ld.w	$t2, $a4, -8
	ld.w	$t3, $a4, -4
	ld.w	$t4, $a4, 0
	ld.w	$t5, $a4, 4
	ld.w	$t6, $a4, 8
	ld.w	$t7, $a4, 12
	ld.w	$t8, $a4, 16
	ld.w	$ra, $a4, 20
	ld.w	$s8, $a4, 24
	ld.w	$s7, $a4, 28
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 15
	addi.d	$a2, $a2, 15
	addi.d	$a4, $a4, 60
	blt	$a3, $s6, .LBB60_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB60_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB60_8
	b	.LBB60_15
	.p2align	4, , 16
.LBB60_7:                               #   in Loop: Header=BB60_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB60_15
.LBB60_8:                               # %.lr.ph36.preheader
                                        #   in Loop: Header=BB60_3 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB60_10
# %bb.9:                                #   in Loop: Header=BB60_3 Depth=1
	move	$a3, $a2
	b	.LBB60_13
	.p2align	4, , 16
.LBB60_10:                              # %vector.ph
                                        #   in Loop: Header=BB60_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB60_11:                              # %vector.body
                                        #   Parent Loop BB60_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB60_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB60_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB60_15
.LBB60_13:                              # %.lr.ph36.preheader54
                                        #   in Loop: Header=BB60_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB60_14:                              # %.lr.ph36
                                        #   Parent Loop BB60_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB60_14
.LBB60_15:                              # %._crit_edge
                                        #   in Loop: Header=BB60_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB60_2
# %bb.16:                               #   in Loop: Header=BB60_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB60_2
.LBB60_17:                              # %._crit_edge39
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB60_19
# %bb.18:                               # %._crit_edge39
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB60_21
.LBB60_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB60_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB60_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI60_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI60_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB60_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end60:
	.size	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end60-_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
.LCPI61_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB61_17
# %bb.1:                                # %.preheader29.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -13
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 28
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 303544
	ori	$s1, $a0, 2064
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB61_3
	.p2align	4, , 16
.LBB61_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB61_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB61_17
.LBB61_3:                               # %.preheader29
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_5 Depth 2
                                        #     Child Loop BB61_11 Depth 2
                                        #     Child Loop BB61_14 Depth 2
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB61_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB61_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB61_5:                               # %.lr.ph
                                        #   Parent Loop BB61_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -28
	ld.w	$a6, $a4, -24
	ld.w	$a7, $a4, -20
	ld.w	$t0, $a4, -16
	ld.w	$t1, $a4, -12
	ld.w	$t2, $a4, -8
	ld.w	$t3, $a4, -4
	ld.w	$t4, $a4, 0
	ld.w	$t5, $a4, 4
	ld.w	$t6, $a4, 8
	ld.w	$t7, $a4, 12
	ld.w	$t8, $a4, 16
	ld.w	$ra, $a4, 20
	ld.w	$s8, $a4, 24
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 14
	addi.d	$a2, $a2, 14
	addi.d	$a4, $a4, 56
	blt	$a3, $s6, .LBB61_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB61_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB61_8
	b	.LBB61_15
	.p2align	4, , 16
.LBB61_7:                               #   in Loop: Header=BB61_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB61_15
.LBB61_8:                               # %.lr.ph35.preheader
                                        #   in Loop: Header=BB61_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB61_10
# %bb.9:                                #   in Loop: Header=BB61_3 Depth=1
	move	$a3, $a2
	b	.LBB61_13
	.p2align	4, , 16
.LBB61_10:                              # %vector.ph
                                        #   in Loop: Header=BB61_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB61_11:                              # %vector.body
                                        #   Parent Loop BB61_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB61_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB61_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB61_15
.LBB61_13:                              # %.lr.ph35.preheader53
                                        #   in Loop: Header=BB61_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB61_14:                              # %.lr.ph35
                                        #   Parent Loop BB61_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB61_14
.LBB61_15:                              # %._crit_edge
                                        #   in Loop: Header=BB61_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB61_2
# %bb.16:                               #   in Loop: Header=BB61_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB61_2
.LBB61_17:                              # %._crit_edge38
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB61_19
# %bb.18:                               # %._crit_edge38
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB61_21
.LBB61_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB61_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB61_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI61_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI61_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB61_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end61:
	.size	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end61-_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
.LCPI62_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB62_17
# %bb.1:                                # %.preheader28.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -12
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 24
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB62_3
	.p2align	4, , 16
.LBB62_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB62_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB62_17
.LBB62_3:                               # %.preheader28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_5 Depth 2
                                        #     Child Loop BB62_11 Depth 2
                                        #     Child Loop BB62_14 Depth 2
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB62_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB62_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB62_5:                               # %.lr.ph
                                        #   Parent Loop BB62_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -24
	ld.w	$a6, $a4, -20
	ld.w	$a7, $a4, -16
	ld.w	$t0, $a4, -12
	ld.w	$t1, $a4, -8
	ld.w	$t2, $a4, -4
	ld.w	$t3, $a4, 0
	ld.w	$t4, $a4, 4
	ld.w	$t5, $a4, 8
	ld.w	$t6, $a4, 12
	ld.w	$t7, $a4, 16
	ld.w	$t8, $a4, 20
	ld.w	$ra, $a4, 24
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.w	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	addu16i.d	$a0, $a0, -29195
	addi.w	$a0, $a0, -424
	addi.d	$a3, $a3, 13
	addi.d	$a2, $a2, 13
	addi.d	$a4, $a4, 52
	blt	$a3, $s6, .LBB62_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB62_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB62_8
	b	.LBB62_15
	.p2align	4, , 16
.LBB62_7:                               #   in Loop: Header=BB62_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB62_15
.LBB62_8:                               # %.lr.ph34.preheader
                                        #   in Loop: Header=BB62_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB62_10
# %bb.9:                                #   in Loop: Header=BB62_3 Depth=1
	move	$a3, $a2
	b	.LBB62_13
	.p2align	4, , 16
.LBB62_10:                              # %vector.ph
                                        #   in Loop: Header=BB62_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB62_11:                              # %vector.body
                                        #   Parent Loop BB62_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB62_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB62_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB62_15
.LBB62_13:                              # %.lr.ph34.preheader52
                                        #   in Loop: Header=BB62_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB62_14:                              # %.lr.ph34
                                        #   Parent Loop BB62_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB62_14
.LBB62_15:                              # %._crit_edge
                                        #   in Loop: Header=BB62_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB62_2
# %bb.16:                               #   in Loop: Header=BB62_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB62_2
.LBB62_17:                              # %._crit_edge37
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB62_19
# %bb.18:                               # %._crit_edge37
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB62_21
.LBB62_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB62_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB62_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI62_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI62_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB62_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end62:
	.size	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end62-_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
.LCPI63_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB63_17
# %bb.1:                                # %.preheader27.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -11
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 24
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$ra, $zero, 12
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -189209
	ori	$s1, $a0, 1184
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB63_3
	.p2align	4, , 16
.LBB63_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB63_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB63_17
.LBB63_3:                               # %.preheader27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_5 Depth 2
                                        #     Child Loop BB63_11 Depth 2
                                        #     Child Loop BB63_14 Depth 2
	blt	$s0, $ra, .LBB63_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB63_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB63_5:                               # %.lr.ph
                                        #   Parent Loop BB63_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -24
	ld.w	$a6, $a4, -20
	ld.w	$a7, $a4, -16
	ld.w	$t0, $a4, -12
	ld.w	$t1, $a4, -8
	ld.w	$t2, $a4, -4
	ld.w	$t3, $a4, 0
	ld.w	$t4, $a4, 4
	ld.w	$t5, $a4, 8
	ld.w	$t6, $a4, 12
	ld.w	$t7, $a4, 16
	ld.w	$t8, $a4, 20
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 12
	addi.d	$a2, $a2, 12
	addi.d	$a4, $a4, 48
	blt	$a3, $s6, .LBB63_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB63_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB63_8
	b	.LBB63_15
	.p2align	4, , 16
.LBB63_7:                               #   in Loop: Header=BB63_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB63_15
.LBB63_8:                               # %.lr.ph33.preheader
                                        #   in Loop: Header=BB63_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB63_10
# %bb.9:                                #   in Loop: Header=BB63_3 Depth=1
	move	$a3, $a2
	b	.LBB63_13
	.p2align	4, , 16
.LBB63_10:                              # %vector.ph
                                        #   in Loop: Header=BB63_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB63_11:                              # %vector.body
                                        #   Parent Loop BB63_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB63_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB63_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB63_15
.LBB63_13:                              # %.lr.ph33.preheader51
                                        #   in Loop: Header=BB63_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB63_14:                              # %.lr.ph33
                                        #   Parent Loop BB63_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB63_14
.LBB63_15:                              # %._crit_edge
                                        #   in Loop: Header=BB63_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB63_2
# %bb.16:                               #   in Loop: Header=BB63_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$ra, $zero, 12
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB63_2
.LBB63_17:                              # %._crit_edge36
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB63_19
# %bb.18:                               # %._crit_edge36
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB63_21
.LBB63_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB63_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB63_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI63_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI63_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB63_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end63:
	.size	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end63-_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
.LCPI64_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB64_17
# %bb.1:                                # %.preheader26.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -10
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 20
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t8, $zero, 11
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 88702
	ori	$s1, $a0, 2792
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB64_3
	.p2align	4, , 16
.LBB64_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB64_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB64_17
.LBB64_3:                               # %.preheader26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_5 Depth 2
                                        #     Child Loop BB64_11 Depth 2
                                        #     Child Loop BB64_14 Depth 2
	blt	$s0, $t8, .LBB64_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB64_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB64_5:                               # %.lr.ph
                                        #   Parent Loop BB64_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -20
	ld.w	$a6, $a4, -16
	ld.w	$a7, $a4, -12
	ld.w	$t0, $a4, -8
	ld.w	$t1, $a4, -4
	ld.w	$t2, $a4, 0
	ld.w	$t3, $a4, 4
	ld.w	$t4, $a4, 8
	ld.w	$t5, $a4, 12
	ld.w	$t6, $a4, 16
	ld.w	$t7, $a4, 20
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 11
	addi.d	$a2, $a2, 11
	addi.d	$a4, $a4, 44
	blt	$a3, $s6, .LBB64_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB64_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB64_8
	b	.LBB64_15
	.p2align	4, , 16
.LBB64_7:                               #   in Loop: Header=BB64_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB64_15
.LBB64_8:                               # %.lr.ph32.preheader
                                        #   in Loop: Header=BB64_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB64_10
# %bb.9:                                #   in Loop: Header=BB64_3 Depth=1
	move	$a3, $a2
	b	.LBB64_13
	.p2align	4, , 16
.LBB64_10:                              # %vector.ph
                                        #   in Loop: Header=BB64_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB64_11:                              # %vector.body
                                        #   Parent Loop BB64_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB64_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB64_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB64_15
.LBB64_13:                              # %.lr.ph32.preheader50
                                        #   in Loop: Header=BB64_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB64_14:                              # %.lr.ph32
                                        #   Parent Loop BB64_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB64_14
.LBB64_15:                              # %._crit_edge
                                        #   in Loop: Header=BB64_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB64_2
# %bb.16:                               #   in Loop: Header=BB64_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t8, $zero, 11
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB64_2
.LBB64_17:                              # %._crit_edge35
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB64_19
# %bb.18:                               # %._crit_edge35
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB64_21
.LBB64_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB64_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB64_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI64_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI64_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB64_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end64:
	.size	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end64-_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi9EiE7do_testEPKiPKc,"axG",@progbits,_ZN16while_loop_testsILi9EiE7do_testEPKiPKc,comdat
	.weak	_ZN16while_loop_testsILi9EiE7do_testEPKiPKc # -- Begin function _ZN16while_loop_testsILi9EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi9EiE7do_testEPKiPKc,@function
_ZN16while_loop_testsILi9EiE7do_testEPKiPKc: # @_ZN16while_loop_testsILi9EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end65:
	.size	_ZN16while_loop_testsILi9EiE7do_testEPKiPKc, .Lfunc_end65-_ZN16while_loop_testsILi9EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
.LCPI66_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB66_17
# %bb.1:                                # %.preheader25.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -9
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 20
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t7, $zero, 10
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 366614
	ori	$s1, $a0, 304
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB66_3
	.p2align	4, , 16
.LBB66_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB66_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB66_17
.LBB66_3:                               # %.preheader25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_5 Depth 2
                                        #     Child Loop BB66_11 Depth 2
                                        #     Child Loop BB66_14 Depth 2
	blt	$s0, $t7, .LBB66_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB66_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB66_5:                               # %.lr.ph
                                        #   Parent Loop BB66_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -20
	ld.w	$a6, $a4, -16
	ld.w	$a7, $a4, -12
	ld.w	$t0, $a4, -8
	ld.w	$t1, $a4, -4
	ld.w	$t2, $a4, 0
	ld.w	$t3, $a4, 4
	ld.w	$t4, $a4, 8
	ld.w	$t5, $a4, 12
	ld.w	$t6, $a4, 16
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 10
	addi.d	$a2, $a2, 10
	addi.d	$a4, $a4, 40
	blt	$a3, $s6, .LBB66_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB66_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB66_8
	b	.LBB66_15
	.p2align	4, , 16
.LBB66_7:                               #   in Loop: Header=BB66_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB66_15
.LBB66_8:                               # %.lr.ph31.preheader
                                        #   in Loop: Header=BB66_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB66_10
# %bb.9:                                #   in Loop: Header=BB66_3 Depth=1
	move	$a3, $a2
	b	.LBB66_13
	.p2align	4, , 16
.LBB66_10:                              # %vector.ph
                                        #   in Loop: Header=BB66_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB66_11:                              # %vector.body
                                        #   Parent Loop BB66_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB66_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB66_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB66_15
.LBB66_13:                              # %.lr.ph31.preheader49
                                        #   in Loop: Header=BB66_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB66_14:                              # %.lr.ph31
                                        #   Parent Loop BB66_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB66_14
.LBB66_15:                              # %._crit_edge
                                        #   in Loop: Header=BB66_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB66_2
# %bb.16:                               #   in Loop: Header=BB66_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t7, $zero, 10
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB66_2
.LBB66_17:                              # %._crit_edge34
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB66_19
# %bb.18:                               # %._crit_edge34
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB66_21
.LBB66_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB66_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB66_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI66_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI66_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB66_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end66:
	.size	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end66-_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
.LCPI67_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB67_17
# %bb.1:                                # %.preheader24.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -8
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 16
	ori	$t6, $zero, 9
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -404051
	ori	$s1, $a0, 1912
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$fp, $a0, 1536
	b	.LBB67_3
	.p2align	4, , 16
.LBB67_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB67_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB67_17
.LBB67_3:                               # %.preheader24
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_5 Depth 2
                                        #     Child Loop BB67_11 Depth 2
                                        #     Child Loop BB67_14 Depth 2
	blt	$s0, $t6, .LBB67_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB67_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB67_5:                               # %.lr.ph
                                        #   Parent Loop BB67_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -16
	ld.w	$a6, $a4, -12
	ld.w	$a7, $a4, -8
	ld.w	$t0, $a4, -4
	ld.w	$t1, $a4, 0
	ld.w	$t2, $a4, 4
	ld.w	$t3, $a4, 8
	ld.w	$t4, $a4, 12
	ld.w	$t5, $a4, 16
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 9
	addi.d	$a2, $a2, 9
	addi.d	$a4, $a4, 36
	blt	$a3, $s6, .LBB67_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB67_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB67_8
	b	.LBB67_15
	.p2align	4, , 16
.LBB67_7:                               #   in Loop: Header=BB67_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB67_15
.LBB67_8:                               # %.lr.ph30.preheader
                                        #   in Loop: Header=BB67_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB67_10
# %bb.9:                                #   in Loop: Header=BB67_3 Depth=1
	move	$a3, $a2
	b	.LBB67_13
	.p2align	4, , 16
.LBB67_10:                              # %vector.ph
                                        #   in Loop: Header=BB67_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	alsl.d	$a0, $a2, $s8, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB67_11:                              # %vector.body
                                        #   Parent Loop BB67_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB67_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB67_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB67_15
.LBB67_13:                              # %.lr.ph30.preheader48
                                        #   in Loop: Header=BB67_3 Depth=1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB67_14:                              # %.lr.ph30
                                        #   Parent Loop BB67_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB67_14
.LBB67_15:                              # %._crit_edge
                                        #   in Loop: Header=BB67_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $fp
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB67_2
# %bb.16:                               #   in Loop: Header=BB67_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t6, $zero, 9
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB67_2
.LBB67_17:                              # %._crit_edge33
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB67_19
# %bb.18:                               # %._crit_edge33
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB67_21
.LBB67_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB67_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB67_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI67_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI67_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB67_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end67:
	.size	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end67-_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
.LCPI68_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB68_17
# %bb.1:                                # %.preheader23.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -7
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 16
	ori	$t5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -126140
	ori	$s1, $a0, 3520
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$fp, $a0, 1536
	b	.LBB68_3
	.p2align	4, , 16
.LBB68_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB68_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB68_17
.LBB68_3:                               # %.preheader23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_5 Depth 2
                                        #     Child Loop BB68_11 Depth 2
                                        #     Child Loop BB68_14 Depth 2
	blt	$s0, $t5, .LBB68_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB68_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB68_5:                               # %.lr.ph
                                        #   Parent Loop BB68_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -16
	ld.w	$a6, $a4, -12
	ld.w	$a7, $a4, -8
	ld.w	$t0, $a4, -4
	ld.w	$t1, $a4, 0
	ld.w	$t2, $a4, 4
	ld.w	$t3, $a4, 8
	ld.w	$t4, $a4, 12
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 8
	addi.d	$a2, $a2, 8
	addi.d	$a4, $a4, 32
	blt	$a3, $s6, .LBB68_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB68_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB68_8
	b	.LBB68_15
	.p2align	4, , 16
.LBB68_7:                               #   in Loop: Header=BB68_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB68_15
.LBB68_8:                               # %.lr.ph29.preheader
                                        #   in Loop: Header=BB68_3 Depth=1
	sub.d	$a4, $s7, $a2
	bgeu	$a4, $t5, .LBB68_10
# %bb.9:                                #   in Loop: Header=BB68_3 Depth=1
	move	$a3, $a2
	b	.LBB68_13
	.p2align	4, , 16
.LBB68_10:                              # %vector.ph
                                        #   in Loop: Header=BB68_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	alsl.d	$a0, $a2, $s8, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB68_11:                              # %vector.body
                                        #   Parent Loop BB68_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB68_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB68_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB68_15
.LBB68_13:                              # %.lr.ph29.preheader47
                                        #   in Loop: Header=BB68_3 Depth=1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB68_14:                              # %.lr.ph29
                                        #   Parent Loop BB68_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB68_14
.LBB68_15:                              # %._crit_edge
                                        #   in Loop: Header=BB68_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $fp
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB68_2
# %bb.16:                               #   in Loop: Header=BB68_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t5, $zero, 8
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB68_2
.LBB68_17:                              # %._crit_edge32
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB68_19
# %bb.18:                               # %._crit_edge32
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB68_21
.LBB68_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB68_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB68_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI68_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI68_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB68_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end68:
	.size	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end68-_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
.LCPI69_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB69_17
# %bb.1:                                # %.preheader22.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -6
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 12
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t4, $zero, 7
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 151772
	ori	$s1, $a0, 1032
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB69_3
	.p2align	4, , 16
.LBB69_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB69_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB69_17
.LBB69_3:                               # %.preheader22
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_5 Depth 2
                                        #     Child Loop BB69_11 Depth 2
                                        #     Child Loop BB69_14 Depth 2
	blt	$s0, $t4, .LBB69_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB69_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB69_5:                               # %.lr.ph
                                        #   Parent Loop BB69_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -12
	ld.w	$a6, $a4, -8
	ld.w	$a7, $a4, -4
	ld.w	$t0, $a4, 0
	ld.w	$t1, $a4, 4
	ld.w	$t2, $a4, 8
	ld.w	$t3, $a4, 12
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 7
	addi.d	$a2, $a2, 7
	addi.d	$a4, $a4, 28
	blt	$a3, $s6, .LBB69_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB69_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB69_8
	b	.LBB69_15
	.p2align	4, , 16
.LBB69_7:                               #   in Loop: Header=BB69_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB69_15
.LBB69_8:                               # %.lr.ph28.preheader
                                        #   in Loop: Header=BB69_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB69_10
# %bb.9:                                #   in Loop: Header=BB69_3 Depth=1
	move	$a3, $a2
	b	.LBB69_13
	.p2align	4, , 16
.LBB69_10:                              # %vector.ph
                                        #   in Loop: Header=BB69_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB69_11:                              # %vector.body
                                        #   Parent Loop BB69_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB69_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB69_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB69_15
.LBB69_13:                              # %.lr.ph28.preheader46
                                        #   in Loop: Header=BB69_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB69_14:                              # %.lr.ph28
                                        #   Parent Loop BB69_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB69_14
.LBB69_15:                              # %._crit_edge
                                        #   in Loop: Header=BB69_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB69_2
# %bb.16:                               #   in Loop: Header=BB69_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t4, $zero, 7
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB69_2
.LBB69_17:                              # %._crit_edge31
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB69_19
# %bb.18:                               # %._crit_edge31
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB69_21
.LBB69_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB69_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB69_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI69_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI69_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB69_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end69:
	.size	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end69-_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
.LCPI70_0:
	.word	1                               # 0x1
	.word	7                               # 0x7
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI70_1:
	.word	0                               # 0x0
	.word	6                               # 0x6
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI70_2:
	.word	0                               # 0x0
	.word	5                               # 0x5
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI70_3:
	.word	4                               # 0x4
	.word	1                               # 0x1
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI70_4:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB70_22
# %bb.1:                                # %.preheader21.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -5
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t2, $zero, 6
	slt	$a0, $t2, $s6
	masknez	$a2, $t2, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 1
	slli.d	$s3, $a0, 1
	ori	$a2, $zero, 12
	mul.d	$a0, $a0, $a2
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 12
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 429683
	ori	$s1, $a0, 2640
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB70_3
	.p2align	4, , 16
.LBB70_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB70_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB70_22
.LBB70_3:                               # %.preheader21
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_8 Depth 2
                                        #     Child Loop BB70_11 Depth 2
                                        #     Child Loop BB70_16 Depth 2
                                        #     Child Loop BB70_19 Depth 2
	blt	$s0, $t2, .LBB70_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB70_3 Depth=1
	ori	$a0, $zero, 7
	bge	$s6, $a0, .LBB70_7
# %bb.5:                                #   in Loop: Header=BB70_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB70_10
	.p2align	4, , 16
.LBB70_6:                               #   in Loop: Header=BB70_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB70_12
	.p2align	4, , 16
.LBB70_7:                               # %vector.body50.preheader
                                        #   in Loop: Header=BB70_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB70_8:                               # %vector.body50
                                        #   Parent Loop BB70_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr1, $a0, -32
	vld	$vr2, $a0, -16
	pcalau12i	$a3, %pc_hi20(.LCPI70_0)
	vld	$vr3, $a3, %pc_lo12(.LCPI70_0)
	pcalau12i	$a3, %pc_hi20(.LCPI70_1)
	vld	$vr4, $a3, %pc_lo12(.LCPI70_1)
	vld	$vr5, $a0, 0
	vshuf.w	$vr3, $vr2, $vr1
	vshuf.w	$vr4, $vr2, $vr1
	vadd.w	$vr3, $vr3, $vr4
	pcalau12i	$a3, %pc_hi20(.LCPI70_2)
	vld	$vr4, $a3, %pc_lo12(.LCPI70_2)
	vreplvei.w	$vr6, $vr1, 2
	vpackev.w	$vr6, $vr5, $vr6
	vadd.w	$vr3, $vr3, $vr6
	vreplvei.w	$vr1, $vr1, 3
	vori.b	$vr6, $vr4, 0
	vshuf.w	$vr6, $vr5, $vr1
	pcalau12i	$a3, %pc_hi20(.LCPI70_3)
	vld	$vr1, $a3, %pc_lo12(.LCPI70_3)
	vadd.w	$vr3, $vr3, $vr6
	vreplvei.w	$vr6, $vr5, 3
	vreplvei.w	$vr5, $vr5, 2
	vshuf.w	$vr1, $vr2, $vr5
	vadd.w	$vr1, $vr3, $vr1
	vreplvei.w	$vr2, $vr2, 1
	vshuf.w	$vr4, $vr6, $vr2
	vadd.w	$vr1, $vr1, $vr4
	vreplgr2vr.w	$vr2, $fp
	vmadd.w	$vr0, $vr1, $vr2
	vreplgr2vr.w	$vr1, $s1
	vadd.w	$vr0, $vr0, $vr1
	addi.d	$a2, $a2, -2
	addi.d	$a0, $a0, 48
	bnez	$a2, .LBB70_8
# %bb.9:                                # %middle.block56
                                        #   in Loop: Header=BB70_3 Depth=1
	vpickve2gr.w	$a0, $vr0, 0
	vpickve2gr.w	$a2, $vr0, 1
	add.d	$a0, $a2, $a0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB70_12
.LBB70_10:                              # %.lr.ph.preheader62
                                        #   in Loop: Header=BB70_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB70_11:                              # %.lr.ph
                                        #   Parent Loop BB70_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -12
	ld.w	$a5, $a3, -8
	ld.w	$a6, $a3, -4
	ld.w	$a7, $a3, 0
	ld.w	$t0, $a3, 4
	ld.w	$t1, $a3, 8
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $t1
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 6
	addi.d	$a3, $a3, 24
	blt	$a2, $s6, .LBB70_11
.LBB70_12:                              # %.preheader
                                        #   in Loop: Header=BB70_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB70_20
# %bb.13:                               # %.lr.ph27.preheader
                                        #   in Loop: Header=BB70_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB70_15
# %bb.14:                               #   in Loop: Header=BB70_3 Depth=1
	move	$a3, $a2
	b	.LBB70_18
	.p2align	4, , 16
.LBB70_15:                              # %vector.ph
                                        #   in Loop: Header=BB70_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB70_16:                              # %vector.body
                                        #   Parent Loop BB70_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB70_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB70_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB70_20
.LBB70_18:                              # %.lr.ph27.preheader61
                                        #   in Loop: Header=BB70_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB70_19:                              # %.lr.ph27
                                        #   Parent Loop BB70_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB70_19
.LBB70_20:                              # %._crit_edge
                                        #   in Loop: Header=BB70_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB70_2
# %bb.21:                               #   in Loop: Header=BB70_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 6
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB70_2
.LBB70_22:                              # %._crit_edge30
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB70_24
# %bb.23:                               # %._crit_edge30
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB70_26
.LBB70_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB70_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB70_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI70_4)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI70_4)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB70_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end70:
	.size	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end70-_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
.LCPI71_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB71_22
# %bb.1:                                # %.preheader20.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -4
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t7, $zero, 5
	slt	$a0, $t7, $s6
	masknez	$a2, $t7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -209716
	ori	$a2, $a2, 3277
	lu32i.d	$a2, -209716
	lu52i.d	$a2, $a2, -820
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 1
	slli.d	$s3, $a0, 1
	slli.d	$a2, $a0, 3
	alsl.d	$a0, $a0, $a2, 1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 20
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 88                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -340981
	ori	$fp, $a0, 152
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB71_3
	.p2align	4, , 16
.LBB71_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB71_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB71_22
.LBB71_3:                               # %.preheader20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_8 Depth 2
                                        #     Child Loop BB71_11 Depth 2
                                        #     Child Loop BB71_16 Depth 2
                                        #     Child Loop BB71_19 Depth 2
	blt	$s0, $t7, .LBB71_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB71_3 Depth=1
	ori	$a0, $zero, 6
	bge	$s6, $a0, .LBB71_7
# %bb.5:                                #   in Loop: Header=BB71_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB71_10
	.p2align	4, , 16
.LBB71_6:                               #   in Loop: Header=BB71_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB71_12
	.p2align	4, , 16
.LBB71_7:                               # %vector.body49.preheader
                                        #   in Loop: Header=BB71_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	move	$a4, $s3
	.p2align	4, , 16
.LBB71_8:                               # %vector.body49
                                        #   Parent Loop BB71_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a3, -20
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, -16
	ld.w	$t0, $a3, 4
	ld.w	$t1, $a3, -12
	ld.w	$t2, $a3, 8
	ld.w	$t3, $a3, -8
	ld.w	$t4, $a3, 12
	ld.w	$t5, $a3, -4
	ld.w	$t6, $a3, 16
	add.d	$a5, $a7, $a5
	add.d	$a6, $t0, $a6
	add.d	$a5, $a5, $t1
	add.d	$a6, $a6, $t2
	add.d	$a5, $a5, $t3
	add.d	$a6, $a6, $t4
	add.d	$a5, $a5, $t5
	add.d	$a6, $a6, $t6
	mul.d	$a5, $a5, $s1
	mul.d	$a6, $a6, $s1
	add.d	$a0, $a0, $a5
	add.d	$a2, $a2, $a6
	add.d	$a0, $a0, $fp
	add.d	$a2, $a2, $fp
	addi.d	$a4, $a4, -2
	addi.d	$a3, $a3, 40
	bnez	$a4, .LBB71_8
# %bb.9:                                # %middle.block55
                                        #   in Loop: Header=BB71_3 Depth=1
	add.d	$a0, $a2, $a0
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 80                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB71_12
.LBB71_10:                              # %.lr.ph.preheader61
                                        #   in Loop: Header=BB71_3 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB71_11:                              # %.lr.ph
                                        #   Parent Loop BB71_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $fp
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 20
	blt	$a2, $s6, .LBB71_11
.LBB71_12:                              # %.preheader
                                        #   in Loop: Header=BB71_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB71_20
# %bb.13:                               # %.lr.ph26.preheader
                                        #   in Loop: Header=BB71_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB71_15
# %bb.14:                               #   in Loop: Header=BB71_3 Depth=1
	move	$a3, $a2
	b	.LBB71_18
	.p2align	4, , 16
.LBB71_15:                              # %vector.ph
                                        #   in Loop: Header=BB71_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB71_16:                              # %vector.body
                                        #   Parent Loop BB71_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB71_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB71_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB71_20
.LBB71_18:                              # %.lr.ph26.preheader60
                                        #   in Loop: Header=BB71_3 Depth=1
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB71_19:                              # %.lr.ph26
                                        #   Parent Loop BB71_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB71_19
.LBB71_20:                              # %._crit_edge
                                        #   in Loop: Header=BB71_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB71_2
# %bb.21:                               #   in Loop: Header=BB71_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t7, $zero, 5
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB71_2
.LBB71_22:                              # %._crit_edge29
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB71_24
# %bb.23:                               # %._crit_edge29
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB71_26
.LBB71_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB71_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB71_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI71_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI71_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB71_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end71:
	.size	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end71-_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
.LCPI72_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB72_22
# %bb.1:                                # %.preheader19.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -3
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t0, $zero, 4
	slt	$a0, $t0, $s6
	masknez	$a2, $t0, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a0, $a0, 5
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 64
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -63070
	ori	$s1, $a0, 1760
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB72_3
	.p2align	4, , 16
.LBB72_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB72_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB72_22
.LBB72_3:                               # %.preheader19
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_8 Depth 2
                                        #     Child Loop BB72_11 Depth 2
                                        #     Child Loop BB72_16 Depth 2
                                        #     Child Loop BB72_19 Depth 2
	blt	$s0, $t0, .LBB72_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB72_3 Depth=1
	ori	$a0, $zero, 29
	bge	$s6, $a0, .LBB72_7
# %bb.5:                                #   in Loop: Header=BB72_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB72_10
	.p2align	4, , 16
.LBB72_6:                               #   in Loop: Header=BB72_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB72_12
	.p2align	4, , 16
.LBB72_7:                               # %vector.body48.preheader
                                        #   in Loop: Header=BB72_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB72_8:                               # %vector.body48
                                        #   Parent Loop BB72_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 48
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -60
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 36
	ld.w	$a6, $a0, 52
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -56
	ld.w	$a4, $a0, -40
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 56
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -52
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 128
	bnez	$a2, .LBB72_8
# %bb.9:                                # %middle.block54
                                        #   in Loop: Header=BB72_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB72_12
.LBB72_10:                              # %.lr.ph.preheader60
                                        #   in Loop: Header=BB72_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB72_11:                              # %.lr.ph
                                        #   Parent Loop BB72_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, 4
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 16
	blt	$a2, $s6, .LBB72_11
.LBB72_12:                              # %.preheader
                                        #   in Loop: Header=BB72_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB72_20
# %bb.13:                               # %.lr.ph25.preheader
                                        #   in Loop: Header=BB72_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB72_15
# %bb.14:                               #   in Loop: Header=BB72_3 Depth=1
	move	$a3, $a2
	b	.LBB72_18
	.p2align	4, , 16
.LBB72_15:                              # %vector.ph
                                        #   in Loop: Header=BB72_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB72_16:                              # %vector.body
                                        #   Parent Loop BB72_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB72_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB72_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB72_20
.LBB72_18:                              # %.lr.ph25.preheader59
                                        #   in Loop: Header=BB72_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB72_19:                              # %.lr.ph25
                                        #   Parent Loop BB72_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB72_19
.LBB72_20:                              # %._crit_edge
                                        #   in Loop: Header=BB72_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB72_2
# %bb.21:                               #   in Loop: Header=BB72_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t0, $zero, 4
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB72_2
.LBB72_22:                              # %._crit_edge28
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB72_24
# %bb.23:                               # %._crit_edge28
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB72_26
.LBB72_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB72_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB72_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI72_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI72_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB72_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end72:
	.size	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end72-_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
.LCPI73_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB73_22
# %bb.1:                                # %.preheader18.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -2
	bstrpick.d	$s7, $s0, 31, 0
	ori	$a7, $zero, 3
	slt	$a0, $a7, $s6
	masknez	$a2, $a7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 1
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a2, $a0, 4
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 48
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 214841
	ori	$s1, $a0, 3368
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB73_3
	.p2align	4, , 16
.LBB73_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB73_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB73_22
.LBB73_3:                               # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_8 Depth 2
                                        #     Child Loop BB73_11 Depth 2
                                        #     Child Loop BB73_16 Depth 2
                                        #     Child Loop BB73_19 Depth 2
	blt	$s0, $a7, .LBB73_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB73_3 Depth=1
	ori	$a0, $zero, 22
	bge	$s6, $a0, .LBB73_7
# %bb.5:                                #   in Loop: Header=BB73_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB73_10
	.p2align	4, , 16
.LBB73_6:                               #   in Loop: Header=BB73_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB73_12
	.p2align	4, , 16
.LBB73_7:                               # %vector.body47.preheader
                                        #   in Loop: Header=BB73_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB73_8:                               # %vector.body47
                                        #   Parent Loop BB73_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -48
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 24
	ld.w	$a6, $a0, 36
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -44
	ld.w	$a4, $a0, -32
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 28
	ld.w	$a6, $a0, 40
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -40
	ld.w	$a4, $a0, -28
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 44
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 96
	bnez	$a2, .LBB73_8
# %bb.9:                                # %middle.block53
                                        #   in Loop: Header=BB73_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB73_12
.LBB73_10:                              # %.lr.ph.preheader59
                                        #   in Loop: Header=BB73_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB73_11:                              # %.lr.ph
                                        #   Parent Loop BB73_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 12
	blt	$a2, $s6, .LBB73_11
.LBB73_12:                              # %.preheader
                                        #   in Loop: Header=BB73_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB73_20
# %bb.13:                               # %.lr.ph24.preheader
                                        #   in Loop: Header=BB73_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB73_15
# %bb.14:                               #   in Loop: Header=BB73_3 Depth=1
	move	$a3, $a2
	b	.LBB73_18
	.p2align	4, , 16
.LBB73_15:                              # %vector.ph
                                        #   in Loop: Header=BB73_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB73_16:                              # %vector.body
                                        #   Parent Loop BB73_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB73_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB73_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB73_20
.LBB73_18:                              # %.lr.ph24.preheader58
                                        #   in Loop: Header=BB73_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB73_19:                              # %.lr.ph24
                                        #   Parent Loop BB73_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB73_19
.LBB73_20:                              # %._crit_edge
                                        #   in Loop: Header=BB73_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB73_2
# %bb.21:                               #   in Loop: Header=BB73_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 3
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB73_2
.LBB73_22:                              # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB73_24
# %bb.23:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB73_26
.LBB73_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB73_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB73_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI73_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI73_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB73_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end73:
	.size	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end73-_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
.LCPI74_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB74_22
# %bb.1:                                # %.preheader17.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -1
	bstrpick.d	$s7, $s0, 31, 0
	ori	$a7, $zero, 2
	slt	$a0, $a7, $s6
	masknez	$a2, $a7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	srli.d	$a0, $a0, 1
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a0, $a0, 4
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 4
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 492753
	ori	$s1, $a0, 880
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB74_3
	.p2align	4, , 16
.LBB74_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB74_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB74_22
.LBB74_3:                               # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_8 Depth 2
                                        #     Child Loop BB74_11 Depth 2
                                        #     Child Loop BB74_16 Depth 2
                                        #     Child Loop BB74_19 Depth 2
	blt	$s0, $a7, .LBB74_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB74_3 Depth=1
	ori	$a0, $zero, 15
	bge	$s6, $a0, .LBB74_7
# %bb.5:                                #   in Loop: Header=BB74_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB74_10
	.p2align	4, , 16
.LBB74_6:                               #   in Loop: Header=BB74_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB74_12
	.p2align	4, , 16
.LBB74_7:                               # %vector.body46.preheader
                                        #   in Loop: Header=BB74_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB74_8:                               # %vector.body46
                                        #   Parent Loop BB74_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -32
	ld.w	$a4, $a0, -24
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 8
	ld.w	$a5, $a0, 16
	ld.w	$a6, $a0, 24
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -28
	ld.w	$a4, $a0, -20
	ld.w	$a5, $a0, -12
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 20
	ld.w	$a6, $a0, 28
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 64
	bnez	$a2, .LBB74_8
# %bb.9:                                # %middle.block52
                                        #   in Loop: Header=BB74_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB74_12
.LBB74_10:                              # %.lr.ph.preheader58
                                        #   in Loop: Header=BB74_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB74_11:                              # %.lr.ph
                                        #   Parent Loop BB74_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -4
	ld.w	$a5, $a3, 0
	add.d	$a4, $a5, $a4
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 8
	blt	$a2, $s6, .LBB74_11
.LBB74_12:                              # %.preheader
                                        #   in Loop: Header=BB74_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB74_20
# %bb.13:                               # %.lr.ph23.preheader
                                        #   in Loop: Header=BB74_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB74_15
# %bb.14:                               #   in Loop: Header=BB74_3 Depth=1
	move	$a3, $a2
	b	.LBB74_18
	.p2align	4, , 16
.LBB74_15:                              # %vector.ph
                                        #   in Loop: Header=BB74_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB74_16:                              # %vector.body
                                        #   Parent Loop BB74_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB74_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB74_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB74_20
.LBB74_18:                              # %.lr.ph23.preheader57
                                        #   in Loop: Header=BB74_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB74_19:                              # %.lr.ph23
                                        #   Parent Loop BB74_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB74_19
.LBB74_20:                              # %._crit_edge
                                        #   in Loop: Header=BB74_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB74_2
# %bb.21:                               #   in Loop: Header=BB74_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 2
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB74_2
.LBB74_22:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB74_24
# %bb.23:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB74_26
.LBB74_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB74_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB74_26:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI74_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI74_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB74_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end74:
	.size	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end74-_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
.LCPI75_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB75_14
# %bb.1:                                # %.preheader17.lr.ph
	move	$s5, $zero
	bstrpick.d	$s6, $s0, 31, 0
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$fp, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s3
	vreplgr2vr.w	$vr5, $fp
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s1, $a0, 1536
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB75_3
	.p2align	4, , 16
.LBB75_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB75_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB75_14
.LBB75_3:                               # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_8 Depth 2
                                        #     Child Loop BB75_11 Depth 2
	blez	$s0, .LBB75_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB75_3 Depth=1
	ori	$a0, $zero, 8
	bgeu	$s0, $a0, .LBB75_7
# %bb.5:                                #   in Loop: Header=BB75_3 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB75_10
	.p2align	4, , 16
.LBB75_6:                               #   in Loop: Header=BB75_3 Depth=1
	move	$a0, $zero
	b	.LBB75_12
	.p2align	4, , 16
.LBB75_7:                               # %vector.body.preheader
                                        #   in Loop: Header=BB75_3 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB75_8:                               # %vector.body
                                        #   Parent Loop BB75_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB75_8
# %bb.9:                                # %middle.block
                                        #   in Loop: Header=BB75_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s6, .LBB75_12
.LBB75_10:                              # %.lr.ph.preheader41
                                        #   in Loop: Header=BB75_3 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s6, $a3
	.p2align	4, , 16
.LBB75_11:                              # %.lr.ph
                                        #   Parent Loop BB75_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $fp
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB75_11
.LBB75_12:                              # %._crit_edge
                                        #   in Loop: Header=BB75_3 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s1
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB75_2
# %bb.13:                               #   in Loop: Header=BB75_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB75_2
.LBB75_14:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB75_16
# %bb.15:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB75_18
.LBB75_16:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB75_19
# %bb.17:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB75_18:                              # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI75_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI75_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB75_19:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end75:
	.size	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end75-_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
.LCPI76_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB76_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -31
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 64
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t1, $zero, 32
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -504557
	ori	$s1, $a0, 1792
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB76_3
	.p2align	4, , 16
.LBB76_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB76_3 Depth=1
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB76_17
.LBB76_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_5 Depth 2
                                        #     Child Loop BB76_11 Depth 2
                                        #     Child Loop BB76_14 Depth 2
	blt	$s0, $t1, .LBB76_7
# %bb.4:                                # %.preheader54.preheader
                                        #   in Loop: Header=BB76_3 Depth=1
	move	$a1, $zero
	move	$a2, $zero
	move	$a0, $zero
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB76_5:                               # %.preheader54
                                        #   Parent Loop BB76_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -64
	ld.w	$a5, $a3, -60
	ld.w	$a6, $a3, -56
	ld.w	$a7, $a3, -52
	ld.w	$t0, $a3, -48
	add.d	$a4, $a5, $a4
	ld.w	$a5, $a3, -44
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -40
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -36
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -32
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -28
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -24
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -20
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -16
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -12
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -8
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -4
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 0
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 4
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 8
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 12
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 16
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 20
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 24
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 28
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 32
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 36
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 40
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 44
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 48
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 52
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 56
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 60
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $a5
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 32
	addi.d	$a1, $a1, 32
	addi.d	$a3, $a3, 128
	blt	$a2, $s6, .LBB76_5
# %bb.6:                                # %.loopexit55
                                        #   in Loop: Header=BB76_3 Depth=1
	addi.w	$a2, $a1, 0
	blt	$a2, $s0, .LBB76_8
	b	.LBB76_15
	.p2align	4, , 16
.LBB76_7:                               #   in Loop: Header=BB76_3 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	addi.w	$a2, $a1, 0
	bge	$a2, $s0, .LBB76_15
.LBB76_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB76_3 Depth=1
	sub.d	$a3, $s7, $a1
	ori	$a2, $zero, 8
	bgeu	$a3, $a2, .LBB76_10
# %bb.9:                                #   in Loop: Header=BB76_3 Depth=1
	move	$a2, $a1
	b	.LBB76_13
	.p2align	4, , 16
.LBB76_10:                              # %vector.ph
                                        #   in Loop: Header=BB76_3 Depth=1
	move	$a4, $a3
	bstrins.d	$a4, $zero, 2, 0
	add.d	$a2, $a4, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a1, $a0, 2
	move	$a1, $a4
	.p2align	4, , 16
.LBB76_11:                              # %vector.body
                                        #   Parent Loop BB76_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a1, $a1, -8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB76_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB76_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a3, $a4, .LBB76_15
.LBB76_13:                              # %.preheader.preheader70
                                        #   in Loop: Header=BB76_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a2, $a1, 2
	sub.d	$a2, $s7, $a2
	.p2align	4, , 16
.LBB76_14:                              # %.preheader
                                        #   Parent Loop BB76_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.d	$a0, $a0, $s2
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB76_14
.LBB76_15:                              # %.loopexit
                                        #   in Loop: Header=BB76_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB76_2
# %bb.16:                               #   in Loop: Header=BB76_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t1, $zero, 32
	b	.LBB76_2
.LBB76_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB76_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB76_21
.LBB76_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB76_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB76_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI76_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI76_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB76_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end76:
	.size	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end76-_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
.LCPI77_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB77_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -30
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 60
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t1, $zero, 31
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -226646
	ori	$s1, $a0, 3400
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB77_3
	.p2align	4, , 16
.LBB77_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB77_3 Depth=1
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB77_17
.LBB77_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_5 Depth 2
                                        #     Child Loop BB77_11 Depth 2
                                        #     Child Loop BB77_14 Depth 2
	blt	$s0, $t1, .LBB77_7
# %bb.4:                                # %.preheader53.preheader
                                        #   in Loop: Header=BB77_3 Depth=1
	move	$a1, $zero
	move	$a2, $zero
	move	$a0, $zero
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB77_5:                               # %.preheader53
                                        #   Parent Loop BB77_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -60
	ld.w	$a5, $a3, -56
	ld.w	$a6, $a3, -52
	ld.w	$a7, $a3, -48
	ld.w	$t0, $a3, -44
	add.d	$a4, $a5, $a4
	ld.w	$a5, $a3, -40
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -36
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -32
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -28
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -24
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -20
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -16
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -12
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -8
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -4
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 0
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 4
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 8
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 12
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 16
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 20
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 24
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 28
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 32
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 36
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 40
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 44
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 48
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 52
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 56
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 60
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $a5
	add.d	$a4, $a4, $a6
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 31
	addi.d	$a1, $a1, 31
	addi.d	$a3, $a3, 124
	blt	$a2, $s6, .LBB77_5
# %bb.6:                                # %.loopexit54
                                        #   in Loop: Header=BB77_3 Depth=1
	addi.w	$a2, $a1, 0
	blt	$a2, $s0, .LBB77_8
	b	.LBB77_15
	.p2align	4, , 16
.LBB77_7:                               #   in Loop: Header=BB77_3 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	addi.w	$a2, $a1, 0
	bge	$a2, $s0, .LBB77_15
.LBB77_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB77_3 Depth=1
	sub.d	$a3, $s7, $a1
	ori	$a2, $zero, 8
	bgeu	$a3, $a2, .LBB77_10
# %bb.9:                                #   in Loop: Header=BB77_3 Depth=1
	move	$a2, $a1
	b	.LBB77_13
	.p2align	4, , 16
.LBB77_10:                              # %vector.ph
                                        #   in Loop: Header=BB77_3 Depth=1
	move	$a4, $a3
	bstrins.d	$a4, $zero, 2, 0
	add.d	$a2, $a4, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a1, $a0, 2
	move	$a1, $a4
	.p2align	4, , 16
.LBB77_11:                              # %vector.body
                                        #   Parent Loop BB77_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a1, $a1, -8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB77_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB77_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a3, $a4, .LBB77_15
.LBB77_13:                              # %.preheader.preheader69
                                        #   in Loop: Header=BB77_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a2, $a1, 2
	sub.d	$a2, $s7, $a2
	.p2align	4, , 16
.LBB77_14:                              # %.preheader
                                        #   Parent Loop BB77_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.d	$a0, $a0, $s2
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB77_14
.LBB77_15:                              # %.loopexit
                                        #   in Loop: Header=BB77_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB77_2
# %bb.16:                               #   in Loop: Header=BB77_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t1, $zero, 31
	b	.LBB77_2
.LBB77_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB77_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB77_21
.LBB77_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB77_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB77_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI77_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI77_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB77_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end77:
	.size	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end77-_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
.LCPI78_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB78_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -29
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 60
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 30
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 51266
	ori	$s1, $a0, 912
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB78_3
	.p2align	4, , 16
.LBB78_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB78_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB78_17
.LBB78_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_5 Depth 2
                                        #     Child Loop BB78_11 Depth 2
                                        #     Child Loop BB78_14 Depth 2
	blt	$s0, $t2, .LBB78_7
# %bb.4:                                # %.preheader52.preheader
                                        #   in Loop: Header=BB78_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB78_5:                               # %.preheader52
                                        #   Parent Loop BB78_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -60
	ld.w	$a6, $a4, -56
	ld.w	$a7, $a4, -52
	ld.w	$t0, $a4, -48
	ld.w	$t1, $a4, -44
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 52
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 56
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 30
	addi.d	$a2, $a2, 30
	addi.d	$a4, $a4, 120
	blt	$a3, $s6, .LBB78_5
# %bb.6:                                # %.loopexit53
                                        #   in Loop: Header=BB78_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB78_8
	b	.LBB78_15
	.p2align	4, , 16
.LBB78_7:                               #   in Loop: Header=BB78_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB78_15
.LBB78_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB78_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB78_10
# %bb.9:                                #   in Loop: Header=BB78_3 Depth=1
	move	$a3, $a2
	b	.LBB78_13
	.p2align	4, , 16
.LBB78_10:                              # %vector.ph
                                        #   in Loop: Header=BB78_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB78_11:                              # %vector.body
                                        #   Parent Loop BB78_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB78_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB78_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB78_15
.LBB78_13:                              # %.preheader.preheader70
                                        #   in Loop: Header=BB78_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB78_14:                              # %.preheader
                                        #   Parent Loop BB78_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB78_14
.LBB78_15:                              # %.loopexit
                                        #   in Loop: Header=BB78_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB78_2
# %bb.16:                               #   in Loop: Header=BB78_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 30
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB78_2
.LBB78_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB78_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB78_21
.LBB78_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB78_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB78_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI78_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI78_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB78_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end78:
	.size	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end78-_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
.LCPI79_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB79_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -28
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 56
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 29
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 329177
	ori	$s1, $a0, 2520
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB79_3
	.p2align	4, , 16
.LBB79_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB79_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB79_17
.LBB79_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_5 Depth 2
                                        #     Child Loop BB79_11 Depth 2
                                        #     Child Loop BB79_14 Depth 2
	blt	$s0, $t2, .LBB79_7
# %bb.4:                                # %.preheader51.preheader
                                        #   in Loop: Header=BB79_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB79_5:                               # %.preheader51
                                        #   Parent Loop BB79_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -56
	ld.w	$a6, $a4, -52
	ld.w	$a7, $a4, -48
	ld.w	$t0, $a4, -44
	ld.w	$t1, $a4, -40
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 0
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 40
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 44
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 48
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 52
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 56
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 29
	addi.d	$a2, $a2, 29
	addi.d	$a4, $a4, 116
	blt	$a3, $s6, .LBB79_5
# %bb.6:                                # %.loopexit52
                                        #   in Loop: Header=BB79_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB79_8
	b	.LBB79_15
	.p2align	4, , 16
.LBB79_7:                               #   in Loop: Header=BB79_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB79_15
.LBB79_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB79_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB79_10
# %bb.9:                                #   in Loop: Header=BB79_3 Depth=1
	move	$a3, $a2
	b	.LBB79_13
	.p2align	4, , 16
.LBB79_10:                              # %vector.ph
                                        #   in Loop: Header=BB79_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB79_11:                              # %vector.body
                                        #   Parent Loop BB79_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB79_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB79_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB79_15
.LBB79_13:                              # %.preheader.preheader69
                                        #   in Loop: Header=BB79_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB79_14:                              # %.preheader
                                        #   Parent Loop BB79_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB79_14
.LBB79_15:                              # %.loopexit
                                        #   in Loop: Header=BB79_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB79_2
# %bb.16:                               #   in Loop: Header=BB79_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 29
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB79_2
.LBB79_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB79_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB79_21
.LBB79_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB79_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB79_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI79_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI79_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB79_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end79:
	.size	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end79-_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
.LCPI80_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB80_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -27
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 56
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 28
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -441487
	ori	$s1, $a0, 32
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB80_3
	.p2align	4, , 16
.LBB80_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB80_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB80_17
.LBB80_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_5 Depth 2
                                        #     Child Loop BB80_11 Depth 2
                                        #     Child Loop BB80_14 Depth 2
	blt	$s0, $t2, .LBB80_7
# %bb.4:                                # %.preheader50.preheader
                                        #   in Loop: Header=BB80_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB80_5:                               # %.preheader50
                                        #   Parent Loop BB80_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -56
	ld.w	$a6, $a4, -52
	ld.w	$a7, $a4, -48
	ld.w	$t0, $a4, -44
	ld.w	$t1, $a4, -40
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 0
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 40
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 44
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 48
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 52
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 28
	addi.d	$a2, $a2, 28
	addi.d	$a4, $a4, 112
	blt	$a3, $s6, .LBB80_5
# %bb.6:                                # %.loopexit51
                                        #   in Loop: Header=BB80_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB80_8
	b	.LBB80_15
	.p2align	4, , 16
.LBB80_7:                               #   in Loop: Header=BB80_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB80_15
.LBB80_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB80_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB80_10
# %bb.9:                                #   in Loop: Header=BB80_3 Depth=1
	move	$a3, $a2
	b	.LBB80_13
	.p2align	4, , 16
.LBB80_10:                              # %vector.ph
                                        #   in Loop: Header=BB80_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB80_11:                              # %vector.body
                                        #   Parent Loop BB80_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB80_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB80_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB80_15
.LBB80_13:                              # %.preheader.preheader68
                                        #   in Loop: Header=BB80_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB80_14:                              # %.preheader
                                        #   Parent Loop BB80_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB80_14
.LBB80_15:                              # %.loopexit
                                        #   in Loop: Header=BB80_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB80_2
# %bb.16:                               #   in Loop: Header=BB80_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 28
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB80_2
.LBB80_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB80_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB80_21
.LBB80_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB80_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB80_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI80_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI80_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB80_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end80:
	.size	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end80-_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
.LCPI81_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB81_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -26
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 52
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 27
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -163576
	ori	$s1, $a0, 1640
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB81_3
	.p2align	4, , 16
.LBB81_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB81_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB81_17
.LBB81_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_5 Depth 2
                                        #     Child Loop BB81_11 Depth 2
                                        #     Child Loop BB81_14 Depth 2
	blt	$s0, $t2, .LBB81_7
# %bb.4:                                # %.preheader49.preheader
                                        #   in Loop: Header=BB81_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB81_5:                               # %.preheader49
                                        #   Parent Loop BB81_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -52
	ld.w	$a6, $a4, -48
	ld.w	$a7, $a4, -44
	ld.w	$t0, $a4, -40
	ld.w	$t1, $a4, -36
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 0
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 40
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 44
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 48
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 52
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 27
	addi.d	$a2, $a2, 27
	addi.d	$a4, $a4, 108
	blt	$a3, $s6, .LBB81_5
# %bb.6:                                # %.loopexit50
                                        #   in Loop: Header=BB81_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB81_8
	b	.LBB81_15
	.p2align	4, , 16
.LBB81_7:                               #   in Loop: Header=BB81_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB81_15
.LBB81_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB81_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB81_10
# %bb.9:                                #   in Loop: Header=BB81_3 Depth=1
	move	$a3, $a2
	b	.LBB81_13
	.p2align	4, , 16
.LBB81_10:                              # %vector.ph
                                        #   in Loop: Header=BB81_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB81_11:                              # %vector.body
                                        #   Parent Loop BB81_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB81_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB81_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB81_15
.LBB81_13:                              # %.preheader.preheader67
                                        #   in Loop: Header=BB81_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB81_14:                              # %.preheader
                                        #   Parent Loop BB81_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB81_14
.LBB81_15:                              # %.loopexit
                                        #   in Loop: Header=BB81_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB81_2
# %bb.16:                               #   in Loop: Header=BB81_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 27
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB81_2
.LBB81_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB81_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB81_21
.LBB81_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB81_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB81_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI81_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI81_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB81_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end81:
	.size	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end81-_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi25EiE7do_testEPKiPKc,"axG",@progbits,_ZN13do_loop_testsILi25EiE7do_testEPKiPKc,comdat
	.weak	_ZN13do_loop_testsILi25EiE7do_testEPKiPKc # -- Begin function _ZN13do_loop_testsILi25EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi25EiE7do_testEPKiPKc,@function
_ZN13do_loop_testsILi25EiE7do_testEPKiPKc: # @_ZN13do_loop_testsILi25EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi17EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1700
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1900
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end82:
	.size	_ZN13do_loop_testsILi25EiE7do_testEPKiPKc, .Lfunc_end82-_ZN13do_loop_testsILi25EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
.LCPI83_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB83_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -25
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 52
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$t2, $zero, 26
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB83_3
	.p2align	4, , 16
.LBB83_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB83_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB83_17
.LBB83_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_5 Depth 2
                                        #     Child Loop BB83_11 Depth 2
                                        #     Child Loop BB83_14 Depth 2
	blt	$s0, $t2, .LBB83_7
# %bb.4:                                # %.preheader48.preheader
                                        #   in Loop: Header=BB83_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB83_5:                               # %.preheader48
                                        #   Parent Loop BB83_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -52
	ld.w	$a6, $a4, -48
	ld.w	$a7, $a4, -44
	ld.w	$t0, $a4, -40
	ld.w	$t1, $a4, -36
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 0
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 40
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 44
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 48
	add.d	$a5, $a5, $a7
	add.w	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	addu16i.d	$a0, $a0, 7146
	addi.w	$a0, $a0, -848
	addi.d	$a3, $a3, 26
	addi.d	$a2, $a2, 26
	addi.d	$a4, $a4, 104
	blt	$a3, $s6, .LBB83_5
# %bb.6:                                # %.loopexit49
                                        #   in Loop: Header=BB83_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB83_8
	b	.LBB83_15
	.p2align	4, , 16
.LBB83_7:                               #   in Loop: Header=BB83_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB83_15
.LBB83_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB83_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB83_10
# %bb.9:                                #   in Loop: Header=BB83_3 Depth=1
	move	$a3, $a2
	b	.LBB83_13
	.p2align	4, , 16
.LBB83_10:                              # %vector.ph
                                        #   in Loop: Header=BB83_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB83_11:                              # %vector.body
                                        #   Parent Loop BB83_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB83_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB83_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB83_15
.LBB83_13:                              # %.preheader.preheader66
                                        #   in Loop: Header=BB83_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB83_14:                              # %.preheader
                                        #   Parent Loop BB83_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB83_14
.LBB83_15:                              # %.loopexit
                                        #   in Loop: Header=BB83_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB83_2
# %bb.16:                               #   in Loop: Header=BB83_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 26
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB83_2
.LBB83_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB83_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB83_21
.LBB83_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB83_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB83_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI83_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI83_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB83_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end83:
	.size	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end83-_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
.LCPI84_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB84_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -24
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 48
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 25
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 392247
	ori	$s1, $a0, 760
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB84_3
	.p2align	4, , 16
.LBB84_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB84_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB84_17
.LBB84_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_5 Depth 2
                                        #     Child Loop BB84_11 Depth 2
                                        #     Child Loop BB84_14 Depth 2
	blt	$s0, $t2, .LBB84_7
# %bb.4:                                # %.preheader47.preheader
                                        #   in Loop: Header=BB84_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB84_5:                               # %.preheader47
                                        #   Parent Loop BB84_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -48
	ld.w	$a6, $a4, -44
	ld.w	$a7, $a4, -40
	ld.w	$t0, $a4, -36
	ld.w	$t1, $a4, -32
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 0
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 32
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 40
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 44
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 48
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 25
	addi.d	$a2, $a2, 25
	addi.d	$a4, $a4, 100
	blt	$a3, $s6, .LBB84_5
# %bb.6:                                # %.loopexit48
                                        #   in Loop: Header=BB84_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB84_8
	b	.LBB84_15
	.p2align	4, , 16
.LBB84_7:                               #   in Loop: Header=BB84_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB84_15
.LBB84_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB84_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB84_10
# %bb.9:                                #   in Loop: Header=BB84_3 Depth=1
	move	$a3, $a2
	b	.LBB84_13
	.p2align	4, , 16
.LBB84_10:                              # %vector.ph
                                        #   in Loop: Header=BB84_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB84_11:                              # %vector.body
                                        #   Parent Loop BB84_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB84_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB84_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB84_15
.LBB84_13:                              # %.preheader.preheader65
                                        #   in Loop: Header=BB84_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB84_14:                              # %.preheader
                                        #   Parent Loop BB84_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB84_14
.LBB84_15:                              # %.loopexit
                                        #   in Loop: Header=BB84_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB84_2
# %bb.16:                               #   in Loop: Header=BB84_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 25
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB84_2
.LBB84_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB84_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB84_21
.LBB84_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB84_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB84_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI84_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI84_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB84_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end84:
	.size	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end84-_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
.LCPI85_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB85_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -23
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 48
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 24
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -378418
	ori	$s1, $a0, 2368
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB85_3
	.p2align	4, , 16
.LBB85_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB85_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB85_17
.LBB85_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_5 Depth 2
                                        #     Child Loop BB85_11 Depth 2
                                        #     Child Loop BB85_14 Depth 2
	blt	$s0, $t2, .LBB85_7
# %bb.4:                                # %.preheader46.preheader
                                        #   in Loop: Header=BB85_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB85_5:                               # %.preheader46
                                        #   Parent Loop BB85_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -48
	ld.w	$a6, $a4, -44
	ld.w	$a7, $a4, -40
	ld.w	$t0, $a4, -36
	ld.w	$t1, $a4, -32
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 0
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 32
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 40
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 44
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 24
	addi.d	$a2, $a2, 24
	addi.d	$a4, $a4, 96
	blt	$a3, $s6, .LBB85_5
# %bb.6:                                # %.loopexit47
                                        #   in Loop: Header=BB85_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB85_8
	b	.LBB85_15
	.p2align	4, , 16
.LBB85_7:                               #   in Loop: Header=BB85_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB85_15
.LBB85_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB85_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB85_10
# %bb.9:                                #   in Loop: Header=BB85_3 Depth=1
	move	$a3, $a2
	b	.LBB85_13
	.p2align	4, , 16
.LBB85_10:                              # %vector.ph
                                        #   in Loop: Header=BB85_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB85_11:                              # %vector.body
                                        #   Parent Loop BB85_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB85_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB85_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB85_15
.LBB85_13:                              # %.preheader.preheader64
                                        #   in Loop: Header=BB85_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB85_14:                              # %.preheader
                                        #   Parent Loop BB85_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB85_14
.LBB85_15:                              # %.loopexit
                                        #   in Loop: Header=BB85_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB85_2
# %bb.16:                               #   in Loop: Header=BB85_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 24
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB85_2
.LBB85_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB85_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB85_21
.LBB85_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB85_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB85_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI85_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI85_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB85_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end85:
	.size	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end85-_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
.LCPI86_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB86_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -22
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 44
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 23
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -100507
	ori	$s1, $a0, 3976
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB86_3
	.p2align	4, , 16
.LBB86_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB86_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB86_17
.LBB86_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_5 Depth 2
                                        #     Child Loop BB86_11 Depth 2
                                        #     Child Loop BB86_14 Depth 2
	blt	$s0, $t2, .LBB86_7
# %bb.4:                                # %.preheader45.preheader
                                        #   in Loop: Header=BB86_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB86_5:                               # %.preheader45
                                        #   Parent Loop BB86_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -44
	ld.w	$a6, $a4, -40
	ld.w	$a7, $a4, -36
	ld.w	$t0, $a4, -32
	ld.w	$t1, $a4, -28
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 23
	addi.d	$a2, $a2, 23
	addi.d	$a4, $a4, 92
	blt	$a3, $s6, .LBB86_5
# %bb.6:                                # %.loopexit46
                                        #   in Loop: Header=BB86_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB86_8
	b	.LBB86_15
	.p2align	4, , 16
.LBB86_7:                               #   in Loop: Header=BB86_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB86_15
.LBB86_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB86_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB86_10
# %bb.9:                                #   in Loop: Header=BB86_3 Depth=1
	move	$a3, $a2
	b	.LBB86_13
	.p2align	4, , 16
.LBB86_10:                              # %vector.ph
                                        #   in Loop: Header=BB86_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB86_11:                              # %vector.body
                                        #   Parent Loop BB86_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB86_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB86_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB86_15
.LBB86_13:                              # %.preheader.preheader63
                                        #   in Loop: Header=BB86_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB86_14:                              # %.preheader
                                        #   Parent Loop BB86_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB86_14
.LBB86_15:                              # %.loopexit
                                        #   in Loop: Header=BB86_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB86_2
# %bb.16:                               #   in Loop: Header=BB86_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 23
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB86_2
.LBB86_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB86_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB86_21
.LBB86_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB86_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB86_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI86_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI86_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB86_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end86:
	.size	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end86-_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
.LCPI87_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB87_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -21
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 44
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 22
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 177405
	ori	$s1, $a0, 1488
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB87_3
	.p2align	4, , 16
.LBB87_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB87_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB87_17
.LBB87_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_5 Depth 2
                                        #     Child Loop BB87_11 Depth 2
                                        #     Child Loop BB87_14 Depth 2
	blt	$s0, $t2, .LBB87_7
# %bb.4:                                # %.preheader44.preheader
                                        #   in Loop: Header=BB87_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB87_5:                               # %.preheader44
                                        #   Parent Loop BB87_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -44
	ld.w	$a6, $a4, -40
	ld.w	$a7, $a4, -36
	ld.w	$t0, $a4, -32
	ld.w	$t1, $a4, -28
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 22
	addi.d	$a2, $a2, 22
	addi.d	$a4, $a4, 88
	blt	$a3, $s6, .LBB87_5
# %bb.6:                                # %.loopexit45
                                        #   in Loop: Header=BB87_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB87_8
	b	.LBB87_15
	.p2align	4, , 16
.LBB87_7:                               #   in Loop: Header=BB87_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB87_15
.LBB87_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB87_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB87_10
# %bb.9:                                #   in Loop: Header=BB87_3 Depth=1
	move	$a3, $a2
	b	.LBB87_13
	.p2align	4, , 16
.LBB87_10:                              # %vector.ph
                                        #   in Loop: Header=BB87_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB87_11:                              # %vector.body
                                        #   Parent Loop BB87_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB87_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB87_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB87_15
.LBB87_13:                              # %.preheader.preheader62
                                        #   in Loop: Header=BB87_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB87_14:                              # %.preheader
                                        #   Parent Loop BB87_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB87_14
.LBB87_15:                              # %.loopexit
                                        #   in Loop: Header=BB87_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB87_2
# %bb.16:                               #   in Loop: Header=BB87_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 22
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB87_2
.LBB87_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB87_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB87_21
.LBB87_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB87_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB87_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI87_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI87_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB87_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end87:
	.size	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end87-_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
.LCPI88_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 88                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	st.d	$a2, $sp, 136                   # 8-byte Folded Spill
	blez	$a2, .LBB88_17
# %bb.1:                                # %.lr.ph
	move	$a1, $zero
	addi.w	$s4, $s0, -20
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 40
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 455316
	ori	$s1, $a0, 3096
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	b	.LBB88_3
	.p2align	4, , 16
.LBB88_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB88_3 Depth=1
	addi.w	$a1, $s3, 1
	ld.d	$a0, $sp, 136                   # 8-byte Folded Reload
	bge	$a1, $a0, .LBB88_17
.LBB88_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_5 Depth 2
                                        #     Child Loop BB88_11 Depth 2
                                        #     Child Loop BB88_14 Depth 2
	st.d	$a1, $sp, 144                   # 8-byte Folded Spill
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB88_6
# %bb.4:                                # %.preheader42.preheader
                                        #   in Loop: Header=BB88_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB88_5:                               # %.preheader42
                                        #   Parent Loop BB88_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -40
	ld.w	$a6, $a4, -36
	ld.w	$a7, $a4, -32
	ld.w	$t0, $a4, -28
	ld.w	$t1, $a4, -24
	ld.w	$t2, $a4, -20
	ld.w	$t3, $a4, -16
	ld.w	$t4, $a4, -12
	ld.w	$t5, $a4, -8
	ld.w	$t6, $a4, -4
	ld.w	$t7, $a4, 0
	ld.w	$t8, $a4, 4
	ld.w	$ra, $a4, 8
	ld.w	$s8, $a4, 12
	ld.w	$s7, $a4, 16
	ld.w	$s3, $a4, 20
	move	$s2, $s1
	move	$s1, $s4
	ld.w	$s4, $a4, 24
	ld.w	$a1, $a4, 28
	ld.w	$s0, $a4, 32
	ld.w	$s5, $a4, 36
	ld.w	$s6, $a4, 40
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	move	$s4, $s1
	move	$s1, $s2
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	add.d	$a1, $a1, $s6
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, 21
	addi.d	$a2, $a2, 21
	addi.d	$a4, $a4, 84
	blt	$a3, $s4, .LBB88_5
	b	.LBB88_7
	.p2align	4, , 16
.LBB88_6:                               #   in Loop: Header=BB88_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB88_7:                               # %.loopexit43
                                        #   in Loop: Header=BB88_3 Depth=1
	addi.w	$a1, $a2, 0
	ld.d	$s0, $sp, 128                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB88_15
# %bb.8:                                # %.preheader.preheader
                                        #   in Loop: Header=BB88_3 Depth=1
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	bgeu	$a4, $a1, .LBB88_10
# %bb.9:                                #   in Loop: Header=BB88_3 Depth=1
	move	$a3, $a2
	b	.LBB88_13
	.p2align	4, , 16
.LBB88_10:                              # %vector.ph
                                        #   in Loop: Header=BB88_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB88_11:                              # %vector.body
                                        #   Parent Loop BB88_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB88_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB88_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB88_15
.LBB88_13:                              # %.preheader.preheader60
                                        #   in Loop: Header=BB88_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB88_14:                              # %.preheader
                                        #   Parent Loop BB88_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB88_14
.LBB88_15:                              # %.loopexit
                                        #   in Loop: Header=BB88_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 120                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	beq	$a0, $a1, .LBB88_2
# %bb.16:                               #   in Loop: Header=BB88_3 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 136                   # 8-byte Folded Spill
	b	.LBB88_2
.LBB88_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB88_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $a4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB88_21
.LBB88_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB88_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a4, %pc_lo12(current_test)
.LBB88_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI88_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI88_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $a4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB88_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end88:
	.size	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end88-_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
.LCPI89_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 120                   # 8-byte Folded Spill
	blez	$a2, .LBB89_17
# %bb.1:                                # %.lr.ph
	move	$a1, $zero
	addi.w	$s6, $s0, -19
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 40
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -315348
	ori	$s1, $a0, 608
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 112                   # 8-byte Folded Spill
	b	.LBB89_3
	.p2align	4, , 16
.LBB89_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB89_3 Depth=1
	addi.w	$a1, $s3, 1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	bge	$a1, $a0, .LBB89_17
.LBB89_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_5 Depth 2
                                        #     Child Loop BB89_11 Depth 2
                                        #     Child Loop BB89_14 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB89_6
# %bb.4:                                # %.preheader41.preheader
                                        #   in Loop: Header=BB89_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB89_5:                               # %.preheader41
                                        #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -40
	ld.w	$a6, $a4, -36
	ld.w	$a7, $a4, -32
	ld.w	$t0, $a4, -28
	ld.w	$t1, $a4, -24
	ld.w	$t2, $a4, -20
	ld.w	$t3, $a4, -16
	ld.w	$t4, $a4, -12
	ld.w	$t5, $a4, -8
	ld.w	$t6, $a4, -4
	ld.w	$t7, $a4, 0
	ld.w	$t8, $a4, 4
	ld.w	$ra, $a4, 8
	ld.w	$s8, $a4, 12
	ld.w	$s7, $a4, 16
	ld.w	$s3, $a4, 20
	ld.w	$s4, $a4, 24
	ld.w	$a1, $a4, 28
	ld.w	$s0, $a4, 32
	ld.w	$s5, $a4, 36
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 20
	addi.d	$a2, $a2, 20
	addi.d	$a4, $a4, 80
	blt	$a3, $s6, .LBB89_5
	b	.LBB89_7
	.p2align	4, , 16
.LBB89_6:                               #   in Loop: Header=BB89_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB89_7:                               # %.loopexit42
                                        #   in Loop: Header=BB89_3 Depth=1
	addi.w	$a1, $a2, 0
	ld.d	$s0, $sp, 112                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB89_15
# %bb.8:                                # %.preheader.preheader
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB89_10
# %bb.9:                                #   in Loop: Header=BB89_3 Depth=1
	move	$a3, $a2
	b	.LBB89_13
	.p2align	4, , 16
.LBB89_10:                              # %vector.ph
                                        #   in Loop: Header=BB89_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB89_11:                              # %vector.body
                                        #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB89_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB89_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB89_15
.LBB89_13:                              # %.preheader.preheader59
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB89_14:                              # %.preheader
                                        #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB89_14
.LBB89_15:                              # %.loopexit
                                        #   in Loop: Header=BB89_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	beq	$a0, $a1, .LBB89_2
# %bb.16:                               #   in Loop: Header=BB89_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	b	.LBB89_2
.LBB89_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB89_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB89_21
.LBB89_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB89_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB89_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI89_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI89_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB89_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end89:
	.size	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end89-_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
.LCPI90_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	st.d	$a2, $sp, 128                   # 8-byte Folded Spill
	blez	$a2, .LBB90_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -18
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 36
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -37437
	ori	$s1, $a0, 2216
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	b	.LBB90_3
	.p2align	4, , 16
.LBB90_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB90_3 Depth=1
	addi.w	$s5, $s5, 1
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	bge	$s5, $a0, .LBB90_17
.LBB90_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_5 Depth 2
                                        #     Child Loop BB90_11 Depth 2
                                        #     Child Loop BB90_14 Depth 2
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB90_6
# %bb.4:                                # %.preheader40.preheader
                                        #   in Loop: Header=BB90_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB90_5:                               # %.preheader40
                                        #   Parent Loop BB90_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -36
	ld.w	$a6, $a4, -32
	ld.w	$a7, $a4, -28
	ld.w	$t0, $a4, -24
	ld.w	$t1, $a4, -20
	ld.w	$t2, $a4, -16
	ld.w	$t3, $a4, -12
	ld.w	$t4, $a4, -8
	ld.w	$t5, $a4, -4
	ld.w	$t6, $a4, 0
	ld.w	$t7, $a4, 4
	ld.w	$t8, $a4, 8
	ld.w	$ra, $a4, 12
	ld.w	$s8, $a4, 16
	ld.w	$s7, $a4, 20
	ld.w	$s3, $a4, 24
	ld.w	$s4, $a4, 28
	ld.w	$a1, $a4, 32
	ld.w	$s0, $a4, 36
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 19
	addi.d	$a2, $a2, 19
	addi.d	$a4, $a4, 76
	blt	$a3, $s6, .LBB90_5
	b	.LBB90_7
	.p2align	4, , 16
.LBB90_6:                               #   in Loop: Header=BB90_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB90_7:                               # %.loopexit41
                                        #   in Loop: Header=BB90_3 Depth=1
	addi.w	$a1, $a2, 0
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB90_15
# %bb.8:                                # %.preheader.preheader
                                        #   in Loop: Header=BB90_3 Depth=1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB90_10
# %bb.9:                                #   in Loop: Header=BB90_3 Depth=1
	move	$a3, $a2
	b	.LBB90_13
	.p2align	4, , 16
.LBB90_10:                              # %vector.ph
                                        #   in Loop: Header=BB90_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB90_11:                              # %vector.body
                                        #   Parent Loop BB90_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB90_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB90_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB90_15
.LBB90_13:                              # %.preheader.preheader58
                                        #   in Loop: Header=BB90_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB90_14:                              # %.preheader
                                        #   Parent Loop BB90_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB90_14
.LBB90_15:                              # %.loopexit
                                        #   in Loop: Header=BB90_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB90_2
# %bb.16:                               #   in Loop: Header=BB90_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	b	.LBB90_2
.LBB90_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB90_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB90_21
.LBB90_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB90_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB90_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI90_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI90_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB90_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end90:
	.size	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end90-_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi17EiE7do_testEPKiPKc,"axG",@progbits,_ZN13do_loop_testsILi17EiE7do_testEPKiPKc,comdat
	.weak	_ZN13do_loop_testsILi17EiE7do_testEPKiPKc # -- Begin function _ZN13do_loop_testsILi17EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi17EiE7do_testEPKiPKc,@function
_ZN13do_loop_testsILi17EiE7do_testEPKiPKc: # @_ZN13do_loop_testsILi17EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi9EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end91:
	.size	_ZN13do_loop_testsILi17EiE7do_testEPKiPKc, .Lfunc_end91-_ZN13do_loop_testsILi17EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
.LCPI92_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blez	$a2, .LBB92_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -17
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 36
	st.d	$a1, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 240474
	ori	$s1, $a0, 3824
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	b	.LBB92_3
	.p2align	4, , 16
.LBB92_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB92_3 Depth=1
	addi.w	$s5, $s5, 1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	bge	$s5, $a0, .LBB92_17
.LBB92_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_5 Depth 2
                                        #     Child Loop BB92_11 Depth 2
                                        #     Child Loop BB92_14 Depth 2
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB92_7
# %bb.4:                                # %.preheader39.preheader
                                        #   in Loop: Header=BB92_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB92_5:                               # %.preheader39
                                        #   Parent Loop BB92_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -36
	ld.w	$a6, $a4, -32
	ld.w	$a7, $a4, -28
	ld.w	$t0, $a4, -24
	ld.w	$t1, $a4, -20
	ld.w	$t2, $a4, -16
	ld.w	$t3, $a4, -12
	ld.w	$t4, $a4, -8
	ld.w	$t5, $a4, -4
	ld.w	$t6, $a4, 0
	ld.w	$t7, $a4, 4
	ld.w	$t8, $a4, 8
	ld.w	$ra, $a4, 12
	ld.w	$s8, $a4, 16
	ld.w	$s7, $a4, 20
	ld.w	$s3, $a4, 24
	ld.w	$s4, $a4, 28
	ld.w	$a1, $a4, 32
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 18
	addi.d	$a2, $a2, 18
	addi.d	$a4, $a4, 72
	blt	$a3, $s6, .LBB92_5
# %bb.6:                                # %.loopexit40
                                        #   in Loop: Header=BB92_3 Depth=1
	addi.w	$a1, $a2, 0
	blt	$a1, $s0, .LBB92_8
	b	.LBB92_15
	.p2align	4, , 16
.LBB92_7:                               #   in Loop: Header=BB92_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a1, $a2, 0
	bge	$a1, $s0, .LBB92_15
.LBB92_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB92_3 Depth=1
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB92_10
# %bb.9:                                #   in Loop: Header=BB92_3 Depth=1
	move	$a3, $a2
	b	.LBB92_13
	.p2align	4, , 16
.LBB92_10:                              # %vector.ph
                                        #   in Loop: Header=BB92_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB92_11:                              # %vector.body
                                        #   Parent Loop BB92_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB92_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB92_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB92_15
.LBB92_13:                              # %.preheader.preheader57
                                        #   in Loop: Header=BB92_3 Depth=1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB92_14:                              # %.preheader
                                        #   Parent Loop BB92_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB92_14
.LBB92_15:                              # %.loopexit
                                        #   in Loop: Header=BB92_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB92_2
# %bb.16:                               #   in Loop: Header=BB92_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	b	.LBB92_2
.LBB92_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB92_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB92_21
.LBB92_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB92_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB92_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI92_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI92_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB92_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end92:
	.size	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end92-_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
.LCPI93_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	blez	$a1, .LBB93_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -16
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 518386
	ori	$s1, $a0, 1336
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB93_3
	.p2align	4, , 16
.LBB93_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB93_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB93_17
.LBB93_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_5 Depth 2
                                        #     Child Loop BB93_11 Depth 2
                                        #     Child Loop BB93_14 Depth 2
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB93_7
# %bb.4:                                # %.preheader38.preheader
                                        #   in Loop: Header=BB93_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB93_5:                               # %.preheader38
                                        #   Parent Loop BB93_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -32
	ld.w	$a6, $a4, -28
	ld.w	$a7, $a4, -24
	ld.w	$t0, $a4, -20
	ld.w	$t1, $a4, -16
	ld.w	$t2, $a4, -12
	ld.w	$t3, $a4, -8
	ld.w	$t4, $a4, -4
	ld.w	$t5, $a4, 0
	ld.w	$t6, $a4, 4
	ld.w	$t7, $a4, 8
	ld.w	$t8, $a4, 12
	ld.w	$ra, $a4, 16
	ld.w	$s8, $a4, 20
	ld.w	$s7, $a4, 24
	ld.w	$s3, $a4, 28
	ld.w	$s4, $a4, 32
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 17
	addi.d	$a2, $a2, 17
	addi.d	$a4, $a4, 68
	blt	$a3, $s6, .LBB93_5
# %bb.6:                                # %.loopexit39
                                        #   in Loop: Header=BB93_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB93_8
	b	.LBB93_15
	.p2align	4, , 16
.LBB93_7:                               #   in Loop: Header=BB93_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB93_15
.LBB93_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB93_3 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB93_10
# %bb.9:                                #   in Loop: Header=BB93_3 Depth=1
	move	$a3, $a2
	b	.LBB93_13
	.p2align	4, , 16
.LBB93_10:                              # %vector.ph
                                        #   in Loop: Header=BB93_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB93_11:                              # %vector.body
                                        #   Parent Loop BB93_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB93_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB93_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB93_15
.LBB93_13:                              # %.preheader.preheader56
                                        #   in Loop: Header=BB93_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB93_14:                              # %.preheader
                                        #   Parent Loop BB93_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB93_14
.LBB93_15:                              # %.loopexit
                                        #   in Loop: Header=BB93_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	mul.d	$a2, $a2, $a3
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	add.w	$a2, $a2, $a3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB93_2
# %bb.16:                               #   in Loop: Header=BB93_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB93_2
.LBB93_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB93_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB93_21
.LBB93_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB93_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB93_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI93_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI93_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB93_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end93:
	.size	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end93-_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
.LCPI94_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB94_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -15
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -252279
	ori	$s1, $a0, 2944
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB94_3
	.p2align	4, , 16
.LBB94_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB94_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB94_17
.LBB94_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_5 Depth 2
                                        #     Child Loop BB94_11 Depth 2
                                        #     Child Loop BB94_14 Depth 2
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB94_7
# %bb.4:                                # %.preheader37.preheader
                                        #   in Loop: Header=BB94_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB94_5:                               # %.preheader37
                                        #   Parent Loop BB94_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -32
	ld.w	$a6, $a4, -28
	ld.w	$a7, $a4, -24
	ld.w	$t0, $a4, -20
	ld.w	$t1, $a4, -16
	ld.w	$t2, $a4, -12
	ld.w	$t3, $a4, -8
	ld.w	$t4, $a4, -4
	ld.w	$t5, $a4, 0
	ld.w	$t6, $a4, 4
	ld.w	$t7, $a4, 8
	ld.w	$t8, $a4, 12
	ld.w	$ra, $a4, 16
	ld.w	$s8, $a4, 20
	ld.w	$s7, $a4, 24
	ld.w	$s3, $a4, 28
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 16
	addi.d	$a2, $a2, 16
	addi.d	$a4, $a4, 64
	blt	$a3, $s6, .LBB94_5
# %bb.6:                                # %.loopexit38
                                        #   in Loop: Header=BB94_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB94_8
	b	.LBB94_15
	.p2align	4, , 16
.LBB94_7:                               #   in Loop: Header=BB94_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB94_15
.LBB94_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB94_3 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB94_10
# %bb.9:                                #   in Loop: Header=BB94_3 Depth=1
	move	$a3, $a2
	b	.LBB94_13
	.p2align	4, , 16
.LBB94_10:                              # %vector.ph
                                        #   in Loop: Header=BB94_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB94_11:                              # %vector.body
                                        #   Parent Loop BB94_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB94_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB94_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB94_15
.LBB94_13:                              # %.preheader.preheader55
                                        #   in Loop: Header=BB94_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB94_14:                              # %.preheader
                                        #   Parent Loop BB94_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB94_14
.LBB94_15:                              # %.loopexit
                                        #   in Loop: Header=BB94_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	mul.d	$a2, $a2, $a3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB94_2
# %bb.16:                               #   in Loop: Header=BB94_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB94_2
.LBB94_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB94_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB94_21
.LBB94_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB94_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB94_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI94_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI94_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB94_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end94:
	.size	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end94-_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
.LCPI95_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	blez	$a1, .LBB95_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -14
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 28
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 25633
	ori	$s1, $a0, 456
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB95_3
	.p2align	4, , 16
.LBB95_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB95_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB95_17
.LBB95_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_5 Depth 2
                                        #     Child Loop BB95_11 Depth 2
                                        #     Child Loop BB95_14 Depth 2
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB95_7
# %bb.4:                                # %.preheader36.preheader
                                        #   in Loop: Header=BB95_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB95_5:                               # %.preheader36
                                        #   Parent Loop BB95_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -28
	ld.w	$a6, $a4, -24
	ld.w	$a7, $a4, -20
	ld.w	$t0, $a4, -16
	ld.w	$t1, $a4, -12
	ld.w	$t2, $a4, -8
	ld.w	$t3, $a4, -4
	ld.w	$t4, $a4, 0
	ld.w	$t5, $a4, 4
	ld.w	$t6, $a4, 8
	ld.w	$t7, $a4, 12
	ld.w	$t8, $a4, 16
	ld.w	$ra, $a4, 20
	ld.w	$s8, $a4, 24
	ld.w	$s7, $a4, 28
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 15
	addi.d	$a2, $a2, 15
	addi.d	$a4, $a4, 60
	blt	$a3, $s6, .LBB95_5
# %bb.6:                                # %.loopexit37
                                        #   in Loop: Header=BB95_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB95_8
	b	.LBB95_15
	.p2align	4, , 16
.LBB95_7:                               #   in Loop: Header=BB95_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB95_15
.LBB95_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB95_3 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB95_10
# %bb.9:                                #   in Loop: Header=BB95_3 Depth=1
	move	$a3, $a2
	b	.LBB95_13
	.p2align	4, , 16
.LBB95_10:                              # %vector.ph
                                        #   in Loop: Header=BB95_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB95_11:                              # %vector.body
                                        #   Parent Loop BB95_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB95_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB95_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB95_15
.LBB95_13:                              # %.preheader.preheader54
                                        #   in Loop: Header=BB95_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB95_14:                              # %.preheader
                                        #   Parent Loop BB95_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB95_14
.LBB95_15:                              # %.loopexit
                                        #   in Loop: Header=BB95_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB95_2
# %bb.16:                               #   in Loop: Header=BB95_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB95_2
.LBB95_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB95_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB95_21
.LBB95_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB95_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB95_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI95_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI95_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB95_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end95:
	.size	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end95-_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
.LCPI96_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB96_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -13
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 28
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 303544
	ori	$s1, $a0, 2064
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB96_3
	.p2align	4, , 16
.LBB96_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB96_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB96_17
.LBB96_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_5 Depth 2
                                        #     Child Loop BB96_11 Depth 2
                                        #     Child Loop BB96_14 Depth 2
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB96_7
# %bb.4:                                # %.preheader35.preheader
                                        #   in Loop: Header=BB96_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB96_5:                               # %.preheader35
                                        #   Parent Loop BB96_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -28
	ld.w	$a6, $a4, -24
	ld.w	$a7, $a4, -20
	ld.w	$t0, $a4, -16
	ld.w	$t1, $a4, -12
	ld.w	$t2, $a4, -8
	ld.w	$t3, $a4, -4
	ld.w	$t4, $a4, 0
	ld.w	$t5, $a4, 4
	ld.w	$t6, $a4, 8
	ld.w	$t7, $a4, 12
	ld.w	$t8, $a4, 16
	ld.w	$ra, $a4, 20
	ld.w	$s8, $a4, 24
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 14
	addi.d	$a2, $a2, 14
	addi.d	$a4, $a4, 56
	blt	$a3, $s6, .LBB96_5
# %bb.6:                                # %.loopexit36
                                        #   in Loop: Header=BB96_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB96_8
	b	.LBB96_15
	.p2align	4, , 16
.LBB96_7:                               #   in Loop: Header=BB96_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB96_15
.LBB96_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB96_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB96_10
# %bb.9:                                #   in Loop: Header=BB96_3 Depth=1
	move	$a3, $a2
	b	.LBB96_13
	.p2align	4, , 16
.LBB96_10:                              # %vector.ph
                                        #   in Loop: Header=BB96_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB96_11:                              # %vector.body
                                        #   Parent Loop BB96_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB96_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB96_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB96_15
.LBB96_13:                              # %.preheader.preheader53
                                        #   in Loop: Header=BB96_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB96_14:                              # %.preheader
                                        #   Parent Loop BB96_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB96_14
.LBB96_15:                              # %.loopexit
                                        #   in Loop: Header=BB96_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB96_2
# %bb.16:                               #   in Loop: Header=BB96_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB96_2
.LBB96_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB96_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB96_21
.LBB96_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB96_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB96_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI96_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI96_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB96_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end96:
	.size	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end96-_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
.LCPI97_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB97_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -12
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 24
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB97_3
	.p2align	4, , 16
.LBB97_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB97_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB97_17
.LBB97_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_5 Depth 2
                                        #     Child Loop BB97_11 Depth 2
                                        #     Child Loop BB97_14 Depth 2
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB97_7
# %bb.4:                                # %.preheader34.preheader
                                        #   in Loop: Header=BB97_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB97_5:                               # %.preheader34
                                        #   Parent Loop BB97_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -24
	ld.w	$a6, $a4, -20
	ld.w	$a7, $a4, -16
	ld.w	$t0, $a4, -12
	ld.w	$t1, $a4, -8
	ld.w	$t2, $a4, -4
	ld.w	$t3, $a4, 0
	ld.w	$t4, $a4, 4
	ld.w	$t5, $a4, 8
	ld.w	$t6, $a4, 12
	ld.w	$t7, $a4, 16
	ld.w	$t8, $a4, 20
	ld.w	$ra, $a4, 24
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.w	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	addu16i.d	$a0, $a0, -29195
	addi.w	$a0, $a0, -424
	addi.d	$a3, $a3, 13
	addi.d	$a2, $a2, 13
	addi.d	$a4, $a4, 52
	blt	$a3, $s6, .LBB97_5
# %bb.6:                                # %.loopexit35
                                        #   in Loop: Header=BB97_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB97_8
	b	.LBB97_15
	.p2align	4, , 16
.LBB97_7:                               #   in Loop: Header=BB97_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB97_15
.LBB97_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB97_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB97_10
# %bb.9:                                #   in Loop: Header=BB97_3 Depth=1
	move	$a3, $a2
	b	.LBB97_13
	.p2align	4, , 16
.LBB97_10:                              # %vector.ph
                                        #   in Loop: Header=BB97_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB97_11:                              # %vector.body
                                        #   Parent Loop BB97_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB97_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB97_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB97_15
.LBB97_13:                              # %.preheader.preheader52
                                        #   in Loop: Header=BB97_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB97_14:                              # %.preheader
                                        #   Parent Loop BB97_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB97_14
.LBB97_15:                              # %.loopexit
                                        #   in Loop: Header=BB97_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB97_2
# %bb.16:                               #   in Loop: Header=BB97_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB97_2
.LBB97_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB97_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB97_21
.LBB97_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB97_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB97_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI97_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI97_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB97_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end97:
	.size	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end97-_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
.LCPI98_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB98_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -11
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 24
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$ra, $zero, 12
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -189209
	ori	$s1, $a0, 1184
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB98_3
	.p2align	4, , 16
.LBB98_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB98_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB98_17
.LBB98_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_5 Depth 2
                                        #     Child Loop BB98_11 Depth 2
                                        #     Child Loop BB98_14 Depth 2
	blt	$s0, $ra, .LBB98_7
# %bb.4:                                # %.preheader33.preheader
                                        #   in Loop: Header=BB98_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB98_5:                               # %.preheader33
                                        #   Parent Loop BB98_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -24
	ld.w	$a6, $a4, -20
	ld.w	$a7, $a4, -16
	ld.w	$t0, $a4, -12
	ld.w	$t1, $a4, -8
	ld.w	$t2, $a4, -4
	ld.w	$t3, $a4, 0
	ld.w	$t4, $a4, 4
	ld.w	$t5, $a4, 8
	ld.w	$t6, $a4, 12
	ld.w	$t7, $a4, 16
	ld.w	$t8, $a4, 20
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 12
	addi.d	$a2, $a2, 12
	addi.d	$a4, $a4, 48
	blt	$a3, $s6, .LBB98_5
# %bb.6:                                # %.loopexit34
                                        #   in Loop: Header=BB98_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB98_8
	b	.LBB98_15
	.p2align	4, , 16
.LBB98_7:                               #   in Loop: Header=BB98_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB98_15
.LBB98_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB98_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB98_10
# %bb.9:                                #   in Loop: Header=BB98_3 Depth=1
	move	$a3, $a2
	b	.LBB98_13
	.p2align	4, , 16
.LBB98_10:                              # %vector.ph
                                        #   in Loop: Header=BB98_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB98_11:                              # %vector.body
                                        #   Parent Loop BB98_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB98_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB98_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB98_15
.LBB98_13:                              # %.preheader.preheader51
                                        #   in Loop: Header=BB98_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB98_14:                              # %.preheader
                                        #   Parent Loop BB98_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB98_14
.LBB98_15:                              # %.loopexit
                                        #   in Loop: Header=BB98_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB98_2
# %bb.16:                               #   in Loop: Header=BB98_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$ra, $zero, 12
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB98_2
.LBB98_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB98_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB98_21
.LBB98_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB98_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB98_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI98_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI98_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB98_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end98:
	.size	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end98-_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
.LCPI99_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB99_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -10
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 20
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t8, $zero, 11
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 88702
	ori	$s1, $a0, 2792
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB99_3
	.p2align	4, , 16
.LBB99_2:                               # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB99_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB99_17
.LBB99_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_5 Depth 2
                                        #     Child Loop BB99_11 Depth 2
                                        #     Child Loop BB99_14 Depth 2
	blt	$s0, $t8, .LBB99_7
# %bb.4:                                # %.preheader32.preheader
                                        #   in Loop: Header=BB99_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB99_5:                               # %.preheader32
                                        #   Parent Loop BB99_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -20
	ld.w	$a6, $a4, -16
	ld.w	$a7, $a4, -12
	ld.w	$t0, $a4, -8
	ld.w	$t1, $a4, -4
	ld.w	$t2, $a4, 0
	ld.w	$t3, $a4, 4
	ld.w	$t4, $a4, 8
	ld.w	$t5, $a4, 12
	ld.w	$t6, $a4, 16
	ld.w	$t7, $a4, 20
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 11
	addi.d	$a2, $a2, 11
	addi.d	$a4, $a4, 44
	blt	$a3, $s6, .LBB99_5
# %bb.6:                                # %.loopexit33
                                        #   in Loop: Header=BB99_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB99_8
	b	.LBB99_15
	.p2align	4, , 16
.LBB99_7:                               #   in Loop: Header=BB99_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB99_15
.LBB99_8:                               # %.preheader.preheader
                                        #   in Loop: Header=BB99_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB99_10
# %bb.9:                                #   in Loop: Header=BB99_3 Depth=1
	move	$a3, $a2
	b	.LBB99_13
	.p2align	4, , 16
.LBB99_10:                              # %vector.ph
                                        #   in Loop: Header=BB99_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB99_11:                              # %vector.body
                                        #   Parent Loop BB99_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB99_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB99_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB99_15
.LBB99_13:                              # %.preheader.preheader50
                                        #   in Loop: Header=BB99_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB99_14:                              # %.preheader
                                        #   Parent Loop BB99_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB99_14
.LBB99_15:                              # %.loopexit
                                        #   in Loop: Header=BB99_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB99_2
# %bb.16:                               #   in Loop: Header=BB99_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t8, $zero, 11
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB99_2
.LBB99_17:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB99_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB99_21
.LBB99_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB99_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB99_21:                              # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI99_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI99_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB99_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end99:
	.size	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end99-_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi9EiE7do_testEPKiPKc,"axG",@progbits,_ZN13do_loop_testsILi9EiE7do_testEPKiPKc,comdat
	.weak	_ZN13do_loop_testsILi9EiE7do_testEPKiPKc # -- Begin function _ZN13do_loop_testsILi9EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi9EiE7do_testEPKiPKc,@function
_ZN13do_loop_testsILi9EiE7do_testEPKiPKc: # @_ZN13do_loop_testsILi9EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end100:
	.size	_ZN13do_loop_testsILi9EiE7do_testEPKiPKc, .Lfunc_end100-_ZN13do_loop_testsILi9EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
.LCPI101_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB101_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -9
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 20
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t7, $zero, 10
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 366614
	ori	$s1, $a0, 304
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB101_3
	.p2align	4, , 16
.LBB101_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB101_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB101_17
.LBB101_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_5 Depth 2
                                        #     Child Loop BB101_11 Depth 2
                                        #     Child Loop BB101_14 Depth 2
	blt	$s0, $t7, .LBB101_7
# %bb.4:                                # %.preheader31.preheader
                                        #   in Loop: Header=BB101_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB101_5:                              # %.preheader31
                                        #   Parent Loop BB101_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -20
	ld.w	$a6, $a4, -16
	ld.w	$a7, $a4, -12
	ld.w	$t0, $a4, -8
	ld.w	$t1, $a4, -4
	ld.w	$t2, $a4, 0
	ld.w	$t3, $a4, 4
	ld.w	$t4, $a4, 8
	ld.w	$t5, $a4, 12
	ld.w	$t6, $a4, 16
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 10
	addi.d	$a2, $a2, 10
	addi.d	$a4, $a4, 40
	blt	$a3, $s6, .LBB101_5
# %bb.6:                                # %.loopexit32
                                        #   in Loop: Header=BB101_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB101_8
	b	.LBB101_15
	.p2align	4, , 16
.LBB101_7:                              #   in Loop: Header=BB101_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB101_15
.LBB101_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB101_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB101_10
# %bb.9:                                #   in Loop: Header=BB101_3 Depth=1
	move	$a3, $a2
	b	.LBB101_13
	.p2align	4, , 16
.LBB101_10:                             # %vector.ph
                                        #   in Loop: Header=BB101_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB101_11:                             # %vector.body
                                        #   Parent Loop BB101_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB101_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB101_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB101_15
.LBB101_13:                             # %.preheader.preheader49
                                        #   in Loop: Header=BB101_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB101_14:                             # %.preheader
                                        #   Parent Loop BB101_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB101_14
.LBB101_15:                             # %.loopexit
                                        #   in Loop: Header=BB101_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB101_2
# %bb.16:                               #   in Loop: Header=BB101_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t7, $zero, 10
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB101_2
.LBB101_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB101_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB101_21
.LBB101_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB101_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB101_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI101_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI101_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB101_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end101:
	.size	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end101-_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
.LCPI102_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB102_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -8
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 16
	ori	$t6, $zero, 9
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -404051
	ori	$s1, $a0, 1912
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$fp, $a0, 1536
	b	.LBB102_3
	.p2align	4, , 16
.LBB102_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB102_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB102_17
.LBB102_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_5 Depth 2
                                        #     Child Loop BB102_11 Depth 2
                                        #     Child Loop BB102_14 Depth 2
	blt	$s0, $t6, .LBB102_7
# %bb.4:                                # %.preheader30.preheader
                                        #   in Loop: Header=BB102_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB102_5:                              # %.preheader30
                                        #   Parent Loop BB102_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -16
	ld.w	$a6, $a4, -12
	ld.w	$a7, $a4, -8
	ld.w	$t0, $a4, -4
	ld.w	$t1, $a4, 0
	ld.w	$t2, $a4, 4
	ld.w	$t3, $a4, 8
	ld.w	$t4, $a4, 12
	ld.w	$t5, $a4, 16
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 9
	addi.d	$a2, $a2, 9
	addi.d	$a4, $a4, 36
	blt	$a3, $s6, .LBB102_5
# %bb.6:                                # %.loopexit31
                                        #   in Loop: Header=BB102_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB102_8
	b	.LBB102_15
	.p2align	4, , 16
.LBB102_7:                              #   in Loop: Header=BB102_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB102_15
.LBB102_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB102_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB102_10
# %bb.9:                                #   in Loop: Header=BB102_3 Depth=1
	move	$a3, $a2
	b	.LBB102_13
	.p2align	4, , 16
.LBB102_10:                             # %vector.ph
                                        #   in Loop: Header=BB102_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	alsl.d	$a0, $a2, $s8, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB102_11:                             # %vector.body
                                        #   Parent Loop BB102_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB102_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB102_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB102_15
.LBB102_13:                             # %.preheader.preheader48
                                        #   in Loop: Header=BB102_3 Depth=1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB102_14:                             # %.preheader
                                        #   Parent Loop BB102_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB102_14
.LBB102_15:                             # %.loopexit
                                        #   in Loop: Header=BB102_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $fp
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB102_2
# %bb.16:                               #   in Loop: Header=BB102_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t6, $zero, 9
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB102_2
.LBB102_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB102_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB102_21
.LBB102_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB102_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB102_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI102_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI102_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB102_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end102:
	.size	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end102-_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
.LCPI103_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB103_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -7
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 16
	ori	$t5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -126140
	ori	$s1, $a0, 3520
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$fp, $a0, 1536
	b	.LBB103_3
	.p2align	4, , 16
.LBB103_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB103_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB103_17
.LBB103_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_5 Depth 2
                                        #     Child Loop BB103_11 Depth 2
                                        #     Child Loop BB103_14 Depth 2
	blt	$s0, $t5, .LBB103_7
# %bb.4:                                # %.preheader29.preheader
                                        #   in Loop: Header=BB103_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB103_5:                              # %.preheader29
                                        #   Parent Loop BB103_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -16
	ld.w	$a6, $a4, -12
	ld.w	$a7, $a4, -8
	ld.w	$t0, $a4, -4
	ld.w	$t1, $a4, 0
	ld.w	$t2, $a4, 4
	ld.w	$t3, $a4, 8
	ld.w	$t4, $a4, 12
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 8
	addi.d	$a2, $a2, 8
	addi.d	$a4, $a4, 32
	blt	$a3, $s6, .LBB103_5
# %bb.6:                                # %.loopexit30
                                        #   in Loop: Header=BB103_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB103_8
	b	.LBB103_15
	.p2align	4, , 16
.LBB103_7:                              #   in Loop: Header=BB103_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB103_15
.LBB103_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB103_3 Depth=1
	sub.d	$a4, $s7, $a2
	bgeu	$a4, $t5, .LBB103_10
# %bb.9:                                #   in Loop: Header=BB103_3 Depth=1
	move	$a3, $a2
	b	.LBB103_13
	.p2align	4, , 16
.LBB103_10:                             # %vector.ph
                                        #   in Loop: Header=BB103_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	alsl.d	$a0, $a2, $s8, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB103_11:                             # %vector.body
                                        #   Parent Loop BB103_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB103_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB103_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB103_15
.LBB103_13:                             # %.preheader.preheader47
                                        #   in Loop: Header=BB103_3 Depth=1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB103_14:                             # %.preheader
                                        #   Parent Loop BB103_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB103_14
.LBB103_15:                             # %.loopexit
                                        #   in Loop: Header=BB103_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $fp
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB103_2
# %bb.16:                               #   in Loop: Header=BB103_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t5, $zero, 8
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB103_2
.LBB103_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB103_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB103_21
.LBB103_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB103_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB103_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI103_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI103_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB103_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end103:
	.size	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end103-_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
.LCPI104_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB104_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -6
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 12
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t4, $zero, 7
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 151772
	ori	$s1, $a0, 1032
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB104_3
	.p2align	4, , 16
.LBB104_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB104_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB104_17
.LBB104_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_5 Depth 2
                                        #     Child Loop BB104_11 Depth 2
                                        #     Child Loop BB104_14 Depth 2
	blt	$s0, $t4, .LBB104_7
# %bb.4:                                # %.preheader28.preheader
                                        #   in Loop: Header=BB104_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB104_5:                              # %.preheader28
                                        #   Parent Loop BB104_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -12
	ld.w	$a6, $a4, -8
	ld.w	$a7, $a4, -4
	ld.w	$t0, $a4, 0
	ld.w	$t1, $a4, 4
	ld.w	$t2, $a4, 8
	ld.w	$t3, $a4, 12
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 7
	addi.d	$a2, $a2, 7
	addi.d	$a4, $a4, 28
	blt	$a3, $s6, .LBB104_5
# %bb.6:                                # %.loopexit29
                                        #   in Loop: Header=BB104_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB104_8
	b	.LBB104_15
	.p2align	4, , 16
.LBB104_7:                              #   in Loop: Header=BB104_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB104_15
.LBB104_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB104_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB104_10
# %bb.9:                                #   in Loop: Header=BB104_3 Depth=1
	move	$a3, $a2
	b	.LBB104_13
	.p2align	4, , 16
.LBB104_10:                             # %vector.ph
                                        #   in Loop: Header=BB104_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB104_11:                             # %vector.body
                                        #   Parent Loop BB104_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB104_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB104_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB104_15
.LBB104_13:                             # %.preheader.preheader46
                                        #   in Loop: Header=BB104_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB104_14:                             # %.preheader
                                        #   Parent Loop BB104_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB104_14
.LBB104_15:                             # %.loopexit
                                        #   in Loop: Header=BB104_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB104_2
# %bb.16:                               #   in Loop: Header=BB104_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t4, $zero, 7
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB104_2
.LBB104_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB104_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB104_21
.LBB104_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB104_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB104_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI104_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI104_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB104_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end104:
	.size	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end104-_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
.LCPI105_0:
	.word	1                               # 0x1
	.word	7                               # 0x7
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI105_1:
	.word	0                               # 0x0
	.word	6                               # 0x6
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI105_2:
	.word	0                               # 0x0
	.word	5                               # 0x5
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI105_3:
	.word	4                               # 0x4
	.word	1                               # 0x1
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI105_4:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB105_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -5
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t2, $zero, 6
	slt	$a0, $t2, $s6
	masknez	$a2, $t2, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 1
	slli.d	$s3, $a0, 1
	ori	$a2, $zero, 12
	mul.d	$a0, $a0, $a2
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 12
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 429683
	ori	$s1, $a0, 2640
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB105_3
	.p2align	4, , 16
.LBB105_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB105_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB105_22
.LBB105_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_8 Depth 2
                                        #     Child Loop BB105_11 Depth 2
                                        #     Child Loop BB105_16 Depth 2
                                        #     Child Loop BB105_19 Depth 2
	blt	$s0, $t2, .LBB105_6
# %bb.4:                                # %.preheader27.preheader
                                        #   in Loop: Header=BB105_3 Depth=1
	ori	$a0, $zero, 7
	bge	$s6, $a0, .LBB105_7
# %bb.5:                                #   in Loop: Header=BB105_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB105_10
	.p2align	4, , 16
.LBB105_6:                              #   in Loop: Header=BB105_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB105_12
	.p2align	4, , 16
.LBB105_7:                              # %vector.body50.preheader
                                        #   in Loop: Header=BB105_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB105_8:                              # %vector.body50
                                        #   Parent Loop BB105_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr1, $a0, -32
	vld	$vr2, $a0, -16
	pcalau12i	$a3, %pc_hi20(.LCPI105_0)
	vld	$vr3, $a3, %pc_lo12(.LCPI105_0)
	pcalau12i	$a3, %pc_hi20(.LCPI105_1)
	vld	$vr4, $a3, %pc_lo12(.LCPI105_1)
	vld	$vr5, $a0, 0
	vshuf.w	$vr3, $vr2, $vr1
	vshuf.w	$vr4, $vr2, $vr1
	vadd.w	$vr3, $vr3, $vr4
	pcalau12i	$a3, %pc_hi20(.LCPI105_2)
	vld	$vr4, $a3, %pc_lo12(.LCPI105_2)
	vreplvei.w	$vr6, $vr1, 2
	vpackev.w	$vr6, $vr5, $vr6
	vadd.w	$vr3, $vr3, $vr6
	vreplvei.w	$vr1, $vr1, 3
	vori.b	$vr6, $vr4, 0
	vshuf.w	$vr6, $vr5, $vr1
	pcalau12i	$a3, %pc_hi20(.LCPI105_3)
	vld	$vr1, $a3, %pc_lo12(.LCPI105_3)
	vadd.w	$vr3, $vr3, $vr6
	vreplvei.w	$vr6, $vr5, 3
	vreplvei.w	$vr5, $vr5, 2
	vshuf.w	$vr1, $vr2, $vr5
	vadd.w	$vr1, $vr3, $vr1
	vreplvei.w	$vr2, $vr2, 1
	vshuf.w	$vr4, $vr6, $vr2
	vadd.w	$vr1, $vr1, $vr4
	vreplgr2vr.w	$vr2, $fp
	vmadd.w	$vr0, $vr1, $vr2
	vreplgr2vr.w	$vr1, $s1
	vadd.w	$vr0, $vr0, $vr1
	addi.d	$a2, $a2, -2
	addi.d	$a0, $a0, 48
	bnez	$a2, .LBB105_8
# %bb.9:                                # %middle.block56
                                        #   in Loop: Header=BB105_3 Depth=1
	vpickve2gr.w	$a0, $vr0, 0
	vpickve2gr.w	$a2, $vr0, 1
	add.d	$a0, $a2, $a0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB105_12
.LBB105_10:                             # %.preheader27.preheader62
                                        #   in Loop: Header=BB105_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB105_11:                             # %.preheader27
                                        #   Parent Loop BB105_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -12
	ld.w	$a5, $a3, -8
	ld.w	$a6, $a3, -4
	ld.w	$a7, $a3, 0
	ld.w	$t0, $a3, 4
	ld.w	$t1, $a3, 8
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $t1
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 6
	addi.d	$a3, $a3, 24
	blt	$a2, $s6, .LBB105_11
.LBB105_12:                             # %.loopexit28
                                        #   in Loop: Header=BB105_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB105_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB105_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB105_15
# %bb.14:                               #   in Loop: Header=BB105_3 Depth=1
	move	$a3, $a2
	b	.LBB105_18
	.p2align	4, , 16
.LBB105_15:                             # %vector.ph
                                        #   in Loop: Header=BB105_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB105_16:                             # %vector.body
                                        #   Parent Loop BB105_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB105_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB105_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB105_20
.LBB105_18:                             # %.preheader.preheader61
                                        #   in Loop: Header=BB105_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB105_19:                             # %.preheader
                                        #   Parent Loop BB105_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB105_19
.LBB105_20:                             # %.loopexit
                                        #   in Loop: Header=BB105_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB105_2
# %bb.21:                               #   in Loop: Header=BB105_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 6
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB105_2
.LBB105_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB105_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB105_26
.LBB105_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB105_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB105_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI105_4)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI105_4)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB105_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end105:
	.size	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end105-_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
.LCPI106_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB106_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -4
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t7, $zero, 5
	slt	$a0, $t7, $s6
	masknez	$a2, $t7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -209716
	ori	$a2, $a2, 3277
	lu32i.d	$a2, -209716
	lu52i.d	$a2, $a2, -820
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 1
	slli.d	$s3, $a0, 1
	slli.d	$a2, $a0, 3
	alsl.d	$a0, $a0, $a2, 1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 20
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 88                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -340981
	ori	$fp, $a0, 152
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB106_3
	.p2align	4, , 16
.LBB106_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB106_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB106_22
.LBB106_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_8 Depth 2
                                        #     Child Loop BB106_11 Depth 2
                                        #     Child Loop BB106_16 Depth 2
                                        #     Child Loop BB106_19 Depth 2
	blt	$s0, $t7, .LBB106_6
# %bb.4:                                # %.preheader26.preheader
                                        #   in Loop: Header=BB106_3 Depth=1
	ori	$a0, $zero, 6
	bge	$s6, $a0, .LBB106_7
# %bb.5:                                #   in Loop: Header=BB106_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB106_10
	.p2align	4, , 16
.LBB106_6:                              #   in Loop: Header=BB106_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB106_12
	.p2align	4, , 16
.LBB106_7:                              # %vector.body49.preheader
                                        #   in Loop: Header=BB106_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	move	$a4, $s3
	.p2align	4, , 16
.LBB106_8:                              # %vector.body49
                                        #   Parent Loop BB106_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a3, -20
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, -16
	ld.w	$t0, $a3, 4
	ld.w	$t1, $a3, -12
	ld.w	$t2, $a3, 8
	ld.w	$t3, $a3, -8
	ld.w	$t4, $a3, 12
	ld.w	$t5, $a3, -4
	ld.w	$t6, $a3, 16
	add.d	$a5, $a7, $a5
	add.d	$a6, $t0, $a6
	add.d	$a5, $a5, $t1
	add.d	$a6, $a6, $t2
	add.d	$a5, $a5, $t3
	add.d	$a6, $a6, $t4
	add.d	$a5, $a5, $t5
	add.d	$a6, $a6, $t6
	mul.d	$a5, $a5, $s1
	mul.d	$a6, $a6, $s1
	add.d	$a0, $a0, $a5
	add.d	$a2, $a2, $a6
	add.d	$a0, $a0, $fp
	add.d	$a2, $a2, $fp
	addi.d	$a4, $a4, -2
	addi.d	$a3, $a3, 40
	bnez	$a4, .LBB106_8
# %bb.9:                                # %middle.block55
                                        #   in Loop: Header=BB106_3 Depth=1
	add.d	$a0, $a2, $a0
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 80                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB106_12
.LBB106_10:                             # %.preheader26.preheader61
                                        #   in Loop: Header=BB106_3 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB106_11:                             # %.preheader26
                                        #   Parent Loop BB106_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $fp
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 20
	blt	$a2, $s6, .LBB106_11
.LBB106_12:                             # %.loopexit27
                                        #   in Loop: Header=BB106_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB106_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB106_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB106_15
# %bb.14:                               #   in Loop: Header=BB106_3 Depth=1
	move	$a3, $a2
	b	.LBB106_18
	.p2align	4, , 16
.LBB106_15:                             # %vector.ph
                                        #   in Loop: Header=BB106_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB106_16:                             # %vector.body
                                        #   Parent Loop BB106_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB106_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB106_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB106_20
.LBB106_18:                             # %.preheader.preheader60
                                        #   in Loop: Header=BB106_3 Depth=1
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB106_19:                             # %.preheader
                                        #   Parent Loop BB106_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB106_19
.LBB106_20:                             # %.loopexit
                                        #   in Loop: Header=BB106_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB106_2
# %bb.21:                               #   in Loop: Header=BB106_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t7, $zero, 5
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB106_2
.LBB106_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB106_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB106_26
.LBB106_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB106_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB106_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI106_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI106_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB106_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end106:
	.size	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end106-_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
.LCPI107_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB107_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -3
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t0, $zero, 4
	slt	$a0, $t0, $s6
	masknez	$a2, $t0, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a0, $a0, 5
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 64
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -63070
	ori	$s1, $a0, 1760
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB107_3
	.p2align	4, , 16
.LBB107_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB107_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB107_22
.LBB107_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_8 Depth 2
                                        #     Child Loop BB107_11 Depth 2
                                        #     Child Loop BB107_16 Depth 2
                                        #     Child Loop BB107_19 Depth 2
	blt	$s0, $t0, .LBB107_6
# %bb.4:                                # %.preheader25.preheader
                                        #   in Loop: Header=BB107_3 Depth=1
	ori	$a0, $zero, 29
	bge	$s6, $a0, .LBB107_7
# %bb.5:                                #   in Loop: Header=BB107_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB107_10
	.p2align	4, , 16
.LBB107_6:                              #   in Loop: Header=BB107_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB107_12
	.p2align	4, , 16
.LBB107_7:                              # %vector.body48.preheader
                                        #   in Loop: Header=BB107_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB107_8:                              # %vector.body48
                                        #   Parent Loop BB107_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 48
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -60
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 36
	ld.w	$a6, $a0, 52
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -56
	ld.w	$a4, $a0, -40
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 56
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -52
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 128
	bnez	$a2, .LBB107_8
# %bb.9:                                # %middle.block54
                                        #   in Loop: Header=BB107_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB107_12
.LBB107_10:                             # %.preheader25.preheader60
                                        #   in Loop: Header=BB107_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB107_11:                             # %.preheader25
                                        #   Parent Loop BB107_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, 4
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 16
	blt	$a2, $s6, .LBB107_11
.LBB107_12:                             # %.loopexit26
                                        #   in Loop: Header=BB107_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB107_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB107_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB107_15
# %bb.14:                               #   in Loop: Header=BB107_3 Depth=1
	move	$a3, $a2
	b	.LBB107_18
	.p2align	4, , 16
.LBB107_15:                             # %vector.ph
                                        #   in Loop: Header=BB107_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB107_16:                             # %vector.body
                                        #   Parent Loop BB107_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB107_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB107_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB107_20
.LBB107_18:                             # %.preheader.preheader59
                                        #   in Loop: Header=BB107_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB107_19:                             # %.preheader
                                        #   Parent Loop BB107_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB107_19
.LBB107_20:                             # %.loopexit
                                        #   in Loop: Header=BB107_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB107_2
# %bb.21:                               #   in Loop: Header=BB107_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t0, $zero, 4
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB107_2
.LBB107_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB107_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB107_26
.LBB107_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB107_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB107_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI107_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI107_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB107_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end107:
	.size	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end107-_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
.LCPI108_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB108_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -2
	bstrpick.d	$s7, $s0, 31, 0
	ori	$a7, $zero, 3
	slt	$a0, $a7, $s6
	masknez	$a2, $a7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 1
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a2, $a0, 4
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 48
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 214841
	ori	$s1, $a0, 3368
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB108_3
	.p2align	4, , 16
.LBB108_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB108_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB108_22
.LBB108_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_8 Depth 2
                                        #     Child Loop BB108_11 Depth 2
                                        #     Child Loop BB108_16 Depth 2
                                        #     Child Loop BB108_19 Depth 2
	blt	$s0, $a7, .LBB108_6
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB108_3 Depth=1
	ori	$a0, $zero, 22
	bge	$s6, $a0, .LBB108_7
# %bb.5:                                #   in Loop: Header=BB108_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB108_10
	.p2align	4, , 16
.LBB108_6:                              #   in Loop: Header=BB108_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB108_12
	.p2align	4, , 16
.LBB108_7:                              # %vector.body47.preheader
                                        #   in Loop: Header=BB108_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB108_8:                              # %vector.body47
                                        #   Parent Loop BB108_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -48
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 24
	ld.w	$a6, $a0, 36
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -44
	ld.w	$a4, $a0, -32
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 28
	ld.w	$a6, $a0, 40
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -40
	ld.w	$a4, $a0, -28
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 44
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 96
	bnez	$a2, .LBB108_8
# %bb.9:                                # %middle.block53
                                        #   in Loop: Header=BB108_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB108_12
.LBB108_10:                             # %.preheader24.preheader59
                                        #   in Loop: Header=BB108_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB108_11:                             # %.preheader24
                                        #   Parent Loop BB108_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 12
	blt	$a2, $s6, .LBB108_11
.LBB108_12:                             # %.loopexit25
                                        #   in Loop: Header=BB108_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB108_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB108_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB108_15
# %bb.14:                               #   in Loop: Header=BB108_3 Depth=1
	move	$a3, $a2
	b	.LBB108_18
	.p2align	4, , 16
.LBB108_15:                             # %vector.ph
                                        #   in Loop: Header=BB108_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB108_16:                             # %vector.body
                                        #   Parent Loop BB108_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB108_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB108_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB108_20
.LBB108_18:                             # %.preheader.preheader58
                                        #   in Loop: Header=BB108_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB108_19:                             # %.preheader
                                        #   Parent Loop BB108_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB108_19
.LBB108_20:                             # %.loopexit
                                        #   in Loop: Header=BB108_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB108_2
# %bb.21:                               #   in Loop: Header=BB108_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 3
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB108_2
.LBB108_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB108_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB108_26
.LBB108_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB108_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB108_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI108_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI108_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB108_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end108:
	.size	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end108-_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
.LCPI109_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB109_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -1
	bstrpick.d	$s7, $s0, 31, 0
	ori	$a7, $zero, 2
	slt	$a0, $a7, $s6
	masknez	$a2, $a7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	srli.d	$a0, $a0, 1
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a0, $a0, 4
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 4
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 492753
	ori	$s1, $a0, 880
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB109_3
	.p2align	4, , 16
.LBB109_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB109_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB109_22
.LBB109_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_8 Depth 2
                                        #     Child Loop BB109_11 Depth 2
                                        #     Child Loop BB109_16 Depth 2
                                        #     Child Loop BB109_19 Depth 2
	blt	$s0, $a7, .LBB109_6
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB109_3 Depth=1
	ori	$a0, $zero, 15
	bge	$s6, $a0, .LBB109_7
# %bb.5:                                #   in Loop: Header=BB109_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB109_10
	.p2align	4, , 16
.LBB109_6:                              #   in Loop: Header=BB109_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB109_12
	.p2align	4, , 16
.LBB109_7:                              # %vector.body46.preheader
                                        #   in Loop: Header=BB109_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB109_8:                              # %vector.body46
                                        #   Parent Loop BB109_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -32
	ld.w	$a4, $a0, -24
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 8
	ld.w	$a5, $a0, 16
	ld.w	$a6, $a0, 24
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -28
	ld.w	$a4, $a0, -20
	ld.w	$a5, $a0, -12
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 20
	ld.w	$a6, $a0, 28
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 64
	bnez	$a2, .LBB109_8
# %bb.9:                                # %middle.block52
                                        #   in Loop: Header=BB109_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB109_12
.LBB109_10:                             # %.preheader23.preheader58
                                        #   in Loop: Header=BB109_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB109_11:                             # %.preheader23
                                        #   Parent Loop BB109_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -4
	ld.w	$a5, $a3, 0
	add.d	$a4, $a5, $a4
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 8
	blt	$a2, $s6, .LBB109_11
.LBB109_12:                             # %.loopexit24
                                        #   in Loop: Header=BB109_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB109_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB109_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB109_15
# %bb.14:                               #   in Loop: Header=BB109_3 Depth=1
	move	$a3, $a2
	b	.LBB109_18
	.p2align	4, , 16
.LBB109_15:                             # %vector.ph
                                        #   in Loop: Header=BB109_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB109_16:                             # %vector.body
                                        #   Parent Loop BB109_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB109_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB109_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB109_20
.LBB109_18:                             # %.preheader.preheader57
                                        #   in Loop: Header=BB109_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB109_19:                             # %.preheader
                                        #   Parent Loop BB109_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB109_19
.LBB109_20:                             # %.loopexit
                                        #   in Loop: Header=BB109_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB109_2
# %bb.21:                               #   in Loop: Header=BB109_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 2
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB109_2
.LBB109_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB109_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB109_26
.LBB109_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB109_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB109_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI109_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI109_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB109_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end109:
	.size	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end109-_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
.LCPI110_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB110_14
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	bstrpick.d	$s6, $s0, 31, 0
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$fp, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s3
	vreplgr2vr.w	$vr5, $fp
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s1, $a0, 1536
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB110_3
	.p2align	4, , 16
.LBB110_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB110_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB110_14
.LBB110_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_8 Depth 2
                                        #     Child Loop BB110_11 Depth 2
	blez	$s0, .LBB110_6
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB110_3 Depth=1
	ori	$a0, $zero, 8
	bgeu	$s0, $a0, .LBB110_7
# %bb.5:                                #   in Loop: Header=BB110_3 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB110_10
	.p2align	4, , 16
.LBB110_6:                              #   in Loop: Header=BB110_3 Depth=1
	move	$a0, $zero
	b	.LBB110_12
	.p2align	4, , 16
.LBB110_7:                              # %vector.body.preheader
                                        #   in Loop: Header=BB110_3 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB110_8:                              # %vector.body
                                        #   Parent Loop BB110_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB110_8
# %bb.9:                                # %middle.block
                                        #   in Loop: Header=BB110_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s6, .LBB110_12
.LBB110_10:                             # %.preheader23.preheader41
                                        #   in Loop: Header=BB110_3 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s6, $a3
	.p2align	4, , 16
.LBB110_11:                             # %.preheader23
                                        #   Parent Loop BB110_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $fp
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB110_11
.LBB110_12:                             # %.loopexit
                                        #   in Loop: Header=BB110_3 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s1
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB110_2
# %bb.13:                               #   in Loop: Header=BB110_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB110_2
.LBB110_14:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB110_16
# %bb.15:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB110_18
.LBB110_16:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB110_19
# %bb.17:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB110_18:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI110_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI110_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB110_19:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end110:
	.size	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end110-_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
.LCPI111_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB111_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -31
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 64
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t1, $zero, 32
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -504557
	ori	$s1, $a0, 1792
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB111_3
	.p2align	4, , 16
.LBB111_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB111_3 Depth=1
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB111_17
.LBB111_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_5 Depth 2
                                        #     Child Loop BB111_11 Depth 2
                                        #     Child Loop BB111_14 Depth 2
	blt	$s0, $t1, .LBB111_7
# %bb.4:                                # %.preheader54.preheader
                                        #   in Loop: Header=BB111_3 Depth=1
	move	$a1, $zero
	move	$a2, $zero
	move	$a0, $zero
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB111_5:                              # %.preheader54
                                        #   Parent Loop BB111_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -64
	ld.w	$a5, $a3, -60
	ld.w	$a6, $a3, -56
	ld.w	$a7, $a3, -52
	ld.w	$t0, $a3, -48
	add.d	$a4, $a5, $a4
	ld.w	$a5, $a3, -44
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -40
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -36
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -32
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -28
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -24
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -20
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -16
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -12
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -8
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -4
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 0
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 4
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 8
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 12
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 16
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 20
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 24
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 28
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 32
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 36
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 40
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 44
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 48
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 52
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 56
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 60
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $a5
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 32
	addi.d	$a1, $a1, 32
	addi.d	$a3, $a3, 128
	blt	$a2, $s6, .LBB111_5
# %bb.6:                                # %.loopexit55
                                        #   in Loop: Header=BB111_3 Depth=1
	addi.w	$a2, $a1, 0
	blt	$a2, $s0, .LBB111_8
	b	.LBB111_15
	.p2align	4, , 16
.LBB111_7:                              #   in Loop: Header=BB111_3 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	addi.w	$a2, $a1, 0
	bge	$a2, $s0, .LBB111_15
.LBB111_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB111_3 Depth=1
	sub.d	$a3, $s7, $a1
	ori	$a2, $zero, 8
	bgeu	$a3, $a2, .LBB111_10
# %bb.9:                                #   in Loop: Header=BB111_3 Depth=1
	move	$a2, $a1
	b	.LBB111_13
	.p2align	4, , 16
.LBB111_10:                             # %vector.ph
                                        #   in Loop: Header=BB111_3 Depth=1
	move	$a4, $a3
	bstrins.d	$a4, $zero, 2, 0
	add.d	$a2, $a4, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a1, $a0, 2
	move	$a1, $a4
	.p2align	4, , 16
.LBB111_11:                             # %vector.body
                                        #   Parent Loop BB111_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a1, $a1, -8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB111_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB111_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a3, $a4, .LBB111_15
.LBB111_13:                             # %.preheader.preheader70
                                        #   in Loop: Header=BB111_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a2, $a1, 2
	sub.d	$a2, $s7, $a2
	.p2align	4, , 16
.LBB111_14:                             # %.preheader
                                        #   Parent Loop BB111_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.d	$a0, $a0, $s2
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB111_14
.LBB111_15:                             # %.loopexit
                                        #   in Loop: Header=BB111_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB111_2
# %bb.16:                               #   in Loop: Header=BB111_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t1, $zero, 32
	b	.LBB111_2
.LBB111_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB111_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB111_21
.LBB111_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB111_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB111_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI111_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI111_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB111_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end111:
	.size	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end111-_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
.LCPI112_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB112_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -30
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 60
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t1, $zero, 31
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -226646
	ori	$s1, $a0, 3400
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB112_3
	.p2align	4, , 16
.LBB112_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB112_3 Depth=1
	ld.w	$a0, $s4, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB112_17
.LBB112_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_5 Depth 2
                                        #     Child Loop BB112_11 Depth 2
                                        #     Child Loop BB112_14 Depth 2
	blt	$s0, $t1, .LBB112_7
# %bb.4:                                # %.preheader53.preheader
                                        #   in Loop: Header=BB112_3 Depth=1
	move	$a1, $zero
	move	$a2, $zero
	move	$a0, $zero
	ld.d	$a3, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB112_5:                              # %.preheader53
                                        #   Parent Loop BB112_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -60
	ld.w	$a5, $a3, -56
	ld.w	$a6, $a3, -52
	ld.w	$a7, $a3, -48
	ld.w	$t0, $a3, -44
	add.d	$a4, $a5, $a4
	ld.w	$a5, $a3, -40
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -36
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -32
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -28
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -24
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -20
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, -16
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, -12
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, -8
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, -4
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 0
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 4
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 8
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 12
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 16
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 20
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 24
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 28
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 32
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 36
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 40
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 44
	add.d	$a4, $a4, $a7
	ld.w	$a7, $a3, 48
	add.d	$a4, $a4, $t0
	ld.w	$t0, $a3, 52
	add.d	$a4, $a4, $a5
	ld.w	$a5, $a3, 56
	add.d	$a4, $a4, $a6
	ld.w	$a6, $a3, 60
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $a5
	add.d	$a4, $a4, $a6
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 31
	addi.d	$a1, $a1, 31
	addi.d	$a3, $a3, 124
	blt	$a2, $s6, .LBB112_5
# %bb.6:                                # %.loopexit54
                                        #   in Loop: Header=BB112_3 Depth=1
	addi.w	$a2, $a1, 0
	blt	$a2, $s0, .LBB112_8
	b	.LBB112_15
	.p2align	4, , 16
.LBB112_7:                              #   in Loop: Header=BB112_3 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	addi.w	$a2, $a1, 0
	bge	$a2, $s0, .LBB112_15
.LBB112_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB112_3 Depth=1
	sub.d	$a3, $s7, $a1
	ori	$a2, $zero, 8
	bgeu	$a3, $a2, .LBB112_10
# %bb.9:                                #   in Loop: Header=BB112_3 Depth=1
	move	$a2, $a1
	b	.LBB112_13
	.p2align	4, , 16
.LBB112_10:                             # %vector.ph
                                        #   in Loop: Header=BB112_3 Depth=1
	move	$a4, $a3
	bstrins.d	$a4, $zero, 2, 0
	add.d	$a2, $a4, $a1
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a1, $a0, 2
	move	$a1, $a4
	.p2align	4, , 16
.LBB112_11:                             # %vector.body
                                        #   Parent Loop BB112_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a1, $a1, -8
	addi.d	$a0, $a0, 32
	bnez	$a1, .LBB112_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB112_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a3, $a4, .LBB112_15
.LBB112_13:                             # %.preheader.preheader69
                                        #   in Loop: Header=BB112_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $a2, $a1, 2
	sub.d	$a2, $s7, $a2
	.p2align	4, , 16
.LBB112_14:                             # %.preheader
                                        #   Parent Loop BB112_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a1, 0
	mul.d	$a3, $a3, $fp
	add.d	$a0, $a0, $a3
	add.d	$a0, $a0, $s2
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB112_14
.LBB112_15:                             # %.loopexit
                                        #   in Loop: Header=BB112_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	mul.d	$a1, $a1, $s3
	add.w	$a1, $a1, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB112_2
# %bb.16:                               #   in Loop: Header=BB112_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t1, $zero, 31
	b	.LBB112_2
.LBB112_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB112_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB112_21
.LBB112_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB112_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB112_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI112_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI112_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB112_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end112:
	.size	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end112-_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
.LCPI113_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB113_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -29
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 60
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 30
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 51266
	ori	$s1, $a0, 912
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB113_3
	.p2align	4, , 16
.LBB113_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB113_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB113_17
.LBB113_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_5 Depth 2
                                        #     Child Loop BB113_11 Depth 2
                                        #     Child Loop BB113_14 Depth 2
	blt	$s0, $t2, .LBB113_7
# %bb.4:                                # %.preheader52.preheader
                                        #   in Loop: Header=BB113_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB113_5:                              # %.preheader52
                                        #   Parent Loop BB113_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -60
	ld.w	$a6, $a4, -56
	ld.w	$a7, $a4, -52
	ld.w	$t0, $a4, -48
	ld.w	$t1, $a4, -44
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 48
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 52
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 56
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 30
	addi.d	$a2, $a2, 30
	addi.d	$a4, $a4, 120
	blt	$a3, $s6, .LBB113_5
# %bb.6:                                # %.loopexit53
                                        #   in Loop: Header=BB113_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB113_8
	b	.LBB113_15
	.p2align	4, , 16
.LBB113_7:                              #   in Loop: Header=BB113_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB113_15
.LBB113_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB113_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB113_10
# %bb.9:                                #   in Loop: Header=BB113_3 Depth=1
	move	$a3, $a2
	b	.LBB113_13
	.p2align	4, , 16
.LBB113_10:                             # %vector.ph
                                        #   in Loop: Header=BB113_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB113_11:                             # %vector.body
                                        #   Parent Loop BB113_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB113_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB113_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB113_15
.LBB113_13:                             # %.preheader.preheader70
                                        #   in Loop: Header=BB113_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB113_14:                             # %.preheader
                                        #   Parent Loop BB113_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB113_14
.LBB113_15:                             # %.loopexit
                                        #   in Loop: Header=BB113_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB113_2
# %bb.16:                               #   in Loop: Header=BB113_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 30
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB113_2
.LBB113_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB113_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB113_21
.LBB113_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB113_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB113_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI113_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI113_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB113_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end113:
	.size	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end113-_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
.LCPI114_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB114_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -28
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 56
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 29
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 329177
	ori	$s1, $a0, 2520
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB114_3
	.p2align	4, , 16
.LBB114_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB114_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB114_17
.LBB114_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_5 Depth 2
                                        #     Child Loop BB114_11 Depth 2
                                        #     Child Loop BB114_14 Depth 2
	blt	$s0, $t2, .LBB114_7
# %bb.4:                                # %.preheader51.preheader
                                        #   in Loop: Header=BB114_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB114_5:                              # %.preheader51
                                        #   Parent Loop BB114_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -56
	ld.w	$a6, $a4, -52
	ld.w	$a7, $a4, -48
	ld.w	$t0, $a4, -44
	ld.w	$t1, $a4, -40
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 0
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 40
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 44
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 48
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 52
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 56
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 29
	addi.d	$a2, $a2, 29
	addi.d	$a4, $a4, 116
	blt	$a3, $s6, .LBB114_5
# %bb.6:                                # %.loopexit52
                                        #   in Loop: Header=BB114_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB114_8
	b	.LBB114_15
	.p2align	4, , 16
.LBB114_7:                              #   in Loop: Header=BB114_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB114_15
.LBB114_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB114_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB114_10
# %bb.9:                                #   in Loop: Header=BB114_3 Depth=1
	move	$a3, $a2
	b	.LBB114_13
	.p2align	4, , 16
.LBB114_10:                             # %vector.ph
                                        #   in Loop: Header=BB114_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB114_11:                             # %vector.body
                                        #   Parent Loop BB114_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB114_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB114_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB114_15
.LBB114_13:                             # %.preheader.preheader69
                                        #   in Loop: Header=BB114_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB114_14:                             # %.preheader
                                        #   Parent Loop BB114_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB114_14
.LBB114_15:                             # %.loopexit
                                        #   in Loop: Header=BB114_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB114_2
# %bb.16:                               #   in Loop: Header=BB114_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 29
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB114_2
.LBB114_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB114_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB114_21
.LBB114_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB114_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB114_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI114_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI114_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB114_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end114:
	.size	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end114-_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
.LCPI115_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB115_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -27
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 56
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 28
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -441487
	ori	$s1, $a0, 32
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB115_3
	.p2align	4, , 16
.LBB115_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB115_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB115_17
.LBB115_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_5 Depth 2
                                        #     Child Loop BB115_11 Depth 2
                                        #     Child Loop BB115_14 Depth 2
	blt	$s0, $t2, .LBB115_7
# %bb.4:                                # %.preheader50.preheader
                                        #   in Loop: Header=BB115_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB115_5:                              # %.preheader50
                                        #   Parent Loop BB115_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -56
	ld.w	$a6, $a4, -52
	ld.w	$a7, $a4, -48
	ld.w	$t0, $a4, -44
	ld.w	$t1, $a4, -40
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 0
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 8
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 16
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 24
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 32
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 36
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 40
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 44
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 48
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 52
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 28
	addi.d	$a2, $a2, 28
	addi.d	$a4, $a4, 112
	blt	$a3, $s6, .LBB115_5
# %bb.6:                                # %.loopexit51
                                        #   in Loop: Header=BB115_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB115_8
	b	.LBB115_15
	.p2align	4, , 16
.LBB115_7:                              #   in Loop: Header=BB115_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB115_15
.LBB115_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB115_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB115_10
# %bb.9:                                #   in Loop: Header=BB115_3 Depth=1
	move	$a3, $a2
	b	.LBB115_13
	.p2align	4, , 16
.LBB115_10:                             # %vector.ph
                                        #   in Loop: Header=BB115_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB115_11:                             # %vector.body
                                        #   Parent Loop BB115_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB115_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB115_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB115_15
.LBB115_13:                             # %.preheader.preheader68
                                        #   in Loop: Header=BB115_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB115_14:                             # %.preheader
                                        #   Parent Loop BB115_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB115_14
.LBB115_15:                             # %.loopexit
                                        #   in Loop: Header=BB115_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB115_2
# %bb.16:                               #   in Loop: Header=BB115_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 28
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB115_2
.LBB115_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB115_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB115_21
.LBB115_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB115_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB115_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI115_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI115_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB115_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end115:
	.size	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end115-_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
.LCPI116_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB116_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -26
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 52
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 27
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -163576
	ori	$s1, $a0, 1640
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB116_3
	.p2align	4, , 16
.LBB116_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB116_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB116_17
.LBB116_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_5 Depth 2
                                        #     Child Loop BB116_11 Depth 2
                                        #     Child Loop BB116_14 Depth 2
	blt	$s0, $t2, .LBB116_7
# %bb.4:                                # %.preheader49.preheader
                                        #   in Loop: Header=BB116_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB116_5:                              # %.preheader49
                                        #   Parent Loop BB116_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -52
	ld.w	$a6, $a4, -48
	ld.w	$a7, $a4, -44
	ld.w	$t0, $a4, -40
	ld.w	$t1, $a4, -36
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 0
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 40
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 44
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 48
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 52
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 27
	addi.d	$a2, $a2, 27
	addi.d	$a4, $a4, 108
	blt	$a3, $s6, .LBB116_5
# %bb.6:                                # %.loopexit50
                                        #   in Loop: Header=BB116_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB116_8
	b	.LBB116_15
	.p2align	4, , 16
.LBB116_7:                              #   in Loop: Header=BB116_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB116_15
.LBB116_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB116_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB116_10
# %bb.9:                                #   in Loop: Header=BB116_3 Depth=1
	move	$a3, $a2
	b	.LBB116_13
	.p2align	4, , 16
.LBB116_10:                             # %vector.ph
                                        #   in Loop: Header=BB116_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB116_11:                             # %vector.body
                                        #   Parent Loop BB116_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB116_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB116_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB116_15
.LBB116_13:                             # %.preheader.preheader67
                                        #   in Loop: Header=BB116_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB116_14:                             # %.preheader
                                        #   Parent Loop BB116_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB116_14
.LBB116_15:                             # %.loopexit
                                        #   in Loop: Header=BB116_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB116_2
# %bb.16:                               #   in Loop: Header=BB116_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 27
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB116_2
.LBB116_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB116_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB116_21
.LBB116_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB116_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB116_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI116_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI116_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB116_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end116:
	.size	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end116-_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi25EiE7do_testEPKiPKc,"axG",@progbits,_ZN15goto_loop_testsILi25EiE7do_testEPKiPKc,comdat
	.weak	_ZN15goto_loop_testsILi25EiE7do_testEPKiPKc # -- Begin function _ZN15goto_loop_testsILi25EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi25EiE7do_testEPKiPKc,@function
_ZN15goto_loop_testsILi25EiE7do_testEPKiPKc: # @_ZN15goto_loop_testsILi25EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi17EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1700
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1900
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end117:
	.size	_ZN15goto_loop_testsILi25EiE7do_testEPKiPKc, .Lfunc_end117-_ZN15goto_loop_testsILi25EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
.LCPI118_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB118_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -25
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 52
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$t2, $zero, 26
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB118_3
	.p2align	4, , 16
.LBB118_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB118_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB118_17
.LBB118_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_5 Depth 2
                                        #     Child Loop BB118_11 Depth 2
                                        #     Child Loop BB118_14 Depth 2
	blt	$s0, $t2, .LBB118_7
# %bb.4:                                # %.preheader48.preheader
                                        #   in Loop: Header=BB118_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB118_5:                              # %.preheader48
                                        #   Parent Loop BB118_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -52
	ld.w	$a6, $a4, -48
	ld.w	$a7, $a4, -44
	ld.w	$t0, $a4, -40
	ld.w	$t1, $a4, -36
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 0
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 8
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 16
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 24
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 28
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 32
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 36
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 40
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 44
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 48
	add.d	$a5, $a5, $a7
	add.w	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	addu16i.d	$a0, $a0, 7146
	addi.w	$a0, $a0, -848
	addi.d	$a3, $a3, 26
	addi.d	$a2, $a2, 26
	addi.d	$a4, $a4, 104
	blt	$a3, $s6, .LBB118_5
# %bb.6:                                # %.loopexit49
                                        #   in Loop: Header=BB118_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB118_8
	b	.LBB118_15
	.p2align	4, , 16
.LBB118_7:                              #   in Loop: Header=BB118_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB118_15
.LBB118_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB118_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB118_10
# %bb.9:                                #   in Loop: Header=BB118_3 Depth=1
	move	$a3, $a2
	b	.LBB118_13
	.p2align	4, , 16
.LBB118_10:                             # %vector.ph
                                        #   in Loop: Header=BB118_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB118_11:                             # %vector.body
                                        #   Parent Loop BB118_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB118_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB118_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB118_15
.LBB118_13:                             # %.preheader.preheader66
                                        #   in Loop: Header=BB118_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB118_14:                             # %.preheader
                                        #   Parent Loop BB118_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB118_14
.LBB118_15:                             # %.loopexit
                                        #   in Loop: Header=BB118_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB118_2
# %bb.16:                               #   in Loop: Header=BB118_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 26
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB118_2
.LBB118_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB118_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB118_21
.LBB118_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB118_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB118_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI118_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI118_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB118_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end118:
	.size	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end118-_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
.LCPI119_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB119_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -24
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 48
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 25
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 392247
	ori	$s1, $a0, 760
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB119_3
	.p2align	4, , 16
.LBB119_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB119_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB119_17
.LBB119_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_5 Depth 2
                                        #     Child Loop BB119_11 Depth 2
                                        #     Child Loop BB119_14 Depth 2
	blt	$s0, $t2, .LBB119_7
# %bb.4:                                # %.preheader47.preheader
                                        #   in Loop: Header=BB119_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB119_5:                              # %.preheader47
                                        #   Parent Loop BB119_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -48
	ld.w	$a6, $a4, -44
	ld.w	$a7, $a4, -40
	ld.w	$t0, $a4, -36
	ld.w	$t1, $a4, -32
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 0
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 32
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 40
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 44
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 48
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 25
	addi.d	$a2, $a2, 25
	addi.d	$a4, $a4, 100
	blt	$a3, $s6, .LBB119_5
# %bb.6:                                # %.loopexit48
                                        #   in Loop: Header=BB119_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB119_8
	b	.LBB119_15
	.p2align	4, , 16
.LBB119_7:                              #   in Loop: Header=BB119_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB119_15
.LBB119_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB119_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB119_10
# %bb.9:                                #   in Loop: Header=BB119_3 Depth=1
	move	$a3, $a2
	b	.LBB119_13
	.p2align	4, , 16
.LBB119_10:                             # %vector.ph
                                        #   in Loop: Header=BB119_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB119_11:                             # %vector.body
                                        #   Parent Loop BB119_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB119_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB119_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB119_15
.LBB119_13:                             # %.preheader.preheader65
                                        #   in Loop: Header=BB119_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB119_14:                             # %.preheader
                                        #   Parent Loop BB119_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB119_14
.LBB119_15:                             # %.loopexit
                                        #   in Loop: Header=BB119_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB119_2
# %bb.16:                               #   in Loop: Header=BB119_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 25
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB119_2
.LBB119_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB119_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB119_21
.LBB119_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB119_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB119_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI119_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI119_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB119_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end119:
	.size	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end119-_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
.LCPI120_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB120_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -23
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 48
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 24
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -378418
	ori	$s1, $a0, 2368
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB120_3
	.p2align	4, , 16
.LBB120_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB120_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB120_17
.LBB120_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_5 Depth 2
                                        #     Child Loop BB120_11 Depth 2
                                        #     Child Loop BB120_14 Depth 2
	blt	$s0, $t2, .LBB120_7
# %bb.4:                                # %.preheader46.preheader
                                        #   in Loop: Header=BB120_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB120_5:                              # %.preheader46
                                        #   Parent Loop BB120_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -48
	ld.w	$a6, $a4, -44
	ld.w	$a7, $a4, -40
	ld.w	$t0, $a4, -36
	ld.w	$t1, $a4, -32
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -28
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -20
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -12
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -4
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 0
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 4
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 8
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 12
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 16
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 20
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 24
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 28
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 32
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 36
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 40
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 44
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 24
	addi.d	$a2, $a2, 24
	addi.d	$a4, $a4, 96
	blt	$a3, $s6, .LBB120_5
# %bb.6:                                # %.loopexit47
                                        #   in Loop: Header=BB120_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB120_8
	b	.LBB120_15
	.p2align	4, , 16
.LBB120_7:                              #   in Loop: Header=BB120_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB120_15
.LBB120_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB120_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB120_10
# %bb.9:                                #   in Loop: Header=BB120_3 Depth=1
	move	$a3, $a2
	b	.LBB120_13
	.p2align	4, , 16
.LBB120_10:                             # %vector.ph
                                        #   in Loop: Header=BB120_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB120_11:                             # %vector.body
                                        #   Parent Loop BB120_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB120_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB120_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB120_15
.LBB120_13:                             # %.preheader.preheader64
                                        #   in Loop: Header=BB120_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB120_14:                             # %.preheader
                                        #   Parent Loop BB120_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB120_14
.LBB120_15:                             # %.loopexit
                                        #   in Loop: Header=BB120_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB120_2
# %bb.16:                               #   in Loop: Header=BB120_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 24
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB120_2
.LBB120_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB120_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB120_21
.LBB120_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB120_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB120_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI120_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI120_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB120_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end120:
	.size	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end120-_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
.LCPI121_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB121_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -22
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 44
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 23
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -100507
	ori	$s1, $a0, 3976
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB121_3
	.p2align	4, , 16
.LBB121_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB121_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB121_17
.LBB121_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_5 Depth 2
                                        #     Child Loop BB121_11 Depth 2
                                        #     Child Loop BB121_14 Depth 2
	blt	$s0, $t2, .LBB121_7
# %bb.4:                                # %.preheader45.preheader
                                        #   in Loop: Header=BB121_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB121_5:                              # %.preheader45
                                        #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -44
	ld.w	$a6, $a4, -40
	ld.w	$a7, $a4, -36
	ld.w	$t0, $a4, -32
	ld.w	$t1, $a4, -28
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 44
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	add.d	$a5, $a5, $a7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 23
	addi.d	$a2, $a2, 23
	addi.d	$a4, $a4, 92
	blt	$a3, $s6, .LBB121_5
# %bb.6:                                # %.loopexit46
                                        #   in Loop: Header=BB121_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB121_8
	b	.LBB121_15
	.p2align	4, , 16
.LBB121_7:                              #   in Loop: Header=BB121_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB121_15
.LBB121_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB121_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB121_10
# %bb.9:                                #   in Loop: Header=BB121_3 Depth=1
	move	$a3, $a2
	b	.LBB121_13
	.p2align	4, , 16
.LBB121_10:                             # %vector.ph
                                        #   in Loop: Header=BB121_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB121_11:                             # %vector.body
                                        #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB121_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB121_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB121_15
.LBB121_13:                             # %.preheader.preheader63
                                        #   in Loop: Header=BB121_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB121_14:                             # %.preheader
                                        #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB121_14
.LBB121_15:                             # %.loopexit
                                        #   in Loop: Header=BB121_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB121_2
# %bb.16:                               #   in Loop: Header=BB121_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 23
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB121_2
.LBB121_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB121_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB121_21
.LBB121_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB121_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB121_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI121_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI121_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB121_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end121:
	.size	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end121-_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
.LCPI122_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB122_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -21
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 44
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t2, $zero, 22
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 177405
	ori	$s1, $a0, 1488
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s3, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB122_3
	.p2align	4, , 16
.LBB122_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB122_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB122_17
.LBB122_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_5 Depth 2
                                        #     Child Loop BB122_11 Depth 2
                                        #     Child Loop BB122_14 Depth 2
	blt	$s0, $t2, .LBB122_7
# %bb.4:                                # %.preheader44.preheader
                                        #   in Loop: Header=BB122_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB122_5:                              # %.preheader44
                                        #   Parent Loop BB122_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -44
	ld.w	$a6, $a4, -40
	ld.w	$a7, $a4, -36
	ld.w	$t0, $a4, -32
	ld.w	$t1, $a4, -28
	add.d	$a5, $a6, $a5
	ld.w	$a6, $a4, -24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -20
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, -16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, -12
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, -8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, -4
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 0
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 4
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 8
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 12
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 16
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 20
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 24
	add.d	$a5, $a5, $a7
	ld.w	$a7, $a4, 28
	add.d	$a5, $a5, $t0
	ld.w	$t0, $a4, 32
	add.d	$a5, $a5, $t1
	ld.w	$t1, $a4, 36
	add.d	$a5, $a5, $a6
	ld.w	$a6, $a4, 40
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $a6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 22
	addi.d	$a2, $a2, 22
	addi.d	$a4, $a4, 88
	blt	$a3, $s6, .LBB122_5
# %bb.6:                                # %.loopexit45
                                        #   in Loop: Header=BB122_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB122_8
	b	.LBB122_15
	.p2align	4, , 16
.LBB122_7:                              #   in Loop: Header=BB122_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB122_15
.LBB122_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB122_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB122_10
# %bb.9:                                #   in Loop: Header=BB122_3 Depth=1
	move	$a3, $a2
	b	.LBB122_13
	.p2align	4, , 16
.LBB122_10:                             # %vector.ph
                                        #   in Loop: Header=BB122_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB122_11:                             # %vector.body
                                        #   Parent Loop BB122_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB122_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB122_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB122_15
.LBB122_13:                             # %.preheader.preheader62
                                        #   in Loop: Header=BB122_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB122_14:                             # %.preheader
                                        #   Parent Loop BB122_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB122_14
.LBB122_15:                             # %.loopexit
                                        #   in Loop: Header=BB122_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB122_2
# %bb.16:                               #   in Loop: Header=BB122_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 22
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB122_2
.LBB122_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB122_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB122_21
.LBB122_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB122_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB122_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI122_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI122_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB122_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end122:
	.size	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end122-_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
.LCPI123_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 88                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	st.d	$a2, $sp, 136                   # 8-byte Folded Spill
	blez	$a2, .LBB123_17
# %bb.1:                                # %.lr.ph
	move	$a1, $zero
	addi.w	$s4, $s0, -20
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 40
	st.d	$a2, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 455316
	ori	$s1, $a0, 3096
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	b	.LBB123_3
	.p2align	4, , 16
.LBB123_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB123_3 Depth=1
	addi.w	$a1, $s3, 1
	ld.d	$a0, $sp, 136                   # 8-byte Folded Reload
	bge	$a1, $a0, .LBB123_17
.LBB123_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_5 Depth 2
                                        #     Child Loop BB123_11 Depth 2
                                        #     Child Loop BB123_14 Depth 2
	st.d	$a1, $sp, 144                   # 8-byte Folded Spill
	ori	$a0, $zero, 21
	blt	$s0, $a0, .LBB123_6
# %bb.4:                                # %.preheader42.preheader
                                        #   in Loop: Header=BB123_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB123_5:                              # %.preheader42
                                        #   Parent Loop BB123_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -40
	ld.w	$a6, $a4, -36
	ld.w	$a7, $a4, -32
	ld.w	$t0, $a4, -28
	ld.w	$t1, $a4, -24
	ld.w	$t2, $a4, -20
	ld.w	$t3, $a4, -16
	ld.w	$t4, $a4, -12
	ld.w	$t5, $a4, -8
	ld.w	$t6, $a4, -4
	ld.w	$t7, $a4, 0
	ld.w	$t8, $a4, 4
	ld.w	$ra, $a4, 8
	ld.w	$s8, $a4, 12
	ld.w	$s7, $a4, 16
	ld.w	$s3, $a4, 20
	move	$s2, $s1
	move	$s1, $s4
	ld.w	$s4, $a4, 24
	ld.w	$a1, $a4, 28
	ld.w	$s0, $a4, 32
	ld.w	$s5, $a4, 36
	ld.w	$s6, $a4, 40
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	move	$s4, $s1
	move	$s1, $s2
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	add.d	$a1, $a1, $s6
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, 21
	addi.d	$a2, $a2, 21
	addi.d	$a4, $a4, 84
	blt	$a3, $s4, .LBB123_5
	b	.LBB123_7
	.p2align	4, , 16
.LBB123_6:                              #   in Loop: Header=BB123_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB123_7:                              # %.loopexit43
                                        #   in Loop: Header=BB123_3 Depth=1
	addi.w	$a1, $a2, 0
	ld.d	$s0, $sp, 128                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB123_15
# %bb.8:                                # %.preheader.preheader
                                        #   in Loop: Header=BB123_3 Depth=1
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	bgeu	$a4, $a1, .LBB123_10
# %bb.9:                                #   in Loop: Header=BB123_3 Depth=1
	move	$a3, $a2
	b	.LBB123_13
	.p2align	4, , 16
.LBB123_10:                             # %vector.ph
                                        #   in Loop: Header=BB123_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB123_11:                             # %vector.body
                                        #   Parent Loop BB123_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB123_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB123_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB123_15
.LBB123_13:                             # %.preheader.preheader60
                                        #   in Loop: Header=BB123_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 104                   # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB123_14:                             # %.preheader
                                        #   Parent Loop BB123_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB123_14
.LBB123_15:                             # %.loopexit
                                        #   in Loop: Header=BB123_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 120                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	beq	$a0, $a1, .LBB123_2
# %bb.16:                               #   in Loop: Header=BB123_3 Depth=1
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 136                   # 8-byte Folded Spill
	b	.LBB123_2
.LBB123_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	beqz	$a2, .LBB123_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $a4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB123_21
.LBB123_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB123_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	ld.w	$a0, $a4, %pc_lo12(current_test)
.LBB123_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI123_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI123_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $a4, %pc_lo12(current_test)
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB123_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end123:
	.size	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end123-_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
.LCPI124_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 120                   # 8-byte Folded Spill
	blez	$a2, .LBB124_17
# %bb.1:                                # %.lr.ph
	move	$a1, $zero
	addi.w	$s6, $s0, -19
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 40
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -315348
	ori	$s1, $a0, 608
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 112                   # 8-byte Folded Spill
	b	.LBB124_3
	.p2align	4, , 16
.LBB124_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB124_3 Depth=1
	addi.w	$a1, $s3, 1
	ld.d	$a0, $sp, 120                   # 8-byte Folded Reload
	bge	$a1, $a0, .LBB124_17
.LBB124_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_5 Depth 2
                                        #     Child Loop BB124_11 Depth 2
                                        #     Child Loop BB124_14 Depth 2
	st.d	$a1, $sp, 128                   # 8-byte Folded Spill
	ori	$a0, $zero, 20
	blt	$s0, $a0, .LBB124_6
# %bb.4:                                # %.preheader41.preheader
                                        #   in Loop: Header=BB124_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB124_5:                              # %.preheader41
                                        #   Parent Loop BB124_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -40
	ld.w	$a6, $a4, -36
	ld.w	$a7, $a4, -32
	ld.w	$t0, $a4, -28
	ld.w	$t1, $a4, -24
	ld.w	$t2, $a4, -20
	ld.w	$t3, $a4, -16
	ld.w	$t4, $a4, -12
	ld.w	$t5, $a4, -8
	ld.w	$t6, $a4, -4
	ld.w	$t7, $a4, 0
	ld.w	$t8, $a4, 4
	ld.w	$ra, $a4, 8
	ld.w	$s8, $a4, 12
	ld.w	$s7, $a4, 16
	ld.w	$s3, $a4, 20
	ld.w	$s4, $a4, 24
	ld.w	$a1, $a4, 28
	ld.w	$s0, $a4, 32
	ld.w	$s5, $a4, 36
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	add.d	$a1, $a1, $s5
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 20
	addi.d	$a2, $a2, 20
	addi.d	$a4, $a4, 80
	blt	$a3, $s6, .LBB124_5
	b	.LBB124_7
	.p2align	4, , 16
.LBB124_6:                              #   in Loop: Header=BB124_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB124_7:                              # %.loopexit42
                                        #   in Loop: Header=BB124_3 Depth=1
	addi.w	$a1, $a2, 0
	ld.d	$s0, $sp, 112                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB124_15
# %bb.8:                                # %.preheader.preheader
                                        #   in Loop: Header=BB124_3 Depth=1
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB124_10
# %bb.9:                                #   in Loop: Header=BB124_3 Depth=1
	move	$a3, $a2
	b	.LBB124_13
	.p2align	4, , 16
.LBB124_10:                             # %vector.ph
                                        #   in Loop: Header=BB124_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB124_11:                             # %vector.body
                                        #   Parent Loop BB124_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB124_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB124_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB124_15
.LBB124_13:                             # %.preheader.preheader59
                                        #   in Loop: Header=BB124_3 Depth=1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB124_14:                             # %.preheader
                                        #   Parent Loop BB124_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB124_14
.LBB124_15:                             # %.loopexit
                                        #   in Loop: Header=BB124_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	beq	$a0, $a1, .LBB124_2
# %bb.16:                               #   in Loop: Header=BB124_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 120                   # 8-byte Folded Spill
	b	.LBB124_2
.LBB124_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB124_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB124_21
.LBB124_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB124_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB124_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI124_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI124_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB124_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end124:
	.size	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end124-_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
.LCPI125_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -224
	.cfi_def_cfa_offset 224
	st.d	$ra, $sp, 216                   # 8-byte Folded Spill
	st.d	$fp, $sp, 208                   # 8-byte Folded Spill
	st.d	$s0, $sp, 200                   # 8-byte Folded Spill
	st.d	$s1, $sp, 192                   # 8-byte Folded Spill
	st.d	$s2, $sp, 184                   # 8-byte Folded Spill
	st.d	$s3, $sp, 176                   # 8-byte Folded Spill
	st.d	$s4, $sp, 168                   # 8-byte Folded Spill
	st.d	$s5, $sp, 160                   # 8-byte Folded Spill
	st.d	$s6, $sp, 152                   # 8-byte Folded Spill
	st.d	$s7, $sp, 144                   # 8-byte Folded Spill
	st.d	$s8, $sp, 136                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	st.d	$a2, $sp, 128                   # 8-byte Folded Spill
	blez	$a2, .LBB125_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -18
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 36
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -37437
	ori	$s1, $a0, 2216
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	b	.LBB125_3
	.p2align	4, , 16
.LBB125_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB125_3 Depth=1
	addi.w	$s5, $s5, 1
	ld.d	$a0, $sp, 128                   # 8-byte Folded Reload
	bge	$s5, $a0, .LBB125_17
.LBB125_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_5 Depth 2
                                        #     Child Loop BB125_11 Depth 2
                                        #     Child Loop BB125_14 Depth 2
	ori	$a0, $zero, 19
	blt	$s0, $a0, .LBB125_6
# %bb.4:                                # %.preheader40.preheader
                                        #   in Loop: Header=BB125_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB125_5:                              # %.preheader40
                                        #   Parent Loop BB125_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -36
	ld.w	$a6, $a4, -32
	ld.w	$a7, $a4, -28
	ld.w	$t0, $a4, -24
	ld.w	$t1, $a4, -20
	ld.w	$t2, $a4, -16
	ld.w	$t3, $a4, -12
	ld.w	$t4, $a4, -8
	ld.w	$t5, $a4, -4
	ld.w	$t6, $a4, 0
	ld.w	$t7, $a4, 4
	ld.w	$t8, $a4, 8
	ld.w	$ra, $a4, 12
	ld.w	$s8, $a4, 16
	ld.w	$s7, $a4, 20
	ld.w	$s3, $a4, 24
	ld.w	$s4, $a4, 28
	ld.w	$a1, $a4, 32
	ld.w	$s0, $a4, 36
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	add.d	$a1, $a1, $s0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 19
	addi.d	$a2, $a2, 19
	addi.d	$a4, $a4, 76
	blt	$a3, $s6, .LBB125_5
	b	.LBB125_7
	.p2align	4, , 16
.LBB125_6:                              #   in Loop: Header=BB125_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
.LBB125_7:                              # %.loopexit41
                                        #   in Loop: Header=BB125_3 Depth=1
	addi.w	$a1, $a2, 0
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	bge	$a1, $s0, .LBB125_15
# %bb.8:                                # %.preheader.preheader
                                        #   in Loop: Header=BB125_3 Depth=1
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB125_10
# %bb.9:                                #   in Loop: Header=BB125_3 Depth=1
	move	$a3, $a2
	b	.LBB125_13
	.p2align	4, , 16
.LBB125_10:                             # %vector.ph
                                        #   in Loop: Header=BB125_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB125_11:                             # %vector.body
                                        #   Parent Loop BB125_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB125_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB125_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB125_15
.LBB125_13:                             # %.preheader.preheader58
                                        #   in Loop: Header=BB125_3 Depth=1
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB125_14:                             # %.preheader
                                        #   Parent Loop BB125_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB125_14
.LBB125_15:                             # %.loopexit
                                        #   in Loop: Header=BB125_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 112                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB125_2
# %bb.16:                               #   in Loop: Header=BB125_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 128                   # 8-byte Folded Spill
	b	.LBB125_2
.LBB125_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB125_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB125_21
.LBB125_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB125_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB125_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI125_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI125_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 200                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 208                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 216                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 224
	ret
.LBB125_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end125:
	.size	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end125-_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi17EiE7do_testEPKiPKc,"axG",@progbits,_ZN15goto_loop_testsILi17EiE7do_testEPKiPKc,comdat
	.weak	_ZN15goto_loop_testsILi17EiE7do_testEPKiPKc # -- Begin function _ZN15goto_loop_testsILi17EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi17EiE7do_testEPKiPKc,@function
_ZN15goto_loop_testsILi17EiE7do_testEPKiPKc: # @_ZN15goto_loop_testsILi17EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi9EiE7do_testEPKiPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end126:
	.size	_ZN15goto_loop_testsILi17EiE7do_testEPKiPKc, .Lfunc_end126-_ZN15goto_loop_testsILi17EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
.LCPI127_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a2, $a1, %pc_lo12(iterations)
	pcalau12i	$a1, %pc_hi20(start_time)
	st.d	$a1, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a1, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	st.d	$a2, $sp, 112                   # 8-byte Folded Spill
	blez	$a2, .LBB127_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -17
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a1, $a0, 36
	st.d	$a1, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 240474
	ori	$s1, $a0, 3824
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	b	.LBB127_3
	.p2align	4, , 16
.LBB127_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB127_3 Depth=1
	addi.w	$s5, $s5, 1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	bge	$s5, $a0, .LBB127_17
.LBB127_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_5 Depth 2
                                        #     Child Loop BB127_11 Depth 2
                                        #     Child Loop BB127_14 Depth 2
	ori	$a0, $zero, 18
	blt	$s0, $a0, .LBB127_7
# %bb.4:                                # %.preheader39.preheader
                                        #   in Loop: Header=BB127_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB127_5:                              # %.preheader39
                                        #   Parent Loop BB127_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -36
	ld.w	$a6, $a4, -32
	ld.w	$a7, $a4, -28
	ld.w	$t0, $a4, -24
	ld.w	$t1, $a4, -20
	ld.w	$t2, $a4, -16
	ld.w	$t3, $a4, -12
	ld.w	$t4, $a4, -8
	ld.w	$t5, $a4, -4
	ld.w	$t6, $a4, 0
	ld.w	$t7, $a4, 4
	ld.w	$t8, $a4, 8
	ld.w	$ra, $a4, 12
	ld.w	$s8, $a4, 16
	ld.w	$s7, $a4, 20
	ld.w	$s3, $a4, 24
	ld.w	$s4, $a4, 28
	ld.w	$a1, $a4, 32
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	add.d	$a1, $a5, $a1
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 18
	addi.d	$a2, $a2, 18
	addi.d	$a4, $a4, 72
	blt	$a3, $s6, .LBB127_5
# %bb.6:                                # %.loopexit40
                                        #   in Loop: Header=BB127_3 Depth=1
	addi.w	$a1, $a2, 0
	blt	$a1, $s0, .LBB127_8
	b	.LBB127_15
	.p2align	4, , 16
.LBB127_7:                              #   in Loop: Header=BB127_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a1, $a2, 0
	bge	$a1, $s0, .LBB127_15
.LBB127_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB127_3 Depth=1
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a1, $a2
	ori	$a1, $zero, 8
	bgeu	$a4, $a1, .LBB127_10
# %bb.9:                                #   in Loop: Header=BB127_3 Depth=1
	move	$a3, $a2
	b	.LBB127_13
	.p2align	4, , 16
.LBB127_10:                             # %vector.ph
                                        #   in Loop: Header=BB127_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB127_11:                             # %vector.body
                                        #   Parent Loop BB127_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB127_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB127_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB127_15
.LBB127_13:                             # %.preheader.preheader57
                                        #   in Loop: Header=BB127_3 Depth=1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a1, 2
	ld.d	$a1, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a1, $a3
	.p2align	4, , 16
.LBB127_14:                             # %.preheader
                                        #   Parent Loop BB127_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a1, $a2, 0
	mul.d	$a1, $a1, $fp
	add.d	$a0, $a0, $a1
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB127_14
.LBB127_15:                             # %.loopexit
                                        #   in Loop: Header=BB127_3 Depth=1
	pcalau12i	$a1, %pc_hi20(init_value)
	fld.d	$fa0, $a1, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a1, $fa0
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	mul.d	$a1, $a1, $a2
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	add.w	$a1, $a1, $a2
	addi.w	$a0, $a0, 0
	beq	$a0, $a1, .LBB127_2
# %bb.16:                               #   in Loop: Header=BB127_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, %pc_lo12(iterations)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	b	.LBB127_2
.LBB127_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB127_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB127_21
.LBB127_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB127_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB127_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI127_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI127_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB127_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end127:
	.size	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end127-_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
.LCPI128_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	blez	$a1, .LBB128_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -16
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 518386
	ori	$s1, $a0, 1336
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$a0, $a0, 1536
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	b	.LBB128_3
	.p2align	4, , 16
.LBB128_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB128_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB128_17
.LBB128_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_5 Depth 2
                                        #     Child Loop BB128_11 Depth 2
                                        #     Child Loop BB128_14 Depth 2
	ori	$a0, $zero, 17
	blt	$s0, $a0, .LBB128_7
# %bb.4:                                # %.preheader38.preheader
                                        #   in Loop: Header=BB128_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB128_5:                              # %.preheader38
                                        #   Parent Loop BB128_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -32
	ld.w	$a6, $a4, -28
	ld.w	$a7, $a4, -24
	ld.w	$t0, $a4, -20
	ld.w	$t1, $a4, -16
	ld.w	$t2, $a4, -12
	ld.w	$t3, $a4, -8
	ld.w	$t4, $a4, -4
	ld.w	$t5, $a4, 0
	ld.w	$t6, $a4, 4
	ld.w	$t7, $a4, 8
	ld.w	$t8, $a4, 12
	ld.w	$ra, $a4, 16
	ld.w	$s8, $a4, 20
	ld.w	$s7, $a4, 24
	ld.w	$s3, $a4, 28
	ld.w	$s4, $a4, 32
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	add.d	$a5, $a5, $s4
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 17
	addi.d	$a2, $a2, 17
	addi.d	$a4, $a4, 68
	blt	$a3, $s6, .LBB128_5
# %bb.6:                                # %.loopexit39
                                        #   in Loop: Header=BB128_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB128_8
	b	.LBB128_15
	.p2align	4, , 16
.LBB128_7:                              #   in Loop: Header=BB128_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB128_15
.LBB128_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB128_3 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB128_10
# %bb.9:                                #   in Loop: Header=BB128_3 Depth=1
	move	$a3, $a2
	b	.LBB128_13
	.p2align	4, , 16
.LBB128_10:                             # %vector.ph
                                        #   in Loop: Header=BB128_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB128_11:                             # %vector.body
                                        #   Parent Loop BB128_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB128_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB128_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB128_15
.LBB128_13:                             # %.preheader.preheader56
                                        #   in Loop: Header=BB128_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB128_14:                             # %.preheader
                                        #   Parent Loop BB128_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB128_14
.LBB128_15:                             # %.loopexit
                                        #   in Loop: Header=BB128_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ld.d	$a3, $sp, 112                   # 8-byte Folded Reload
	mul.d	$a2, $a2, $a3
	ld.d	$a3, $sp, 104                   # 8-byte Folded Reload
	add.w	$a2, $a2, $a3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB128_2
# %bb.16:                               #   in Loop: Header=BB128_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB128_2
.LBB128_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB128_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB128_21
.LBB128_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB128_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB128_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI128_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI128_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB128_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end128:
	.size	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end128-_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
.LCPI129_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB129_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -15
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -252279
	ori	$s1, $a0, 2944
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$a0, $a0, 1088
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	lu12i.w	$a0, -310021
	ori	$s4, $a0, 1536
	b	.LBB129_3
	.p2align	4, , 16
.LBB129_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB129_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB129_17
.LBB129_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_5 Depth 2
                                        #     Child Loop BB129_11 Depth 2
                                        #     Child Loop BB129_14 Depth 2
	ori	$a0, $zero, 16
	blt	$s0, $a0, .LBB129_7
# %bb.4:                                # %.preheader37.preheader
                                        #   in Loop: Header=BB129_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB129_5:                              # %.preheader37
                                        #   Parent Loop BB129_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -32
	ld.w	$a6, $a4, -28
	ld.w	$a7, $a4, -24
	ld.w	$t0, $a4, -20
	ld.w	$t1, $a4, -16
	ld.w	$t2, $a4, -12
	ld.w	$t3, $a4, -8
	ld.w	$t4, $a4, -4
	ld.w	$t5, $a4, 0
	ld.w	$t6, $a4, 4
	ld.w	$t7, $a4, 8
	ld.w	$t8, $a4, 12
	ld.w	$ra, $a4, 16
	ld.w	$s8, $a4, 20
	ld.w	$s7, $a4, 24
	ld.w	$s3, $a4, 28
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	add.d	$a5, $a5, $s3
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 16
	addi.d	$a2, $a2, 16
	addi.d	$a4, $a4, 64
	blt	$a3, $s6, .LBB129_5
# %bb.6:                                # %.loopexit38
                                        #   in Loop: Header=BB129_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB129_8
	b	.LBB129_15
	.p2align	4, , 16
.LBB129_7:                              #   in Loop: Header=BB129_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB129_15
.LBB129_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB129_3 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB129_10
# %bb.9:                                #   in Loop: Header=BB129_3 Depth=1
	move	$a3, $a2
	b	.LBB129_13
	.p2align	4, , 16
.LBB129_10:                             # %vector.ph
                                        #   in Loop: Header=BB129_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB129_11:                             # %vector.body
                                        #   Parent Loop BB129_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB129_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB129_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB129_15
.LBB129_13:                             # %.preheader.preheader55
                                        #   in Loop: Header=BB129_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 88                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB129_14:                             # %.preheader
                                        #   Parent Loop BB129_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB129_14
.LBB129_15:                             # %.loopexit
                                        #   in Loop: Header=BB129_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	mul.d	$a2, $a2, $a3
	add.w	$a2, $a2, $s4
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB129_2
# %bb.16:                               #   in Loop: Header=BB129_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB129_2
.LBB129_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB129_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB129_21
.LBB129_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB129_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB129_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI129_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI129_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB129_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end129:
	.size	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end129-_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
.LCPI130_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 88                    # 8-byte Folded Spill
	blez	$a1, .LBB130_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -14
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 28
	st.d	$a2, $sp, 72                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 25633
	ori	$s1, $a0, 456
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB130_3
	.p2align	4, , 16
.LBB130_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB130_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB130_17
.LBB130_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_5 Depth 2
                                        #     Child Loop BB130_11 Depth 2
                                        #     Child Loop BB130_14 Depth 2
	ori	$a0, $zero, 15
	blt	$s0, $a0, .LBB130_7
# %bb.4:                                # %.preheader36.preheader
                                        #   in Loop: Header=BB130_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB130_5:                              # %.preheader36
                                        #   Parent Loop BB130_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -28
	ld.w	$a6, $a4, -24
	ld.w	$a7, $a4, -20
	ld.w	$t0, $a4, -16
	ld.w	$t1, $a4, -12
	ld.w	$t2, $a4, -8
	ld.w	$t3, $a4, -4
	ld.w	$t4, $a4, 0
	ld.w	$t5, $a4, 4
	ld.w	$t6, $a4, 8
	ld.w	$t7, $a4, 12
	ld.w	$t8, $a4, 16
	ld.w	$ra, $a4, 20
	ld.w	$s8, $a4, 24
	ld.w	$s7, $a4, 28
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	add.d	$a5, $a5, $s7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 15
	addi.d	$a2, $a2, 15
	addi.d	$a4, $a4, 60
	blt	$a3, $s6, .LBB130_5
# %bb.6:                                # %.loopexit37
                                        #   in Loop: Header=BB130_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB130_8
	b	.LBB130_15
	.p2align	4, , 16
.LBB130_7:                              #   in Loop: Header=BB130_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB130_15
.LBB130_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB130_3 Depth=1
	ld.d	$a3, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a4, $a3, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB130_10
# %bb.9:                                #   in Loop: Header=BB130_3 Depth=1
	move	$a3, $a2
	b	.LBB130_13
	.p2align	4, , 16
.LBB130_10:                             # %vector.ph
                                        #   in Loop: Header=BB130_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB130_11:                             # %vector.body
                                        #   Parent Loop BB130_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB130_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB130_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB130_15
.LBB130_13:                             # %.preheader.preheader54
                                        #   in Loop: Header=BB130_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	ld.d	$a4, $sp, 96                    # 8-byte Folded Reload
	sub.d	$a3, $a4, $a3
	.p2align	4, , 16
.LBB130_14:                             # %.preheader
                                        #   Parent Loop BB130_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB130_14
.LBB130_15:                             # %.loopexit
                                        #   in Loop: Header=BB130_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB130_2
# %bb.16:                               #   in Loop: Header=BB130_3 Depth=1
	ld.d	$a0, $sp, 88                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB130_2
.LBB130_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 88                    # 8-byte Folded Reload
	beqz	$a2, .LBB130_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB130_21
.LBB130_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB130_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB130_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI130_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI130_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB130_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end130:
	.size	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end130-_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
.LCPI131_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB131_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -13
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 28
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 303544
	ori	$s1, $a0, 2064
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB131_3
	.p2align	4, , 16
.LBB131_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB131_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB131_17
.LBB131_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_5 Depth 2
                                        #     Child Loop BB131_11 Depth 2
                                        #     Child Loop BB131_14 Depth 2
	ori	$a0, $zero, 14
	blt	$s0, $a0, .LBB131_7
# %bb.4:                                # %.preheader35.preheader
                                        #   in Loop: Header=BB131_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB131_5:                              # %.preheader35
                                        #   Parent Loop BB131_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -28
	ld.w	$a6, $a4, -24
	ld.w	$a7, $a4, -20
	ld.w	$t0, $a4, -16
	ld.w	$t1, $a4, -12
	ld.w	$t2, $a4, -8
	ld.w	$t3, $a4, -4
	ld.w	$t4, $a4, 0
	ld.w	$t5, $a4, 4
	ld.w	$t6, $a4, 8
	ld.w	$t7, $a4, 12
	ld.w	$t8, $a4, 16
	ld.w	$ra, $a4, 20
	ld.w	$s8, $a4, 24
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	add.d	$a5, $a5, $s8
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 14
	addi.d	$a2, $a2, 14
	addi.d	$a4, $a4, 56
	blt	$a3, $s6, .LBB131_5
# %bb.6:                                # %.loopexit36
                                        #   in Loop: Header=BB131_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB131_8
	b	.LBB131_15
	.p2align	4, , 16
.LBB131_7:                              #   in Loop: Header=BB131_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB131_15
.LBB131_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB131_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB131_10
# %bb.9:                                #   in Loop: Header=BB131_3 Depth=1
	move	$a3, $a2
	b	.LBB131_13
	.p2align	4, , 16
.LBB131_10:                             # %vector.ph
                                        #   in Loop: Header=BB131_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB131_11:                             # %vector.body
                                        #   Parent Loop BB131_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB131_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB131_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB131_15
.LBB131_13:                             # %.preheader.preheader53
                                        #   in Loop: Header=BB131_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB131_14:                             # %.preheader
                                        #   Parent Loop BB131_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB131_14
.LBB131_15:                             # %.loopexit
                                        #   in Loop: Header=BB131_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB131_2
# %bb.16:                               #   in Loop: Header=BB131_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB131_2
.LBB131_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB131_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB131_21
.LBB131_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB131_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB131_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI131_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI131_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB131_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end131:
	.size	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end131-_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
.LCPI132_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB132_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -12
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 24
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$s1, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB132_3
	.p2align	4, , 16
.LBB132_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB132_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB132_17
.LBB132_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_5 Depth 2
                                        #     Child Loop BB132_11 Depth 2
                                        #     Child Loop BB132_14 Depth 2
	ori	$a0, $zero, 13
	blt	$s0, $a0, .LBB132_7
# %bb.4:                                # %.preheader34.preheader
                                        #   in Loop: Header=BB132_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB132_5:                              # %.preheader34
                                        #   Parent Loop BB132_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -24
	ld.w	$a6, $a4, -20
	ld.w	$a7, $a4, -16
	ld.w	$t0, $a4, -12
	ld.w	$t1, $a4, -8
	ld.w	$t2, $a4, -4
	ld.w	$t3, $a4, 0
	ld.w	$t4, $a4, 4
	ld.w	$t5, $a4, 8
	ld.w	$t6, $a4, 12
	ld.w	$t7, $a4, 16
	ld.w	$t8, $a4, 20
	ld.w	$ra, $a4, 24
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.w	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	add.d	$a5, $a5, $ra
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	addu16i.d	$a0, $a0, -29195
	addi.w	$a0, $a0, -424
	addi.d	$a3, $a3, 13
	addi.d	$a2, $a2, 13
	addi.d	$a4, $a4, 52
	blt	$a3, $s6, .LBB132_5
# %bb.6:                                # %.loopexit35
                                        #   in Loop: Header=BB132_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB132_8
	b	.LBB132_15
	.p2align	4, , 16
.LBB132_7:                              #   in Loop: Header=BB132_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB132_15
.LBB132_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB132_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB132_10
# %bb.9:                                #   in Loop: Header=BB132_3 Depth=1
	move	$a3, $a2
	b	.LBB132_13
	.p2align	4, , 16
.LBB132_10:                             # %vector.ph
                                        #   in Loop: Header=BB132_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB132_11:                             # %vector.body
                                        #   Parent Loop BB132_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB132_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB132_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB132_15
.LBB132_13:                             # %.preheader.preheader52
                                        #   in Loop: Header=BB132_3 Depth=1
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB132_14:                             # %.preheader
                                        #   Parent Loop BB132_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB132_14
.LBB132_15:                             # %.loopexit
                                        #   in Loop: Header=BB132_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB132_2
# %bb.16:                               #   in Loop: Header=BB132_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB132_2
.LBB132_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB132_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB132_21
.LBB132_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB132_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB132_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI132_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI132_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB132_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end132:
	.size	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end132-_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
.LCPI133_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB133_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -11
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 24
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$ra, $zero, 12
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -189209
	ori	$s1, $a0, 1184
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB133_3
	.p2align	4, , 16
.LBB133_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB133_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB133_17
.LBB133_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_5 Depth 2
                                        #     Child Loop BB133_11 Depth 2
                                        #     Child Loop BB133_14 Depth 2
	blt	$s0, $ra, .LBB133_7
# %bb.4:                                # %.preheader33.preheader
                                        #   in Loop: Header=BB133_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB133_5:                              # %.preheader33
                                        #   Parent Loop BB133_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -24
	ld.w	$a6, $a4, -20
	ld.w	$a7, $a4, -16
	ld.w	$t0, $a4, -12
	ld.w	$t1, $a4, -8
	ld.w	$t2, $a4, -4
	ld.w	$t3, $a4, 0
	ld.w	$t4, $a4, 4
	ld.w	$t5, $a4, 8
	ld.w	$t6, $a4, 12
	ld.w	$t7, $a4, 16
	ld.w	$t8, $a4, 20
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	add.d	$a5, $a5, $t8
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 12
	addi.d	$a2, $a2, 12
	addi.d	$a4, $a4, 48
	blt	$a3, $s6, .LBB133_5
# %bb.6:                                # %.loopexit34
                                        #   in Loop: Header=BB133_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB133_8
	b	.LBB133_15
	.p2align	4, , 16
.LBB133_7:                              #   in Loop: Header=BB133_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB133_15
.LBB133_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB133_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB133_10
# %bb.9:                                #   in Loop: Header=BB133_3 Depth=1
	move	$a3, $a2
	b	.LBB133_13
	.p2align	4, , 16
.LBB133_10:                             # %vector.ph
                                        #   in Loop: Header=BB133_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB133_11:                             # %vector.body
                                        #   Parent Loop BB133_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB133_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB133_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB133_15
.LBB133_13:                             # %.preheader.preheader51
                                        #   in Loop: Header=BB133_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB133_14:                             # %.preheader
                                        #   Parent Loop BB133_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB133_14
.LBB133_15:                             # %.loopexit
                                        #   in Loop: Header=BB133_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB133_2
# %bb.16:                               #   in Loop: Header=BB133_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$ra, $zero, 12
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB133_2
.LBB133_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB133_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB133_21
.LBB133_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB133_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB133_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI133_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI133_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB133_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end133:
	.size	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end133-_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
.LCPI134_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB134_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -10
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 20
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t8, $zero, 11
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 88702
	ori	$s1, $a0, 2792
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB134_3
	.p2align	4, , 16
.LBB134_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB134_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB134_17
.LBB134_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_5 Depth 2
                                        #     Child Loop BB134_11 Depth 2
                                        #     Child Loop BB134_14 Depth 2
	blt	$s0, $t8, .LBB134_7
# %bb.4:                                # %.preheader32.preheader
                                        #   in Loop: Header=BB134_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB134_5:                              # %.preheader32
                                        #   Parent Loop BB134_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -20
	ld.w	$a6, $a4, -16
	ld.w	$a7, $a4, -12
	ld.w	$t0, $a4, -8
	ld.w	$t1, $a4, -4
	ld.w	$t2, $a4, 0
	ld.w	$t3, $a4, 4
	ld.w	$t4, $a4, 8
	ld.w	$t5, $a4, 12
	ld.w	$t6, $a4, 16
	ld.w	$t7, $a4, 20
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	add.d	$a5, $a5, $t7
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 11
	addi.d	$a2, $a2, 11
	addi.d	$a4, $a4, 44
	blt	$a3, $s6, .LBB134_5
# %bb.6:                                # %.loopexit33
                                        #   in Loop: Header=BB134_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB134_8
	b	.LBB134_15
	.p2align	4, , 16
.LBB134_7:                              #   in Loop: Header=BB134_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB134_15
.LBB134_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB134_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB134_10
# %bb.9:                                #   in Loop: Header=BB134_3 Depth=1
	move	$a3, $a2
	b	.LBB134_13
	.p2align	4, , 16
.LBB134_10:                             # %vector.ph
                                        #   in Loop: Header=BB134_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB134_11:                             # %vector.body
                                        #   Parent Loop BB134_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB134_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB134_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB134_15
.LBB134_13:                             # %.preheader.preheader50
                                        #   in Loop: Header=BB134_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB134_14:                             # %.preheader
                                        #   Parent Loop BB134_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB134_14
.LBB134_15:                             # %.loopexit
                                        #   in Loop: Header=BB134_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB134_2
# %bb.16:                               #   in Loop: Header=BB134_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t8, $zero, 11
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB134_2
.LBB134_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB134_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB134_21
.LBB134_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB134_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB134_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI134_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI134_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB134_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end134:
	.size	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end134-_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi9EiE7do_testEPKiPKc,"axG",@progbits,_ZN15goto_loop_testsILi9EiE7do_testEPKiPKc,comdat
	.weak	_ZN15goto_loop_testsILi9EiE7do_testEPKiPKc # -- Begin function _ZN15goto_loop_testsILi9EiE7do_testEPKiPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi9EiE7do_testEPKiPKc,@function
_ZN15goto_loop_testsILi9EiE7do_testEPKiPKc: # @_ZN15goto_loop_testsILi9EiE7do_testEPKiPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc)
	jr	$t8
.Lfunc_end135:
	.size	_ZN15goto_loop_testsILi9EiE7do_testEPKiPKc, .Lfunc_end135-_ZN15goto_loop_testsILi9EiE7do_testEPKiPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
.LCPI136_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB136_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -9
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 20
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t7, $zero, 10
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 366614
	ori	$s1, $a0, 304
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB136_3
	.p2align	4, , 16
.LBB136_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB136_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB136_17
.LBB136_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_5 Depth 2
                                        #     Child Loop BB136_11 Depth 2
                                        #     Child Loop BB136_14 Depth 2
	blt	$s0, $t7, .LBB136_7
# %bb.4:                                # %.preheader31.preheader
                                        #   in Loop: Header=BB136_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB136_5:                              # %.preheader31
                                        #   Parent Loop BB136_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -20
	ld.w	$a6, $a4, -16
	ld.w	$a7, $a4, -12
	ld.w	$t0, $a4, -8
	ld.w	$t1, $a4, -4
	ld.w	$t2, $a4, 0
	ld.w	$t3, $a4, 4
	ld.w	$t4, $a4, 8
	ld.w	$t5, $a4, 12
	ld.w	$t6, $a4, 16
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	add.d	$a5, $a5, $t6
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 10
	addi.d	$a2, $a2, 10
	addi.d	$a4, $a4, 40
	blt	$a3, $s6, .LBB136_5
# %bb.6:                                # %.loopexit32
                                        #   in Loop: Header=BB136_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB136_8
	b	.LBB136_15
	.p2align	4, , 16
.LBB136_7:                              #   in Loop: Header=BB136_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB136_15
.LBB136_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB136_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB136_10
# %bb.9:                                #   in Loop: Header=BB136_3 Depth=1
	move	$a3, $a2
	b	.LBB136_13
	.p2align	4, , 16
.LBB136_10:                             # %vector.ph
                                        #   in Loop: Header=BB136_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB136_11:                             # %vector.body
                                        #   Parent Loop BB136_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB136_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB136_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB136_15
.LBB136_13:                             # %.preheader.preheader49
                                        #   in Loop: Header=BB136_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB136_14:                             # %.preheader
                                        #   Parent Loop BB136_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB136_14
.LBB136_15:                             # %.loopexit
                                        #   in Loop: Header=BB136_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB136_2
# %bb.16:                               #   in Loop: Header=BB136_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t7, $zero, 10
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB136_2
.LBB136_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB136_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB136_21
.LBB136_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB136_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB136_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI136_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI136_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB136_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end136:
	.size	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end136-_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
.LCPI137_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB137_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -8
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 16
	ori	$t6, $zero, 9
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -404051
	ori	$s1, $a0, 1912
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$fp, $a0, 1536
	b	.LBB137_3
	.p2align	4, , 16
.LBB137_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB137_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB137_17
.LBB137_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_5 Depth 2
                                        #     Child Loop BB137_11 Depth 2
                                        #     Child Loop BB137_14 Depth 2
	blt	$s0, $t6, .LBB137_7
# %bb.4:                                # %.preheader30.preheader
                                        #   in Loop: Header=BB137_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB137_5:                              # %.preheader30
                                        #   Parent Loop BB137_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -16
	ld.w	$a6, $a4, -12
	ld.w	$a7, $a4, -8
	ld.w	$t0, $a4, -4
	ld.w	$t1, $a4, 0
	ld.w	$t2, $a4, 4
	ld.w	$t3, $a4, 8
	ld.w	$t4, $a4, 12
	ld.w	$t5, $a4, 16
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	add.d	$a5, $a5, $t5
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 9
	addi.d	$a2, $a2, 9
	addi.d	$a4, $a4, 36
	blt	$a3, $s6, .LBB137_5
# %bb.6:                                # %.loopexit31
                                        #   in Loop: Header=BB137_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB137_8
	b	.LBB137_15
	.p2align	4, , 16
.LBB137_7:                              #   in Loop: Header=BB137_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB137_15
.LBB137_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB137_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB137_10
# %bb.9:                                #   in Loop: Header=BB137_3 Depth=1
	move	$a3, $a2
	b	.LBB137_13
	.p2align	4, , 16
.LBB137_10:                             # %vector.ph
                                        #   in Loop: Header=BB137_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	alsl.d	$a0, $a2, $s8, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB137_11:                             # %vector.body
                                        #   Parent Loop BB137_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB137_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB137_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB137_15
.LBB137_13:                             # %.preheader.preheader48
                                        #   in Loop: Header=BB137_3 Depth=1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB137_14:                             # %.preheader
                                        #   Parent Loop BB137_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB137_14
.LBB137_15:                             # %.loopexit
                                        #   in Loop: Header=BB137_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $fp
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB137_2
# %bb.16:                               #   in Loop: Header=BB137_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t6, $zero, 9
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB137_2
.LBB137_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB137_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB137_21
.LBB137_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB137_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB137_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI137_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI137_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB137_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end137:
	.size	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end137-_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
.LCPI138_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 56                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	blez	$a1, .LBB138_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -7
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 16
	ori	$t5, $zero, 8
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -126140
	ori	$s1, $a0, 3520
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$fp, $a0, 1536
	b	.LBB138_3
	.p2align	4, , 16
.LBB138_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB138_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB138_17
.LBB138_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_5 Depth 2
                                        #     Child Loop BB138_11 Depth 2
                                        #     Child Loop BB138_14 Depth 2
	blt	$s0, $t5, .LBB138_7
# %bb.4:                                # %.preheader29.preheader
                                        #   in Loop: Header=BB138_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB138_5:                              # %.preheader29
                                        #   Parent Loop BB138_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -16
	ld.w	$a6, $a4, -12
	ld.w	$a7, $a4, -8
	ld.w	$t0, $a4, -4
	ld.w	$t1, $a4, 0
	ld.w	$t2, $a4, 4
	ld.w	$t3, $a4, 8
	ld.w	$t4, $a4, 12
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	add.d	$a5, $a5, $t4
	mul.d	$a5, $a5, $s3
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 8
	addi.d	$a2, $a2, 8
	addi.d	$a4, $a4, 32
	blt	$a3, $s6, .LBB138_5
# %bb.6:                                # %.loopexit30
                                        #   in Loop: Header=BB138_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB138_8
	b	.LBB138_15
	.p2align	4, , 16
.LBB138_7:                              #   in Loop: Header=BB138_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB138_15
.LBB138_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB138_3 Depth=1
	sub.d	$a4, $s7, $a2
	bgeu	$a4, $t5, .LBB138_10
# %bb.9:                                #   in Loop: Header=BB138_3 Depth=1
	move	$a3, $a2
	b	.LBB138_13
	.p2align	4, , 16
.LBB138_10:                             # %vector.ph
                                        #   in Loop: Header=BB138_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	alsl.d	$a0, $a2, $s8, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB138_11:                             # %vector.body
                                        #   Parent Loop BB138_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s3
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB138_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB138_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB138_15
.LBB138_13:                             # %.preheader.preheader47
                                        #   in Loop: Header=BB138_3 Depth=1
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB138_14:                             # %.preheader
                                        #   Parent Loop BB138_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB138_14
.LBB138_15:                             # %.loopexit
                                        #   in Loop: Header=BB138_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $fp
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB138_2
# %bb.16:                               #   in Loop: Header=BB138_3 Depth=1
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t5, $zero, 8
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB138_2
.LBB138_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	beqz	$a2, .LBB138_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB138_21
.LBB138_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB138_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB138_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI138_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI138_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB138_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end138:
	.size	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end138-_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
.LCPI139_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 72                    # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	blez	$a1, .LBB139_17
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -6
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 12
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$t4, $zero, 7
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 151772
	ori	$s1, $a0, 1032
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s3, $a0, 1536
	b	.LBB139_3
	.p2align	4, , 16
.LBB139_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB139_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB139_17
.LBB139_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_5 Depth 2
                                        #     Child Loop BB139_11 Depth 2
                                        #     Child Loop BB139_14 Depth 2
	blt	$s0, $t4, .LBB139_7
# %bb.4:                                # %.preheader28.preheader
                                        #   in Loop: Header=BB139_3 Depth=1
	move	$a2, $zero
	move	$a3, $zero
	move	$a0, $zero
	move	$a4, $s8
	.p2align	4, , 16
.LBB139_5:                              # %.preheader28
                                        #   Parent Loop BB139_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a4, -12
	ld.w	$a6, $a4, -8
	ld.w	$a7, $a4, -4
	ld.w	$t0, $a4, 0
	ld.w	$t1, $a4, 4
	ld.w	$t2, $a4, 8
	ld.w	$t3, $a4, 12
	add.d	$a5, $a6, $a5
	add.d	$a5, $a5, $a7
	add.d	$a5, $a5, $t0
	add.d	$a5, $a5, $t1
	add.d	$a5, $a5, $t2
	add.d	$a5, $a5, $t3
	mul.d	$a5, $a5, $fp
	add.d	$a0, $a0, $a5
	add.d	$a0, $a0, $s1
	addi.d	$a3, $a3, 7
	addi.d	$a2, $a2, 7
	addi.d	$a4, $a4, 28
	blt	$a3, $s6, .LBB139_5
# %bb.6:                                # %.loopexit29
                                        #   in Loop: Header=BB139_3 Depth=1
	addi.w	$a3, $a2, 0
	blt	$a3, $s0, .LBB139_8
	b	.LBB139_15
	.p2align	4, , 16
.LBB139_7:                              #   in Loop: Header=BB139_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB139_15
.LBB139_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB139_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB139_10
# %bb.9:                                #   in Loop: Header=BB139_3 Depth=1
	move	$a3, $a2
	b	.LBB139_13
	.p2align	4, , 16
.LBB139_10:                             # %vector.ph
                                        #   in Loop: Header=BB139_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB139_11:                             # %vector.body
                                        #   Parent Loop BB139_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB139_11
# %bb.12:                               # %middle.block
                                        #   in Loop: Header=BB139_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB139_15
.LBB139_13:                             # %.preheader.preheader46
                                        #   in Loop: Header=BB139_3 Depth=1
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB139_14:                             # %.preheader
                                        #   Parent Loop BB139_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB139_14
.LBB139_15:                             # %.loopexit
                                        #   in Loop: Header=BB139_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s3
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB139_2
# %bb.16:                               #   in Loop: Header=BB139_3 Depth=1
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t4, $zero, 7
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB139_2
.LBB139_17:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	beqz	$a2, .LBB139_19
# %bb.18:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB139_21
.LBB139_19:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB139_22
# %bb.20:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB139_21:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI139_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI139_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB139_22:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end139:
	.size	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end139-_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
.LCPI140_0:
	.word	1                               # 0x1
	.word	7                               # 0x7
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI140_1:
	.word	0                               # 0x0
	.word	6                               # 0x6
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI140_2:
	.word	0                               # 0x0
	.word	5                               # 0x5
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
.LCPI140_3:
	.word	4                               # 0x4
	.word	1                               # 0x1
	.word	4294967295                      # 0xffffffff
	.word	4294967295                      # 0xffffffff
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0
.LCPI140_4:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB140_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -5
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t2, $zero, 6
	slt	$a0, $t2, $s6
	masknez	$a2, $t2, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 1
	slli.d	$s3, $a0, 1
	ori	$a2, $zero, 12
	mul.d	$a0, $a0, $a2
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 12
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 429683
	ori	$s1, $a0, 2640
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB140_3
	.p2align	4, , 16
.LBB140_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB140_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB140_22
.LBB140_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_8 Depth 2
                                        #     Child Loop BB140_11 Depth 2
                                        #     Child Loop BB140_16 Depth 2
                                        #     Child Loop BB140_19 Depth 2
	blt	$s0, $t2, .LBB140_6
# %bb.4:                                # %.preheader27.preheader
                                        #   in Loop: Header=BB140_3 Depth=1
	ori	$a0, $zero, 7
	bge	$s6, $a0, .LBB140_7
# %bb.5:                                #   in Loop: Header=BB140_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB140_10
	.p2align	4, , 16
.LBB140_6:                              #   in Loop: Header=BB140_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB140_12
	.p2align	4, , 16
.LBB140_7:                              # %vector.body50.preheader
                                        #   in Loop: Header=BB140_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	.p2align	4, , 16
.LBB140_8:                              # %vector.body50
                                        #   Parent Loop BB140_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr1, $a0, -32
	vld	$vr2, $a0, -16
	pcalau12i	$a3, %pc_hi20(.LCPI140_0)
	vld	$vr3, $a3, %pc_lo12(.LCPI140_0)
	pcalau12i	$a3, %pc_hi20(.LCPI140_1)
	vld	$vr4, $a3, %pc_lo12(.LCPI140_1)
	vld	$vr5, $a0, 0
	vshuf.w	$vr3, $vr2, $vr1
	vshuf.w	$vr4, $vr2, $vr1
	vadd.w	$vr3, $vr3, $vr4
	pcalau12i	$a3, %pc_hi20(.LCPI140_2)
	vld	$vr4, $a3, %pc_lo12(.LCPI140_2)
	vreplvei.w	$vr6, $vr1, 2
	vpackev.w	$vr6, $vr5, $vr6
	vadd.w	$vr3, $vr3, $vr6
	vreplvei.w	$vr1, $vr1, 3
	vori.b	$vr6, $vr4, 0
	vshuf.w	$vr6, $vr5, $vr1
	pcalau12i	$a3, %pc_hi20(.LCPI140_3)
	vld	$vr1, $a3, %pc_lo12(.LCPI140_3)
	vadd.w	$vr3, $vr3, $vr6
	vreplvei.w	$vr6, $vr5, 3
	vreplvei.w	$vr5, $vr5, 2
	vshuf.w	$vr1, $vr2, $vr5
	vadd.w	$vr1, $vr3, $vr1
	vreplvei.w	$vr2, $vr2, 1
	vshuf.w	$vr4, $vr6, $vr2
	vadd.w	$vr1, $vr1, $vr4
	vreplgr2vr.w	$vr2, $fp
	vmadd.w	$vr0, $vr1, $vr2
	vreplgr2vr.w	$vr1, $s1
	vadd.w	$vr0, $vr0, $vr1
	addi.d	$a2, $a2, -2
	addi.d	$a0, $a0, 48
	bnez	$a2, .LBB140_8
# %bb.9:                                # %middle.block56
                                        #   in Loop: Header=BB140_3 Depth=1
	vpickve2gr.w	$a0, $vr0, 0
	vpickve2gr.w	$a2, $vr0, 1
	add.d	$a0, $a2, $a0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB140_12
.LBB140_10:                             # %.preheader27.preheader62
                                        #   in Loop: Header=BB140_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB140_11:                             # %.preheader27
                                        #   Parent Loop BB140_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -12
	ld.w	$a5, $a3, -8
	ld.w	$a6, $a3, -4
	ld.w	$a7, $a3, 0
	ld.w	$t0, $a3, 4
	ld.w	$t1, $a3, 8
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	add.d	$a4, $a4, $t1
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 6
	addi.d	$a3, $a3, 24
	blt	$a2, $s6, .LBB140_11
.LBB140_12:                             # %.loopexit28
                                        #   in Loop: Header=BB140_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB140_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB140_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB140_15
# %bb.14:                               #   in Loop: Header=BB140_3 Depth=1
	move	$a3, $a2
	b	.LBB140_18
	.p2align	4, , 16
.LBB140_15:                             # %vector.ph
                                        #   in Loop: Header=BB140_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB140_16:                             # %vector.body
                                        #   Parent Loop BB140_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB140_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB140_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB140_20
.LBB140_18:                             # %.preheader.preheader61
                                        #   in Loop: Header=BB140_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB140_19:                             # %.preheader
                                        #   Parent Loop BB140_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB140_19
.LBB140_20:                             # %.loopexit
                                        #   in Loop: Header=BB140_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB140_2
# %bb.21:                               #   in Loop: Header=BB140_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t2, $zero, 6
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB140_2
.LBB140_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB140_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB140_26
.LBB140_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB140_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB140_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI140_4)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI140_4)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB140_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end140:
	.size	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end140-_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
.LCPI141_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 96                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB141_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -4
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t7, $zero, 5
	slt	$a0, $t7, $s6
	masknez	$a2, $t7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -209716
	ori	$a2, $a2, 3277
	lu32i.d	$a2, -209716
	lu52i.d	$a2, $a2, -820
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 1
	slli.d	$s3, $a0, 1
	slli.d	$a2, $a0, 3
	alsl.d	$a0, $a0, $a2, 1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 96                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 20
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 88                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s1, $a0, 1957
	lu12i.w	$a0, -340981
	ori	$fp, $a0, 152
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB141_3
	.p2align	4, , 16
.LBB141_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB141_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB141_22
.LBB141_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_8 Depth 2
                                        #     Child Loop BB141_11 Depth 2
                                        #     Child Loop BB141_16 Depth 2
                                        #     Child Loop BB141_19 Depth 2
	blt	$s0, $t7, .LBB141_6
# %bb.4:                                # %.preheader26.preheader
                                        #   in Loop: Header=BB141_3 Depth=1
	ori	$a0, $zero, 6
	bge	$s6, $a0, .LBB141_7
# %bb.5:                                #   in Loop: Header=BB141_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB141_10
	.p2align	4, , 16
.LBB141_6:                              #   in Loop: Header=BB141_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB141_12
	.p2align	4, , 16
.LBB141_7:                              # %vector.body49.preheader
                                        #   in Loop: Header=BB141_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	move	$a4, $s3
	.p2align	4, , 16
.LBB141_8:                              # %vector.body49
                                        #   Parent Loop BB141_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a3, -20
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, -16
	ld.w	$t0, $a3, 4
	ld.w	$t1, $a3, -12
	ld.w	$t2, $a3, 8
	ld.w	$t3, $a3, -8
	ld.w	$t4, $a3, 12
	ld.w	$t5, $a3, -4
	ld.w	$t6, $a3, 16
	add.d	$a5, $a7, $a5
	add.d	$a6, $t0, $a6
	add.d	$a5, $a5, $t1
	add.d	$a6, $a6, $t2
	add.d	$a5, $a5, $t3
	add.d	$a6, $a6, $t4
	add.d	$a5, $a5, $t5
	add.d	$a6, $a6, $t6
	mul.d	$a5, $a5, $s1
	mul.d	$a6, $a6, $s1
	add.d	$a0, $a0, $a5
	add.d	$a2, $a2, $a6
	add.d	$a0, $a0, $fp
	add.d	$a2, $a2, $fp
	addi.d	$a4, $a4, -2
	addi.d	$a3, $a3, 40
	bnez	$a4, .LBB141_8
# %bb.9:                                # %middle.block55
                                        #   in Loop: Header=BB141_3 Depth=1
	add.d	$a0, $a2, $a0
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 80                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB141_12
.LBB141_10:                             # %.preheader26.preheader61
                                        #   in Loop: Header=BB141_3 Depth=1
	ld.d	$a3, $sp, 88                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB141_11:                             # %.preheader26
                                        #   Parent Loop BB141_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, 4
	ld.w	$t0, $a3, 8
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	add.d	$a4, $a4, $t0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $fp
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 20
	blt	$a2, $s6, .LBB141_11
.LBB141_12:                             # %.loopexit27
                                        #   in Loop: Header=BB141_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB141_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB141_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB141_15
# %bb.14:                               #   in Loop: Header=BB141_3 Depth=1
	move	$a3, $a2
	b	.LBB141_18
	.p2align	4, , 16
.LBB141_15:                             # %vector.ph
                                        #   in Loop: Header=BB141_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB141_16:                             # %vector.body
                                        #   Parent Loop BB141_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $s1
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB141_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB141_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB141_20
.LBB141_18:                             # %.preheader.preheader60
                                        #   in Loop: Header=BB141_3 Depth=1
	ld.d	$a2, $sp, 96                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB141_19:                             # %.preheader
                                        #   Parent Loop BB141_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s1
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB141_19
.LBB141_20:                             # %.loopexit
                                        #   in Loop: Header=BB141_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB141_2
# %bb.21:                               #   in Loop: Header=BB141_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t7, $zero, 5
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB141_2
.LBB141_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB141_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB141_26
.LBB141_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB141_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB141_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI141_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI141_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB141_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end141:
	.size	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end141-_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
.LCPI142_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB142_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -3
	bstrpick.d	$s7, $s0, 31, 0
	ori	$t0, $zero, 4
	slt	$a0, $t0, $s6
	masknez	$a2, $t0, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	srli.d	$a0, $a0, 2
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a0, $a0, 5
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 64
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, -63070
	ori	$s1, $a0, 1760
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB142_3
	.p2align	4, , 16
.LBB142_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB142_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB142_22
.LBB142_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_8 Depth 2
                                        #     Child Loop BB142_11 Depth 2
                                        #     Child Loop BB142_16 Depth 2
                                        #     Child Loop BB142_19 Depth 2
	blt	$s0, $t0, .LBB142_6
# %bb.4:                                # %.preheader25.preheader
                                        #   in Loop: Header=BB142_3 Depth=1
	ori	$a0, $zero, 29
	bge	$s6, $a0, .LBB142_7
# %bb.5:                                #   in Loop: Header=BB142_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB142_10
	.p2align	4, , 16
.LBB142_6:                              #   in Loop: Header=BB142_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB142_12
	.p2align	4, , 16
.LBB142_7:                              # %vector.body48.preheader
                                        #   in Loop: Header=BB142_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB142_8:                              # %vector.body48
                                        #   Parent Loop BB142_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -64
	ld.w	$a4, $a0, -48
	ld.w	$a5, $a0, -32
	ld.w	$a6, $a0, -16
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 48
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -60
	ld.w	$a4, $a0, -44
	ld.w	$a5, $a0, -28
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 36
	ld.w	$a6, $a0, 52
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -56
	ld.w	$a4, $a0, -40
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 24
	ld.w	$a5, $a0, 40
	ld.w	$a6, $a0, 56
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	ld.w	$a3, $a0, -52
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr8, $a3, 0
	vinsgr2vr.w	$vr8, $a4, 1
	vinsgr2vr.w	$vr8, $a5, 2
	vinsgr2vr.w	$vr8, $a6, 3
	ld.w	$a3, $a0, 12
	ld.w	$a4, $a0, 28
	ld.w	$a5, $a0, 44
	ld.w	$a6, $a0, 60
	vinsgr2vr.w	$vr9, $a3, 0
	vinsgr2vr.w	$vr9, $a4, 1
	vinsgr2vr.w	$vr9, $a5, 2
	vinsgr2vr.w	$vr9, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vadd.w	$vr2, $vr2, $vr8
	vadd.w	$vr3, $vr3, $vr9
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 128
	bnez	$a2, .LBB142_8
# %bb.9:                                # %middle.block54
                                        #   in Loop: Header=BB142_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB142_12
.LBB142_10:                             # %.preheader25.preheader60
                                        #   in Loop: Header=BB142_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB142_11:                             # %.preheader25
                                        #   Parent Loop BB142_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	ld.w	$a7, $a3, 4
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	add.d	$a4, $a4, $a7
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 16
	blt	$a2, $s6, .LBB142_11
.LBB142_12:                             # %.loopexit26
                                        #   in Loop: Header=BB142_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB142_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB142_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB142_15
# %bb.14:                               #   in Loop: Header=BB142_3 Depth=1
	move	$a3, $a2
	b	.LBB142_18
	.p2align	4, , 16
.LBB142_15:                             # %vector.ph
                                        #   in Loop: Header=BB142_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB142_16:                             # %vector.body
                                        #   Parent Loop BB142_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB142_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB142_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB142_20
.LBB142_18:                             # %.preheader.preheader59
                                        #   in Loop: Header=BB142_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB142_19:                             # %.preheader
                                        #   Parent Loop BB142_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB142_19
.LBB142_20:                             # %.loopexit
                                        #   in Loop: Header=BB142_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB142_2
# %bb.21:                               #   in Loop: Header=BB142_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$t0, $zero, 4
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB142_2
.LBB142_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB142_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB142_26
.LBB142_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB142_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB142_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI142_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI142_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB142_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end142:
	.size	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end142-_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
.LCPI143_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB143_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -2
	bstrpick.d	$s7, $s0, 31, 0
	ori	$a7, $zero, 3
	slt	$a0, $a7, $s6
	masknez	$a2, $a7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	lu12i.w	$a2, -349526
	ori	$a2, $a2, 2731
	lu32i.d	$a2, -349526
	lu52i.d	$a2, $a2, -1366
	mulh.du	$a0, $a0, $a2
	srli.d	$a0, $a0, 1
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a2, $a0, 4
	alsl.d	$a0, $a0, $a2, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 48
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 8
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 214841
	ori	$s1, $a0, 3368
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB143_3
	.p2align	4, , 16
.LBB143_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB143_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB143_22
.LBB143_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_8 Depth 2
                                        #     Child Loop BB143_11 Depth 2
                                        #     Child Loop BB143_16 Depth 2
                                        #     Child Loop BB143_19 Depth 2
	blt	$s0, $a7, .LBB143_6
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB143_3 Depth=1
	ori	$a0, $zero, 22
	bge	$s6, $a0, .LBB143_7
# %bb.5:                                #   in Loop: Header=BB143_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB143_10
	.p2align	4, , 16
.LBB143_6:                              #   in Loop: Header=BB143_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB143_12
	.p2align	4, , 16
.LBB143_7:                              # %vector.body47.preheader
                                        #   in Loop: Header=BB143_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB143_8:                              # %vector.body47
                                        #   Parent Loop BB143_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -48
	ld.w	$a4, $a0, -36
	ld.w	$a5, $a0, -24
	ld.w	$a6, $a0, -12
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 24
	ld.w	$a6, $a0, 36
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -44
	ld.w	$a4, $a0, -32
	ld.w	$a5, $a0, -20
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 16
	ld.w	$a5, $a0, 28
	ld.w	$a6, $a0, 40
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	ld.w	$a3, $a0, -40
	ld.w	$a4, $a0, -28
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr6, $a3, 0
	vinsgr2vr.w	$vr6, $a4, 1
	vinsgr2vr.w	$vr6, $a5, 2
	vinsgr2vr.w	$vr6, $a6, 3
	ld.w	$a3, $a0, 8
	ld.w	$a4, $a0, 20
	ld.w	$a5, $a0, 32
	ld.w	$a6, $a0, 44
	vinsgr2vr.w	$vr7, $a3, 0
	vinsgr2vr.w	$vr7, $a4, 1
	vinsgr2vr.w	$vr7, $a5, 2
	vinsgr2vr.w	$vr7, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vadd.w	$vr2, $vr2, $vr6
	vadd.w	$vr3, $vr3, $vr7
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 96
	bnez	$a2, .LBB143_8
# %bb.9:                                # %middle.block53
                                        #   in Loop: Header=BB143_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB143_12
.LBB143_10:                             # %.preheader24.preheader59
                                        #   in Loop: Header=BB143_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB143_11:                             # %.preheader24
                                        #   Parent Loop BB143_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -8
	ld.w	$a5, $a3, -4
	ld.w	$a6, $a3, 0
	add.d	$a4, $a5, $a4
	add.d	$a4, $a4, $a6
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 12
	blt	$a2, $s6, .LBB143_11
.LBB143_12:                             # %.loopexit25
                                        #   in Loop: Header=BB143_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB143_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB143_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB143_15
# %bb.14:                               #   in Loop: Header=BB143_3 Depth=1
	move	$a3, $a2
	b	.LBB143_18
	.p2align	4, , 16
.LBB143_15:                             # %vector.ph
                                        #   in Loop: Header=BB143_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB143_16:                             # %vector.body
                                        #   Parent Loop BB143_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB143_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB143_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB143_20
.LBB143_18:                             # %.preheader.preheader58
                                        #   in Loop: Header=BB143_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB143_19:                             # %.preheader
                                        #   Parent Loop BB143_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB143_19
.LBB143_20:                             # %.loopexit
                                        #   in Loop: Header=BB143_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB143_2
# %bb.21:                               #   in Loop: Header=BB143_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 3
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB143_2
.LBB143_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB143_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB143_26
.LBB143_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB143_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB143_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI143_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI143_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB143_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end143:
	.size	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end143-_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
.LCPI144_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$a1, %pc_hi20(iterations)
	st.d	$a1, $sp, 104                   # 8-byte Folded Spill
	ld.w	$a1, $a1, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB144_22
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	addi.w	$s6, $s0, -1
	bstrpick.d	$s7, $s0, 31, 0
	ori	$a7, $zero, 2
	slt	$a0, $a7, $s6
	masknez	$a2, $a7, $a0
	maskeqz	$a0, $s6, $a0
	or	$a0, $a0, $a2
	addi.d	$a0, $a0, -1
	srli.d	$a0, $a0, 1
	addi.d	$a0, $a0, 1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	bstrpick.d	$a0, $a0, 62, 3
	slli.d	$s3, $a0, 3
	slli.d	$a0, $a0, 4
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	addi.d	$a2, $a0, 32
	st.d	$a2, $sp, 40                    # 8-byte Folded Spill
	addi.d	$a2, $a0, 4
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$fp, $a0, 1957
	lu12i.w	$a0, 492753
	ori	$s1, $a0, 880
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, -277912
	ori	$s2, $a0, 2488
	lu12i.w	$a0, -381906
	ori	$s4, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s8, $a0, 1536
	b	.LBB144_3
	.p2align	4, , 16
.LBB144_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB144_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB144_22
.LBB144_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_8 Depth 2
                                        #     Child Loop BB144_11 Depth 2
                                        #     Child Loop BB144_16 Depth 2
                                        #     Child Loop BB144_19 Depth 2
	blt	$s0, $a7, .LBB144_6
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB144_3 Depth=1
	ori	$a0, $zero, 15
	bge	$s6, $a0, .LBB144_7
# %bb.5:                                #   in Loop: Header=BB144_3 Depth=1
	move	$a2, $zero
	move	$a0, $zero
	b	.LBB144_10
	.p2align	4, , 16
.LBB144_6:                              #   in Loop: Header=BB144_3 Depth=1
	move	$a0, $zero
	move	$a2, $zero
	b	.LBB144_12
	.p2align	4, , 16
.LBB144_7:                              # %vector.body46.preheader
                                        #   in Loop: Header=BB144_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a2, $s3
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB144_8:                              # %vector.body46
                                        #   Parent Loop BB144_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a3, $a0, -32
	ld.w	$a4, $a0, -24
	ld.w	$a5, $a0, -16
	ld.w	$a6, $a0, -8
	vinsgr2vr.w	$vr2, $a3, 0
	vinsgr2vr.w	$vr2, $a4, 1
	vinsgr2vr.w	$vr2, $a5, 2
	vinsgr2vr.w	$vr2, $a6, 3
	ld.w	$a3, $a0, 0
	ld.w	$a4, $a0, 8
	ld.w	$a5, $a0, 16
	ld.w	$a6, $a0, 24
	vinsgr2vr.w	$vr3, $a3, 0
	vinsgr2vr.w	$vr3, $a4, 1
	vinsgr2vr.w	$vr3, $a5, 2
	vinsgr2vr.w	$vr3, $a6, 3
	ld.w	$a3, $a0, -28
	ld.w	$a4, $a0, -20
	ld.w	$a5, $a0, -12
	ld.w	$a6, $a0, -4
	vinsgr2vr.w	$vr4, $a3, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vinsgr2vr.w	$vr4, $a5, 2
	vinsgr2vr.w	$vr4, $a6, 3
	ld.w	$a3, $a0, 4
	ld.w	$a4, $a0, 12
	ld.w	$a5, $a0, 20
	ld.w	$a6, $a0, 28
	vinsgr2vr.w	$vr5, $a3, 0
	vinsgr2vr.w	$vr5, $a4, 1
	vinsgr2vr.w	$vr5, $a5, 2
	vinsgr2vr.w	$vr5, $a6, 3
	vadd.w	$vr2, $vr4, $vr2
	vadd.w	$vr3, $vr5, $vr3
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s1
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 64
	bnez	$a2, .LBB144_8
# %bb.9:                                # %middle.block52
                                        #   in Loop: Header=BB144_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	beq	$a3, $s3, .LBB144_12
.LBB144_10:                             # %.preheader23.preheader58
                                        #   in Loop: Header=BB144_3 Depth=1
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a3, $a2, $a3, 2
	.p2align	4, , 16
.LBB144_11:                             # %.preheader23
                                        #   Parent Loop BB144_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, -4
	ld.w	$a5, $a3, 0
	add.d	$a4, $a5, $a4
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s1
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 8
	blt	$a2, $s6, .LBB144_11
.LBB144_12:                             # %.loopexit24
                                        #   in Loop: Header=BB144_3 Depth=1
	addi.w	$a3, $a2, 0
	bge	$a3, $s0, .LBB144_20
# %bb.13:                               # %.preheader.preheader
                                        #   in Loop: Header=BB144_3 Depth=1
	sub.d	$a4, $s7, $a2
	ori	$a3, $zero, 8
	bgeu	$a4, $a3, .LBB144_15
# %bb.14:                               #   in Loop: Header=BB144_3 Depth=1
	move	$a3, $a2
	b	.LBB144_18
	.p2align	4, , 16
.LBB144_15:                             # %vector.ph
                                        #   in Loop: Header=BB144_3 Depth=1
	move	$a5, $a4
	bstrins.d	$a5, $zero, 2, 0
	add.d	$a3, $a5, $a2
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	vinsgr2vr.w	$vr0, $a0, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a0, $a2, $a0, 2
	move	$a2, $a5
	.p2align	4, , 16
.LBB144_16:                             # %vector.body
                                        #   Parent Loop BB144_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vreplgr2vr.w	$vr4, $fp
	vmadd.w	$vr0, $vr2, $vr4
	vreplgr2vr.w	$vr2, $s2
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr2
	vadd.w	$vr1, $vr1, $vr2
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB144_16
# %bb.17:                               # %middle.block
                                        #   in Loop: Header=BB144_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	beq	$a4, $a5, .LBB144_20
.LBB144_18:                             # %.preheader.preheader57
                                        #   in Loop: Header=BB144_3 Depth=1
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s7, $a3
	.p2align	4, , 16
.LBB144_19:                             # %.preheader
                                        #   Parent Loop BB144_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $fp
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $s2
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB144_19
.LBB144_20:                             # %.loopexit
                                        #   in Loop: Header=BB144_3 Depth=1
	pcalau12i	$a2, %pc_hi20(init_value)
	fld.d	$fa0, $a2, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s4
	add.w	$a2, $a2, $s8
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB144_2
# %bb.21:                               #   in Loop: Header=BB144_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	ori	$a7, $zero, 2
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(iterations)
	b	.LBB144_2
.LBB144_22:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB144_24
# %bb.23:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB144_26
.LBB144_24:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB144_27
# %bb.25:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB144_26:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI144_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI144_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB144_27:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end144:
	.size	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end144-_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
.LCPI145_0:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -208
	.cfi_def_cfa_offset 208
	st.d	$ra, $sp, 200                   # 8-byte Folded Spill
	st.d	$fp, $sp, 192                   # 8-byte Folded Spill
	st.d	$s0, $sp, 184                   # 8-byte Folded Spill
	st.d	$s1, $sp, 176                   # 8-byte Folded Spill
	st.d	$s2, $sp, 168                   # 8-byte Folded Spill
	st.d	$s3, $sp, 160                   # 8-byte Folded Spill
	st.d	$s4, $sp, 152                   # 8-byte Folded Spill
	st.d	$s5, $sp, 144                   # 8-byte Folded Spill
	st.d	$s6, $sp, 136                   # 8-byte Folded Spill
	st.d	$s7, $sp, 128                   # 8-byte Folded Spill
	st.d	$s8, $sp, 120                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 104                   # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s4, %pc_hi20(iterations)
	ld.w	$a1, $s4, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 112                   # 8-byte Folded Spill
	blez	$a1, .LBB145_14
# %bb.1:                                # %.lr.ph
	move	$s5, $zero
	bstrpick.d	$s6, $s0, 31, 0
	bstrpick.d	$a0, $s0, 30, 3
	slli.d	$s7, $a0, 3
	ld.d	$a0, $sp, 104                   # 8-byte Folded Reload
	addi.d	$a0, $a0, 16
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	lu12i.w	$a0, 65881
	ori	$s3, $a0, 1957
	lu12i.w	$a0, -277912
	ori	$fp, $a0, 2488
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	vreplgr2vr.w	$vr4, $s3
	vreplgr2vr.w	$vr5, $fp
	pcalau12i	$s8, %pc_hi20(init_value)
	lu12i.w	$a0, -381906
	ori	$s2, $a0, 1088
	lu12i.w	$a0, -310021
	ori	$s1, $a0, 1536
	vst	$vr4, $sp, 80                   # 16-byte Folded Spill
	vst	$vr5, $sp, 64                   # 16-byte Folded Spill
	b	.LBB145_3
	.p2align	4, , 16
.LBB145_2:                              # %_Z9check_sumIiEvT_.exit
                                        #   in Loop: Header=BB145_3 Depth=1
	addi.w	$s5, $s5, 1
	bge	$s5, $a1, .LBB145_14
.LBB145_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_8 Depth 2
                                        #     Child Loop BB145_11 Depth 2
	blez	$s0, .LBB145_6
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB145_3 Depth=1
	ori	$a0, $zero, 8
	bgeu	$s0, $a0, .LBB145_7
# %bb.5:                                #   in Loop: Header=BB145_3 Depth=1
	move	$a3, $zero
	move	$a0, $zero
	b	.LBB145_10
	.p2align	4, , 16
.LBB145_6:                              #   in Loop: Header=BB145_3 Depth=1
	move	$a0, $zero
	b	.LBB145_12
	.p2align	4, , 16
.LBB145_7:                              # %vector.body.preheader
                                        #   in Loop: Header=BB145_3 Depth=1
	ld.d	$a0, $sp, 56                    # 8-byte Folded Reload
	move	$a2, $s7
	vld	$vr1, $sp, 32                   # 16-byte Folded Reload
	vori.b	$vr0, $vr1, 0
	.p2align	4, , 16
.LBB145_8:                              # %vector.body
                                        #   Parent Loop BB145_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $a0, -16
	vld	$vr3, $a0, 0
	vmadd.w	$vr0, $vr2, $vr4
	vmadd.w	$vr1, $vr3, $vr4
	vadd.w	$vr0, $vr0, $vr5
	vadd.w	$vr1, $vr1, $vr5
	addi.d	$a2, $a2, -8
	addi.d	$a0, $a0, 32
	bnez	$a2, .LBB145_8
# %bb.9:                                # %middle.block
                                        #   in Loop: Header=BB145_3 Depth=1
	vadd.w	$vr0, $vr1, $vr0
	vhaddw.d.w	$vr0, $vr0, $vr0
	vhaddw.q.d	$vr0, $vr0, $vr0
	vpickve2gr.d	$a0, $vr0, 0
	move	$a3, $s7
	beq	$s7, $s6, .LBB145_12
.LBB145_10:                             # %.preheader23.preheader41
                                        #   in Loop: Header=BB145_3 Depth=1
	ld.d	$a2, $sp, 104                   # 8-byte Folded Reload
	alsl.d	$a2, $a3, $a2, 2
	sub.d	$a3, $s6, $a3
	.p2align	4, , 16
.LBB145_11:                             # %.preheader23
                                        #   Parent Loop BB145_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a2, 0
	mul.d	$a4, $a4, $s3
	add.d	$a0, $a0, $a4
	add.d	$a0, $a0, $fp
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB145_11
.LBB145_12:                             # %.loopexit
                                        #   in Loop: Header=BB145_3 Depth=1
	fld.d	$fa0, $s8, %pc_lo12(init_value)
	ftintrz.w.d	$fa0, $fa0
	movfr2gr.s	$a2, $fa0
	mul.d	$a2, $a2, $s2
	add.w	$a2, $a2, $s1
	addi.w	$a0, $a0, 0
	beq	$a0, $a2, .LBB145_2
# %bb.13:                               #   in Loop: Header=BB145_3 Depth=1
	ld.d	$a0, $sp, 112                   # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$a0, $a0, %pc_lo12(.L.str.19)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vld	$vr5, $sp, 64                   # 16-byte Folded Reload
	vld	$vr4, $sp, 80                   # 16-byte Folded Reload
	ld.w	$a1, $s4, %pc_lo12(iterations)
	b	.LBB145_2
.LBB145_14:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	beqz	$a2, .LBB145_16
# %bb.15:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB145_18
.LBB145_16:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB145_19
# %bb.17:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB145_18:                             # %_Z13record_resultdPKc.exit
	ld.d	$a4, $sp, 16                    # 8-byte Folded Reload
	pcalau12i	$a1, %pc_hi20(.LCPI145_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI145_0)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$a4, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	ld.d	$s8, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 184                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 192                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 200                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 208
	ret
.LBB145_19:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end145:
	.size	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end145-_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI146_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI146_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI146_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI146_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI146_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI146_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$fp, %pc_hi20(current_test)
	blez	$a1, .LBB146_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -31
	addi.d	$a0, $s1, 248
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI146_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI146_0)
	pcalau12i	$a0, %pc_hi20(.LCPI146_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI146_1)
	pcalau12i	$a0, %pc_hi20(.LCPI146_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI146_2)
	pcalau12i	$a0, %pc_hi20(.LCPI146_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI146_3)
	pcalau12i	$a0, %pc_hi20(.LCPI146_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI146_4)
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB146_3
	.p2align	4, , 16
.LBB146_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB146_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB146_12
.LBB146_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_5 Depth 2
                                        #     Child Loop BB146_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB146_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB146_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB146_5:                              # %.lr.ph
                                        #   Parent Loop BB146_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -64
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 32
	fld.d	$fa2, $s8, -56
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 32
	addi.w	$s3, $s3, 32
	addi.d	$s8, $s8, 256
	blt	$s3, $s7, .LBB146_5
.LBB146_6:                              # %.preheader
                                        #   in Loop: Header=BB146_3 Depth=1
	bge	$s3, $s0, .LBB146_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB146_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB146_8:                              # %.lr.ph15
                                        #   Parent Loop BB146_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB146_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB146_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB146_10:                             #   in Loop: Header=BB146_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB146_2
# %bb.11:                               #   in Loop: Header=BB146_3 Depth=1
	ld.w	$a1, $fp, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB146_2
.LBB146_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s3, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB146_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $fp, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB146_16
.LBB146_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB146_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $fp, %pc_lo12(current_test)
.LBB146_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI146_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI146_5)
	sub.d	$a1, $s0, $s3
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB146_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end146:
	.size	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end146-_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI147_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI147_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI147_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI147_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI147_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI147_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB147_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -30
	addi.d	$a0, $s1, 240
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI147_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI147_0)
	pcalau12i	$a0, %pc_hi20(.LCPI147_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI147_1)
	pcalau12i	$a0, %pc_hi20(.LCPI147_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI147_2)
	pcalau12i	$a0, %pc_hi20(.LCPI147_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI147_3)
	pcalau12i	$a0, %pc_hi20(.LCPI147_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI147_4)
	ori	$fp, $zero, 31
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB147_3
	.p2align	4, , 16
.LBB147_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB147_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB147_12
.LBB147_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_5 Depth 2
                                        #     Child Loop BB147_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB147_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB147_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB147_5:                              # %.lr.ph
                                        #   Parent Loop BB147_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -56
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -48
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 31
	addi.d	$s8, $s8, 248
	blt	$s3, $s7, .LBB147_5
.LBB147_6:                              # %.preheader
                                        #   in Loop: Header=BB147_3 Depth=1
	bge	$s3, $s0, .LBB147_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB147_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB147_8:                              # %.lr.ph15
                                        #   Parent Loop BB147_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB147_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB147_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB147_10:                             #   in Loop: Header=BB147_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB147_2
# %bb.11:                               #   in Loop: Header=BB147_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB147_2
.LBB147_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB147_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB147_16
.LBB147_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB147_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB147_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI147_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI147_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB147_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end147:
	.size	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end147-_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI148_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI148_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI148_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI148_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI148_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI148_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB148_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -29
	addi.d	$a0, $s1, 232
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI148_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI148_0)
	pcalau12i	$a0, %pc_hi20(.LCPI148_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI148_1)
	pcalau12i	$a0, %pc_hi20(.LCPI148_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI148_2)
	pcalau12i	$a0, %pc_hi20(.LCPI148_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI148_3)
	pcalau12i	$a0, %pc_hi20(.LCPI148_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI148_4)
	ori	$fp, $zero, 30
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB148_3
	.p2align	4, , 16
.LBB148_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB148_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB148_12
.LBB148_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_5 Depth 2
                                        #     Child Loop BB148_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB148_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB148_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB148_5:                              # %.lr.ph
                                        #   Parent Loop BB148_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -48
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -40
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 30
	addi.d	$s8, $s8, 240
	blt	$s3, $s7, .LBB148_5
.LBB148_6:                              # %.preheader
                                        #   in Loop: Header=BB148_3 Depth=1
	bge	$s3, $s0, .LBB148_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB148_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB148_8:                              # %.lr.ph15
                                        #   Parent Loop BB148_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB148_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB148_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB148_10:                             #   in Loop: Header=BB148_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB148_2
# %bb.11:                               #   in Loop: Header=BB148_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB148_2
.LBB148_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB148_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB148_16
.LBB148_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB148_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB148_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI148_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI148_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB148_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end148:
	.size	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end148-_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI149_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI149_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI149_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI149_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI149_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI149_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB149_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -28
	addi.d	$a0, $s1, 224
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI149_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI149_0)
	pcalau12i	$a0, %pc_hi20(.LCPI149_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI149_1)
	pcalau12i	$a0, %pc_hi20(.LCPI149_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI149_2)
	pcalau12i	$a0, %pc_hi20(.LCPI149_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI149_3)
	pcalau12i	$a0, %pc_hi20(.LCPI149_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI149_4)
	ori	$fp, $zero, 29
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB149_3
	.p2align	4, , 16
.LBB149_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB149_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB149_12
.LBB149_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_5 Depth 2
                                        #     Child Loop BB149_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB149_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB149_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB149_5:                              # %.lr.ph
                                        #   Parent Loop BB149_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -40
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -32
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 29
	addi.d	$s8, $s8, 232
	blt	$s3, $s7, .LBB149_5
.LBB149_6:                              # %.preheader
                                        #   in Loop: Header=BB149_3 Depth=1
	bge	$s3, $s0, .LBB149_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB149_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB149_8:                              # %.lr.ph15
                                        #   Parent Loop BB149_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB149_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB149_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB149_10:                             #   in Loop: Header=BB149_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB149_2
# %bb.11:                               #   in Loop: Header=BB149_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB149_2
.LBB149_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB149_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB149_16
.LBB149_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB149_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB149_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI149_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI149_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB149_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end149:
	.size	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end149-_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI150_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI150_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI150_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI150_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI150_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI150_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB150_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -27
	addi.d	$a0, $s1, 216
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI150_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI150_0)
	pcalau12i	$a0, %pc_hi20(.LCPI150_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI150_1)
	pcalau12i	$a0, %pc_hi20(.LCPI150_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI150_2)
	pcalau12i	$a0, %pc_hi20(.LCPI150_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI150_3)
	pcalau12i	$a0, %pc_hi20(.LCPI150_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI150_4)
	ori	$fp, $zero, 28
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB150_3
	.p2align	4, , 16
.LBB150_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB150_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB150_12
.LBB150_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_5 Depth 2
                                        #     Child Loop BB150_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB150_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB150_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB150_5:                              # %.lr.ph
                                        #   Parent Loop BB150_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -32
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -24
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 28
	addi.d	$s8, $s8, 224
	blt	$s3, $s7, .LBB150_5
.LBB150_6:                              # %.preheader
                                        #   in Loop: Header=BB150_3 Depth=1
	bge	$s3, $s0, .LBB150_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB150_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB150_8:                              # %.lr.ph15
                                        #   Parent Loop BB150_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB150_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB150_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB150_10:                             #   in Loop: Header=BB150_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB150_2
# %bb.11:                               #   in Loop: Header=BB150_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB150_2
.LBB150_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB150_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB150_16
.LBB150_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB150_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB150_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI150_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI150_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB150_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end150:
	.size	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end150-_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI151_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI151_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI151_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI151_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI151_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI151_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB151_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -26
	addi.d	$a0, $s1, 208
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI151_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI151_0)
	pcalau12i	$a0, %pc_hi20(.LCPI151_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI151_1)
	pcalau12i	$a0, %pc_hi20(.LCPI151_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI151_2)
	pcalau12i	$a0, %pc_hi20(.LCPI151_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI151_3)
	pcalau12i	$a0, %pc_hi20(.LCPI151_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI151_4)
	ori	$fp, $zero, 27
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB151_3
	.p2align	4, , 16
.LBB151_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB151_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB151_12
.LBB151_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_5 Depth 2
                                        #     Child Loop BB151_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB151_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB151_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB151_5:                              # %.lr.ph
                                        #   Parent Loop BB151_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -24
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -16
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 27
	addi.d	$s8, $s8, 216
	blt	$s3, $s7, .LBB151_5
.LBB151_6:                              # %.preheader
                                        #   in Loop: Header=BB151_3 Depth=1
	bge	$s3, $s0, .LBB151_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB151_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB151_8:                              # %.lr.ph15
                                        #   Parent Loop BB151_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB151_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB151_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB151_10:                             #   in Loop: Header=BB151_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB151_2
# %bb.11:                               #   in Loop: Header=BB151_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB151_2
.LBB151_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB151_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB151_16
.LBB151_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB151_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB151_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI151_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI151_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB151_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end151:
	.size	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end151-_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi25EdE7do_testEPKdPKc,"axG",@progbits,_ZN14for_loop_testsILi25EdE7do_testEPKdPKc,comdat
	.weak	_ZN14for_loop_testsILi25EdE7do_testEPKdPKc # -- Begin function _ZN14for_loop_testsILi25EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi25EdE7do_testEPKdPKc,@function
_ZN14for_loop_testsILi25EdE7do_testEPKdPKc: # @_ZN14for_loop_testsILi25EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi17EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1700
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1900
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end152:
	.size	_ZN14for_loop_testsILi25EdE7do_testEPKdPKc, .Lfunc_end152-_ZN14for_loop_testsILi25EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI153_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI153_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI153_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI153_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI153_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI153_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB153_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -25
	addi.d	$a0, $s1, 200
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI153_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI153_0)
	pcalau12i	$a0, %pc_hi20(.LCPI153_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI153_1)
	pcalau12i	$a0, %pc_hi20(.LCPI153_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI153_2)
	pcalau12i	$a0, %pc_hi20(.LCPI153_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI153_3)
	pcalau12i	$a0, %pc_hi20(.LCPI153_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI153_4)
	ori	$fp, $zero, 26
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB153_3
	.p2align	4, , 16
.LBB153_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB153_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB153_12
.LBB153_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_5 Depth 2
                                        #     Child Loop BB153_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB153_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB153_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB153_5:                              # %.lr.ph
                                        #   Parent Loop BB153_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -16
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -8
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 26
	addi.d	$s8, $s8, 208
	blt	$s3, $s7, .LBB153_5
.LBB153_6:                              # %.preheader
                                        #   in Loop: Header=BB153_3 Depth=1
	bge	$s3, $s0, .LBB153_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB153_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB153_8:                              # %.lr.ph15
                                        #   Parent Loop BB153_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB153_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB153_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB153_10:                             #   in Loop: Header=BB153_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB153_2
# %bb.11:                               #   in Loop: Header=BB153_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB153_2
.LBB153_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB153_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB153_16
.LBB153_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB153_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB153_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI153_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI153_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB153_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end153:
	.size	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end153-_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI154_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI154_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI154_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI154_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI154_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI154_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB154_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -24
	addi.d	$a0, $s1, 192
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI154_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI154_0)
	pcalau12i	$a0, %pc_hi20(.LCPI154_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI154_1)
	pcalau12i	$a0, %pc_hi20(.LCPI154_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI154_2)
	pcalau12i	$a0, %pc_hi20(.LCPI154_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI154_3)
	pcalau12i	$a0, %pc_hi20(.LCPI154_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI154_4)
	ori	$fp, $zero, 25
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB154_3
	.p2align	4, , 16
.LBB154_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB154_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB154_12
.LBB154_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_5 Depth 2
                                        #     Child Loop BB154_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB154_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB154_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB154_5:                              # %.lr.ph
                                        #   Parent Loop BB154_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -8
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, 0
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 25
	addi.d	$s8, $s8, 200
	blt	$s3, $s7, .LBB154_5
.LBB154_6:                              # %.preheader
                                        #   in Loop: Header=BB154_3 Depth=1
	bge	$s3, $s0, .LBB154_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB154_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB154_8:                              # %.lr.ph15
                                        #   Parent Loop BB154_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB154_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB154_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB154_10:                             #   in Loop: Header=BB154_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB154_2
# %bb.11:                               #   in Loop: Header=BB154_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB154_2
.LBB154_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB154_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB154_16
.LBB154_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB154_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB154_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI154_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI154_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB154_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end154:
	.size	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end154-_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI155_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI155_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI155_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI155_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI155_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI155_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	blez	$a1, .LBB155_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -23
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI155_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI155_0)
	pcalau12i	$a0, %pc_hi20(.LCPI155_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI155_1)
	pcalau12i	$a0, %pc_hi20(.LCPI155_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI155_2)
	pcalau12i	$a0, %pc_hi20(.LCPI155_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI155_3)
	pcalau12i	$a0, %pc_hi20(.LCPI155_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI155_4)
	ori	$s8, $zero, 24
	vldi	$vr3, -854
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s5, $zero
	b	.LBB155_3
	.p2align	4, , 16
.LBB155_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB155_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB155_12
.LBB155_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_5 Depth 2
                                        #     Child Loop BB155_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	blt	$s0, $s8, .LBB155_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB155_3 Depth=1
	move	$s3, $zero
	ori	$s4, $zero, 184
	.p2align	4, , 16
.LBB155_5:                              # %.lr.ph
                                        #   Parent Loop BB155_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fldx.d	$fa0, $s1, $s4
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fld.d	$fa1, $sp, 32
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fst.d	$fa0, $sp, 32
	addi.w	$s3, $s3, 24
	addi.d	$s4, $s4, 192
	blt	$s3, $s7, .LBB155_5
.LBB155_6:                              # %.preheader
                                        #   in Loop: Header=BB155_3 Depth=1
	bge	$s3, $s0, .LBB155_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB155_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB155_8:                              # %.lr.ph15
                                        #   Parent Loop BB155_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB155_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB155_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB155_10:                             #   in Loop: Header=BB155_3 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB155_2
# %bb.11:                               #   in Loop: Header=BB155_3 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB155_2
.LBB155_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 24                    # 8-byte Folded Reload
	beqz	$a2, .LBB155_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB155_16
.LBB155_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB155_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB155_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI155_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI155_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB155_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end155:
	.size	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end155-_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI156_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI156_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI156_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI156_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI156_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI156_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB156_13
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -22
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI156_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI156_0)
	pcalau12i	$a0, %pc_hi20(.LCPI156_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI156_1)
	pcalau12i	$a0, %pc_hi20(.LCPI156_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI156_2)
	pcalau12i	$a0, %pc_hi20(.LCPI156_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI156_3)
	pcalau12i	$a0, %pc_hi20(.LCPI156_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI156_4)
	ori	$s8, $zero, 23
	vldi	$vr3, -854
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s5, $zero
	b	.LBB156_3
	.p2align	4, , 16
.LBB156_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB156_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB156_13
.LBB156_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_5 Depth 2
                                        #     Child Loop BB156_9 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	blt	$s0, $s8, .LBB156_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB156_3 Depth=1
	move	$s3, $zero
	.p2align	4, , 16
.LBB156_5:                              # %.lr.ph
                                        #   Parent Loop BB156_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	addi.w	$s3, $s3, 23
	blt	$s3, $s7, .LBB156_5
# %bb.6:                                # %.preheader.loopexit
                                        #   in Loop: Header=BB156_3 Depth=1
	fld.d	$fa0, $sp, 32
	vldi	$vr3, -854
.LBB156_7:                              # %.preheader
                                        #   in Loop: Header=BB156_3 Depth=1
	bge	$s3, $s0, .LBB156_11
# %bb.8:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB156_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB156_9:                              # %.lr.ph15
                                        #   Parent Loop BB156_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB156_9
# %bb.10:                               # %._crit_edge
                                        #   in Loop: Header=BB156_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB156_11:                             #   in Loop: Header=BB156_3 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB156_2
# %bb.12:                               #   in Loop: Header=BB156_3 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB156_2
.LBB156_13:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB156_15
# %bb.14:                               # %._crit_edge19
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB156_17
.LBB156_15:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB156_18
# %bb.16:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB156_17:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI156_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI156_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB156_18:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end156:
	.size	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end156-_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI157_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI157_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI157_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI157_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI157_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI157_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB157_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -21
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 88
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI157_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI157_0)
	pcalau12i	$a0, %pc_hi20(.LCPI157_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI157_1)
	pcalau12i	$a0, %pc_hi20(.LCPI157_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI157_2)
	pcalau12i	$a0, %pc_hi20(.LCPI157_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI157_3)
	pcalau12i	$a0, %pc_hi20(.LCPI157_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI157_4)
	ori	$fp, $zero, 22
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB157_3
	.p2align	4, , 16
.LBB157_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB157_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB157_12
.LBB157_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_5 Depth 2
                                        #     Child Loop BB157_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB157_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB157_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB157_5:                              # %.lr.ph
                                        #   Parent Loop BB157_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 22
	addi.d	$a0, $a0, 22
	addi.d	$a2, $a2, 176
	blt	$a1, $s6, .LBB157_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB157_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB157_8
	b	.LBB157_10
	.p2align	4, , 16
.LBB157_7:                              #   in Loop: Header=BB157_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB157_10
.LBB157_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB157_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB157_9:                              # %.lr.ph24
                                        #   Parent Loop BB157_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB157_9
.LBB157_10:                             # %._crit_edge
                                        #   in Loop: Header=BB157_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB157_2
# %bb.11:                               #   in Loop: Header=BB157_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB157_2
.LBB157_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB157_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB157_16
.LBB157_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB157_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB157_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI157_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI157_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB157_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end157:
	.size	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end157-_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI158_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI158_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI158_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI158_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI158_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI158_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB158_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -20
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI158_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI158_0)
	pcalau12i	$a0, %pc_hi20(.LCPI158_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI158_1)
	pcalau12i	$a0, %pc_hi20(.LCPI158_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI158_2)
	pcalau12i	$a0, %pc_hi20(.LCPI158_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI158_3)
	pcalau12i	$a0, %pc_hi20(.LCPI158_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI158_4)
	ori	$fp, $zero, 21
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB158_3
	.p2align	4, , 16
.LBB158_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB158_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB158_12
.LBB158_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_5 Depth 2
                                        #     Child Loop BB158_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB158_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB158_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB158_5:                              # %.lr.ph
                                        #   Parent Loop BB158_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 21
	addi.d	$a0, $a0, 21
	addi.d	$a2, $a2, 168
	blt	$a1, $s6, .LBB158_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB158_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB158_8
	b	.LBB158_10
	.p2align	4, , 16
.LBB158_7:                              #   in Loop: Header=BB158_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB158_10
.LBB158_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB158_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB158_9:                              # %.lr.ph24
                                        #   Parent Loop BB158_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB158_9
.LBB158_10:                             # %._crit_edge
                                        #   in Loop: Header=BB158_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB158_2
# %bb.11:                               #   in Loop: Header=BB158_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB158_2
.LBB158_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB158_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB158_16
.LBB158_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB158_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB158_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI158_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI158_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB158_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end158:
	.size	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end158-_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI159_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI159_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI159_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI159_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI159_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI159_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB159_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -19
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI159_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI159_0)
	pcalau12i	$a0, %pc_hi20(.LCPI159_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI159_1)
	pcalau12i	$a0, %pc_hi20(.LCPI159_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI159_2)
	pcalau12i	$a0, %pc_hi20(.LCPI159_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI159_3)
	pcalau12i	$a0, %pc_hi20(.LCPI159_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI159_4)
	ori	$fp, $zero, 20
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB159_3
	.p2align	4, , 16
.LBB159_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB159_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB159_12
.LBB159_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_5 Depth 2
                                        #     Child Loop BB159_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB159_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB159_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB159_5:                              # %.lr.ph
                                        #   Parent Loop BB159_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 20
	addi.d	$a0, $a0, 20
	addi.d	$a2, $a2, 160
	blt	$a1, $s6, .LBB159_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB159_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB159_8
	b	.LBB159_10
	.p2align	4, , 16
.LBB159_7:                              #   in Loop: Header=BB159_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB159_10
.LBB159_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB159_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB159_9:                              # %.lr.ph24
                                        #   Parent Loop BB159_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB159_9
.LBB159_10:                             # %._crit_edge
                                        #   in Loop: Header=BB159_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB159_2
# %bb.11:                               #   in Loop: Header=BB159_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB159_2
.LBB159_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB159_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB159_16
.LBB159_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB159_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB159_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI159_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI159_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB159_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end159:
	.size	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end159-_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI160_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI160_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI160_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI160_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI160_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI160_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB160_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -18
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI160_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI160_0)
	pcalau12i	$a0, %pc_hi20(.LCPI160_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI160_1)
	pcalau12i	$a0, %pc_hi20(.LCPI160_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI160_2)
	pcalau12i	$a0, %pc_hi20(.LCPI160_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI160_3)
	pcalau12i	$a0, %pc_hi20(.LCPI160_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI160_4)
	ori	$fp, $zero, 19
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB160_3
	.p2align	4, , 16
.LBB160_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB160_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB160_12
.LBB160_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_5 Depth 2
                                        #     Child Loop BB160_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB160_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB160_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB160_5:                              # %.lr.ph
                                        #   Parent Loop BB160_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 19
	addi.d	$a0, $a0, 19
	addi.d	$a2, $a2, 152
	blt	$a1, $s6, .LBB160_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB160_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB160_8
	b	.LBB160_10
	.p2align	4, , 16
.LBB160_7:                              #   in Loop: Header=BB160_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB160_10
.LBB160_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB160_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB160_9:                              # %.lr.ph24
                                        #   Parent Loop BB160_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB160_9
.LBB160_10:                             # %._crit_edge
                                        #   in Loop: Header=BB160_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB160_2
# %bb.11:                               #   in Loop: Header=BB160_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB160_2
.LBB160_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB160_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB160_16
.LBB160_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB160_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB160_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI160_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI160_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB160_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end160:
	.size	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end160-_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi17EdE7do_testEPKdPKc,"axG",@progbits,_ZN14for_loop_testsILi17EdE7do_testEPKdPKc,comdat
	.weak	_ZN14for_loop_testsILi17EdE7do_testEPKdPKc # -- Begin function _ZN14for_loop_testsILi17EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi17EdE7do_testEPKdPKc,@function
_ZN14for_loop_testsILi17EdE7do_testEPKdPKc: # @_ZN14for_loop_testsILi17EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN14for_loop_testsILi9EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end161:
	.size	_ZN14for_loop_testsILi17EdE7do_testEPKdPKc, .Lfunc_end161-_ZN14for_loop_testsILi17EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI162_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI162_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI162_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI162_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI162_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI162_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB162_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -17
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI162_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI162_0)
	pcalau12i	$a0, %pc_hi20(.LCPI162_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI162_1)
	pcalau12i	$a0, %pc_hi20(.LCPI162_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI162_2)
	pcalau12i	$a0, %pc_hi20(.LCPI162_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI162_3)
	pcalau12i	$a0, %pc_hi20(.LCPI162_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI162_4)
	ori	$fp, $zero, 18
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB162_3
	.p2align	4, , 16
.LBB162_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB162_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB162_12
.LBB162_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_5 Depth 2
                                        #     Child Loop BB162_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB162_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB162_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB162_5:                              # %.lr.ph
                                        #   Parent Loop BB162_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 18
	addi.d	$a0, $a0, 18
	addi.d	$a2, $a2, 144
	blt	$a1, $s6, .LBB162_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB162_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB162_8
	b	.LBB162_10
	.p2align	4, , 16
.LBB162_7:                              #   in Loop: Header=BB162_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB162_10
.LBB162_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB162_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB162_9:                              # %.lr.ph24
                                        #   Parent Loop BB162_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB162_9
.LBB162_10:                             # %._crit_edge
                                        #   in Loop: Header=BB162_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB162_2
# %bb.11:                               #   in Loop: Header=BB162_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB162_2
.LBB162_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB162_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB162_16
.LBB162_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB162_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB162_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI162_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI162_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB162_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end162:
	.size	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end162-_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI163_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI163_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI163_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI163_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI163_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI163_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB163_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -16
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI163_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI163_0)
	pcalau12i	$a0, %pc_hi20(.LCPI163_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI163_1)
	pcalau12i	$a0, %pc_hi20(.LCPI163_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI163_2)
	pcalau12i	$a0, %pc_hi20(.LCPI163_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI163_3)
	pcalau12i	$a0, %pc_hi20(.LCPI163_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI163_4)
	ori	$fp, $zero, 17
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB163_3
	.p2align	4, , 16
.LBB163_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB163_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB163_12
.LBB163_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_5 Depth 2
                                        #     Child Loop BB163_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB163_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB163_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB163_5:                              # %.lr.ph
                                        #   Parent Loop BB163_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 17
	addi.d	$a0, $a0, 17
	addi.d	$a2, $a2, 136
	blt	$a1, $s6, .LBB163_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB163_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB163_8
	b	.LBB163_10
	.p2align	4, , 16
.LBB163_7:                              #   in Loop: Header=BB163_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB163_10
.LBB163_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB163_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB163_9:                              # %.lr.ph24
                                        #   Parent Loop BB163_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB163_9
.LBB163_10:                             # %._crit_edge
                                        #   in Loop: Header=BB163_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB163_2
# %bb.11:                               #   in Loop: Header=BB163_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB163_2
.LBB163_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB163_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB163_16
.LBB163_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB163_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB163_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI163_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI163_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB163_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end163:
	.size	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end163-_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI164_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI164_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI164_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI164_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI164_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI164_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB164_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -15
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI164_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI164_0)
	pcalau12i	$a0, %pc_hi20(.LCPI164_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI164_1)
	pcalau12i	$a0, %pc_hi20(.LCPI164_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI164_2)
	pcalau12i	$a0, %pc_hi20(.LCPI164_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI164_3)
	pcalau12i	$a0, %pc_hi20(.LCPI164_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI164_4)
	ori	$fp, $zero, 16
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB164_3
	.p2align	4, , 16
.LBB164_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB164_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB164_12
.LBB164_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_5 Depth 2
                                        #     Child Loop BB164_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB164_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB164_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB164_5:                              # %.lr.ph
                                        #   Parent Loop BB164_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 16
	addi.d	$a0, $a0, 16
	addi.d	$a2, $a2, 128
	blt	$a1, $s6, .LBB164_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB164_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB164_8
	b	.LBB164_10
	.p2align	4, , 16
.LBB164_7:                              #   in Loop: Header=BB164_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB164_10
.LBB164_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB164_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB164_9:                              # %.lr.ph24
                                        #   Parent Loop BB164_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB164_9
.LBB164_10:                             # %._crit_edge
                                        #   in Loop: Header=BB164_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB164_2
# %bb.11:                               #   in Loop: Header=BB164_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB164_2
.LBB164_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB164_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB164_16
.LBB164_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB164_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB164_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI164_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI164_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB164_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end164:
	.size	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end164-_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI165_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI165_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI165_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI165_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI165_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI165_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB165_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -14
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI165_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI165_0)
	pcalau12i	$a0, %pc_hi20(.LCPI165_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI165_1)
	pcalau12i	$a0, %pc_hi20(.LCPI165_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI165_2)
	pcalau12i	$a0, %pc_hi20(.LCPI165_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI165_3)
	pcalau12i	$a0, %pc_hi20(.LCPI165_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI165_4)
	ori	$fp, $zero, 15
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB165_3
	.p2align	4, , 16
.LBB165_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB165_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB165_12
.LBB165_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_5 Depth 2
                                        #     Child Loop BB165_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB165_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB165_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB165_5:                              # %.lr.ph
                                        #   Parent Loop BB165_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 15
	addi.d	$a0, $a0, 15
	addi.d	$a2, $a2, 120
	blt	$a1, $s6, .LBB165_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB165_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB165_8
	b	.LBB165_10
	.p2align	4, , 16
.LBB165_7:                              #   in Loop: Header=BB165_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB165_10
.LBB165_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB165_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB165_9:                              # %.lr.ph24
                                        #   Parent Loop BB165_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB165_9
.LBB165_10:                             # %._crit_edge
                                        #   in Loop: Header=BB165_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB165_2
# %bb.11:                               #   in Loop: Header=BB165_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB165_2
.LBB165_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB165_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB165_16
.LBB165_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB165_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB165_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI165_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI165_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB165_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end165:
	.size	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end165-_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI166_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI166_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI166_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI166_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI166_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI166_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB166_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -13
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI166_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI166_0)
	pcalau12i	$a0, %pc_hi20(.LCPI166_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI166_1)
	pcalau12i	$a0, %pc_hi20(.LCPI166_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI166_2)
	pcalau12i	$a0, %pc_hi20(.LCPI166_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI166_3)
	pcalau12i	$a0, %pc_hi20(.LCPI166_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI166_4)
	ori	$fp, $zero, 14
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB166_3
	.p2align	4, , 16
.LBB166_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB166_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB166_12
.LBB166_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_5 Depth 2
                                        #     Child Loop BB166_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB166_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB166_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB166_5:                              # %.lr.ph
                                        #   Parent Loop BB166_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 14
	addi.d	$a0, $a0, 14
	addi.d	$a2, $a2, 112
	blt	$a1, $s6, .LBB166_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB166_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB166_8
	b	.LBB166_10
	.p2align	4, , 16
.LBB166_7:                              #   in Loop: Header=BB166_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB166_10
.LBB166_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB166_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB166_9:                              # %.lr.ph24
                                        #   Parent Loop BB166_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB166_9
.LBB166_10:                             # %._crit_edge
                                        #   in Loop: Header=BB166_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB166_2
# %bb.11:                               #   in Loop: Header=BB166_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB166_2
.LBB166_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB166_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB166_16
.LBB166_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB166_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB166_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI166_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI166_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB166_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end166:
	.size	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end166-_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI167_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI167_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI167_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI167_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI167_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI167_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB167_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -12
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI167_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI167_0)
	pcalau12i	$a0, %pc_hi20(.LCPI167_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI167_1)
	pcalau12i	$a0, %pc_hi20(.LCPI167_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI167_2)
	pcalau12i	$a0, %pc_hi20(.LCPI167_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI167_3)
	pcalau12i	$a0, %pc_hi20(.LCPI167_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI167_4)
	ori	$fp, $zero, 13
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB167_3
	.p2align	4, , 16
.LBB167_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB167_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB167_12
.LBB167_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_5 Depth 2
                                        #     Child Loop BB167_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB167_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB167_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB167_5:                              # %.lr.ph
                                        #   Parent Loop BB167_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 13
	addi.d	$a0, $a0, 13
	addi.d	$a2, $a2, 104
	blt	$a1, $s6, .LBB167_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB167_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB167_8
	b	.LBB167_10
	.p2align	4, , 16
.LBB167_7:                              #   in Loop: Header=BB167_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB167_10
.LBB167_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB167_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB167_9:                              # %.lr.ph24
                                        #   Parent Loop BB167_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB167_9
.LBB167_10:                             # %._crit_edge
                                        #   in Loop: Header=BB167_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB167_2
# %bb.11:                               #   in Loop: Header=BB167_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB167_2
.LBB167_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB167_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB167_16
.LBB167_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB167_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB167_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI167_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI167_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB167_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end167:
	.size	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end167-_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI168_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI168_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI168_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI168_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI168_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI168_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB168_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -11
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI168_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI168_0)
	pcalau12i	$a0, %pc_hi20(.LCPI168_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI168_1)
	pcalau12i	$a0, %pc_hi20(.LCPI168_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI168_2)
	pcalau12i	$a0, %pc_hi20(.LCPI168_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI168_3)
	pcalau12i	$a0, %pc_hi20(.LCPI168_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI168_4)
	ori	$fp, $zero, 12
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB168_3
	.p2align	4, , 16
.LBB168_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB168_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB168_12
.LBB168_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB168_5 Depth 2
                                        #     Child Loop BB168_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB168_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB168_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB168_5:                              # %.lr.ph
                                        #   Parent Loop BB168_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 12
	addi.d	$a0, $a0, 12
	addi.d	$a2, $a2, 96
	blt	$a1, $s6, .LBB168_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB168_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB168_8
	b	.LBB168_10
	.p2align	4, , 16
.LBB168_7:                              #   in Loop: Header=BB168_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB168_10
.LBB168_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB168_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB168_9:                              # %.lr.ph23
                                        #   Parent Loop BB168_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB168_9
.LBB168_10:                             # %._crit_edge
                                        #   in Loop: Header=BB168_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB168_2
# %bb.11:                               #   in Loop: Header=BB168_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB168_2
.LBB168_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB168_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB168_16
.LBB168_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB168_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB168_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI168_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI168_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB168_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end168:
	.size	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end168-_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI169_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI169_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI169_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI169_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI169_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI169_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB169_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -10
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI169_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI169_0)
	pcalau12i	$a0, %pc_hi20(.LCPI169_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI169_1)
	pcalau12i	$a0, %pc_hi20(.LCPI169_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI169_2)
	pcalau12i	$a0, %pc_hi20(.LCPI169_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI169_3)
	pcalau12i	$a0, %pc_hi20(.LCPI169_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI169_4)
	ori	$fp, $zero, 11
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB169_3
	.p2align	4, , 16
.LBB169_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB169_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB169_12
.LBB169_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_5 Depth 2
                                        #     Child Loop BB169_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB169_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB169_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB169_5:                              # %.lr.ph
                                        #   Parent Loop BB169_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 11
	addi.d	$a0, $a0, 11
	addi.d	$a2, $a2, 88
	blt	$a1, $s6, .LBB169_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB169_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB169_8
	b	.LBB169_10
	.p2align	4, , 16
.LBB169_7:                              #   in Loop: Header=BB169_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB169_10
.LBB169_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB169_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB169_9:                              # %.lr.ph23
                                        #   Parent Loop BB169_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB169_9
.LBB169_10:                             # %._crit_edge
                                        #   in Loop: Header=BB169_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB169_2
# %bb.11:                               #   in Loop: Header=BB169_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB169_2
.LBB169_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB169_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB169_16
.LBB169_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB169_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB169_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI169_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI169_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB169_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end169:
	.size	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end169-_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN14for_loop_testsILi9EdE7do_testEPKdPKc,"axG",@progbits,_ZN14for_loop_testsILi9EdE7do_testEPKdPKc,comdat
	.weak	_ZN14for_loop_testsILi9EdE7do_testEPKdPKc # -- Begin function _ZN14for_loop_testsILi9EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN14for_loop_testsILi9EdE7do_testEPKdPKc,@function
_ZN14for_loop_testsILi9EdE7do_testEPKdPKc: # @_ZN14for_loop_testsILi9EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end170:
	.size	_ZN14for_loop_testsILi9EdE7do_testEPKdPKc, .Lfunc_end170-_ZN14for_loop_testsILi9EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI171_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI171_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI171_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI171_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI171_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI171_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB171_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -9
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI171_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI171_0)
	pcalau12i	$a0, %pc_hi20(.LCPI171_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI171_1)
	pcalau12i	$a0, %pc_hi20(.LCPI171_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI171_2)
	pcalau12i	$a0, %pc_hi20(.LCPI171_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI171_3)
	pcalau12i	$a0, %pc_hi20(.LCPI171_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI171_4)
	ori	$fp, $zero, 10
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB171_3
	.p2align	4, , 16
.LBB171_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB171_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB171_12
.LBB171_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_5 Depth 2
                                        #     Child Loop BB171_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB171_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB171_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB171_5:                              # %.lr.ph
                                        #   Parent Loop BB171_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 10
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, 80
	blt	$a2, $s6, .LBB171_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB171_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB171_8
	b	.LBB171_10
	.p2align	4, , 16
.LBB171_7:                              #   in Loop: Header=BB171_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB171_10
.LBB171_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB171_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB171_9:                              # %.lr.ph23
                                        #   Parent Loop BB171_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB171_9
.LBB171_10:                             # %._crit_edge
                                        #   in Loop: Header=BB171_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB171_2
# %bb.11:                               #   in Loop: Header=BB171_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB171_2
.LBB171_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB171_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB171_16
.LBB171_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB171_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB171_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI171_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI171_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB171_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end171:
	.size	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end171-_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI172_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI172_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI172_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI172_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI172_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI172_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB172_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -8
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI172_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI172_0)
	pcalau12i	$a0, %pc_hi20(.LCPI172_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI172_1)
	pcalau12i	$a0, %pc_hi20(.LCPI172_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI172_2)
	pcalau12i	$a0, %pc_hi20(.LCPI172_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI172_3)
	pcalau12i	$a0, %pc_hi20(.LCPI172_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI172_4)
	ori	$fp, $zero, 9
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB172_3
	.p2align	4, , 16
.LBB172_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB172_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB172_12
.LBB172_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_5 Depth 2
                                        #     Child Loop BB172_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB172_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB172_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB172_5:                              # %.lr.ph
                                        #   Parent Loop BB172_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 9
	addi.d	$a0, $a0, 9
	addi.d	$a3, $a3, 72
	blt	$a2, $s6, .LBB172_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB172_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB172_8
	b	.LBB172_10
	.p2align	4, , 16
.LBB172_7:                              #   in Loop: Header=BB172_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB172_10
.LBB172_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB172_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB172_9:                              # %.lr.ph23
                                        #   Parent Loop BB172_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB172_9
.LBB172_10:                             # %._crit_edge
                                        #   in Loop: Header=BB172_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB172_2
# %bb.11:                               #   in Loop: Header=BB172_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB172_2
.LBB172_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB172_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB172_16
.LBB172_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB172_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB172_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI172_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI172_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB172_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end172:
	.size	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end172-_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI173_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI173_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI173_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI173_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI173_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI173_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB173_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -7
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI173_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI173_0)
	pcalau12i	$a0, %pc_hi20(.LCPI173_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI173_1)
	pcalau12i	$a0, %pc_hi20(.LCPI173_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI173_2)
	pcalau12i	$a0, %pc_hi20(.LCPI173_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI173_3)
	pcalau12i	$a0, %pc_hi20(.LCPI173_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI173_4)
	ori	$fp, $zero, 8
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB173_3
	.p2align	4, , 16
.LBB173_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB173_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB173_12
.LBB173_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_5 Depth 2
                                        #     Child Loop BB173_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB173_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB173_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB173_5:                              # %.lr.ph
                                        #   Parent Loop BB173_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 8
	addi.d	$a0, $a0, 8
	addi.d	$a3, $a3, 64
	blt	$a2, $s6, .LBB173_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB173_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB173_8
	b	.LBB173_10
	.p2align	4, , 16
.LBB173_7:                              #   in Loop: Header=BB173_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB173_10
.LBB173_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB173_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB173_9:                              # %.lr.ph23
                                        #   Parent Loop BB173_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB173_9
.LBB173_10:                             # %._crit_edge
                                        #   in Loop: Header=BB173_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB173_2
# %bb.11:                               #   in Loop: Header=BB173_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB173_2
.LBB173_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB173_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB173_16
.LBB173_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB173_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB173_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI173_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI173_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB173_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end173:
	.size	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end173-_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI174_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI174_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI174_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI174_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI174_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI174_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB174_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -6
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI174_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI174_0)
	pcalau12i	$a0, %pc_hi20(.LCPI174_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI174_1)
	pcalau12i	$a0, %pc_hi20(.LCPI174_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI174_2)
	pcalau12i	$a0, %pc_hi20(.LCPI174_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI174_3)
	pcalau12i	$a0, %pc_hi20(.LCPI174_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI174_4)
	ori	$fp, $zero, 7
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB174_3
	.p2align	4, , 16
.LBB174_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB174_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB174_12
.LBB174_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_5 Depth 2
                                        #     Child Loop BB174_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB174_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB174_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB174_5:                              # %.lr.ph
                                        #   Parent Loop BB174_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 7
	addi.d	$a0, $a0, 7
	addi.d	$a3, $a3, 56
	blt	$a2, $s6, .LBB174_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB174_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB174_8
	b	.LBB174_10
	.p2align	4, , 16
.LBB174_7:                              #   in Loop: Header=BB174_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB174_10
.LBB174_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB174_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB174_9:                              # %.lr.ph23
                                        #   Parent Loop BB174_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB174_9
.LBB174_10:                             # %._crit_edge
                                        #   in Loop: Header=BB174_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB174_2
# %bb.11:                               #   in Loop: Header=BB174_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB174_2
.LBB174_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB174_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB174_16
.LBB174_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB174_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB174_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI174_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI174_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB174_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end174:
	.size	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end174-_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI175_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI175_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI175_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI175_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI175_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI175_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB175_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -5
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI175_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI175_0)
	pcalau12i	$a0, %pc_hi20(.LCPI175_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI175_1)
	pcalau12i	$a0, %pc_hi20(.LCPI175_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI175_2)
	pcalau12i	$a0, %pc_hi20(.LCPI175_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI175_3)
	pcalau12i	$a0, %pc_hi20(.LCPI175_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI175_4)
	ori	$fp, $zero, 6
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB175_3
	.p2align	4, , 16
.LBB175_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB175_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB175_12
.LBB175_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_5 Depth 2
                                        #     Child Loop BB175_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB175_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB175_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB175_5:                              # %.lr.ph
                                        #   Parent Loop BB175_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 6
	addi.d	$a3, $a3, 48
	addi.d	$a0, $a0, 6
	blt	$a2, $s6, .LBB175_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB175_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB175_8
	b	.LBB175_10
	.p2align	4, , 16
.LBB175_7:                              #   in Loop: Header=BB175_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB175_10
.LBB175_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB175_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB175_9:                              # %.lr.ph23
                                        #   Parent Loop BB175_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB175_9
.LBB175_10:                             # %._crit_edge
                                        #   in Loop: Header=BB175_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB175_2
# %bb.11:                               #   in Loop: Header=BB175_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB175_2
.LBB175_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB175_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB175_16
.LBB175_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB175_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB175_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI175_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI175_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB175_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end175:
	.size	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end175-_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI176_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI176_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI176_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI176_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI176_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI176_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB176_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -4
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI176_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI176_0)
	pcalau12i	$a0, %pc_hi20(.LCPI176_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI176_1)
	pcalau12i	$a0, %pc_hi20(.LCPI176_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI176_2)
	pcalau12i	$a0, %pc_hi20(.LCPI176_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI176_3)
	pcalau12i	$a0, %pc_hi20(.LCPI176_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI176_4)
	ori	$fp, $zero, 5
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB176_3
	.p2align	4, , 16
.LBB176_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB176_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB176_12
.LBB176_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_5 Depth 2
                                        #     Child Loop BB176_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB176_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB176_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB176_5:                              # %.lr.ph
                                        #   Parent Loop BB176_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 40
	addi.d	$a0, $a0, 5
	blt	$a2, $s6, .LBB176_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB176_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB176_8
	b	.LBB176_10
	.p2align	4, , 16
.LBB176_7:                              #   in Loop: Header=BB176_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB176_10
.LBB176_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB176_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB176_9:                              # %.lr.ph23
                                        #   Parent Loop BB176_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB176_9
.LBB176_10:                             # %._crit_edge
                                        #   in Loop: Header=BB176_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB176_2
# %bb.11:                               #   in Loop: Header=BB176_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB176_2
.LBB176_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB176_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB176_16
.LBB176_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB176_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB176_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI176_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI176_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB176_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end176:
	.size	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end176-_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI177_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI177_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI177_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI177_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI177_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI177_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB177_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -3
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI177_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI177_0)
	pcalau12i	$a0, %pc_hi20(.LCPI177_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI177_1)
	pcalau12i	$a0, %pc_hi20(.LCPI177_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI177_2)
	pcalau12i	$a0, %pc_hi20(.LCPI177_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI177_3)
	pcalau12i	$a0, %pc_hi20(.LCPI177_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI177_4)
	ori	$fp, $zero, 4
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB177_3
	.p2align	4, , 16
.LBB177_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB177_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB177_12
.LBB177_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_5 Depth 2
                                        #     Child Loop BB177_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB177_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB177_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB177_5:                              # %.lr.ph
                                        #   Parent Loop BB177_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 32
	addi.d	$a0, $a0, 4
	blt	$a2, $s6, .LBB177_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB177_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB177_8
	b	.LBB177_10
	.p2align	4, , 16
.LBB177_7:                              #   in Loop: Header=BB177_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB177_10
.LBB177_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB177_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB177_9:                              # %.lr.ph23
                                        #   Parent Loop BB177_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB177_9
.LBB177_10:                             # %._crit_edge
                                        #   in Loop: Header=BB177_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB177_2
# %bb.11:                               #   in Loop: Header=BB177_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB177_2
.LBB177_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB177_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB177_16
.LBB177_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB177_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB177_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI177_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI177_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB177_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end177:
	.size	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end177-_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI178_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI178_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI178_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI178_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI178_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI178_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB178_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -2
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI178_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI178_0)
	pcalau12i	$a0, %pc_hi20(.LCPI178_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI178_1)
	pcalau12i	$a0, %pc_hi20(.LCPI178_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI178_2)
	pcalau12i	$a0, %pc_hi20(.LCPI178_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI178_3)
	pcalau12i	$a0, %pc_hi20(.LCPI178_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI178_4)
	ori	$fp, $zero, 3
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB178_3
	.p2align	4, , 16
.LBB178_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB178_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB178_12
.LBB178_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB178_5 Depth 2
                                        #     Child Loop BB178_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB178_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB178_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB178_5:                              # %.lr.ph
                                        #   Parent Loop BB178_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 24
	addi.d	$a0, $a0, 3
	blt	$a2, $s6, .LBB178_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB178_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB178_8
	b	.LBB178_10
	.p2align	4, , 16
.LBB178_7:                              #   in Loop: Header=BB178_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB178_10
.LBB178_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB178_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB178_9:                              # %.lr.ph23
                                        #   Parent Loop BB178_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB178_9
.LBB178_10:                             # %._crit_edge
                                        #   in Loop: Header=BB178_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB178_2
# %bb.11:                               #   in Loop: Header=BB178_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB178_2
.LBB178_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB178_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB178_16
.LBB178_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB178_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB178_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI178_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI178_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB178_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end178:
	.size	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end178-_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI179_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI179_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI179_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI179_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI179_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI179_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	blez	$a1, .LBB179_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -1
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 8
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI179_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI179_0)
	pcalau12i	$a0, %pc_hi20(.LCPI179_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI179_1)
	pcalau12i	$a0, %pc_hi20(.LCPI179_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI179_2)
	pcalau12i	$a0, %pc_hi20(.LCPI179_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI179_3)
	pcalau12i	$a0, %pc_hi20(.LCPI179_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI179_4)
	ori	$fp, $zero, 2
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB179_3
	.p2align	4, , 16
.LBB179_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB179_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB179_12
.LBB179_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB179_5 Depth 2
                                        #     Child Loop BB179_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB179_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB179_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB179_5:                              # %.lr.ph
                                        #   Parent Loop BB179_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 16
	addi.d	$a0, $a0, 2
	blt	$a2, $s6, .LBB179_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB179_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB179_8
	b	.LBB179_10
	.p2align	4, , 16
.LBB179_7:                              #   in Loop: Header=BB179_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB179_10
.LBB179_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB179_3 Depth=1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a2, $a0, $a2, 3
	sub.d	$a0, $s7, $a0
	.p2align	4, , 16
.LBB179_9:                              # %.lr.ph23
                                        #   Parent Loop BB179_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB179_9
.LBB179_10:                             # %._crit_edge
                                        #   in Loop: Header=BB179_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB179_2
# %bb.11:                               #   in Loop: Header=BB179_3 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB179_2
.LBB179_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB179_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB179_16
.LBB179_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB179_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB179_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI179_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI179_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB179_17:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end179:
	.size	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end179-_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI180_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI180_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI180_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI180_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI180_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI180_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	5
	.type	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc: # @_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB180_8
# %bb.1:                                # %.preheader17.lr.ph
	bstrpick.d	$s6, $s0, 31, 0
	pcalau12i	$a0, %pc_hi20(.LCPI180_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI180_0)
	pcalau12i	$a0, %pc_hi20(.LCPI180_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI180_1)
	pcalau12i	$a0, %pc_hi20(.LCPI180_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI180_2)
	pcalau12i	$a0, %pc_hi20(.LCPI180_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI180_3)
	pcalau12i	$a0, %pc_hi20(.LCPI180_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI180_4)
	movgr2fr.d	$fs5, $zero
	vldi	$vr3, -854
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s8, $zero
	b	.LBB180_3
	.p2align	4, , 16
.LBB180_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB180_3 Depth=1
	addi.w	$s8, $s8, 1
	bge	$s8, $a1, .LBB180_8
.LBB180_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_5 Depth 2
	fmov.d	$fa0, $fs5
	blez	$s0, .LBB180_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB180_3 Depth=1
	move	$a0, $s6
	move	$a2, $s1
	fmov.d	$fa0, $fs5
	.p2align	4, , 16
.LBB180_5:                              # %.lr.ph
                                        #   Parent Loop BB180_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB180_5
.LBB180_6:                              # %._crit_edge
                                        #   in Loop: Header=BB180_3 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB180_2
# %bb.7:                                #   in Loop: Header=BB180_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB180_2
.LBB180_8:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB180_10
# %bb.9:                                # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB180_12
.LBB180_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB180_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB180_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI180_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI180_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB180_13:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end180:
	.size	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end180-_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _ZN15loop_inner_bodyILi12EdE7do_workERdPKdi
.LCPI181_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI181_1:
	.dword	0x412be67a00000000              # double 914237
	.section	.text._ZN15loop_inner_bodyILi12EdE7do_workERdPKdi,"axG",@progbits,_ZN15loop_inner_bodyILi12EdE7do_workERdPKdi,comdat
	.weak	_ZN15loop_inner_bodyILi12EdE7do_workERdPKdi
	.p2align	5
	.type	_ZN15loop_inner_bodyILi12EdE7do_workERdPKdi,@function
_ZN15loop_inner_bodyILi12EdE7do_workERdPKdi: # @_ZN15loop_inner_bodyILi12EdE7do_workERdPKdi
	.cfi_startproc
# %bb.0:
	slli.d	$a3, $a2, 3
	fldx.d	$fa2, $a1, $a3
	pcalau12i	$a3, %pc_hi20(.LCPI181_0)
	fld.d	$fa0, $a3, %pc_lo12(.LCPI181_0)
	pcalau12i	$a3, %pc_hi20(.LCPI181_1)
	fld.d	$fa1, $a3, %pc_lo12(.LCPI181_1)
	alsl.d	$a1, $a2, $a1, 3
	fadd.d	$fa3, $fa2, $fa0
	vldi	$vr2, -854
	fmadd.d	$fa3, $fa3, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa0
	fld.d	$fa4, $a0, 0
	fmadd.d	$fa3, $fa3, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa0
	fmadd.d	$fa3, $fa3, $fa1, $fa2
	fadd.d	$fa3, $fa4, $fa3
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 8
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 16
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 24
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 32
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 40
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 48
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 56
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 64
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 72
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 80
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $a0, 0
	fld.d	$fa4, $a1, 88
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa0, $fa4, $fa0
	fmadd.d	$fa0, $fa0, $fa1, $fa2
	fadd.d	$fa0, $fa3, $fa0
	fst.d	$fa0, $a0, 0
	ret
.Lfunc_end181:
	.size	_ZN15loop_inner_bodyILi12EdE7do_workERdPKdi, .Lfunc_end181-_ZN15loop_inner_bodyILi12EdE7do_workERdPKdi
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _ZN15loop_inner_bodyILi23EdE7do_workERdPKdi
.LCPI182_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI182_1:
	.dword	0x412be67a00000000              # double 914237
	.section	.text._ZN15loop_inner_bodyILi23EdE7do_workERdPKdi,"axG",@progbits,_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi,comdat
	.weak	_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi
	.p2align	5
	.type	_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi,@function
_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi: # @_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$s0, $a2
	move	$s1, $a1
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi12EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	alsl.d	$a0, $s0, $s1, 3
	fld.d	$fa2, $a0, 96
	pcalau12i	$a1, %pc_hi20(.LCPI182_0)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI182_0)
	pcalau12i	$a1, %pc_hi20(.LCPI182_1)
	fld.d	$fa1, $a1, %pc_lo12(.LCPI182_1)
	fadd.d	$fa3, $fa2, $fa0
	vldi	$vr2, -854
	fmadd.d	$fa3, $fa3, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa0
	fld.d	$fa4, $fp, 0
	fmadd.d	$fa3, $fa3, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa0
	fmadd.d	$fa3, $fa3, $fa1, $fa2
	fadd.d	$fa3, $fa4, $fa3
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 104
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 112
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 120
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 128
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 136
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 144
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 152
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 160
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 168
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa3, $fa3, $fa4
	fst.d	$fa3, $fp, 0
	fld.d	$fa4, $a0, 176
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa4, $fa4, $fa0
	fmadd.d	$fa4, $fa4, $fa1, $fa2
	fadd.d	$fa0, $fa4, $fa0
	fmadd.d	$fa0, $fa0, $fa1, $fa2
	fadd.d	$fa0, $fa3, $fa0
	fst.d	$fa0, $fp, 0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end182:
	.size	_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi, .Lfunc_end182-_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI183_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI183_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI183_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI183_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI183_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI183_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$fp, %pc_hi20(current_test)
	blez	$a1, .LBB183_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -31
	addi.d	$a0, $s1, 248
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI183_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI183_0)
	pcalau12i	$a0, %pc_hi20(.LCPI183_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI183_1)
	pcalau12i	$a0, %pc_hi20(.LCPI183_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI183_2)
	pcalau12i	$a0, %pc_hi20(.LCPI183_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI183_3)
	pcalau12i	$a0, %pc_hi20(.LCPI183_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI183_4)
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB183_3
	.p2align	4, , 16
.LBB183_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB183_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB183_12
.LBB183_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_5 Depth 2
                                        #     Child Loop BB183_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB183_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB183_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB183_5:                              # %.lr.ph
                                        #   Parent Loop BB183_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -64
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 32
	fld.d	$fa2, $s8, -56
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 32
	addi.w	$s3, $s3, 32
	addi.d	$s8, $s8, 256
	blt	$s3, $s7, .LBB183_5
.LBB183_6:                              # %.preheader
                                        #   in Loop: Header=BB183_3 Depth=1
	bge	$s3, $s0, .LBB183_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB183_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB183_8:                              # %.lr.ph15
                                        #   Parent Loop BB183_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB183_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB183_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB183_10:                             #   in Loop: Header=BB183_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB183_2
# %bb.11:                               #   in Loop: Header=BB183_3 Depth=1
	ld.w	$a1, $fp, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB183_2
.LBB183_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s3, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB183_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $fp, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB183_16
.LBB183_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB183_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $fp, %pc_lo12(current_test)
.LBB183_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI183_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI183_5)
	sub.d	$a1, $s0, $s3
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB183_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end183:
	.size	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end183-_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI184_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI184_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI184_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI184_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI184_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI184_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB184_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -30
	addi.d	$a0, $s1, 240
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI184_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI184_0)
	pcalau12i	$a0, %pc_hi20(.LCPI184_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI184_1)
	pcalau12i	$a0, %pc_hi20(.LCPI184_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI184_2)
	pcalau12i	$a0, %pc_hi20(.LCPI184_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI184_3)
	pcalau12i	$a0, %pc_hi20(.LCPI184_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI184_4)
	ori	$fp, $zero, 31
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB184_3
	.p2align	4, , 16
.LBB184_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB184_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB184_12
.LBB184_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_5 Depth 2
                                        #     Child Loop BB184_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB184_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB184_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB184_5:                              # %.lr.ph
                                        #   Parent Loop BB184_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -56
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -48
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 31
	addi.d	$s8, $s8, 248
	blt	$s3, $s7, .LBB184_5
.LBB184_6:                              # %.preheader
                                        #   in Loop: Header=BB184_3 Depth=1
	bge	$s3, $s0, .LBB184_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB184_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB184_8:                              # %.lr.ph15
                                        #   Parent Loop BB184_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB184_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB184_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB184_10:                             #   in Loop: Header=BB184_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB184_2
# %bb.11:                               #   in Loop: Header=BB184_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB184_2
.LBB184_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB184_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB184_16
.LBB184_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB184_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB184_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI184_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI184_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB184_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end184:
	.size	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end184-_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI185_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI185_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI185_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI185_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI185_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI185_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB185_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -29
	addi.d	$a0, $s1, 232
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI185_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI185_0)
	pcalau12i	$a0, %pc_hi20(.LCPI185_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI185_1)
	pcalau12i	$a0, %pc_hi20(.LCPI185_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI185_2)
	pcalau12i	$a0, %pc_hi20(.LCPI185_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI185_3)
	pcalau12i	$a0, %pc_hi20(.LCPI185_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI185_4)
	ori	$fp, $zero, 30
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB185_3
	.p2align	4, , 16
.LBB185_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB185_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB185_12
.LBB185_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_5 Depth 2
                                        #     Child Loop BB185_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB185_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB185_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB185_5:                              # %.lr.ph
                                        #   Parent Loop BB185_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -48
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -40
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 30
	addi.d	$s8, $s8, 240
	blt	$s3, $s7, .LBB185_5
.LBB185_6:                              # %.preheader
                                        #   in Loop: Header=BB185_3 Depth=1
	bge	$s3, $s0, .LBB185_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB185_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB185_8:                              # %.lr.ph15
                                        #   Parent Loop BB185_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB185_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB185_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB185_10:                             #   in Loop: Header=BB185_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB185_2
# %bb.11:                               #   in Loop: Header=BB185_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB185_2
.LBB185_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB185_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB185_16
.LBB185_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB185_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB185_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI185_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI185_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB185_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end185:
	.size	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end185-_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI186_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI186_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI186_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI186_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI186_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI186_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB186_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -28
	addi.d	$a0, $s1, 224
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI186_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI186_0)
	pcalau12i	$a0, %pc_hi20(.LCPI186_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI186_1)
	pcalau12i	$a0, %pc_hi20(.LCPI186_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI186_2)
	pcalau12i	$a0, %pc_hi20(.LCPI186_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI186_3)
	pcalau12i	$a0, %pc_hi20(.LCPI186_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI186_4)
	ori	$fp, $zero, 29
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB186_3
	.p2align	4, , 16
.LBB186_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB186_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB186_12
.LBB186_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_5 Depth 2
                                        #     Child Loop BB186_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB186_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB186_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB186_5:                              # %.lr.ph
                                        #   Parent Loop BB186_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -40
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -32
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 29
	addi.d	$s8, $s8, 232
	blt	$s3, $s7, .LBB186_5
.LBB186_6:                              # %.preheader
                                        #   in Loop: Header=BB186_3 Depth=1
	bge	$s3, $s0, .LBB186_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB186_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB186_8:                              # %.lr.ph15
                                        #   Parent Loop BB186_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB186_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB186_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB186_10:                             #   in Loop: Header=BB186_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB186_2
# %bb.11:                               #   in Loop: Header=BB186_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB186_2
.LBB186_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB186_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB186_16
.LBB186_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB186_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB186_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI186_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI186_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB186_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end186:
	.size	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end186-_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI187_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI187_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI187_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI187_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI187_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI187_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB187_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -27
	addi.d	$a0, $s1, 216
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI187_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI187_0)
	pcalau12i	$a0, %pc_hi20(.LCPI187_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI187_1)
	pcalau12i	$a0, %pc_hi20(.LCPI187_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI187_2)
	pcalau12i	$a0, %pc_hi20(.LCPI187_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI187_3)
	pcalau12i	$a0, %pc_hi20(.LCPI187_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI187_4)
	ori	$fp, $zero, 28
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB187_3
	.p2align	4, , 16
.LBB187_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB187_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB187_12
.LBB187_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_5 Depth 2
                                        #     Child Loop BB187_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB187_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB187_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB187_5:                              # %.lr.ph
                                        #   Parent Loop BB187_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -32
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -24
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 28
	addi.d	$s8, $s8, 224
	blt	$s3, $s7, .LBB187_5
.LBB187_6:                              # %.preheader
                                        #   in Loop: Header=BB187_3 Depth=1
	bge	$s3, $s0, .LBB187_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB187_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB187_8:                              # %.lr.ph15
                                        #   Parent Loop BB187_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB187_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB187_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB187_10:                             #   in Loop: Header=BB187_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB187_2
# %bb.11:                               #   in Loop: Header=BB187_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB187_2
.LBB187_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB187_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB187_16
.LBB187_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB187_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB187_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI187_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI187_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB187_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end187:
	.size	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end187-_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI188_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI188_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI188_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI188_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI188_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI188_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB188_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -26
	addi.d	$a0, $s1, 208
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI188_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI188_0)
	pcalau12i	$a0, %pc_hi20(.LCPI188_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI188_1)
	pcalau12i	$a0, %pc_hi20(.LCPI188_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI188_2)
	pcalau12i	$a0, %pc_hi20(.LCPI188_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI188_3)
	pcalau12i	$a0, %pc_hi20(.LCPI188_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI188_4)
	ori	$fp, $zero, 27
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB188_3
	.p2align	4, , 16
.LBB188_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB188_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB188_12
.LBB188_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_5 Depth 2
                                        #     Child Loop BB188_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB188_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB188_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB188_5:                              # %.lr.ph
                                        #   Parent Loop BB188_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -24
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -16
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 27
	addi.d	$s8, $s8, 216
	blt	$s3, $s7, .LBB188_5
.LBB188_6:                              # %.preheader
                                        #   in Loop: Header=BB188_3 Depth=1
	bge	$s3, $s0, .LBB188_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB188_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB188_8:                              # %.lr.ph15
                                        #   Parent Loop BB188_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB188_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB188_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB188_10:                             #   in Loop: Header=BB188_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB188_2
# %bb.11:                               #   in Loop: Header=BB188_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB188_2
.LBB188_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB188_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB188_16
.LBB188_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB188_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB188_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI188_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI188_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB188_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end188:
	.size	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end188-_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi25EdE7do_testEPKdPKc,"axG",@progbits,_ZN16while_loop_testsILi25EdE7do_testEPKdPKc,comdat
	.weak	_ZN16while_loop_testsILi25EdE7do_testEPKdPKc # -- Begin function _ZN16while_loop_testsILi25EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi25EdE7do_testEPKdPKc,@function
_ZN16while_loop_testsILi25EdE7do_testEPKdPKc: # @_ZN16while_loop_testsILi25EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi17EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1700
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1900
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end189:
	.size	_ZN16while_loop_testsILi25EdE7do_testEPKdPKc, .Lfunc_end189-_ZN16while_loop_testsILi25EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI190_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI190_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI190_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI190_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI190_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI190_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB190_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -25
	addi.d	$a0, $s1, 200
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI190_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI190_0)
	pcalau12i	$a0, %pc_hi20(.LCPI190_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI190_1)
	pcalau12i	$a0, %pc_hi20(.LCPI190_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI190_2)
	pcalau12i	$a0, %pc_hi20(.LCPI190_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI190_3)
	pcalau12i	$a0, %pc_hi20(.LCPI190_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI190_4)
	ori	$fp, $zero, 26
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB190_3
	.p2align	4, , 16
.LBB190_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB190_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB190_12
.LBB190_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_5 Depth 2
                                        #     Child Loop BB190_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB190_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB190_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB190_5:                              # %.lr.ph
                                        #   Parent Loop BB190_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -16
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -8
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 26
	addi.d	$s8, $s8, 208
	blt	$s3, $s7, .LBB190_5
.LBB190_6:                              # %.preheader
                                        #   in Loop: Header=BB190_3 Depth=1
	bge	$s3, $s0, .LBB190_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB190_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB190_8:                              # %.lr.ph15
                                        #   Parent Loop BB190_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB190_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB190_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB190_10:                             #   in Loop: Header=BB190_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB190_2
# %bb.11:                               #   in Loop: Header=BB190_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB190_2
.LBB190_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB190_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB190_16
.LBB190_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB190_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB190_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI190_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI190_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB190_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end190:
	.size	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end190-_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI191_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI191_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI191_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI191_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI191_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI191_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB191_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -24
	addi.d	$a0, $s1, 192
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI191_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI191_0)
	pcalau12i	$a0, %pc_hi20(.LCPI191_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI191_1)
	pcalau12i	$a0, %pc_hi20(.LCPI191_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI191_2)
	pcalau12i	$a0, %pc_hi20(.LCPI191_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI191_3)
	pcalau12i	$a0, %pc_hi20(.LCPI191_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI191_4)
	ori	$fp, $zero, 25
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB191_3
	.p2align	4, , 16
.LBB191_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB191_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB191_12
.LBB191_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_5 Depth 2
                                        #     Child Loop BB191_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB191_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB191_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB191_5:                              # %.lr.ph
                                        #   Parent Loop BB191_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -8
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, 0
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 25
	addi.d	$s8, $s8, 200
	blt	$s3, $s7, .LBB191_5
.LBB191_6:                              # %.preheader
                                        #   in Loop: Header=BB191_3 Depth=1
	bge	$s3, $s0, .LBB191_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB191_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB191_8:                              # %.lr.ph15
                                        #   Parent Loop BB191_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB191_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB191_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB191_10:                             #   in Loop: Header=BB191_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB191_2
# %bb.11:                               #   in Loop: Header=BB191_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB191_2
.LBB191_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB191_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB191_16
.LBB191_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB191_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB191_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI191_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI191_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB191_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end191:
	.size	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end191-_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI192_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI192_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI192_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI192_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI192_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI192_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	blez	$a1, .LBB192_12
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -23
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI192_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI192_0)
	pcalau12i	$a0, %pc_hi20(.LCPI192_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI192_1)
	pcalau12i	$a0, %pc_hi20(.LCPI192_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI192_2)
	pcalau12i	$a0, %pc_hi20(.LCPI192_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI192_3)
	pcalau12i	$a0, %pc_hi20(.LCPI192_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI192_4)
	ori	$s8, $zero, 24
	vldi	$vr3, -854
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s5, $zero
	b	.LBB192_3
	.p2align	4, , 16
.LBB192_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB192_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB192_12
.LBB192_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_5 Depth 2
                                        #     Child Loop BB192_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	blt	$s0, $s8, .LBB192_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB192_3 Depth=1
	move	$s3, $zero
	ori	$s4, $zero, 184
	.p2align	4, , 16
.LBB192_5:                              # %.lr.ph
                                        #   Parent Loop BB192_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fldx.d	$fa0, $s1, $s4
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fld.d	$fa1, $sp, 32
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fst.d	$fa0, $sp, 32
	addi.w	$s3, $s3, 24
	addi.d	$s4, $s4, 192
	blt	$s3, $s7, .LBB192_5
.LBB192_6:                              # %.preheader
                                        #   in Loop: Header=BB192_3 Depth=1
	bge	$s3, $s0, .LBB192_10
# %bb.7:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB192_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB192_8:                              # %.lr.ph15
                                        #   Parent Loop BB192_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB192_8
# %bb.9:                                # %._crit_edge
                                        #   in Loop: Header=BB192_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB192_10:                             #   in Loop: Header=BB192_3 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB192_2
# %bb.11:                               #   in Loop: Header=BB192_3 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB192_2
.LBB192_12:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 24                    # 8-byte Folded Reload
	beqz	$a2, .LBB192_14
# %bb.13:                               # %._crit_edge19
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB192_16
.LBB192_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB192_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB192_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI192_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI192_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB192_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end192:
	.size	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end192-_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI193_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI193_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI193_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI193_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI193_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI193_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB193_13
# %bb.1:                                # %.lr.ph18
	addi.w	$s7, $s0, -22
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI193_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI193_0)
	pcalau12i	$a0, %pc_hi20(.LCPI193_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI193_1)
	pcalau12i	$a0, %pc_hi20(.LCPI193_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI193_2)
	pcalau12i	$a0, %pc_hi20(.LCPI193_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI193_3)
	pcalau12i	$a0, %pc_hi20(.LCPI193_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI193_4)
	ori	$s8, $zero, 23
	vldi	$vr3, -854
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s5, $zero
	b	.LBB193_3
	.p2align	4, , 16
.LBB193_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB193_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB193_13
.LBB193_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_5 Depth 2
                                        #     Child Loop BB193_9 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	blt	$s0, $s8, .LBB193_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB193_3 Depth=1
	move	$s3, $zero
	.p2align	4, , 16
.LBB193_5:                              # %.lr.ph
                                        #   Parent Loop BB193_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	addi.w	$s3, $s3, 23
	blt	$s3, $s7, .LBB193_5
# %bb.6:                                # %.preheader.loopexit
                                        #   in Loop: Header=BB193_3 Depth=1
	fld.d	$fa0, $sp, 32
	vldi	$vr3, -854
.LBB193_7:                              # %.preheader
                                        #   in Loop: Header=BB193_3 Depth=1
	bge	$s3, $s0, .LBB193_11
# %bb.8:                                # %.lr.ph15.preheader
                                        #   in Loop: Header=BB193_3 Depth=1
	bstrpick.d	$a0, $s3, 31, 0
	alsl.d	$a0, $a0, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB193_9:                              # %.lr.ph15
                                        #   Parent Loop BB193_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.w	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB193_9
# %bb.10:                               # %._crit_edge
                                        #   in Loop: Header=BB193_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB193_11:                             #   in Loop: Header=BB193_3 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB193_2
# %bb.12:                               #   in Loop: Header=BB193_3 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB193_2
.LBB193_13:                             # %._crit_edge19
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB193_15
# %bb.14:                               # %._crit_edge19
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB193_17
.LBB193_15:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB193_18
# %bb.16:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB193_17:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI193_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI193_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB193_18:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end193:
	.size	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end193-_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI194_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI194_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI194_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI194_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI194_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI194_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB194_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -21
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 88
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI194_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI194_0)
	pcalau12i	$a0, %pc_hi20(.LCPI194_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI194_1)
	pcalau12i	$a0, %pc_hi20(.LCPI194_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI194_2)
	pcalau12i	$a0, %pc_hi20(.LCPI194_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI194_3)
	pcalau12i	$a0, %pc_hi20(.LCPI194_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI194_4)
	ori	$fp, $zero, 22
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB194_3
	.p2align	4, , 16
.LBB194_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB194_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB194_12
.LBB194_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_5 Depth 2
                                        #     Child Loop BB194_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB194_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB194_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB194_5:                              # %.lr.ph
                                        #   Parent Loop BB194_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 22
	addi.d	$a0, $a0, 22
	addi.d	$a2, $a2, 176
	blt	$a1, $s6, .LBB194_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB194_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB194_8
	b	.LBB194_10
	.p2align	4, , 16
.LBB194_7:                              #   in Loop: Header=BB194_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB194_10
.LBB194_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB194_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB194_9:                              # %.lr.ph24
                                        #   Parent Loop BB194_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB194_9
.LBB194_10:                             # %._crit_edge
                                        #   in Loop: Header=BB194_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB194_2
# %bb.11:                               #   in Loop: Header=BB194_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB194_2
.LBB194_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB194_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB194_16
.LBB194_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB194_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB194_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI194_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI194_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB194_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end194:
	.size	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end194-_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI195_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI195_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI195_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI195_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI195_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI195_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB195_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -20
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI195_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI195_0)
	pcalau12i	$a0, %pc_hi20(.LCPI195_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI195_1)
	pcalau12i	$a0, %pc_hi20(.LCPI195_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI195_2)
	pcalau12i	$a0, %pc_hi20(.LCPI195_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI195_3)
	pcalau12i	$a0, %pc_hi20(.LCPI195_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI195_4)
	ori	$fp, $zero, 21
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB195_3
	.p2align	4, , 16
.LBB195_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB195_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB195_12
.LBB195_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_5 Depth 2
                                        #     Child Loop BB195_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB195_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB195_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB195_5:                              # %.lr.ph
                                        #   Parent Loop BB195_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 21
	addi.d	$a0, $a0, 21
	addi.d	$a2, $a2, 168
	blt	$a1, $s6, .LBB195_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB195_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB195_8
	b	.LBB195_10
	.p2align	4, , 16
.LBB195_7:                              #   in Loop: Header=BB195_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB195_10
.LBB195_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB195_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB195_9:                              # %.lr.ph24
                                        #   Parent Loop BB195_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB195_9
.LBB195_10:                             # %._crit_edge
                                        #   in Loop: Header=BB195_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB195_2
# %bb.11:                               #   in Loop: Header=BB195_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB195_2
.LBB195_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB195_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB195_16
.LBB195_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB195_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB195_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI195_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI195_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB195_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end195:
	.size	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end195-_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI196_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI196_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI196_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI196_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI196_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI196_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB196_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -19
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI196_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI196_0)
	pcalau12i	$a0, %pc_hi20(.LCPI196_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI196_1)
	pcalau12i	$a0, %pc_hi20(.LCPI196_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI196_2)
	pcalau12i	$a0, %pc_hi20(.LCPI196_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI196_3)
	pcalau12i	$a0, %pc_hi20(.LCPI196_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI196_4)
	ori	$fp, $zero, 20
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB196_3
	.p2align	4, , 16
.LBB196_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB196_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB196_12
.LBB196_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_5 Depth 2
                                        #     Child Loop BB196_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB196_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB196_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB196_5:                              # %.lr.ph
                                        #   Parent Loop BB196_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 20
	addi.d	$a0, $a0, 20
	addi.d	$a2, $a2, 160
	blt	$a1, $s6, .LBB196_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB196_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB196_8
	b	.LBB196_10
	.p2align	4, , 16
.LBB196_7:                              #   in Loop: Header=BB196_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB196_10
.LBB196_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB196_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB196_9:                              # %.lr.ph24
                                        #   Parent Loop BB196_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB196_9
.LBB196_10:                             # %._crit_edge
                                        #   in Loop: Header=BB196_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB196_2
# %bb.11:                               #   in Loop: Header=BB196_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB196_2
.LBB196_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB196_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB196_16
.LBB196_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB196_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB196_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI196_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI196_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB196_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end196:
	.size	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end196-_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI197_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI197_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI197_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI197_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI197_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI197_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB197_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -18
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI197_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI197_0)
	pcalau12i	$a0, %pc_hi20(.LCPI197_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI197_1)
	pcalau12i	$a0, %pc_hi20(.LCPI197_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI197_2)
	pcalau12i	$a0, %pc_hi20(.LCPI197_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI197_3)
	pcalau12i	$a0, %pc_hi20(.LCPI197_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI197_4)
	ori	$fp, $zero, 19
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB197_3
	.p2align	4, , 16
.LBB197_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB197_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB197_12
.LBB197_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_5 Depth 2
                                        #     Child Loop BB197_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB197_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB197_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB197_5:                              # %.lr.ph
                                        #   Parent Loop BB197_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 19
	addi.d	$a0, $a0, 19
	addi.d	$a2, $a2, 152
	blt	$a1, $s6, .LBB197_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB197_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB197_8
	b	.LBB197_10
	.p2align	4, , 16
.LBB197_7:                              #   in Loop: Header=BB197_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB197_10
.LBB197_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB197_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB197_9:                              # %.lr.ph24
                                        #   Parent Loop BB197_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB197_9
.LBB197_10:                             # %._crit_edge
                                        #   in Loop: Header=BB197_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB197_2
# %bb.11:                               #   in Loop: Header=BB197_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB197_2
.LBB197_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB197_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB197_16
.LBB197_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB197_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB197_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI197_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI197_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB197_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end197:
	.size	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end197-_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi17EdE7do_testEPKdPKc,"axG",@progbits,_ZN16while_loop_testsILi17EdE7do_testEPKdPKc,comdat
	.weak	_ZN16while_loop_testsILi17EdE7do_testEPKdPKc # -- Begin function _ZN16while_loop_testsILi17EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi17EdE7do_testEPKdPKc,@function
_ZN16while_loop_testsILi17EdE7do_testEPKdPKc: # @_ZN16while_loop_testsILi17EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN16while_loop_testsILi9EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end198:
	.size	_ZN16while_loop_testsILi17EdE7do_testEPKdPKc, .Lfunc_end198-_ZN16while_loop_testsILi17EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI199_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI199_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI199_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI199_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI199_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI199_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB199_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -17
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI199_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI199_0)
	pcalau12i	$a0, %pc_hi20(.LCPI199_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI199_1)
	pcalau12i	$a0, %pc_hi20(.LCPI199_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI199_2)
	pcalau12i	$a0, %pc_hi20(.LCPI199_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI199_3)
	pcalau12i	$a0, %pc_hi20(.LCPI199_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI199_4)
	ori	$fp, $zero, 18
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB199_3
	.p2align	4, , 16
.LBB199_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB199_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB199_12
.LBB199_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_5 Depth 2
                                        #     Child Loop BB199_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB199_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB199_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB199_5:                              # %.lr.ph
                                        #   Parent Loop BB199_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 18
	addi.d	$a0, $a0, 18
	addi.d	$a2, $a2, 144
	blt	$a1, $s6, .LBB199_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB199_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB199_8
	b	.LBB199_10
	.p2align	4, , 16
.LBB199_7:                              #   in Loop: Header=BB199_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB199_10
.LBB199_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB199_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB199_9:                              # %.lr.ph24
                                        #   Parent Loop BB199_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB199_9
.LBB199_10:                             # %._crit_edge
                                        #   in Loop: Header=BB199_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB199_2
# %bb.11:                               #   in Loop: Header=BB199_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB199_2
.LBB199_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB199_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB199_16
.LBB199_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB199_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB199_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI199_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI199_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB199_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end199:
	.size	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end199-_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI200_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI200_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI200_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI200_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI200_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI200_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB200_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -16
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI200_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI200_0)
	pcalau12i	$a0, %pc_hi20(.LCPI200_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI200_1)
	pcalau12i	$a0, %pc_hi20(.LCPI200_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI200_2)
	pcalau12i	$a0, %pc_hi20(.LCPI200_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI200_3)
	pcalau12i	$a0, %pc_hi20(.LCPI200_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI200_4)
	ori	$fp, $zero, 17
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB200_3
	.p2align	4, , 16
.LBB200_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB200_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB200_12
.LBB200_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_5 Depth 2
                                        #     Child Loop BB200_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB200_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB200_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB200_5:                              # %.lr.ph
                                        #   Parent Loop BB200_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 17
	addi.d	$a0, $a0, 17
	addi.d	$a2, $a2, 136
	blt	$a1, $s6, .LBB200_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB200_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB200_8
	b	.LBB200_10
	.p2align	4, , 16
.LBB200_7:                              #   in Loop: Header=BB200_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB200_10
.LBB200_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB200_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB200_9:                              # %.lr.ph24
                                        #   Parent Loop BB200_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB200_9
.LBB200_10:                             # %._crit_edge
                                        #   in Loop: Header=BB200_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB200_2
# %bb.11:                               #   in Loop: Header=BB200_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB200_2
.LBB200_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB200_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB200_16
.LBB200_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB200_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB200_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI200_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI200_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB200_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end200:
	.size	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end200-_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI201_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI201_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI201_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI201_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI201_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI201_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB201_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -15
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI201_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI201_0)
	pcalau12i	$a0, %pc_hi20(.LCPI201_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI201_1)
	pcalau12i	$a0, %pc_hi20(.LCPI201_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI201_2)
	pcalau12i	$a0, %pc_hi20(.LCPI201_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI201_3)
	pcalau12i	$a0, %pc_hi20(.LCPI201_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI201_4)
	ori	$fp, $zero, 16
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB201_3
	.p2align	4, , 16
.LBB201_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB201_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB201_12
.LBB201_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB201_5 Depth 2
                                        #     Child Loop BB201_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB201_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB201_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB201_5:                              # %.lr.ph
                                        #   Parent Loop BB201_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 16
	addi.d	$a0, $a0, 16
	addi.d	$a2, $a2, 128
	blt	$a1, $s6, .LBB201_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB201_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB201_8
	b	.LBB201_10
	.p2align	4, , 16
.LBB201_7:                              #   in Loop: Header=BB201_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB201_10
.LBB201_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB201_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB201_9:                              # %.lr.ph24
                                        #   Parent Loop BB201_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB201_9
.LBB201_10:                             # %._crit_edge
                                        #   in Loop: Header=BB201_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB201_2
# %bb.11:                               #   in Loop: Header=BB201_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB201_2
.LBB201_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB201_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB201_16
.LBB201_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB201_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB201_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI201_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI201_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB201_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end201:
	.size	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end201-_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI202_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI202_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI202_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI202_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI202_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI202_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB202_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -14
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI202_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI202_0)
	pcalau12i	$a0, %pc_hi20(.LCPI202_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI202_1)
	pcalau12i	$a0, %pc_hi20(.LCPI202_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI202_2)
	pcalau12i	$a0, %pc_hi20(.LCPI202_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI202_3)
	pcalau12i	$a0, %pc_hi20(.LCPI202_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI202_4)
	ori	$fp, $zero, 15
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB202_3
	.p2align	4, , 16
.LBB202_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB202_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB202_12
.LBB202_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_5 Depth 2
                                        #     Child Loop BB202_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB202_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB202_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB202_5:                              # %.lr.ph
                                        #   Parent Loop BB202_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 15
	addi.d	$a0, $a0, 15
	addi.d	$a2, $a2, 120
	blt	$a1, $s6, .LBB202_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB202_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB202_8
	b	.LBB202_10
	.p2align	4, , 16
.LBB202_7:                              #   in Loop: Header=BB202_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB202_10
.LBB202_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB202_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB202_9:                              # %.lr.ph24
                                        #   Parent Loop BB202_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB202_9
.LBB202_10:                             # %._crit_edge
                                        #   in Loop: Header=BB202_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB202_2
# %bb.11:                               #   in Loop: Header=BB202_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB202_2
.LBB202_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB202_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB202_16
.LBB202_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB202_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB202_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI202_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI202_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB202_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end202:
	.size	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end202-_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI203_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI203_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI203_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI203_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI203_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI203_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB203_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -13
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI203_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI203_0)
	pcalau12i	$a0, %pc_hi20(.LCPI203_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI203_1)
	pcalau12i	$a0, %pc_hi20(.LCPI203_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI203_2)
	pcalau12i	$a0, %pc_hi20(.LCPI203_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI203_3)
	pcalau12i	$a0, %pc_hi20(.LCPI203_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI203_4)
	ori	$fp, $zero, 14
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB203_3
	.p2align	4, , 16
.LBB203_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB203_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB203_12
.LBB203_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB203_5 Depth 2
                                        #     Child Loop BB203_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB203_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB203_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB203_5:                              # %.lr.ph
                                        #   Parent Loop BB203_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 14
	addi.d	$a0, $a0, 14
	addi.d	$a2, $a2, 112
	blt	$a1, $s6, .LBB203_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB203_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB203_8
	b	.LBB203_10
	.p2align	4, , 16
.LBB203_7:                              #   in Loop: Header=BB203_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB203_10
.LBB203_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB203_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB203_9:                              # %.lr.ph24
                                        #   Parent Loop BB203_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB203_9
.LBB203_10:                             # %._crit_edge
                                        #   in Loop: Header=BB203_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB203_2
# %bb.11:                               #   in Loop: Header=BB203_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB203_2
.LBB203_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB203_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB203_16
.LBB203_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB203_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB203_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI203_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI203_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB203_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end203:
	.size	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end203-_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI204_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI204_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI204_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI204_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI204_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI204_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB204_12
# %bb.1:                                # %.preheader18.lr.ph
	addi.w	$s6, $s0, -12
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI204_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI204_0)
	pcalau12i	$a0, %pc_hi20(.LCPI204_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI204_1)
	pcalau12i	$a0, %pc_hi20(.LCPI204_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI204_2)
	pcalau12i	$a0, %pc_hi20(.LCPI204_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI204_3)
	pcalau12i	$a0, %pc_hi20(.LCPI204_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI204_4)
	ori	$fp, $zero, 13
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB204_3
	.p2align	4, , 16
.LBB204_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB204_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB204_12
.LBB204_3:                              # %.preheader18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_5 Depth 2
                                        #     Child Loop BB204_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB204_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB204_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB204_5:                              # %.lr.ph
                                        #   Parent Loop BB204_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 13
	addi.d	$a0, $a0, 13
	addi.d	$a2, $a2, 104
	blt	$a1, $s6, .LBB204_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB204_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB204_8
	b	.LBB204_10
	.p2align	4, , 16
.LBB204_7:                              #   in Loop: Header=BB204_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB204_10
.LBB204_8:                              # %.lr.ph24.preheader
                                        #   in Loop: Header=BB204_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB204_9:                              # %.lr.ph24
                                        #   Parent Loop BB204_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB204_9
.LBB204_10:                             # %._crit_edge
                                        #   in Loop: Header=BB204_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB204_2
# %bb.11:                               #   in Loop: Header=BB204_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB204_2
.LBB204_12:                             # %._crit_edge27
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB204_14
# %bb.13:                               # %._crit_edge27
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB204_16
.LBB204_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB204_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB204_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI204_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI204_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB204_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end204:
	.size	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end204-_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI205_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI205_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI205_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI205_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI205_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI205_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB205_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -11
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI205_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI205_0)
	pcalau12i	$a0, %pc_hi20(.LCPI205_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI205_1)
	pcalau12i	$a0, %pc_hi20(.LCPI205_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI205_2)
	pcalau12i	$a0, %pc_hi20(.LCPI205_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI205_3)
	pcalau12i	$a0, %pc_hi20(.LCPI205_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI205_4)
	ori	$fp, $zero, 12
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB205_3
	.p2align	4, , 16
.LBB205_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB205_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB205_12
.LBB205_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_5 Depth 2
                                        #     Child Loop BB205_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB205_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB205_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB205_5:                              # %.lr.ph
                                        #   Parent Loop BB205_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 12
	addi.d	$a0, $a0, 12
	addi.d	$a2, $a2, 96
	blt	$a1, $s6, .LBB205_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB205_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB205_8
	b	.LBB205_10
	.p2align	4, , 16
.LBB205_7:                              #   in Loop: Header=BB205_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB205_10
.LBB205_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB205_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB205_9:                              # %.lr.ph23
                                        #   Parent Loop BB205_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB205_9
.LBB205_10:                             # %._crit_edge
                                        #   in Loop: Header=BB205_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB205_2
# %bb.11:                               #   in Loop: Header=BB205_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB205_2
.LBB205_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB205_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB205_16
.LBB205_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB205_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB205_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI205_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI205_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB205_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end205:
	.size	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end205-_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI206_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI206_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI206_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI206_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI206_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI206_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB206_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -10
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI206_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI206_0)
	pcalau12i	$a0, %pc_hi20(.LCPI206_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI206_1)
	pcalau12i	$a0, %pc_hi20(.LCPI206_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI206_2)
	pcalau12i	$a0, %pc_hi20(.LCPI206_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI206_3)
	pcalau12i	$a0, %pc_hi20(.LCPI206_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI206_4)
	ori	$fp, $zero, 11
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB206_3
	.p2align	4, , 16
.LBB206_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB206_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB206_12
.LBB206_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB206_5 Depth 2
                                        #     Child Loop BB206_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB206_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB206_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB206_5:                              # %.lr.ph
                                        #   Parent Loop BB206_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 11
	addi.d	$a0, $a0, 11
	addi.d	$a2, $a2, 88
	blt	$a1, $s6, .LBB206_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB206_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB206_8
	b	.LBB206_10
	.p2align	4, , 16
.LBB206_7:                              #   in Loop: Header=BB206_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB206_10
.LBB206_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB206_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB206_9:                              # %.lr.ph23
                                        #   Parent Loop BB206_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB206_9
.LBB206_10:                             # %._crit_edge
                                        #   in Loop: Header=BB206_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB206_2
# %bb.11:                               #   in Loop: Header=BB206_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB206_2
.LBB206_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB206_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB206_16
.LBB206_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB206_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB206_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI206_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI206_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB206_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end206:
	.size	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end206-_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN16while_loop_testsILi9EdE7do_testEPKdPKc,"axG",@progbits,_ZN16while_loop_testsILi9EdE7do_testEPKdPKc,comdat
	.weak	_ZN16while_loop_testsILi9EdE7do_testEPKdPKc # -- Begin function _ZN16while_loop_testsILi9EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN16while_loop_testsILi9EdE7do_testEPKdPKc,@function
_ZN16while_loop_testsILi9EdE7do_testEPKdPKc: # @_ZN16while_loop_testsILi9EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end207:
	.size	_ZN16while_loop_testsILi9EdE7do_testEPKdPKc, .Lfunc_end207-_ZN16while_loop_testsILi9EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI208_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI208_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI208_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI208_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI208_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI208_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB208_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -9
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI208_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI208_0)
	pcalau12i	$a0, %pc_hi20(.LCPI208_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI208_1)
	pcalau12i	$a0, %pc_hi20(.LCPI208_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI208_2)
	pcalau12i	$a0, %pc_hi20(.LCPI208_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI208_3)
	pcalau12i	$a0, %pc_hi20(.LCPI208_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI208_4)
	ori	$fp, $zero, 10
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB208_3
	.p2align	4, , 16
.LBB208_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB208_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB208_12
.LBB208_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_5 Depth 2
                                        #     Child Loop BB208_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB208_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB208_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB208_5:                              # %.lr.ph
                                        #   Parent Loop BB208_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 10
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, 80
	blt	$a2, $s6, .LBB208_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB208_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB208_8
	b	.LBB208_10
	.p2align	4, , 16
.LBB208_7:                              #   in Loop: Header=BB208_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB208_10
.LBB208_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB208_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB208_9:                              # %.lr.ph23
                                        #   Parent Loop BB208_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB208_9
.LBB208_10:                             # %._crit_edge
                                        #   in Loop: Header=BB208_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB208_2
# %bb.11:                               #   in Loop: Header=BB208_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB208_2
.LBB208_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB208_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB208_16
.LBB208_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB208_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB208_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI208_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI208_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB208_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end208:
	.size	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end208-_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI209_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI209_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI209_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI209_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI209_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI209_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB209_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -8
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI209_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI209_0)
	pcalau12i	$a0, %pc_hi20(.LCPI209_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI209_1)
	pcalau12i	$a0, %pc_hi20(.LCPI209_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI209_2)
	pcalau12i	$a0, %pc_hi20(.LCPI209_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI209_3)
	pcalau12i	$a0, %pc_hi20(.LCPI209_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI209_4)
	ori	$fp, $zero, 9
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB209_3
	.p2align	4, , 16
.LBB209_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB209_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB209_12
.LBB209_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_5 Depth 2
                                        #     Child Loop BB209_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB209_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB209_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB209_5:                              # %.lr.ph
                                        #   Parent Loop BB209_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 9
	addi.d	$a0, $a0, 9
	addi.d	$a3, $a3, 72
	blt	$a2, $s6, .LBB209_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB209_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB209_8
	b	.LBB209_10
	.p2align	4, , 16
.LBB209_7:                              #   in Loop: Header=BB209_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB209_10
.LBB209_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB209_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB209_9:                              # %.lr.ph23
                                        #   Parent Loop BB209_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB209_9
.LBB209_10:                             # %._crit_edge
                                        #   in Loop: Header=BB209_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB209_2
# %bb.11:                               #   in Loop: Header=BB209_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB209_2
.LBB209_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB209_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB209_16
.LBB209_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB209_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB209_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI209_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI209_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB209_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end209:
	.size	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end209-_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI210_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI210_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI210_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI210_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI210_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI210_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB210_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -7
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI210_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI210_0)
	pcalau12i	$a0, %pc_hi20(.LCPI210_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI210_1)
	pcalau12i	$a0, %pc_hi20(.LCPI210_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI210_2)
	pcalau12i	$a0, %pc_hi20(.LCPI210_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI210_3)
	pcalau12i	$a0, %pc_hi20(.LCPI210_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI210_4)
	ori	$fp, $zero, 8
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB210_3
	.p2align	4, , 16
.LBB210_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB210_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB210_12
.LBB210_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_5 Depth 2
                                        #     Child Loop BB210_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB210_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB210_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB210_5:                              # %.lr.ph
                                        #   Parent Loop BB210_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 8
	addi.d	$a0, $a0, 8
	addi.d	$a3, $a3, 64
	blt	$a2, $s6, .LBB210_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB210_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB210_8
	b	.LBB210_10
	.p2align	4, , 16
.LBB210_7:                              #   in Loop: Header=BB210_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB210_10
.LBB210_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB210_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB210_9:                              # %.lr.ph23
                                        #   Parent Loop BB210_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB210_9
.LBB210_10:                             # %._crit_edge
                                        #   in Loop: Header=BB210_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB210_2
# %bb.11:                               #   in Loop: Header=BB210_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB210_2
.LBB210_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB210_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB210_16
.LBB210_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB210_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB210_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI210_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI210_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB210_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end210:
	.size	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end210-_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI211_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI211_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI211_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI211_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI211_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI211_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB211_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -6
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI211_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI211_0)
	pcalau12i	$a0, %pc_hi20(.LCPI211_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI211_1)
	pcalau12i	$a0, %pc_hi20(.LCPI211_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI211_2)
	pcalau12i	$a0, %pc_hi20(.LCPI211_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI211_3)
	pcalau12i	$a0, %pc_hi20(.LCPI211_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI211_4)
	ori	$fp, $zero, 7
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB211_3
	.p2align	4, , 16
.LBB211_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB211_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB211_12
.LBB211_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_5 Depth 2
                                        #     Child Loop BB211_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB211_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB211_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB211_5:                              # %.lr.ph
                                        #   Parent Loop BB211_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 7
	addi.d	$a0, $a0, 7
	addi.d	$a3, $a3, 56
	blt	$a2, $s6, .LBB211_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB211_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB211_8
	b	.LBB211_10
	.p2align	4, , 16
.LBB211_7:                              #   in Loop: Header=BB211_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB211_10
.LBB211_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB211_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB211_9:                              # %.lr.ph23
                                        #   Parent Loop BB211_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB211_9
.LBB211_10:                             # %._crit_edge
                                        #   in Loop: Header=BB211_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB211_2
# %bb.11:                               #   in Loop: Header=BB211_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB211_2
.LBB211_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB211_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB211_16
.LBB211_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB211_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB211_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI211_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI211_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB211_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end211:
	.size	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end211-_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI212_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI212_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI212_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI212_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI212_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI212_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB212_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -5
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI212_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI212_0)
	pcalau12i	$a0, %pc_hi20(.LCPI212_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI212_1)
	pcalau12i	$a0, %pc_hi20(.LCPI212_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI212_2)
	pcalau12i	$a0, %pc_hi20(.LCPI212_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI212_3)
	pcalau12i	$a0, %pc_hi20(.LCPI212_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI212_4)
	ori	$fp, $zero, 6
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB212_3
	.p2align	4, , 16
.LBB212_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB212_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB212_12
.LBB212_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_5 Depth 2
                                        #     Child Loop BB212_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB212_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB212_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB212_5:                              # %.lr.ph
                                        #   Parent Loop BB212_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 6
	addi.d	$a3, $a3, 48
	addi.d	$a0, $a0, 6
	blt	$a2, $s6, .LBB212_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB212_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB212_8
	b	.LBB212_10
	.p2align	4, , 16
.LBB212_7:                              #   in Loop: Header=BB212_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB212_10
.LBB212_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB212_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB212_9:                              # %.lr.ph23
                                        #   Parent Loop BB212_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB212_9
.LBB212_10:                             # %._crit_edge
                                        #   in Loop: Header=BB212_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB212_2
# %bb.11:                               #   in Loop: Header=BB212_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB212_2
.LBB212_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB212_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB212_16
.LBB212_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB212_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB212_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI212_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI212_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB212_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end212:
	.size	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end212-_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI213_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI213_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI213_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI213_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI213_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI213_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB213_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -4
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI213_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI213_0)
	pcalau12i	$a0, %pc_hi20(.LCPI213_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI213_1)
	pcalau12i	$a0, %pc_hi20(.LCPI213_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI213_2)
	pcalau12i	$a0, %pc_hi20(.LCPI213_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI213_3)
	pcalau12i	$a0, %pc_hi20(.LCPI213_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI213_4)
	ori	$fp, $zero, 5
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB213_3
	.p2align	4, , 16
.LBB213_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB213_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB213_12
.LBB213_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_5 Depth 2
                                        #     Child Loop BB213_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB213_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB213_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB213_5:                              # %.lr.ph
                                        #   Parent Loop BB213_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 40
	addi.d	$a0, $a0, 5
	blt	$a2, $s6, .LBB213_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB213_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB213_8
	b	.LBB213_10
	.p2align	4, , 16
.LBB213_7:                              #   in Loop: Header=BB213_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB213_10
.LBB213_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB213_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB213_9:                              # %.lr.ph23
                                        #   Parent Loop BB213_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB213_9
.LBB213_10:                             # %._crit_edge
                                        #   in Loop: Header=BB213_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB213_2
# %bb.11:                               #   in Loop: Header=BB213_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB213_2
.LBB213_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB213_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB213_16
.LBB213_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB213_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB213_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI213_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI213_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB213_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end213:
	.size	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end213-_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI214_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI214_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI214_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI214_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI214_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI214_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB214_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -3
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI214_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI214_0)
	pcalau12i	$a0, %pc_hi20(.LCPI214_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI214_1)
	pcalau12i	$a0, %pc_hi20(.LCPI214_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI214_2)
	pcalau12i	$a0, %pc_hi20(.LCPI214_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI214_3)
	pcalau12i	$a0, %pc_hi20(.LCPI214_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI214_4)
	ori	$fp, $zero, 4
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB214_3
	.p2align	4, , 16
.LBB214_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB214_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB214_12
.LBB214_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_5 Depth 2
                                        #     Child Loop BB214_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB214_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB214_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB214_5:                              # %.lr.ph
                                        #   Parent Loop BB214_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 32
	addi.d	$a0, $a0, 4
	blt	$a2, $s6, .LBB214_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB214_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB214_8
	b	.LBB214_10
	.p2align	4, , 16
.LBB214_7:                              #   in Loop: Header=BB214_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB214_10
.LBB214_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB214_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB214_9:                              # %.lr.ph23
                                        #   Parent Loop BB214_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB214_9
.LBB214_10:                             # %._crit_edge
                                        #   in Loop: Header=BB214_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB214_2
# %bb.11:                               #   in Loop: Header=BB214_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB214_2
.LBB214_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB214_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB214_16
.LBB214_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB214_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB214_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI214_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI214_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB214_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end214:
	.size	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end214-_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI215_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI215_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI215_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI215_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI215_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI215_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB215_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -2
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI215_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI215_0)
	pcalau12i	$a0, %pc_hi20(.LCPI215_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI215_1)
	pcalau12i	$a0, %pc_hi20(.LCPI215_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI215_2)
	pcalau12i	$a0, %pc_hi20(.LCPI215_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI215_3)
	pcalau12i	$a0, %pc_hi20(.LCPI215_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI215_4)
	ori	$fp, $zero, 3
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB215_3
	.p2align	4, , 16
.LBB215_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB215_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB215_12
.LBB215_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_5 Depth 2
                                        #     Child Loop BB215_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB215_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB215_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB215_5:                              # %.lr.ph
                                        #   Parent Loop BB215_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 24
	addi.d	$a0, $a0, 3
	blt	$a2, $s6, .LBB215_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB215_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB215_8
	b	.LBB215_10
	.p2align	4, , 16
.LBB215_7:                              #   in Loop: Header=BB215_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB215_10
.LBB215_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB215_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB215_9:                              # %.lr.ph23
                                        #   Parent Loop BB215_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB215_9
.LBB215_10:                             # %._crit_edge
                                        #   in Loop: Header=BB215_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB215_2
# %bb.11:                               #   in Loop: Header=BB215_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB215_2
.LBB215_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB215_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB215_16
.LBB215_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB215_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB215_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI215_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI215_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB215_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end215:
	.size	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end215-_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI216_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI216_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI216_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI216_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI216_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI216_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	blez	$a1, .LBB216_12
# %bb.1:                                # %.preheader17.lr.ph
	addi.w	$s6, $s0, -1
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 8
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI216_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI216_0)
	pcalau12i	$a0, %pc_hi20(.LCPI216_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI216_1)
	pcalau12i	$a0, %pc_hi20(.LCPI216_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI216_2)
	pcalau12i	$a0, %pc_hi20(.LCPI216_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI216_3)
	pcalau12i	$a0, %pc_hi20(.LCPI216_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI216_4)
	ori	$fp, $zero, 2
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB216_3
	.p2align	4, , 16
.LBB216_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB216_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB216_12
.LBB216_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_5 Depth 2
                                        #     Child Loop BB216_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB216_7
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB216_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB216_5:                              # %.lr.ph
                                        #   Parent Loop BB216_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 16
	addi.d	$a0, $a0, 2
	blt	$a2, $s6, .LBB216_5
# %bb.6:                                # %.preheader
                                        #   in Loop: Header=BB216_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB216_8
	b	.LBB216_10
	.p2align	4, , 16
.LBB216_7:                              #   in Loop: Header=BB216_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB216_10
.LBB216_8:                              # %.lr.ph23.preheader
                                        #   in Loop: Header=BB216_3 Depth=1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a2, $a0, $a2, 3
	sub.d	$a0, $s7, $a0
	.p2align	4, , 16
.LBB216_9:                              # %.lr.ph23
                                        #   Parent Loop BB216_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB216_9
.LBB216_10:                             # %._crit_edge
                                        #   in Loop: Header=BB216_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB216_2
# %bb.11:                               #   in Loop: Header=BB216_3 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB216_2
.LBB216_12:                             # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB216_14
# %bb.13:                               # %._crit_edge26
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB216_16
.LBB216_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB216_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB216_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI216_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI216_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB216_17:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end216:
	.size	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end216-_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI217_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI217_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI217_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI217_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI217_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI217_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	5
	.type	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc: # @_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB217_8
# %bb.1:                                # %.preheader17.lr.ph
	bstrpick.d	$s6, $s0, 31, 0
	pcalau12i	$a0, %pc_hi20(.LCPI217_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI217_0)
	pcalau12i	$a0, %pc_hi20(.LCPI217_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI217_1)
	pcalau12i	$a0, %pc_hi20(.LCPI217_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI217_2)
	pcalau12i	$a0, %pc_hi20(.LCPI217_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI217_3)
	pcalau12i	$a0, %pc_hi20(.LCPI217_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI217_4)
	movgr2fr.d	$fs5, $zero
	vldi	$vr3, -854
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s8, $zero
	b	.LBB217_3
	.p2align	4, , 16
.LBB217_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB217_3 Depth=1
	addi.w	$s8, $s8, 1
	bge	$s8, $a1, .LBB217_8
.LBB217_3:                              # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_5 Depth 2
	fmov.d	$fa0, $fs5
	blez	$s0, .LBB217_6
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB217_3 Depth=1
	move	$a0, $s6
	move	$a2, $s1
	fmov.d	$fa0, $fs5
	.p2align	4, , 16
.LBB217_5:                              # %.lr.ph
                                        #   Parent Loop BB217_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB217_5
.LBB217_6:                              # %._crit_edge
                                        #   in Loop: Header=BB217_3 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB217_2
# %bb.7:                                #   in Loop: Header=BB217_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB217_2
.LBB217_8:                              # %._crit_edge26
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB217_10
# %bb.9:                                # %._crit_edge26
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB217_12
.LBB217_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB217_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB217_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI217_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI217_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB217_13:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end217:
	.size	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end217-_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI218_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI218_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI218_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI218_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI218_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI218_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$fp, %pc_hi20(current_test)
	blez	$a1, .LBB218_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -31
	addi.d	$a0, $s1, 248
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI218_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI218_0)
	pcalau12i	$a0, %pc_hi20(.LCPI218_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI218_1)
	pcalau12i	$a0, %pc_hi20(.LCPI218_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI218_2)
	pcalau12i	$a0, %pc_hi20(.LCPI218_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI218_3)
	pcalau12i	$a0, %pc_hi20(.LCPI218_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI218_4)
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB218_3
	.p2align	4, , 16
.LBB218_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB218_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB218_12
.LBB218_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_5 Depth 2
                                        #     Child Loop BB218_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB218_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB218_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB218_5:                              # %.preheader18
                                        #   Parent Loop BB218_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -64
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 32
	fld.d	$fa2, $s8, -56
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 32
	addi.w	$s3, $s3, 32
	addi.d	$s8, $s8, 256
	blt	$s3, $s7, .LBB218_5
.LBB218_6:                              # %.loopexit19
                                        #   in Loop: Header=BB218_3 Depth=1
	bge	$s3, $s0, .LBB218_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB218_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB218_8:                              #   Parent Loop BB218_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB218_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB218_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB218_10:                             #   in Loop: Header=BB218_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB218_2
# %bb.11:                               #   in Loop: Header=BB218_3 Depth=1
	ld.w	$a1, $fp, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB218_2
.LBB218_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s3, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB218_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $fp, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB218_16
.LBB218_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB218_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $fp, %pc_lo12(current_test)
.LBB218_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI218_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI218_5)
	sub.d	$a1, $s0, $s3
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB218_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end218:
	.size	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end218-_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI219_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI219_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI219_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI219_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI219_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI219_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB219_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -30
	addi.d	$a0, $s1, 240
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI219_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI219_0)
	pcalau12i	$a0, %pc_hi20(.LCPI219_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI219_1)
	pcalau12i	$a0, %pc_hi20(.LCPI219_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI219_2)
	pcalau12i	$a0, %pc_hi20(.LCPI219_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI219_3)
	pcalau12i	$a0, %pc_hi20(.LCPI219_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI219_4)
	ori	$fp, $zero, 31
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB219_3
	.p2align	4, , 16
.LBB219_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB219_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB219_12
.LBB219_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_5 Depth 2
                                        #     Child Loop BB219_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB219_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB219_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB219_5:                              # %.preheader18
                                        #   Parent Loop BB219_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -56
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -48
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 31
	addi.d	$s8, $s8, 248
	blt	$s3, $s7, .LBB219_5
.LBB219_6:                              # %.loopexit19
                                        #   in Loop: Header=BB219_3 Depth=1
	bge	$s3, $s0, .LBB219_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB219_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB219_8:                              #   Parent Loop BB219_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB219_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB219_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB219_10:                             #   in Loop: Header=BB219_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB219_2
# %bb.11:                               #   in Loop: Header=BB219_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB219_2
.LBB219_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB219_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB219_16
.LBB219_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB219_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB219_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI219_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI219_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB219_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end219:
	.size	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end219-_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI220_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI220_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI220_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI220_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI220_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI220_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB220_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -29
	addi.d	$a0, $s1, 232
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI220_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI220_0)
	pcalau12i	$a0, %pc_hi20(.LCPI220_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI220_1)
	pcalau12i	$a0, %pc_hi20(.LCPI220_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI220_2)
	pcalau12i	$a0, %pc_hi20(.LCPI220_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI220_3)
	pcalau12i	$a0, %pc_hi20(.LCPI220_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI220_4)
	ori	$fp, $zero, 30
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB220_3
	.p2align	4, , 16
.LBB220_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB220_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB220_12
.LBB220_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_5 Depth 2
                                        #     Child Loop BB220_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB220_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB220_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB220_5:                              # %.preheader18
                                        #   Parent Loop BB220_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -48
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -40
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 30
	addi.d	$s8, $s8, 240
	blt	$s3, $s7, .LBB220_5
.LBB220_6:                              # %.loopexit19
                                        #   in Loop: Header=BB220_3 Depth=1
	bge	$s3, $s0, .LBB220_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB220_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB220_8:                              #   Parent Loop BB220_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB220_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB220_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB220_10:                             #   in Loop: Header=BB220_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB220_2
# %bb.11:                               #   in Loop: Header=BB220_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB220_2
.LBB220_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB220_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB220_16
.LBB220_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB220_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB220_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI220_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI220_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB220_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end220:
	.size	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end220-_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI221_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI221_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI221_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI221_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI221_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI221_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB221_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -28
	addi.d	$a0, $s1, 224
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI221_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI221_0)
	pcalau12i	$a0, %pc_hi20(.LCPI221_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI221_1)
	pcalau12i	$a0, %pc_hi20(.LCPI221_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI221_2)
	pcalau12i	$a0, %pc_hi20(.LCPI221_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI221_3)
	pcalau12i	$a0, %pc_hi20(.LCPI221_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI221_4)
	ori	$fp, $zero, 29
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB221_3
	.p2align	4, , 16
.LBB221_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB221_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB221_12
.LBB221_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_5 Depth 2
                                        #     Child Loop BB221_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB221_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB221_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB221_5:                              # %.preheader18
                                        #   Parent Loop BB221_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -40
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -32
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 29
	addi.d	$s8, $s8, 232
	blt	$s3, $s7, .LBB221_5
.LBB221_6:                              # %.loopexit19
                                        #   in Loop: Header=BB221_3 Depth=1
	bge	$s3, $s0, .LBB221_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB221_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB221_8:                              #   Parent Loop BB221_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB221_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB221_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB221_10:                             #   in Loop: Header=BB221_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB221_2
# %bb.11:                               #   in Loop: Header=BB221_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB221_2
.LBB221_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB221_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB221_16
.LBB221_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB221_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB221_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI221_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI221_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB221_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end221:
	.size	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end221-_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI222_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI222_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI222_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI222_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI222_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI222_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB222_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -27
	addi.d	$a0, $s1, 216
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI222_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI222_0)
	pcalau12i	$a0, %pc_hi20(.LCPI222_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI222_1)
	pcalau12i	$a0, %pc_hi20(.LCPI222_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI222_2)
	pcalau12i	$a0, %pc_hi20(.LCPI222_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI222_3)
	pcalau12i	$a0, %pc_hi20(.LCPI222_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI222_4)
	ori	$fp, $zero, 28
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB222_3
	.p2align	4, , 16
.LBB222_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB222_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB222_12
.LBB222_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_5 Depth 2
                                        #     Child Loop BB222_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB222_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB222_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB222_5:                              # %.preheader18
                                        #   Parent Loop BB222_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -32
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -24
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 28
	addi.d	$s8, $s8, 224
	blt	$s3, $s7, .LBB222_5
.LBB222_6:                              # %.loopexit19
                                        #   in Loop: Header=BB222_3 Depth=1
	bge	$s3, $s0, .LBB222_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB222_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB222_8:                              #   Parent Loop BB222_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB222_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB222_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB222_10:                             #   in Loop: Header=BB222_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB222_2
# %bb.11:                               #   in Loop: Header=BB222_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB222_2
.LBB222_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB222_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB222_16
.LBB222_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB222_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB222_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI222_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI222_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB222_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end222:
	.size	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end222-_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI223_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI223_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI223_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI223_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI223_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI223_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB223_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -26
	addi.d	$a0, $s1, 208
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI223_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI223_0)
	pcalau12i	$a0, %pc_hi20(.LCPI223_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI223_1)
	pcalau12i	$a0, %pc_hi20(.LCPI223_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI223_2)
	pcalau12i	$a0, %pc_hi20(.LCPI223_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI223_3)
	pcalau12i	$a0, %pc_hi20(.LCPI223_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI223_4)
	ori	$fp, $zero, 27
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB223_3
	.p2align	4, , 16
.LBB223_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB223_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB223_12
.LBB223_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_5 Depth 2
                                        #     Child Loop BB223_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB223_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB223_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB223_5:                              # %.preheader18
                                        #   Parent Loop BB223_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -24
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -16
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 27
	addi.d	$s8, $s8, 216
	blt	$s3, $s7, .LBB223_5
.LBB223_6:                              # %.loopexit19
                                        #   in Loop: Header=BB223_3 Depth=1
	bge	$s3, $s0, .LBB223_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB223_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB223_8:                              #   Parent Loop BB223_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB223_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB223_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB223_10:                             #   in Loop: Header=BB223_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB223_2
# %bb.11:                               #   in Loop: Header=BB223_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB223_2
.LBB223_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB223_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB223_16
.LBB223_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB223_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB223_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI223_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI223_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB223_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end223:
	.size	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end223-_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi25EdE7do_testEPKdPKc,"axG",@progbits,_ZN13do_loop_testsILi25EdE7do_testEPKdPKc,comdat
	.weak	_ZN13do_loop_testsILi25EdE7do_testEPKdPKc # -- Begin function _ZN13do_loop_testsILi25EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi25EdE7do_testEPKdPKc,@function
_ZN13do_loop_testsILi25EdE7do_testEPKdPKc: # @_ZN13do_loop_testsILi25EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi17EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1700
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1900
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end224:
	.size	_ZN13do_loop_testsILi25EdE7do_testEPKdPKc, .Lfunc_end224-_ZN13do_loop_testsILi25EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI225_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI225_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI225_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI225_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI225_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI225_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB225_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -25
	addi.d	$a0, $s1, 200
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI225_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI225_0)
	pcalau12i	$a0, %pc_hi20(.LCPI225_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI225_1)
	pcalau12i	$a0, %pc_hi20(.LCPI225_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI225_2)
	pcalau12i	$a0, %pc_hi20(.LCPI225_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI225_3)
	pcalau12i	$a0, %pc_hi20(.LCPI225_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI225_4)
	ori	$fp, $zero, 26
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB225_3
	.p2align	4, , 16
.LBB225_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB225_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB225_12
.LBB225_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_5 Depth 2
                                        #     Child Loop BB225_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB225_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB225_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB225_5:                              # %.preheader18
                                        #   Parent Loop BB225_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -16
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -8
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 26
	addi.d	$s8, $s8, 208
	blt	$s3, $s7, .LBB225_5
.LBB225_6:                              # %.loopexit19
                                        #   in Loop: Header=BB225_3 Depth=1
	bge	$s3, $s0, .LBB225_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB225_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB225_8:                              #   Parent Loop BB225_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB225_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB225_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB225_10:                             #   in Loop: Header=BB225_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB225_2
# %bb.11:                               #   in Loop: Header=BB225_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB225_2
.LBB225_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB225_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB225_16
.LBB225_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB225_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB225_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI225_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI225_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB225_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end225:
	.size	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end225-_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI226_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI226_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI226_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI226_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI226_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI226_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB226_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -24
	addi.d	$a0, $s1, 192
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI226_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI226_0)
	pcalau12i	$a0, %pc_hi20(.LCPI226_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI226_1)
	pcalau12i	$a0, %pc_hi20(.LCPI226_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI226_2)
	pcalau12i	$a0, %pc_hi20(.LCPI226_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI226_3)
	pcalau12i	$a0, %pc_hi20(.LCPI226_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI226_4)
	ori	$fp, $zero, 25
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB226_3
	.p2align	4, , 16
.LBB226_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB226_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB226_12
.LBB226_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB226_5 Depth 2
                                        #     Child Loop BB226_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB226_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB226_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB226_5:                              # %.preheader18
                                        #   Parent Loop BB226_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -8
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, 0
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 25
	addi.d	$s8, $s8, 200
	blt	$s3, $s7, .LBB226_5
.LBB226_6:                              # %.loopexit19
                                        #   in Loop: Header=BB226_3 Depth=1
	bge	$s3, $s0, .LBB226_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB226_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB226_8:                              #   Parent Loop BB226_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB226_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB226_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB226_10:                             #   in Loop: Header=BB226_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB226_2
# %bb.11:                               #   in Loop: Header=BB226_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB226_2
.LBB226_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB226_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB226_16
.LBB226_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB226_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB226_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI226_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI226_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB226_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end226:
	.size	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end226-_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI227_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI227_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI227_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI227_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI227_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI227_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	blez	$a1, .LBB227_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -23
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI227_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI227_0)
	pcalau12i	$a0, %pc_hi20(.LCPI227_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI227_1)
	pcalau12i	$a0, %pc_hi20(.LCPI227_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI227_2)
	pcalau12i	$a0, %pc_hi20(.LCPI227_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI227_3)
	pcalau12i	$a0, %pc_hi20(.LCPI227_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI227_4)
	ori	$s8, $zero, 24
	vldi	$vr3, -854
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s5, $zero
	b	.LBB227_3
	.p2align	4, , 16
.LBB227_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB227_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB227_12
.LBB227_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_5 Depth 2
                                        #     Child Loop BB227_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	blt	$s0, $s8, .LBB227_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB227_3 Depth=1
	move	$s3, $zero
	ori	$s4, $zero, 184
	.p2align	4, , 16
.LBB227_5:                              # %.preheader18
                                        #   Parent Loop BB227_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fldx.d	$fa0, $s1, $s4
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fld.d	$fa1, $sp, 32
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fst.d	$fa0, $sp, 32
	addi.w	$s3, $s3, 24
	addi.d	$s4, $s4, 192
	blt	$s3, $s7, .LBB227_5
.LBB227_6:                              # %.loopexit19
                                        #   in Loop: Header=BB227_3 Depth=1
	bge	$s3, $s0, .LBB227_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB227_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB227_8:                              #   Parent Loop BB227_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB227_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB227_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB227_10:                             #   in Loop: Header=BB227_3 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB227_2
# %bb.11:                               #   in Loop: Header=BB227_3 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB227_2
.LBB227_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 24                    # 8-byte Folded Reload
	beqz	$a2, .LBB227_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB227_16
.LBB227_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB227_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB227_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI227_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI227_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB227_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end227:
	.size	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end227-_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI228_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI228_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI228_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI228_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI228_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI228_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB228_13
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -22
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI228_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI228_0)
	pcalau12i	$a0, %pc_hi20(.LCPI228_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI228_1)
	pcalau12i	$a0, %pc_hi20(.LCPI228_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI228_2)
	pcalau12i	$a0, %pc_hi20(.LCPI228_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI228_3)
	pcalau12i	$a0, %pc_hi20(.LCPI228_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI228_4)
	ori	$s8, $zero, 23
	vldi	$vr3, -854
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s5, $zero
	b	.LBB228_3
	.p2align	4, , 16
.LBB228_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB228_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB228_13
.LBB228_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB228_5 Depth 2
                                        #     Child Loop BB228_9 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	blt	$s0, $s8, .LBB228_7
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB228_3 Depth=1
	move	$s3, $zero
	.p2align	4, , 16
.LBB228_5:                              # %.preheader18
                                        #   Parent Loop BB228_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	addi.w	$s3, $s3, 23
	blt	$s3, $s7, .LBB228_5
# %bb.6:                                # %.loopexit19.loopexit
                                        #   in Loop: Header=BB228_3 Depth=1
	fld.d	$fa0, $sp, 32
	vldi	$vr3, -854
.LBB228_7:                              # %.loopexit19
                                        #   in Loop: Header=BB228_3 Depth=1
	bge	$s3, $s0, .LBB228_11
# %bb.8:                                # %.preheader
                                        #   in Loop: Header=BB228_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB228_9:                              #   Parent Loop BB228_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB228_9
# %bb.10:                               # %.loopexit
                                        #   in Loop: Header=BB228_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB228_11:                             #   in Loop: Header=BB228_3 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB228_2
# %bb.12:                               #   in Loop: Header=BB228_3 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB228_2
.LBB228_13:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB228_15
# %bb.14:                               # %._crit_edge
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB228_17
.LBB228_15:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB228_18
# %bb.16:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB228_17:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI228_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI228_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB228_18:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end228:
	.size	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end228-_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI229_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI229_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI229_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI229_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI229_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI229_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB229_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -21
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 88
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI229_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI229_0)
	pcalau12i	$a0, %pc_hi20(.LCPI229_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI229_1)
	pcalau12i	$a0, %pc_hi20(.LCPI229_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI229_2)
	pcalau12i	$a0, %pc_hi20(.LCPI229_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI229_3)
	pcalau12i	$a0, %pc_hi20(.LCPI229_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI229_4)
	ori	$fp, $zero, 22
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB229_3
	.p2align	4, , 16
.LBB229_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB229_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB229_12
.LBB229_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_5 Depth 2
                                        #     Child Loop BB229_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB229_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB229_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB229_5:                              # %.preheader24
                                        #   Parent Loop BB229_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 22
	addi.d	$a0, $a0, 22
	addi.d	$a2, $a2, 176
	blt	$a1, $s6, .LBB229_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB229_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB229_8
	b	.LBB229_10
	.p2align	4, , 16
.LBB229_7:                              #   in Loop: Header=BB229_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB229_10
.LBB229_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB229_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB229_9:                              # %.preheader
                                        #   Parent Loop BB229_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB229_9
.LBB229_10:                             # %.loopexit
                                        #   in Loop: Header=BB229_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB229_2
# %bb.11:                               #   in Loop: Header=BB229_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB229_2
.LBB229_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB229_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB229_16
.LBB229_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB229_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB229_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI229_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI229_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB229_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end229:
	.size	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end229-_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI230_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI230_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI230_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI230_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI230_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI230_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB230_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -20
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI230_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI230_0)
	pcalau12i	$a0, %pc_hi20(.LCPI230_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI230_1)
	pcalau12i	$a0, %pc_hi20(.LCPI230_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI230_2)
	pcalau12i	$a0, %pc_hi20(.LCPI230_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI230_3)
	pcalau12i	$a0, %pc_hi20(.LCPI230_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI230_4)
	ori	$fp, $zero, 21
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB230_3
	.p2align	4, , 16
.LBB230_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB230_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB230_12
.LBB230_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_5 Depth 2
                                        #     Child Loop BB230_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB230_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB230_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB230_5:                              # %.preheader24
                                        #   Parent Loop BB230_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 21
	addi.d	$a0, $a0, 21
	addi.d	$a2, $a2, 168
	blt	$a1, $s6, .LBB230_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB230_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB230_8
	b	.LBB230_10
	.p2align	4, , 16
.LBB230_7:                              #   in Loop: Header=BB230_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB230_10
.LBB230_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB230_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB230_9:                              # %.preheader
                                        #   Parent Loop BB230_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB230_9
.LBB230_10:                             # %.loopexit
                                        #   in Loop: Header=BB230_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB230_2
# %bb.11:                               #   in Loop: Header=BB230_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB230_2
.LBB230_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB230_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB230_16
.LBB230_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB230_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB230_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI230_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI230_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB230_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end230:
	.size	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end230-_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI231_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI231_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI231_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI231_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI231_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI231_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB231_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -19
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI231_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI231_0)
	pcalau12i	$a0, %pc_hi20(.LCPI231_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI231_1)
	pcalau12i	$a0, %pc_hi20(.LCPI231_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI231_2)
	pcalau12i	$a0, %pc_hi20(.LCPI231_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI231_3)
	pcalau12i	$a0, %pc_hi20(.LCPI231_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI231_4)
	ori	$fp, $zero, 20
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB231_3
	.p2align	4, , 16
.LBB231_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB231_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB231_12
.LBB231_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB231_5 Depth 2
                                        #     Child Loop BB231_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB231_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB231_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB231_5:                              # %.preheader24
                                        #   Parent Loop BB231_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 20
	addi.d	$a0, $a0, 20
	addi.d	$a2, $a2, 160
	blt	$a1, $s6, .LBB231_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB231_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB231_8
	b	.LBB231_10
	.p2align	4, , 16
.LBB231_7:                              #   in Loop: Header=BB231_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB231_10
.LBB231_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB231_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB231_9:                              # %.preheader
                                        #   Parent Loop BB231_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB231_9
.LBB231_10:                             # %.loopexit
                                        #   in Loop: Header=BB231_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB231_2
# %bb.11:                               #   in Loop: Header=BB231_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB231_2
.LBB231_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB231_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB231_16
.LBB231_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB231_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB231_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI231_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI231_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB231_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end231:
	.size	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end231-_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI232_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI232_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI232_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI232_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI232_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI232_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB232_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -18
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI232_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI232_0)
	pcalau12i	$a0, %pc_hi20(.LCPI232_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI232_1)
	pcalau12i	$a0, %pc_hi20(.LCPI232_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI232_2)
	pcalau12i	$a0, %pc_hi20(.LCPI232_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI232_3)
	pcalau12i	$a0, %pc_hi20(.LCPI232_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI232_4)
	ori	$fp, $zero, 19
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB232_3
	.p2align	4, , 16
.LBB232_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB232_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB232_12
.LBB232_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_5 Depth 2
                                        #     Child Loop BB232_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB232_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB232_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB232_5:                              # %.preheader24
                                        #   Parent Loop BB232_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 19
	addi.d	$a0, $a0, 19
	addi.d	$a2, $a2, 152
	blt	$a1, $s6, .LBB232_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB232_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB232_8
	b	.LBB232_10
	.p2align	4, , 16
.LBB232_7:                              #   in Loop: Header=BB232_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB232_10
.LBB232_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB232_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB232_9:                              # %.preheader
                                        #   Parent Loop BB232_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB232_9
.LBB232_10:                             # %.loopexit
                                        #   in Loop: Header=BB232_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB232_2
# %bb.11:                               #   in Loop: Header=BB232_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB232_2
.LBB232_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB232_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB232_16
.LBB232_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB232_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB232_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI232_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI232_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB232_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end232:
	.size	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end232-_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi17EdE7do_testEPKdPKc,"axG",@progbits,_ZN13do_loop_testsILi17EdE7do_testEPKdPKc,comdat
	.weak	_ZN13do_loop_testsILi17EdE7do_testEPKdPKc # -- Begin function _ZN13do_loop_testsILi17EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi17EdE7do_testEPKdPKc,@function
_ZN13do_loop_testsILi17EdE7do_testEPKdPKc: # @_ZN13do_loop_testsILi17EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN13do_loop_testsILi9EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end233:
	.size	_ZN13do_loop_testsILi17EdE7do_testEPKdPKc, .Lfunc_end233-_ZN13do_loop_testsILi17EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI234_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI234_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI234_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI234_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI234_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI234_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB234_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -17
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI234_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI234_0)
	pcalau12i	$a0, %pc_hi20(.LCPI234_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI234_1)
	pcalau12i	$a0, %pc_hi20(.LCPI234_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI234_2)
	pcalau12i	$a0, %pc_hi20(.LCPI234_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI234_3)
	pcalau12i	$a0, %pc_hi20(.LCPI234_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI234_4)
	ori	$fp, $zero, 18
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB234_3
	.p2align	4, , 16
.LBB234_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB234_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB234_12
.LBB234_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB234_5 Depth 2
                                        #     Child Loop BB234_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB234_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB234_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB234_5:                              # %.preheader24
                                        #   Parent Loop BB234_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 18
	addi.d	$a0, $a0, 18
	addi.d	$a2, $a2, 144
	blt	$a1, $s6, .LBB234_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB234_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB234_8
	b	.LBB234_10
	.p2align	4, , 16
.LBB234_7:                              #   in Loop: Header=BB234_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB234_10
.LBB234_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB234_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB234_9:                              # %.preheader
                                        #   Parent Loop BB234_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB234_9
.LBB234_10:                             # %.loopexit
                                        #   in Loop: Header=BB234_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB234_2
# %bb.11:                               #   in Loop: Header=BB234_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB234_2
.LBB234_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB234_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB234_16
.LBB234_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB234_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB234_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI234_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI234_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB234_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end234:
	.size	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end234-_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI235_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI235_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI235_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI235_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI235_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI235_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB235_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -16
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI235_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI235_0)
	pcalau12i	$a0, %pc_hi20(.LCPI235_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI235_1)
	pcalau12i	$a0, %pc_hi20(.LCPI235_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI235_2)
	pcalau12i	$a0, %pc_hi20(.LCPI235_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI235_3)
	pcalau12i	$a0, %pc_hi20(.LCPI235_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI235_4)
	ori	$fp, $zero, 17
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB235_3
	.p2align	4, , 16
.LBB235_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB235_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB235_12
.LBB235_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_5 Depth 2
                                        #     Child Loop BB235_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB235_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB235_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB235_5:                              # %.preheader24
                                        #   Parent Loop BB235_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 17
	addi.d	$a0, $a0, 17
	addi.d	$a2, $a2, 136
	blt	$a1, $s6, .LBB235_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB235_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB235_8
	b	.LBB235_10
	.p2align	4, , 16
.LBB235_7:                              #   in Loop: Header=BB235_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB235_10
.LBB235_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB235_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB235_9:                              # %.preheader
                                        #   Parent Loop BB235_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB235_9
.LBB235_10:                             # %.loopexit
                                        #   in Loop: Header=BB235_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB235_2
# %bb.11:                               #   in Loop: Header=BB235_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB235_2
.LBB235_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB235_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB235_16
.LBB235_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB235_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB235_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI235_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI235_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB235_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end235:
	.size	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end235-_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI236_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI236_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI236_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI236_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI236_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI236_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB236_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -15
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI236_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI236_0)
	pcalau12i	$a0, %pc_hi20(.LCPI236_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI236_1)
	pcalau12i	$a0, %pc_hi20(.LCPI236_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI236_2)
	pcalau12i	$a0, %pc_hi20(.LCPI236_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI236_3)
	pcalau12i	$a0, %pc_hi20(.LCPI236_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI236_4)
	ori	$fp, $zero, 16
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB236_3
	.p2align	4, , 16
.LBB236_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB236_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB236_12
.LBB236_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB236_5 Depth 2
                                        #     Child Loop BB236_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB236_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB236_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB236_5:                              # %.preheader24
                                        #   Parent Loop BB236_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 16
	addi.d	$a0, $a0, 16
	addi.d	$a2, $a2, 128
	blt	$a1, $s6, .LBB236_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB236_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB236_8
	b	.LBB236_10
	.p2align	4, , 16
.LBB236_7:                              #   in Loop: Header=BB236_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB236_10
.LBB236_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB236_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB236_9:                              # %.preheader
                                        #   Parent Loop BB236_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB236_9
.LBB236_10:                             # %.loopexit
                                        #   in Loop: Header=BB236_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB236_2
# %bb.11:                               #   in Loop: Header=BB236_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB236_2
.LBB236_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB236_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB236_16
.LBB236_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB236_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB236_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI236_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI236_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB236_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end236:
	.size	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end236-_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI237_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI237_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI237_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI237_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI237_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI237_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB237_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -14
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI237_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI237_0)
	pcalau12i	$a0, %pc_hi20(.LCPI237_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI237_1)
	pcalau12i	$a0, %pc_hi20(.LCPI237_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI237_2)
	pcalau12i	$a0, %pc_hi20(.LCPI237_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI237_3)
	pcalau12i	$a0, %pc_hi20(.LCPI237_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI237_4)
	ori	$fp, $zero, 15
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB237_3
	.p2align	4, , 16
.LBB237_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB237_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB237_12
.LBB237_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_5 Depth 2
                                        #     Child Loop BB237_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB237_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB237_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB237_5:                              # %.preheader24
                                        #   Parent Loop BB237_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 15
	addi.d	$a0, $a0, 15
	addi.d	$a2, $a2, 120
	blt	$a1, $s6, .LBB237_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB237_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB237_8
	b	.LBB237_10
	.p2align	4, , 16
.LBB237_7:                              #   in Loop: Header=BB237_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB237_10
.LBB237_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB237_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB237_9:                              # %.preheader
                                        #   Parent Loop BB237_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB237_9
.LBB237_10:                             # %.loopexit
                                        #   in Loop: Header=BB237_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB237_2
# %bb.11:                               #   in Loop: Header=BB237_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB237_2
.LBB237_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB237_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB237_16
.LBB237_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB237_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB237_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI237_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI237_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB237_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end237:
	.size	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end237-_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI238_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI238_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI238_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI238_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI238_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI238_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB238_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -13
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI238_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI238_0)
	pcalau12i	$a0, %pc_hi20(.LCPI238_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI238_1)
	pcalau12i	$a0, %pc_hi20(.LCPI238_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI238_2)
	pcalau12i	$a0, %pc_hi20(.LCPI238_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI238_3)
	pcalau12i	$a0, %pc_hi20(.LCPI238_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI238_4)
	ori	$fp, $zero, 14
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB238_3
	.p2align	4, , 16
.LBB238_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB238_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB238_12
.LBB238_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB238_5 Depth 2
                                        #     Child Loop BB238_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB238_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB238_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB238_5:                              # %.preheader24
                                        #   Parent Loop BB238_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 14
	addi.d	$a0, $a0, 14
	addi.d	$a2, $a2, 112
	blt	$a1, $s6, .LBB238_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB238_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB238_8
	b	.LBB238_10
	.p2align	4, , 16
.LBB238_7:                              #   in Loop: Header=BB238_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB238_10
.LBB238_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB238_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB238_9:                              # %.preheader
                                        #   Parent Loop BB238_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB238_9
.LBB238_10:                             # %.loopexit
                                        #   in Loop: Header=BB238_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB238_2
# %bb.11:                               #   in Loop: Header=BB238_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB238_2
.LBB238_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB238_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB238_16
.LBB238_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB238_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB238_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI238_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI238_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB238_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end238:
	.size	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end238-_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI239_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI239_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI239_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI239_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI239_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI239_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB239_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -12
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI239_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI239_0)
	pcalau12i	$a0, %pc_hi20(.LCPI239_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI239_1)
	pcalau12i	$a0, %pc_hi20(.LCPI239_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI239_2)
	pcalau12i	$a0, %pc_hi20(.LCPI239_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI239_3)
	pcalau12i	$a0, %pc_hi20(.LCPI239_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI239_4)
	ori	$fp, $zero, 13
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB239_3
	.p2align	4, , 16
.LBB239_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB239_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB239_12
.LBB239_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB239_5 Depth 2
                                        #     Child Loop BB239_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB239_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB239_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB239_5:                              # %.preheader24
                                        #   Parent Loop BB239_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 13
	addi.d	$a0, $a0, 13
	addi.d	$a2, $a2, 104
	blt	$a1, $s6, .LBB239_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB239_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB239_8
	b	.LBB239_10
	.p2align	4, , 16
.LBB239_7:                              #   in Loop: Header=BB239_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB239_10
.LBB239_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB239_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB239_9:                              # %.preheader
                                        #   Parent Loop BB239_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB239_9
.LBB239_10:                             # %.loopexit
                                        #   in Loop: Header=BB239_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB239_2
# %bb.11:                               #   in Loop: Header=BB239_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB239_2
.LBB239_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB239_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB239_16
.LBB239_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB239_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB239_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI239_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI239_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB239_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end239:
	.size	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end239-_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI240_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI240_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI240_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI240_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI240_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI240_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB240_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -11
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI240_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI240_0)
	pcalau12i	$a0, %pc_hi20(.LCPI240_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI240_1)
	pcalau12i	$a0, %pc_hi20(.LCPI240_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI240_2)
	pcalau12i	$a0, %pc_hi20(.LCPI240_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI240_3)
	pcalau12i	$a0, %pc_hi20(.LCPI240_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI240_4)
	ori	$fp, $zero, 12
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB240_3
	.p2align	4, , 16
.LBB240_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB240_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB240_12
.LBB240_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB240_5 Depth 2
                                        #     Child Loop BB240_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB240_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB240_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB240_5:                              # %.preheader23
                                        #   Parent Loop BB240_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 12
	addi.d	$a0, $a0, 12
	addi.d	$a2, $a2, 96
	blt	$a1, $s6, .LBB240_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB240_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB240_8
	b	.LBB240_10
	.p2align	4, , 16
.LBB240_7:                              #   in Loop: Header=BB240_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB240_10
.LBB240_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB240_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB240_9:                              # %.preheader
                                        #   Parent Loop BB240_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB240_9
.LBB240_10:                             # %.loopexit
                                        #   in Loop: Header=BB240_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB240_2
# %bb.11:                               #   in Loop: Header=BB240_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB240_2
.LBB240_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB240_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB240_16
.LBB240_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB240_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB240_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI240_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI240_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB240_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end240:
	.size	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end240-_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI241_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI241_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI241_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI241_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI241_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI241_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB241_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -10
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI241_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI241_0)
	pcalau12i	$a0, %pc_hi20(.LCPI241_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI241_1)
	pcalau12i	$a0, %pc_hi20(.LCPI241_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI241_2)
	pcalau12i	$a0, %pc_hi20(.LCPI241_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI241_3)
	pcalau12i	$a0, %pc_hi20(.LCPI241_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI241_4)
	ori	$fp, $zero, 11
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB241_3
	.p2align	4, , 16
.LBB241_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB241_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB241_12
.LBB241_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_5 Depth 2
                                        #     Child Loop BB241_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB241_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB241_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB241_5:                              # %.preheader23
                                        #   Parent Loop BB241_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 11
	addi.d	$a0, $a0, 11
	addi.d	$a2, $a2, 88
	blt	$a1, $s6, .LBB241_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB241_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB241_8
	b	.LBB241_10
	.p2align	4, , 16
.LBB241_7:                              #   in Loop: Header=BB241_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB241_10
.LBB241_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB241_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB241_9:                              # %.preheader
                                        #   Parent Loop BB241_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB241_9
.LBB241_10:                             # %.loopexit
                                        #   in Loop: Header=BB241_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB241_2
# %bb.11:                               #   in Loop: Header=BB241_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB241_2
.LBB241_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB241_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB241_16
.LBB241_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB241_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB241_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI241_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI241_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB241_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end241:
	.size	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end241-_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN13do_loop_testsILi9EdE7do_testEPKdPKc,"axG",@progbits,_ZN13do_loop_testsILi9EdE7do_testEPKdPKc,comdat
	.weak	_ZN13do_loop_testsILi9EdE7do_testEPKdPKc # -- Begin function _ZN13do_loop_testsILi9EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN13do_loop_testsILi9EdE7do_testEPKdPKc,@function
_ZN13do_loop_testsILi9EdE7do_testEPKdPKc: # @_ZN13do_loop_testsILi9EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end242:
	.size	_ZN13do_loop_testsILi9EdE7do_testEPKdPKc, .Lfunc_end242-_ZN13do_loop_testsILi9EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI243_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI243_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI243_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI243_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI243_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI243_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB243_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -9
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI243_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI243_0)
	pcalau12i	$a0, %pc_hi20(.LCPI243_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI243_1)
	pcalau12i	$a0, %pc_hi20(.LCPI243_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI243_2)
	pcalau12i	$a0, %pc_hi20(.LCPI243_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI243_3)
	pcalau12i	$a0, %pc_hi20(.LCPI243_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI243_4)
	ori	$fp, $zero, 10
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB243_3
	.p2align	4, , 16
.LBB243_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB243_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB243_12
.LBB243_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_5 Depth 2
                                        #     Child Loop BB243_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB243_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB243_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB243_5:                              # %.preheader23
                                        #   Parent Loop BB243_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 10
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, 80
	blt	$a2, $s6, .LBB243_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB243_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB243_8
	b	.LBB243_10
	.p2align	4, , 16
.LBB243_7:                              #   in Loop: Header=BB243_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB243_10
.LBB243_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB243_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB243_9:                              # %.preheader
                                        #   Parent Loop BB243_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB243_9
.LBB243_10:                             # %.loopexit
                                        #   in Loop: Header=BB243_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB243_2
# %bb.11:                               #   in Loop: Header=BB243_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB243_2
.LBB243_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB243_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB243_16
.LBB243_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB243_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB243_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI243_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI243_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB243_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end243:
	.size	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end243-_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI244_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI244_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI244_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI244_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI244_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI244_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB244_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -8
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI244_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI244_0)
	pcalau12i	$a0, %pc_hi20(.LCPI244_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI244_1)
	pcalau12i	$a0, %pc_hi20(.LCPI244_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI244_2)
	pcalau12i	$a0, %pc_hi20(.LCPI244_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI244_3)
	pcalau12i	$a0, %pc_hi20(.LCPI244_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI244_4)
	ori	$fp, $zero, 9
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB244_3
	.p2align	4, , 16
.LBB244_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB244_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB244_12
.LBB244_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB244_5 Depth 2
                                        #     Child Loop BB244_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB244_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB244_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB244_5:                              # %.preheader23
                                        #   Parent Loop BB244_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 9
	addi.d	$a0, $a0, 9
	addi.d	$a3, $a3, 72
	blt	$a2, $s6, .LBB244_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB244_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB244_8
	b	.LBB244_10
	.p2align	4, , 16
.LBB244_7:                              #   in Loop: Header=BB244_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB244_10
.LBB244_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB244_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB244_9:                              # %.preheader
                                        #   Parent Loop BB244_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB244_9
.LBB244_10:                             # %.loopexit
                                        #   in Loop: Header=BB244_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB244_2
# %bb.11:                               #   in Loop: Header=BB244_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB244_2
.LBB244_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB244_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB244_16
.LBB244_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB244_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB244_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI244_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI244_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB244_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end244:
	.size	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end244-_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI245_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI245_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI245_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI245_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI245_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI245_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB245_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -7
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI245_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI245_0)
	pcalau12i	$a0, %pc_hi20(.LCPI245_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI245_1)
	pcalau12i	$a0, %pc_hi20(.LCPI245_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI245_2)
	pcalau12i	$a0, %pc_hi20(.LCPI245_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI245_3)
	pcalau12i	$a0, %pc_hi20(.LCPI245_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI245_4)
	ori	$fp, $zero, 8
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB245_3
	.p2align	4, , 16
.LBB245_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB245_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB245_12
.LBB245_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_5 Depth 2
                                        #     Child Loop BB245_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB245_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB245_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB245_5:                              # %.preheader23
                                        #   Parent Loop BB245_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 8
	addi.d	$a0, $a0, 8
	addi.d	$a3, $a3, 64
	blt	$a2, $s6, .LBB245_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB245_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB245_8
	b	.LBB245_10
	.p2align	4, , 16
.LBB245_7:                              #   in Loop: Header=BB245_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB245_10
.LBB245_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB245_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB245_9:                              # %.preheader
                                        #   Parent Loop BB245_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB245_9
.LBB245_10:                             # %.loopexit
                                        #   in Loop: Header=BB245_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB245_2
# %bb.11:                               #   in Loop: Header=BB245_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB245_2
.LBB245_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB245_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB245_16
.LBB245_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB245_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB245_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI245_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI245_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB245_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end245:
	.size	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end245-_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI246_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI246_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI246_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI246_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI246_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI246_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB246_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -6
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI246_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI246_0)
	pcalau12i	$a0, %pc_hi20(.LCPI246_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI246_1)
	pcalau12i	$a0, %pc_hi20(.LCPI246_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI246_2)
	pcalau12i	$a0, %pc_hi20(.LCPI246_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI246_3)
	pcalau12i	$a0, %pc_hi20(.LCPI246_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI246_4)
	ori	$fp, $zero, 7
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB246_3
	.p2align	4, , 16
.LBB246_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB246_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB246_12
.LBB246_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_5 Depth 2
                                        #     Child Loop BB246_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB246_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB246_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB246_5:                              # %.preheader23
                                        #   Parent Loop BB246_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 7
	addi.d	$a0, $a0, 7
	addi.d	$a3, $a3, 56
	blt	$a2, $s6, .LBB246_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB246_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB246_8
	b	.LBB246_10
	.p2align	4, , 16
.LBB246_7:                              #   in Loop: Header=BB246_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB246_10
.LBB246_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB246_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB246_9:                              # %.preheader
                                        #   Parent Loop BB246_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB246_9
.LBB246_10:                             # %.loopexit
                                        #   in Loop: Header=BB246_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB246_2
# %bb.11:                               #   in Loop: Header=BB246_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB246_2
.LBB246_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB246_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB246_16
.LBB246_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB246_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB246_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI246_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI246_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB246_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end246:
	.size	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end246-_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI247_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI247_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI247_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI247_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI247_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI247_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB247_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -5
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI247_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI247_0)
	pcalau12i	$a0, %pc_hi20(.LCPI247_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI247_1)
	pcalau12i	$a0, %pc_hi20(.LCPI247_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI247_2)
	pcalau12i	$a0, %pc_hi20(.LCPI247_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI247_3)
	pcalau12i	$a0, %pc_hi20(.LCPI247_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI247_4)
	ori	$fp, $zero, 6
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB247_3
	.p2align	4, , 16
.LBB247_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB247_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB247_12
.LBB247_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_5 Depth 2
                                        #     Child Loop BB247_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB247_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB247_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB247_5:                              # %.preheader23
                                        #   Parent Loop BB247_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 6
	addi.d	$a3, $a3, 48
	addi.d	$a0, $a0, 6
	blt	$a2, $s6, .LBB247_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB247_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB247_8
	b	.LBB247_10
	.p2align	4, , 16
.LBB247_7:                              #   in Loop: Header=BB247_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB247_10
.LBB247_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB247_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB247_9:                              # %.preheader
                                        #   Parent Loop BB247_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB247_9
.LBB247_10:                             # %.loopexit
                                        #   in Loop: Header=BB247_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB247_2
# %bb.11:                               #   in Loop: Header=BB247_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB247_2
.LBB247_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB247_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB247_16
.LBB247_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB247_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB247_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI247_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI247_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB247_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end247:
	.size	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end247-_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI248_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI248_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI248_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI248_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI248_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI248_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB248_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -4
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI248_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI248_0)
	pcalau12i	$a0, %pc_hi20(.LCPI248_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI248_1)
	pcalau12i	$a0, %pc_hi20(.LCPI248_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI248_2)
	pcalau12i	$a0, %pc_hi20(.LCPI248_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI248_3)
	pcalau12i	$a0, %pc_hi20(.LCPI248_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI248_4)
	ori	$fp, $zero, 5
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB248_3
	.p2align	4, , 16
.LBB248_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB248_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB248_12
.LBB248_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB248_5 Depth 2
                                        #     Child Loop BB248_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB248_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB248_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB248_5:                              # %.preheader23
                                        #   Parent Loop BB248_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 40
	addi.d	$a0, $a0, 5
	blt	$a2, $s6, .LBB248_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB248_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB248_8
	b	.LBB248_10
	.p2align	4, , 16
.LBB248_7:                              #   in Loop: Header=BB248_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB248_10
.LBB248_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB248_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB248_9:                              # %.preheader
                                        #   Parent Loop BB248_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB248_9
.LBB248_10:                             # %.loopexit
                                        #   in Loop: Header=BB248_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB248_2
# %bb.11:                               #   in Loop: Header=BB248_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB248_2
.LBB248_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB248_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB248_16
.LBB248_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB248_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB248_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI248_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI248_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB248_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end248:
	.size	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end248-_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI249_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI249_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI249_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI249_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI249_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI249_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB249_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -3
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI249_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI249_0)
	pcalau12i	$a0, %pc_hi20(.LCPI249_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI249_1)
	pcalau12i	$a0, %pc_hi20(.LCPI249_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI249_2)
	pcalau12i	$a0, %pc_hi20(.LCPI249_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI249_3)
	pcalau12i	$a0, %pc_hi20(.LCPI249_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI249_4)
	ori	$fp, $zero, 4
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB249_3
	.p2align	4, , 16
.LBB249_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB249_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB249_12
.LBB249_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_5 Depth 2
                                        #     Child Loop BB249_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB249_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB249_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB249_5:                              # %.preheader23
                                        #   Parent Loop BB249_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 32
	addi.d	$a0, $a0, 4
	blt	$a2, $s6, .LBB249_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB249_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB249_8
	b	.LBB249_10
	.p2align	4, , 16
.LBB249_7:                              #   in Loop: Header=BB249_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB249_10
.LBB249_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB249_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB249_9:                              # %.preheader
                                        #   Parent Loop BB249_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB249_9
.LBB249_10:                             # %.loopexit
                                        #   in Loop: Header=BB249_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB249_2
# %bb.11:                               #   in Loop: Header=BB249_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB249_2
.LBB249_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB249_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB249_16
.LBB249_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB249_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB249_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI249_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI249_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB249_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end249:
	.size	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end249-_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI250_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI250_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI250_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI250_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI250_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI250_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB250_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -2
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI250_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI250_0)
	pcalau12i	$a0, %pc_hi20(.LCPI250_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI250_1)
	pcalau12i	$a0, %pc_hi20(.LCPI250_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI250_2)
	pcalau12i	$a0, %pc_hi20(.LCPI250_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI250_3)
	pcalau12i	$a0, %pc_hi20(.LCPI250_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI250_4)
	ori	$fp, $zero, 3
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB250_3
	.p2align	4, , 16
.LBB250_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB250_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB250_12
.LBB250_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB250_5 Depth 2
                                        #     Child Loop BB250_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB250_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB250_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB250_5:                              # %.preheader23
                                        #   Parent Loop BB250_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 24
	addi.d	$a0, $a0, 3
	blt	$a2, $s6, .LBB250_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB250_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB250_8
	b	.LBB250_10
	.p2align	4, , 16
.LBB250_7:                              #   in Loop: Header=BB250_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB250_10
.LBB250_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB250_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB250_9:                              # %.preheader
                                        #   Parent Loop BB250_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB250_9
.LBB250_10:                             # %.loopexit
                                        #   in Loop: Header=BB250_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB250_2
# %bb.11:                               #   in Loop: Header=BB250_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB250_2
.LBB250_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB250_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB250_16
.LBB250_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB250_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB250_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI250_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI250_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB250_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end250:
	.size	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end250-_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI251_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI251_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI251_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI251_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI251_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI251_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	blez	$a1, .LBB251_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -1
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 8
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI251_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI251_0)
	pcalau12i	$a0, %pc_hi20(.LCPI251_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI251_1)
	pcalau12i	$a0, %pc_hi20(.LCPI251_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI251_2)
	pcalau12i	$a0, %pc_hi20(.LCPI251_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI251_3)
	pcalau12i	$a0, %pc_hi20(.LCPI251_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI251_4)
	ori	$fp, $zero, 2
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB251_3
	.p2align	4, , 16
.LBB251_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB251_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB251_12
.LBB251_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_5 Depth 2
                                        #     Child Loop BB251_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB251_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB251_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB251_5:                              # %.preheader23
                                        #   Parent Loop BB251_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 16
	addi.d	$a0, $a0, 2
	blt	$a2, $s6, .LBB251_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB251_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB251_8
	b	.LBB251_10
	.p2align	4, , 16
.LBB251_7:                              #   in Loop: Header=BB251_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB251_10
.LBB251_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB251_3 Depth=1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a2, $a0, $a2, 3
	sub.d	$a0, $s7, $a0
	.p2align	4, , 16
.LBB251_9:                              # %.preheader
                                        #   Parent Loop BB251_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB251_9
.LBB251_10:                             # %.loopexit
                                        #   in Loop: Header=BB251_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB251_2
# %bb.11:                               #   in Loop: Header=BB251_3 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB251_2
.LBB251_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB251_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB251_16
.LBB251_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB251_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB251_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI251_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI251_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB251_17:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end251:
	.size	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end251-_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI252_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI252_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI252_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI252_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI252_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI252_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	5
	.type	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc: # @_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB252_8
# %bb.1:                                # %.lr.ph
	bstrpick.d	$s6, $s0, 31, 0
	pcalau12i	$a0, %pc_hi20(.LCPI252_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI252_0)
	pcalau12i	$a0, %pc_hi20(.LCPI252_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI252_1)
	pcalau12i	$a0, %pc_hi20(.LCPI252_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI252_2)
	pcalau12i	$a0, %pc_hi20(.LCPI252_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI252_3)
	pcalau12i	$a0, %pc_hi20(.LCPI252_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI252_4)
	movgr2fr.d	$fs5, $zero
	vldi	$vr3, -854
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s8, $zero
	b	.LBB252_3
	.p2align	4, , 16
.LBB252_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB252_3 Depth=1
	addi.w	$s8, $s8, 1
	bge	$s8, $a1, .LBB252_8
.LBB252_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_5 Depth 2
	fmov.d	$fa0, $fs5
	blez	$s0, .LBB252_6
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB252_3 Depth=1
	move	$a0, $s6
	move	$a2, $s1
	fmov.d	$fa0, $fs5
	.p2align	4, , 16
.LBB252_5:                              # %.preheader23
                                        #   Parent Loop BB252_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB252_5
.LBB252_6:                              # %.loopexit
                                        #   in Loop: Header=BB252_3 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB252_2
# %bb.7:                                #   in Loop: Header=BB252_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB252_2
.LBB252_8:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB252_10
# %bb.9:                                # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB252_12
.LBB252_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB252_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB252_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI252_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI252_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB252_13:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end252:
	.size	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end252-_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI253_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI253_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI253_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI253_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI253_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI253_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$fp, %pc_hi20(current_test)
	blez	$a1, .LBB253_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -31
	addi.d	$a0, $s1, 248
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI253_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI253_0)
	pcalau12i	$a0, %pc_hi20(.LCPI253_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI253_1)
	pcalau12i	$a0, %pc_hi20(.LCPI253_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI253_2)
	pcalau12i	$a0, %pc_hi20(.LCPI253_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI253_3)
	pcalau12i	$a0, %pc_hi20(.LCPI253_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI253_4)
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB253_3
	.p2align	4, , 16
.LBB253_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB253_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB253_12
.LBB253_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB253_5 Depth 2
                                        #     Child Loop BB253_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	ori	$a0, $zero, 32
	blt	$s0, $a0, .LBB253_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB253_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB253_5:                              # %.preheader18
                                        #   Parent Loop BB253_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -64
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 32
	fld.d	$fa2, $s8, -56
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 32
	addi.w	$s3, $s3, 32
	addi.d	$s8, $s8, 256
	blt	$s3, $s7, .LBB253_5
.LBB253_6:                              # %.loopexit19
                                        #   in Loop: Header=BB253_3 Depth=1
	bge	$s3, $s0, .LBB253_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB253_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB253_8:                              #   Parent Loop BB253_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB253_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB253_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB253_10:                             #   in Loop: Header=BB253_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB253_2
# %bb.11:                               #   in Loop: Header=BB253_3 Depth=1
	ld.w	$a1, $fp, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB253_2
.LBB253_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s3, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB253_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $fp, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB253_16
.LBB253_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB253_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $fp, %pc_lo12(current_test)
.LBB253_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI253_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI253_5)
	sub.d	$a1, $s0, $s3
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB253_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end253:
	.size	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end253-_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI254_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI254_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI254_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI254_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI254_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI254_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB254_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -30
	addi.d	$a0, $s1, 240
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI254_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI254_0)
	pcalau12i	$a0, %pc_hi20(.LCPI254_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI254_1)
	pcalau12i	$a0, %pc_hi20(.LCPI254_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI254_2)
	pcalau12i	$a0, %pc_hi20(.LCPI254_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI254_3)
	pcalau12i	$a0, %pc_hi20(.LCPI254_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI254_4)
	ori	$fp, $zero, 31
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB254_3
	.p2align	4, , 16
.LBB254_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB254_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB254_12
.LBB254_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB254_5 Depth 2
                                        #     Child Loop BB254_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB254_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB254_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB254_5:                              # %.preheader18
                                        #   Parent Loop BB254_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -56
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -48
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 31
	addi.d	$s8, $s8, 248
	blt	$s3, $s7, .LBB254_5
.LBB254_6:                              # %.loopexit19
                                        #   in Loop: Header=BB254_3 Depth=1
	bge	$s3, $s0, .LBB254_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB254_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB254_8:                              #   Parent Loop BB254_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB254_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB254_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB254_10:                             #   in Loop: Header=BB254_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB254_2
# %bb.11:                               #   in Loop: Header=BB254_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB254_2
.LBB254_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB254_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB254_16
.LBB254_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB254_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB254_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI254_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI254_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB254_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end254:
	.size	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end254-_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI255_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI255_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI255_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI255_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI255_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI255_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB255_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -29
	addi.d	$a0, $s1, 232
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI255_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI255_0)
	pcalau12i	$a0, %pc_hi20(.LCPI255_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI255_1)
	pcalau12i	$a0, %pc_hi20(.LCPI255_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI255_2)
	pcalau12i	$a0, %pc_hi20(.LCPI255_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI255_3)
	pcalau12i	$a0, %pc_hi20(.LCPI255_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI255_4)
	ori	$fp, $zero, 30
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB255_3
	.p2align	4, , 16
.LBB255_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB255_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB255_12
.LBB255_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_5 Depth 2
                                        #     Child Loop BB255_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB255_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB255_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB255_5:                              # %.preheader18
                                        #   Parent Loop BB255_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -48
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -40
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 30
	addi.d	$s8, $s8, 240
	blt	$s3, $s7, .LBB255_5
.LBB255_6:                              # %.loopexit19
                                        #   in Loop: Header=BB255_3 Depth=1
	bge	$s3, $s0, .LBB255_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB255_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB255_8:                              #   Parent Loop BB255_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB255_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB255_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB255_10:                             #   in Loop: Header=BB255_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB255_2
# %bb.11:                               #   in Loop: Header=BB255_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB255_2
.LBB255_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB255_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB255_16
.LBB255_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB255_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB255_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI255_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI255_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB255_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end255:
	.size	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end255-_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI256_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI256_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI256_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI256_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI256_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI256_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB256_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -28
	addi.d	$a0, $s1, 224
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI256_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI256_0)
	pcalau12i	$a0, %pc_hi20(.LCPI256_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI256_1)
	pcalau12i	$a0, %pc_hi20(.LCPI256_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI256_2)
	pcalau12i	$a0, %pc_hi20(.LCPI256_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI256_3)
	pcalau12i	$a0, %pc_hi20(.LCPI256_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI256_4)
	ori	$fp, $zero, 29
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB256_3
	.p2align	4, , 16
.LBB256_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB256_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB256_12
.LBB256_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_5 Depth 2
                                        #     Child Loop BB256_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB256_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB256_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB256_5:                              # %.preheader18
                                        #   Parent Loop BB256_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -40
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -32
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 29
	addi.d	$s8, $s8, 232
	blt	$s3, $s7, .LBB256_5
.LBB256_6:                              # %.loopexit19
                                        #   in Loop: Header=BB256_3 Depth=1
	bge	$s3, $s0, .LBB256_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB256_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB256_8:                              #   Parent Loop BB256_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB256_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB256_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB256_10:                             #   in Loop: Header=BB256_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB256_2
# %bb.11:                               #   in Loop: Header=BB256_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB256_2
.LBB256_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB256_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB256_16
.LBB256_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB256_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB256_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI256_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI256_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB256_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end256:
	.size	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end256-_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI257_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI257_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI257_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI257_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI257_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI257_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB257_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -27
	addi.d	$a0, $s1, 216
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI257_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI257_0)
	pcalau12i	$a0, %pc_hi20(.LCPI257_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI257_1)
	pcalau12i	$a0, %pc_hi20(.LCPI257_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI257_2)
	pcalau12i	$a0, %pc_hi20(.LCPI257_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI257_3)
	pcalau12i	$a0, %pc_hi20(.LCPI257_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI257_4)
	ori	$fp, $zero, 28
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB257_3
	.p2align	4, , 16
.LBB257_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB257_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB257_12
.LBB257_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_5 Depth 2
                                        #     Child Loop BB257_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB257_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB257_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB257_5:                              # %.preheader18
                                        #   Parent Loop BB257_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -32
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -24
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 28
	addi.d	$s8, $s8, 224
	blt	$s3, $s7, .LBB257_5
.LBB257_6:                              # %.loopexit19
                                        #   in Loop: Header=BB257_3 Depth=1
	bge	$s3, $s0, .LBB257_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB257_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB257_8:                              #   Parent Loop BB257_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB257_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB257_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB257_10:                             #   in Loop: Header=BB257_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB257_2
# %bb.11:                               #   in Loop: Header=BB257_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB257_2
.LBB257_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB257_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB257_16
.LBB257_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB257_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB257_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI257_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI257_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB257_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end257:
	.size	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end257-_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI258_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI258_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI258_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI258_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI258_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI258_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB258_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -26
	addi.d	$a0, $s1, 208
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI258_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI258_0)
	pcalau12i	$a0, %pc_hi20(.LCPI258_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI258_1)
	pcalau12i	$a0, %pc_hi20(.LCPI258_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI258_2)
	pcalau12i	$a0, %pc_hi20(.LCPI258_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI258_3)
	pcalau12i	$a0, %pc_hi20(.LCPI258_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI258_4)
	ori	$fp, $zero, 27
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB258_3
	.p2align	4, , 16
.LBB258_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB258_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB258_12
.LBB258_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB258_5 Depth 2
                                        #     Child Loop BB258_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB258_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB258_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB258_5:                              # %.preheader18
                                        #   Parent Loop BB258_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -24
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -16
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 27
	addi.d	$s8, $s8, 216
	blt	$s3, $s7, .LBB258_5
.LBB258_6:                              # %.loopexit19
                                        #   in Loop: Header=BB258_3 Depth=1
	bge	$s3, $s0, .LBB258_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB258_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB258_8:                              #   Parent Loop BB258_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB258_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB258_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB258_10:                             #   in Loop: Header=BB258_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB258_2
# %bb.11:                               #   in Loop: Header=BB258_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB258_2
.LBB258_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB258_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB258_16
.LBB258_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB258_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB258_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI258_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI258_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB258_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end258:
	.size	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end258-_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi25EdE7do_testEPKdPKc,"axG",@progbits,_ZN15goto_loop_testsILi25EdE7do_testEPKdPKc,comdat
	.weak	_ZN15goto_loop_testsILi25EdE7do_testEPKdPKc # -- Begin function _ZN15goto_loop_testsILi25EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi25EdE7do_testEPKdPKc,@function
_ZN15goto_loop_testsILi25EdE7do_testEPKdPKc: # @_ZN15goto_loop_testsILi25EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi17EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 1700
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1800
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1900
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 2000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 2047
	addi.d	$a2, $s1, 53
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 153
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 253
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 353
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end259:
	.size	_ZN15goto_loop_testsILi25EdE7do_testEPKdPKc, .Lfunc_end259-_ZN15goto_loop_testsILi25EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI260_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI260_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI260_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI260_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI260_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI260_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB260_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -25
	addi.d	$a0, $s1, 200
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI260_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI260_0)
	pcalau12i	$a0, %pc_hi20(.LCPI260_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI260_1)
	pcalau12i	$a0, %pc_hi20(.LCPI260_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI260_2)
	pcalau12i	$a0, %pc_hi20(.LCPI260_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI260_3)
	pcalau12i	$a0, %pc_hi20(.LCPI260_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI260_4)
	ori	$fp, $zero, 26
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB260_3
	.p2align	4, , 16
.LBB260_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB260_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB260_12
.LBB260_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB260_5 Depth 2
                                        #     Child Loop BB260_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB260_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB260_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB260_5:                              # %.preheader18
                                        #   Parent Loop BB260_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -16
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, -8
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $s8, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 26
	addi.d	$s8, $s8, 208
	blt	$s3, $s7, .LBB260_5
.LBB260_6:                              # %.loopexit19
                                        #   in Loop: Header=BB260_3 Depth=1
	bge	$s3, $s0, .LBB260_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB260_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB260_8:                              #   Parent Loop BB260_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB260_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB260_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB260_10:                             #   in Loop: Header=BB260_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB260_2
# %bb.11:                               #   in Loop: Header=BB260_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB260_2
.LBB260_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB260_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB260_16
.LBB260_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB260_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB260_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI260_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI260_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB260_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end260:
	.size	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end260-_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI261_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI261_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI261_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI261_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI261_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI261_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 56                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	blez	$a1, .LBB261_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -24
	addi.d	$a0, $s1, 192
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI261_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI261_0)
	pcalau12i	$a0, %pc_hi20(.LCPI261_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI261_1)
	pcalau12i	$a0, %pc_hi20(.LCPI261_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI261_2)
	pcalau12i	$a0, %pc_hi20(.LCPI261_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI261_3)
	pcalau12i	$a0, %pc_hi20(.LCPI261_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI261_4)
	ori	$fp, $zero, 25
	vldi	$vr3, -854
	pcalau12i	$s5, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s4, $zero
	b	.LBB261_3
	.p2align	4, , 16
.LBB261_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB261_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s4, $s4, 1
	bge	$s4, $a0, .LBB261_12
.LBB261_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB261_5 Depth 2
                                        #     Child Loop BB261_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 48
	fmov.d	$fa0, $fs0
	blt	$s0, $fp, .LBB261_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB261_3 Depth=1
	move	$s3, $zero
	ld.d	$s8, $sp, 32                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB261_5:                              # %.preheader18
                                        #   Parent Loop BB261_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 48
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fld.d	$fa0, $s8, -8
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fld.d	$fa1, $sp, 48
	fld.d	$fa2, $s8, 0
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fst.d	$fa0, $sp, 48
	addi.w	$s3, $s3, 25
	addi.d	$s8, $s8, 200
	blt	$s3, $s7, .LBB261_5
.LBB261_6:                              # %.loopexit19
                                        #   in Loop: Header=BB261_3 Depth=1
	bge	$s3, $s0, .LBB261_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB261_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB261_8:                              #   Parent Loop BB261_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB261_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB261_3 Depth=1
	fst.d	$fa0, $sp, 48
.LBB261_10:                             #   in Loop: Header=BB261_3 Depth=1
	fld.d	$fa1, $s5, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB261_2
# %bb.11:                               #   in Loop: Header=BB261_3 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB261_2
.LBB261_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 40                    # 8-byte Folded Reload
	beqz	$a2, .LBB261_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB261_16
.LBB261_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB261_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB261_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI261_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI261_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB261_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end261:
	.size	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end261-_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI262_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI262_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI262_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI262_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI262_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI262_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$a0, %pc_hi20(current_test)
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	blez	$a1, .LBB262_12
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -23
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI262_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI262_0)
	pcalau12i	$a0, %pc_hi20(.LCPI262_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI262_1)
	pcalau12i	$a0, %pc_hi20(.LCPI262_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI262_2)
	pcalau12i	$a0, %pc_hi20(.LCPI262_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI262_3)
	pcalau12i	$a0, %pc_hi20(.LCPI262_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI262_4)
	ori	$s8, $zero, 24
	vldi	$vr3, -854
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s5, $zero
	b	.LBB262_3
	.p2align	4, , 16
.LBB262_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB262_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB262_12
.LBB262_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_5 Depth 2
                                        #     Child Loop BB262_8 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	blt	$s0, $s8, .LBB262_6
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB262_3 Depth=1
	move	$s3, $zero
	ori	$s4, $zero, 184
	.p2align	4, , 16
.LBB262_5:                              # %.preheader18
                                        #   Parent Loop BB262_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	fldx.d	$fa0, $s1, $s4
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fld.d	$fa1, $sp, 32
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fs1
	fmadd.d	$fa0, $fa0, $fs2, $fa3
	fadd.d	$fa0, $fa1, $fa0
	fst.d	$fa0, $sp, 32
	addi.w	$s3, $s3, 24
	addi.d	$s4, $s4, 192
	blt	$s3, $s7, .LBB262_5
.LBB262_6:                              # %.loopexit19
                                        #   in Loop: Header=BB262_3 Depth=1
	bge	$s3, $s0, .LBB262_10
# %bb.7:                                # %.preheader
                                        #   in Loop: Header=BB262_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB262_8:                              #   Parent Loop BB262_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB262_8
# %bb.9:                                # %.loopexit
                                        #   in Loop: Header=BB262_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB262_10:                             #   in Loop: Header=BB262_3 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB262_2
# %bb.11:                               #   in Loop: Header=BB262_3 Depth=1
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	ld.w	$a1, $a0, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB262_2
.LBB262_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	ld.d	$s3, $sp, 24                    # 8-byte Folded Reload
	beqz	$a2, .LBB262_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB262_16
.LBB262_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB262_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB262_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI262_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI262_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB262_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end262:
	.size	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end262-_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI263_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI263_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI263_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI263_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI263_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI263_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s6, %pc_hi20(iterations)
	ld.w	$a1, $s6, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(current_test)
	blez	$a1, .LBB263_13
# %bb.1:                                # %.lr.ph
	addi.w	$s7, $s0, -22
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI263_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI263_0)
	pcalau12i	$a0, %pc_hi20(.LCPI263_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI263_1)
	pcalau12i	$a0, %pc_hi20(.LCPI263_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI263_2)
	pcalau12i	$a0, %pc_hi20(.LCPI263_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI263_3)
	pcalau12i	$a0, %pc_hi20(.LCPI263_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI263_4)
	ori	$s8, $zero, 23
	vldi	$vr3, -854
	pcalau12i	$fp, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s5, $zero
	b	.LBB263_3
	.p2align	4, , 16
.LBB263_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB263_3 Depth=1
	ld.w	$a0, $s6, %pc_lo12(iterations)
	addi.w	$s5, $s5, 1
	bge	$s5, $a0, .LBB263_13
.LBB263_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_5 Depth 2
                                        #     Child Loop BB263_9 Depth 2
	move	$s3, $zero
	st.d	$zero, $sp, 32
	fmov.d	$fa0, $fs0
	blt	$s0, $s8, .LBB263_7
# %bb.4:                                # %.preheader18.preheader
                                        #   in Loop: Header=BB263_3 Depth=1
	move	$s3, $zero
	.p2align	4, , 16
.LBB263_5:                              # %.preheader18
                                        #   Parent Loop BB263_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addi.d	$a0, $sp, 32
	move	$a1, $s1
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN15loop_inner_bodyILi23EdE7do_workERdPKdi)
	jirl	$ra, $ra, 0
	addi.w	$s3, $s3, 23
	blt	$s3, $s7, .LBB263_5
# %bb.6:                                # %.loopexit19.loopexit
                                        #   in Loop: Header=BB263_3 Depth=1
	fld.d	$fa0, $sp, 32
	vldi	$vr3, -854
.LBB263_7:                              # %.loopexit19
                                        #   in Loop: Header=BB263_3 Depth=1
	bge	$s3, $s0, .LBB263_11
# %bb.8:                                # %.preheader
                                        #   in Loop: Header=BB263_3 Depth=1
	alsl.d	$a0, $s3, $s1, 3
	sub.d	$a1, $s0, $s3
	.p2align	4, , 16
.LBB263_9:                              #   Parent Loop BB263_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a0, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB263_9
# %bb.10:                               # %.loopexit
                                        #   in Loop: Header=BB263_3 Depth=1
	fst.d	$fa0, $sp, 32
.LBB263_11:                             #   in Loop: Header=BB263_3 Depth=1
	fld.d	$fa1, $fp, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB263_2
# %bb.12:                               #   in Loop: Header=BB263_3 Depth=1
	ld.w	$a1, $s4, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB263_2
.LBB263_13:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB263_15
# %bb.14:                               # %._crit_edge
	ld.w	$a0, $s4, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB263_17
.LBB263_15:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB263_18
# %bb.16:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s4, %pc_lo12(current_test)
.LBB263_17:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI263_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI263_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s4, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB263_18:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end263:
	.size	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end263-_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI264_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI264_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI264_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI264_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI264_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI264_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB264_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -21
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 88
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI264_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI264_0)
	pcalau12i	$a0, %pc_hi20(.LCPI264_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI264_1)
	pcalau12i	$a0, %pc_hi20(.LCPI264_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI264_2)
	pcalau12i	$a0, %pc_hi20(.LCPI264_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI264_3)
	pcalau12i	$a0, %pc_hi20(.LCPI264_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI264_4)
	ori	$fp, $zero, 22
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB264_3
	.p2align	4, , 16
.LBB264_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB264_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB264_12
.LBB264_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB264_5 Depth 2
                                        #     Child Loop BB264_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB264_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB264_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB264_5:                              # %.preheader24
                                        #   Parent Loop BB264_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -88
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 22
	addi.d	$a0, $a0, 22
	addi.d	$a2, $a2, 176
	blt	$a1, $s6, .LBB264_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB264_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB264_8
	b	.LBB264_10
	.p2align	4, , 16
.LBB264_7:                              #   in Loop: Header=BB264_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB264_10
.LBB264_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB264_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB264_9:                              # %.preheader
                                        #   Parent Loop BB264_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB264_9
.LBB264_10:                             # %.loopexit
                                        #   in Loop: Header=BB264_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB264_2
# %bb.11:                               #   in Loop: Header=BB264_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB264_2
.LBB264_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB264_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB264_16
.LBB264_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB264_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB264_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI264_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI264_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB264_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end264:
	.size	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end264-_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI265_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI265_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI265_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI265_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI265_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI265_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB265_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -20
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI265_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI265_0)
	pcalau12i	$a0, %pc_hi20(.LCPI265_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI265_1)
	pcalau12i	$a0, %pc_hi20(.LCPI265_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI265_2)
	pcalau12i	$a0, %pc_hi20(.LCPI265_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI265_3)
	pcalau12i	$a0, %pc_hi20(.LCPI265_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI265_4)
	ori	$fp, $zero, 21
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB265_3
	.p2align	4, , 16
.LBB265_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB265_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB265_12
.LBB265_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB265_5 Depth 2
                                        #     Child Loop BB265_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB265_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB265_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB265_5:                              # %.preheader24
                                        #   Parent Loop BB265_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 21
	addi.d	$a0, $a0, 21
	addi.d	$a2, $a2, 168
	blt	$a1, $s6, .LBB265_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB265_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB265_8
	b	.LBB265_10
	.p2align	4, , 16
.LBB265_7:                              #   in Loop: Header=BB265_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB265_10
.LBB265_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB265_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB265_9:                              # %.preheader
                                        #   Parent Loop BB265_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB265_9
.LBB265_10:                             # %.loopexit
                                        #   in Loop: Header=BB265_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB265_2
# %bb.11:                               #   in Loop: Header=BB265_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB265_2
.LBB265_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB265_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB265_16
.LBB265_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB265_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB265_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI265_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI265_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB265_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end265:
	.size	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end265-_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI266_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI266_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI266_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI266_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI266_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI266_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB266_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -19
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 80
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI266_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI266_0)
	pcalau12i	$a0, %pc_hi20(.LCPI266_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI266_1)
	pcalau12i	$a0, %pc_hi20(.LCPI266_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI266_2)
	pcalau12i	$a0, %pc_hi20(.LCPI266_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI266_3)
	pcalau12i	$a0, %pc_hi20(.LCPI266_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI266_4)
	ori	$fp, $zero, 20
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB266_3
	.p2align	4, , 16
.LBB266_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB266_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB266_12
.LBB266_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_5 Depth 2
                                        #     Child Loop BB266_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB266_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB266_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB266_5:                              # %.preheader24
                                        #   Parent Loop BB266_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -80
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 20
	addi.d	$a0, $a0, 20
	addi.d	$a2, $a2, 160
	blt	$a1, $s6, .LBB266_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB266_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB266_8
	b	.LBB266_10
	.p2align	4, , 16
.LBB266_7:                              #   in Loop: Header=BB266_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB266_10
.LBB266_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB266_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB266_9:                              # %.preheader
                                        #   Parent Loop BB266_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB266_9
.LBB266_10:                             # %.loopexit
                                        #   in Loop: Header=BB266_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB266_2
# %bb.11:                               #   in Loop: Header=BB266_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB266_2
.LBB266_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB266_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB266_16
.LBB266_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB266_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB266_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI266_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI266_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB266_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end266:
	.size	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end266-_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI267_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI267_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI267_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI267_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI267_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI267_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB267_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -18
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI267_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI267_0)
	pcalau12i	$a0, %pc_hi20(.LCPI267_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI267_1)
	pcalau12i	$a0, %pc_hi20(.LCPI267_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI267_2)
	pcalau12i	$a0, %pc_hi20(.LCPI267_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI267_3)
	pcalau12i	$a0, %pc_hi20(.LCPI267_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI267_4)
	ori	$fp, $zero, 19
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB267_3
	.p2align	4, , 16
.LBB267_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB267_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB267_12
.LBB267_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_5 Depth 2
                                        #     Child Loop BB267_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB267_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB267_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB267_5:                              # %.preheader24
                                        #   Parent Loop BB267_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 19
	addi.d	$a0, $a0, 19
	addi.d	$a2, $a2, 152
	blt	$a1, $s6, .LBB267_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB267_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB267_8
	b	.LBB267_10
	.p2align	4, , 16
.LBB267_7:                              #   in Loop: Header=BB267_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB267_10
.LBB267_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB267_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB267_9:                              # %.preheader
                                        #   Parent Loop BB267_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB267_9
.LBB267_10:                             # %.loopexit
                                        #   in Loop: Header=BB267_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB267_2
# %bb.11:                               #   in Loop: Header=BB267_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB267_2
.LBB267_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB267_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB267_16
.LBB267_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB267_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB267_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI267_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI267_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB267_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end267:
	.size	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end267-_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi17EdE7do_testEPKdPKc,"axG",@progbits,_ZN15goto_loop_testsILi17EdE7do_testEPKdPKc,comdat
	.weak	_ZN15goto_loop_testsILi17EdE7do_testEPKdPKc # -- Begin function _ZN15goto_loop_testsILi17EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi17EdE7do_testEPKdPKc,@function
_ZN15goto_loop_testsILi17EdE7do_testEPKdPKc: # @_ZN15goto_loop_testsILi17EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN15goto_loop_testsILi9EdE7do_testEPKdPKc)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s1, $a0, %pc_lo12(temp_string)
	addi.d	$a2, $s1, 900
	lu12i.w	$a0, 1
	ori	$s0, $a0, 3904
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1000
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1100
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1200
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1300
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1400
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1500
	move	$a0, $fp
	move	$a1, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s1, 1600
	move	$a0, $fp
	move	$a1, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end268:
	.size	_ZN15goto_loop_testsILi17EdE7do_testEPKdPKc, .Lfunc_end268-_ZN15goto_loop_testsILi17EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI269_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI269_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI269_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI269_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI269_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI269_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB269_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -17
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 72
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI269_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI269_0)
	pcalau12i	$a0, %pc_hi20(.LCPI269_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI269_1)
	pcalau12i	$a0, %pc_hi20(.LCPI269_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI269_2)
	pcalau12i	$a0, %pc_hi20(.LCPI269_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI269_3)
	pcalau12i	$a0, %pc_hi20(.LCPI269_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI269_4)
	ori	$fp, $zero, 18
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB269_3
	.p2align	4, , 16
.LBB269_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB269_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB269_12
.LBB269_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_5 Depth 2
                                        #     Child Loop BB269_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB269_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB269_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB269_5:                              # %.preheader24
                                        #   Parent Loop BB269_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -72
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 18
	addi.d	$a0, $a0, 18
	addi.d	$a2, $a2, 144
	blt	$a1, $s6, .LBB269_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB269_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB269_8
	b	.LBB269_10
	.p2align	4, , 16
.LBB269_7:                              #   in Loop: Header=BB269_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB269_10
.LBB269_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB269_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB269_9:                              # %.preheader
                                        #   Parent Loop BB269_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB269_9
.LBB269_10:                             # %.loopexit
                                        #   in Loop: Header=BB269_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB269_2
# %bb.11:                               #   in Loop: Header=BB269_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB269_2
.LBB269_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB269_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB269_16
.LBB269_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB269_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB269_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI269_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI269_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB269_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end269:
	.size	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end269-_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI270_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI270_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI270_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI270_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI270_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI270_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB270_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -16
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI270_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI270_0)
	pcalau12i	$a0, %pc_hi20(.LCPI270_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI270_1)
	pcalau12i	$a0, %pc_hi20(.LCPI270_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI270_2)
	pcalau12i	$a0, %pc_hi20(.LCPI270_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI270_3)
	pcalau12i	$a0, %pc_hi20(.LCPI270_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI270_4)
	ori	$fp, $zero, 17
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB270_3
	.p2align	4, , 16
.LBB270_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB270_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB270_12
.LBB270_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB270_5 Depth 2
                                        #     Child Loop BB270_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB270_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB270_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB270_5:                              # %.preheader24
                                        #   Parent Loop BB270_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 17
	addi.d	$a0, $a0, 17
	addi.d	$a2, $a2, 136
	blt	$a1, $s6, .LBB270_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB270_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB270_8
	b	.LBB270_10
	.p2align	4, , 16
.LBB270_7:                              #   in Loop: Header=BB270_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB270_10
.LBB270_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB270_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB270_9:                              # %.preheader
                                        #   Parent Loop BB270_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB270_9
.LBB270_10:                             # %.loopexit
                                        #   in Loop: Header=BB270_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB270_2
# %bb.11:                               #   in Loop: Header=BB270_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB270_2
.LBB270_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB270_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB270_16
.LBB270_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB270_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB270_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI270_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI270_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB270_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end270:
	.size	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end270-_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI271_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI271_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI271_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI271_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI271_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI271_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB271_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -15
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 64
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI271_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI271_0)
	pcalau12i	$a0, %pc_hi20(.LCPI271_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI271_1)
	pcalau12i	$a0, %pc_hi20(.LCPI271_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI271_2)
	pcalau12i	$a0, %pc_hi20(.LCPI271_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI271_3)
	pcalau12i	$a0, %pc_hi20(.LCPI271_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI271_4)
	ori	$fp, $zero, 16
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB271_3
	.p2align	4, , 16
.LBB271_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB271_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB271_12
.LBB271_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB271_5 Depth 2
                                        #     Child Loop BB271_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB271_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB271_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB271_5:                              # %.preheader24
                                        #   Parent Loop BB271_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -64
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 16
	addi.d	$a0, $a0, 16
	addi.d	$a2, $a2, 128
	blt	$a1, $s6, .LBB271_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB271_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB271_8
	b	.LBB271_10
	.p2align	4, , 16
.LBB271_7:                              #   in Loop: Header=BB271_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB271_10
.LBB271_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB271_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB271_9:                              # %.preheader
                                        #   Parent Loop BB271_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB271_9
.LBB271_10:                             # %.loopexit
                                        #   in Loop: Header=BB271_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB271_2
# %bb.11:                               #   in Loop: Header=BB271_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB271_2
.LBB271_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB271_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB271_16
.LBB271_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB271_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB271_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI271_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI271_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB271_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end271:
	.size	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end271-_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI272_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI272_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI272_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI272_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI272_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI272_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB272_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -14
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI272_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI272_0)
	pcalau12i	$a0, %pc_hi20(.LCPI272_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI272_1)
	pcalau12i	$a0, %pc_hi20(.LCPI272_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI272_2)
	pcalau12i	$a0, %pc_hi20(.LCPI272_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI272_3)
	pcalau12i	$a0, %pc_hi20(.LCPI272_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI272_4)
	ori	$fp, $zero, 15
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB272_3
	.p2align	4, , 16
.LBB272_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB272_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB272_12
.LBB272_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_5 Depth 2
                                        #     Child Loop BB272_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB272_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB272_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB272_5:                              # %.preheader24
                                        #   Parent Loop BB272_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 15
	addi.d	$a0, $a0, 15
	addi.d	$a2, $a2, 120
	blt	$a1, $s6, .LBB272_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB272_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB272_8
	b	.LBB272_10
	.p2align	4, , 16
.LBB272_7:                              #   in Loop: Header=BB272_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB272_10
.LBB272_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB272_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB272_9:                              # %.preheader
                                        #   Parent Loop BB272_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB272_9
.LBB272_10:                             # %.loopexit
                                        #   in Loop: Header=BB272_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB272_2
# %bb.11:                               #   in Loop: Header=BB272_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB272_2
.LBB272_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB272_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB272_16
.LBB272_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB272_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB272_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI272_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI272_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB272_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end272:
	.size	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end272-_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI273_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI273_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI273_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI273_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI273_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI273_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB273_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -13
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 56
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI273_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI273_0)
	pcalau12i	$a0, %pc_hi20(.LCPI273_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI273_1)
	pcalau12i	$a0, %pc_hi20(.LCPI273_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI273_2)
	pcalau12i	$a0, %pc_hi20(.LCPI273_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI273_3)
	pcalau12i	$a0, %pc_hi20(.LCPI273_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI273_4)
	ori	$fp, $zero, 14
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB273_3
	.p2align	4, , 16
.LBB273_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB273_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB273_12
.LBB273_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB273_5 Depth 2
                                        #     Child Loop BB273_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB273_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB273_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB273_5:                              # %.preheader24
                                        #   Parent Loop BB273_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -56
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 14
	addi.d	$a0, $a0, 14
	addi.d	$a2, $a2, 112
	blt	$a1, $s6, .LBB273_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB273_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB273_8
	b	.LBB273_10
	.p2align	4, , 16
.LBB273_7:                              #   in Loop: Header=BB273_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB273_10
.LBB273_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB273_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB273_9:                              # %.preheader
                                        #   Parent Loop BB273_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB273_9
.LBB273_10:                             # %.loopexit
                                        #   in Loop: Header=BB273_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB273_2
# %bb.11:                               #   in Loop: Header=BB273_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB273_2
.LBB273_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB273_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB273_16
.LBB273_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB273_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB273_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI273_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI273_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB273_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end273:
	.size	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end273-_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI274_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI274_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI274_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI274_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI274_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI274_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB274_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -12
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI274_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI274_0)
	pcalau12i	$a0, %pc_hi20(.LCPI274_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI274_1)
	pcalau12i	$a0, %pc_hi20(.LCPI274_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI274_2)
	pcalau12i	$a0, %pc_hi20(.LCPI274_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI274_3)
	pcalau12i	$a0, %pc_hi20(.LCPI274_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI274_4)
	ori	$fp, $zero, 13
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB274_3
	.p2align	4, , 16
.LBB274_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB274_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB274_12
.LBB274_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB274_5 Depth 2
                                        #     Child Loop BB274_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB274_7
# %bb.4:                                # %.preheader24.preheader
                                        #   in Loop: Header=BB274_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB274_5:                              # %.preheader24
                                        #   Parent Loop BB274_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 13
	addi.d	$a0, $a0, 13
	addi.d	$a2, $a2, 104
	blt	$a1, $s6, .LBB274_5
# %bb.6:                                # %.loopexit25
                                        #   in Loop: Header=BB274_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB274_8
	b	.LBB274_10
	.p2align	4, , 16
.LBB274_7:                              #   in Loop: Header=BB274_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB274_10
.LBB274_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB274_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB274_9:                              # %.preheader
                                        #   Parent Loop BB274_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB274_9
.LBB274_10:                             # %.loopexit
                                        #   in Loop: Header=BB274_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB274_2
# %bb.11:                               #   in Loop: Header=BB274_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB274_2
.LBB274_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB274_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB274_16
.LBB274_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB274_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB274_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI274_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI274_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB274_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end274:
	.size	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end274-_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI275_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI275_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI275_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI275_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI275_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI275_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB275_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -11
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 48
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI275_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI275_0)
	pcalau12i	$a0, %pc_hi20(.LCPI275_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI275_1)
	pcalau12i	$a0, %pc_hi20(.LCPI275_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI275_2)
	pcalau12i	$a0, %pc_hi20(.LCPI275_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI275_3)
	pcalau12i	$a0, %pc_hi20(.LCPI275_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI275_4)
	ori	$fp, $zero, 12
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB275_3
	.p2align	4, , 16
.LBB275_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB275_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB275_12
.LBB275_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_5 Depth 2
                                        #     Child Loop BB275_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB275_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB275_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB275_5:                              # %.preheader23
                                        #   Parent Loop BB275_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -48
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 12
	addi.d	$a0, $a0, 12
	addi.d	$a2, $a2, 96
	blt	$a1, $s6, .LBB275_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB275_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB275_8
	b	.LBB275_10
	.p2align	4, , 16
.LBB275_7:                              #   in Loop: Header=BB275_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB275_10
.LBB275_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB275_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB275_9:                              # %.preheader
                                        #   Parent Loop BB275_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB275_9
.LBB275_10:                             # %.loopexit
                                        #   in Loop: Header=BB275_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB275_2
# %bb.11:                               #   in Loop: Header=BB275_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB275_2
.LBB275_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB275_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB275_16
.LBB275_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB275_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB275_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI275_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI275_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB275_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end275:
	.size	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end275-_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI276_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI276_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI276_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI276_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI276_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI276_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB276_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -10
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI276_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI276_0)
	pcalau12i	$a0, %pc_hi20(.LCPI276_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI276_1)
	pcalau12i	$a0, %pc_hi20(.LCPI276_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI276_2)
	pcalau12i	$a0, %pc_hi20(.LCPI276_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI276_3)
	pcalau12i	$a0, %pc_hi20(.LCPI276_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI276_4)
	ori	$fp, $zero, 11
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s7, $zero
	b	.LBB276_3
	.p2align	4, , 16
.LBB276_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB276_3 Depth=1
	ld.w	$a0, $s5, %pc_lo12(iterations)
	addi.w	$s7, $s7, 1
	bge	$s7, $a0, .LBB276_12
.LBB276_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_5 Depth 2
                                        #     Child Loop BB276_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB276_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB276_3 Depth=1
	move	$a1, $zero
	move	$a2, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB276_5:                              # %.preheader23
                                        #   Parent Loop BB276_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a2, 40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a1, $a1, 11
	addi.d	$a0, $a0, 11
	addi.d	$a2, $a2, 88
	blt	$a1, $s6, .LBB276_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB276_3 Depth=1
	addi.w	$a1, $a0, 0
	blt	$a1, $s0, .LBB276_8
	b	.LBB276_10
	.p2align	4, , 16
.LBB276_7:                              #   in Loop: Header=BB276_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a1, $a0, 0
	bge	$a1, $s0, .LBB276_10
.LBB276_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB276_3 Depth=1
	alsl.d	$a1, $a0, $s1, 3
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a2, $a0
	.p2align	4, , 16
.LBB276_9:                              # %.preheader
                                        #   Parent Loop BB276_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a1, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 8
	bnez	$a0, .LBB276_9
.LBB276_10:                             # %.loopexit
                                        #   in Loop: Header=BB276_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB276_2
# %bb.11:                               #   in Loop: Header=BB276_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	b	.LBB276_2
.LBB276_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB276_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB276_16
.LBB276_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB276_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB276_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI276_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI276_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB276_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end276:
	.size	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end276-_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15goto_loop_testsILi9EdE7do_testEPKdPKc,"axG",@progbits,_ZN15goto_loop_testsILi9EdE7do_testEPKdPKc,comdat
	.weak	_ZN15goto_loop_testsILi9EdE7do_testEPKdPKc # -- Begin function _ZN15goto_loop_testsILi9EdE7do_testEPKdPKc
	.p2align	5
	.type	_ZN15goto_loop_testsILi9EdE7do_testEPKdPKc,@function
_ZN15goto_loop_testsILi9EdE7do_testEPKdPKc: # @_ZN15goto_loop_testsILi9EdE7do_testEPKdPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(temp_string)
	addi.d	$s0, $a0, %pc_lo12(temp_string)
	lu12i.w	$a0, 1
	ori	$s1, $a0, 3904
	move	$a0, $fp
	move	$a1, $s1
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 100
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 200
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 300
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 400
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 500
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 600
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 700
	move	$a0, $fp
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc)
	jirl	$ra, $ra, 0
	addi.d	$a2, $s0, 800
	move	$a0, $fp
	move	$a1, $s1
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc)
	jr	$t8
.Lfunc_end277:
	.size	_ZN15goto_loop_testsILi9EdE7do_testEPKdPKc, .Lfunc_end277-_ZN15goto_loop_testsILi9EdE7do_testEPKdPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI278_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI278_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI278_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI278_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI278_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI278_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB278_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -9
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 40
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI278_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI278_0)
	pcalau12i	$a0, %pc_hi20(.LCPI278_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI278_1)
	pcalau12i	$a0, %pc_hi20(.LCPI278_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI278_2)
	pcalau12i	$a0, %pc_hi20(.LCPI278_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI278_3)
	pcalau12i	$a0, %pc_hi20(.LCPI278_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI278_4)
	ori	$fp, $zero, 10
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB278_3
	.p2align	4, , 16
.LBB278_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB278_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB278_12
.LBB278_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_5 Depth 2
                                        #     Child Loop BB278_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB278_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB278_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB278_5:                              # %.preheader23
                                        #   Parent Loop BB278_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -40
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 10
	addi.d	$a0, $a0, 10
	addi.d	$a3, $a3, 80
	blt	$a2, $s6, .LBB278_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB278_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB278_8
	b	.LBB278_10
	.p2align	4, , 16
.LBB278_7:                              #   in Loop: Header=BB278_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB278_10
.LBB278_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB278_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB278_9:                              # %.preheader
                                        #   Parent Loop BB278_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB278_9
.LBB278_10:                             # %.loopexit
                                        #   in Loop: Header=BB278_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB278_2
# %bb.11:                               #   in Loop: Header=BB278_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB278_2
.LBB278_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB278_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB278_16
.LBB278_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB278_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB278_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI278_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI278_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB278_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end278:
	.size	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end278-_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI279_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI279_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI279_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI279_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI279_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI279_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB279_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -8
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI279_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI279_0)
	pcalau12i	$a0, %pc_hi20(.LCPI279_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI279_1)
	pcalau12i	$a0, %pc_hi20(.LCPI279_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI279_2)
	pcalau12i	$a0, %pc_hi20(.LCPI279_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI279_3)
	pcalau12i	$a0, %pc_hi20(.LCPI279_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI279_4)
	ori	$fp, $zero, 9
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB279_3
	.p2align	4, , 16
.LBB279_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB279_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB279_12
.LBB279_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_5 Depth 2
                                        #     Child Loop BB279_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB279_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB279_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB279_5:                              # %.preheader23
                                        #   Parent Loop BB279_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 9
	addi.d	$a0, $a0, 9
	addi.d	$a3, $a3, 72
	blt	$a2, $s6, .LBB279_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB279_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB279_8
	b	.LBB279_10
	.p2align	4, , 16
.LBB279_7:                              #   in Loop: Header=BB279_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB279_10
.LBB279_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB279_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB279_9:                              # %.preheader
                                        #   Parent Loop BB279_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB279_9
.LBB279_10:                             # %.loopexit
                                        #   in Loop: Header=BB279_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB279_2
# %bb.11:                               #   in Loop: Header=BB279_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB279_2
.LBB279_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB279_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB279_16
.LBB279_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB279_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB279_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI279_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI279_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB279_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end279:
	.size	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end279-_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI280_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI280_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI280_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI280_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI280_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI280_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB280_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -7
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 32
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI280_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI280_0)
	pcalau12i	$a0, %pc_hi20(.LCPI280_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI280_1)
	pcalau12i	$a0, %pc_hi20(.LCPI280_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI280_2)
	pcalau12i	$a0, %pc_hi20(.LCPI280_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI280_3)
	pcalau12i	$a0, %pc_hi20(.LCPI280_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI280_4)
	ori	$fp, $zero, 8
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB280_3
	.p2align	4, , 16
.LBB280_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB280_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB280_12
.LBB280_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB280_5 Depth 2
                                        #     Child Loop BB280_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB280_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB280_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB280_5:                              # %.preheader23
                                        #   Parent Loop BB280_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -32
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 8
	addi.d	$a0, $a0, 8
	addi.d	$a3, $a3, 64
	blt	$a2, $s6, .LBB280_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB280_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB280_8
	b	.LBB280_10
	.p2align	4, , 16
.LBB280_7:                              #   in Loop: Header=BB280_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB280_10
.LBB280_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB280_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB280_9:                              # %.preheader
                                        #   Parent Loop BB280_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB280_9
.LBB280_10:                             # %.loopexit
                                        #   in Loop: Header=BB280_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB280_2
# %bb.11:                               #   in Loop: Header=BB280_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB280_2
.LBB280_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB280_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB280_16
.LBB280_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB280_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB280_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI280_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI280_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB280_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end280:
	.size	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end280-_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI281_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI281_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI281_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI281_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI281_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI281_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB281_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -6
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI281_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI281_0)
	pcalau12i	$a0, %pc_hi20(.LCPI281_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI281_1)
	pcalau12i	$a0, %pc_hi20(.LCPI281_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI281_2)
	pcalau12i	$a0, %pc_hi20(.LCPI281_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI281_3)
	pcalau12i	$a0, %pc_hi20(.LCPI281_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI281_4)
	ori	$fp, $zero, 7
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB281_3
	.p2align	4, , 16
.LBB281_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB281_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB281_12
.LBB281_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_5 Depth 2
                                        #     Child Loop BB281_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB281_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB281_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB281_5:                              # %.preheader23
                                        #   Parent Loop BB281_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 7
	addi.d	$a0, $a0, 7
	addi.d	$a3, $a3, 56
	blt	$a2, $s6, .LBB281_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB281_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB281_8
	b	.LBB281_10
	.p2align	4, , 16
.LBB281_7:                              #   in Loop: Header=BB281_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB281_10
.LBB281_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB281_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB281_9:                              # %.preheader
                                        #   Parent Loop BB281_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB281_9
.LBB281_10:                             # %.loopexit
                                        #   in Loop: Header=BB281_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB281_2
# %bb.11:                               #   in Loop: Header=BB281_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB281_2
.LBB281_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB281_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB281_16
.LBB281_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB281_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB281_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI281_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI281_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB281_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end281:
	.size	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end281-_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI282_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI282_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI282_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI282_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI282_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI282_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB282_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -5
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 24
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI282_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI282_0)
	pcalau12i	$a0, %pc_hi20(.LCPI282_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI282_1)
	pcalau12i	$a0, %pc_hi20(.LCPI282_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI282_2)
	pcalau12i	$a0, %pc_hi20(.LCPI282_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI282_3)
	pcalau12i	$a0, %pc_hi20(.LCPI282_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI282_4)
	ori	$fp, $zero, 6
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB282_3
	.p2align	4, , 16
.LBB282_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB282_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB282_12
.LBB282_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB282_5 Depth 2
                                        #     Child Loop BB282_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB282_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB282_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB282_5:                              # %.preheader23
                                        #   Parent Loop BB282_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -24
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 6
	addi.d	$a3, $a3, 48
	addi.d	$a0, $a0, 6
	blt	$a2, $s6, .LBB282_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB282_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB282_8
	b	.LBB282_10
	.p2align	4, , 16
.LBB282_7:                              #   in Loop: Header=BB282_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB282_10
.LBB282_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB282_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB282_9:                              # %.preheader
                                        #   Parent Loop BB282_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB282_9
.LBB282_10:                             # %.loopexit
                                        #   in Loop: Header=BB282_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB282_2
# %bb.11:                               #   in Loop: Header=BB282_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB282_2
.LBB282_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB282_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB282_16
.LBB282_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB282_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB282_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI282_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI282_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB282_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end282:
	.size	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end282-_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI283_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI283_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI283_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI283_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI283_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI283_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB283_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -4
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI283_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI283_0)
	pcalau12i	$a0, %pc_hi20(.LCPI283_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI283_1)
	pcalau12i	$a0, %pc_hi20(.LCPI283_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI283_2)
	pcalau12i	$a0, %pc_hi20(.LCPI283_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI283_3)
	pcalau12i	$a0, %pc_hi20(.LCPI283_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI283_4)
	ori	$fp, $zero, 5
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB283_3
	.p2align	4, , 16
.LBB283_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB283_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB283_12
.LBB283_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_5 Depth 2
                                        #     Child Loop BB283_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB283_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB283_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB283_5:                              # %.preheader23
                                        #   Parent Loop BB283_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 5
	addi.d	$a3, $a3, 40
	addi.d	$a0, $a0, 5
	blt	$a2, $s6, .LBB283_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB283_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB283_8
	b	.LBB283_10
	.p2align	4, , 16
.LBB283_7:                              #   in Loop: Header=BB283_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB283_10
.LBB283_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB283_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB283_9:                              # %.preheader
                                        #   Parent Loop BB283_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB283_9
.LBB283_10:                             # %.loopexit
                                        #   in Loop: Header=BB283_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB283_2
# %bb.11:                               #   in Loop: Header=BB283_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB283_2
.LBB283_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB283_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB283_16
.LBB283_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB283_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB283_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI283_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI283_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB283_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end283:
	.size	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end283-_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI284_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI284_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI284_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI284_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI284_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI284_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB284_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -3
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI284_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI284_0)
	pcalau12i	$a0, %pc_hi20(.LCPI284_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI284_1)
	pcalau12i	$a0, %pc_hi20(.LCPI284_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI284_2)
	pcalau12i	$a0, %pc_hi20(.LCPI284_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI284_3)
	pcalau12i	$a0, %pc_hi20(.LCPI284_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI284_4)
	ori	$fp, $zero, 4
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB284_3
	.p2align	4, , 16
.LBB284_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB284_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB284_12
.LBB284_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_5 Depth 2
                                        #     Child Loop BB284_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB284_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB284_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB284_5:                              # %.preheader23
                                        #   Parent Loop BB284_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 4
	addi.d	$a3, $a3, 32
	addi.d	$a0, $a0, 4
	blt	$a2, $s6, .LBB284_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB284_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB284_8
	b	.LBB284_10
	.p2align	4, , 16
.LBB284_7:                              #   in Loop: Header=BB284_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB284_10
.LBB284_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB284_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB284_9:                              # %.preheader
                                        #   Parent Loop BB284_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB284_9
.LBB284_10:                             # %.loopexit
                                        #   in Loop: Header=BB284_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB284_2
# %bb.11:                               #   in Loop: Header=BB284_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB284_2
.LBB284_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB284_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB284_16
.LBB284_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB284_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB284_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI284_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI284_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB284_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end284:
	.size	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end284-_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI285_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI285_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI285_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI285_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI285_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI285_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s7, %pc_hi20(current_test)
	blez	$a1, .LBB285_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -2
	bstrpick.d	$a0, $s0, 31, 0
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s8, $s1, 16
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI285_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI285_0)
	pcalau12i	$a0, %pc_hi20(.LCPI285_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI285_1)
	pcalau12i	$a0, %pc_hi20(.LCPI285_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI285_2)
	pcalau12i	$a0, %pc_hi20(.LCPI285_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI285_3)
	pcalau12i	$a0, %pc_hi20(.LCPI285_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI285_4)
	ori	$fp, $zero, 3
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB285_3
	.p2align	4, , 16
.LBB285_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB285_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB285_12
.LBB285_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB285_5 Depth 2
                                        #     Child Loop BB285_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB285_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB285_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB285_5:                              # %.preheader23
                                        #   Parent Loop BB285_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -16
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 3
	addi.d	$a3, $a3, 24
	addi.d	$a0, $a0, 3
	blt	$a2, $s6, .LBB285_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB285_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB285_8
	b	.LBB285_10
	.p2align	4, , 16
.LBB285_7:                              #   in Loop: Header=BB285_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB285_10
.LBB285_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB285_3 Depth=1
	alsl.d	$a2, $a0, $s1, 3
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	sub.d	$a0, $a3, $a0
	.p2align	4, , 16
.LBB285_9:                              # %.preheader
                                        #   Parent Loop BB285_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB285_9
.LBB285_10:                             # %.loopexit
                                        #   in Loop: Header=BB285_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB285_2
# %bb.11:                               #   in Loop: Header=BB285_3 Depth=1
	ld.w	$a1, $s7, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB285_2
.LBB285_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s1, %pc_hi20(allocated_results)
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB285_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s7, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB285_16
.LBB285_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s1, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB285_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s7, %pc_lo12(current_test)
.LBB285_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI285_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI285_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s7, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB285_17:
	ld.w	$a1, $s1, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end285:
	.size	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end285-_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI286_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI286_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI286_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI286_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI286_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI286_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	st.d	$a2, $sp, 16                    # 8-byte Folded Spill
	move	$s0, $a1
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$a2, %pc_hi20(start_time)
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	st.d	$a0, $a2, %pc_lo12(start_time)
	pcalau12i	$s1, %pc_hi20(current_test)
	blez	$a1, .LBB286_12
# %bb.1:                                # %.lr.ph
	addi.w	$s6, $s0, -1
	bstrpick.d	$s7, $s0, 31, 0
	ld.d	$a0, $sp, 32                    # 8-byte Folded Reload
	addi.d	$s8, $a0, 8
	movgr2fr.d	$fs0, $zero
	pcalau12i	$a0, %pc_hi20(.LCPI286_0)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI286_0)
	pcalau12i	$a0, %pc_hi20(.LCPI286_1)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI286_1)
	pcalau12i	$a0, %pc_hi20(.LCPI286_2)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI286_2)
	pcalau12i	$a0, %pc_hi20(.LCPI286_3)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI286_3)
	pcalau12i	$a0, %pc_hi20(.LCPI286_4)
	fld.d	$fs5, $a0, %pc_lo12(.LCPI286_4)
	ori	$fp, $zero, 2
	vldi	$vr3, -854
	pcalau12i	$s4, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s3, $zero
	b	.LBB286_3
	.p2align	4, , 16
.LBB286_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB286_3 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a1, .LBB286_12
.LBB286_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_5 Depth 2
                                        #     Child Loop BB286_9 Depth 2
	move	$a0, $zero
	blt	$s0, $fp, .LBB286_7
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB286_3 Depth=1
	move	$a2, $zero
	move	$a3, $s8
	fmov.d	$fa0, $fs0
	.p2align	4, , 16
.LBB286_5:                              # %.preheader23
                                        #   Parent Loop BB286_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a3, -8
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fld.d	$fa2, $a3, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	fadd.d	$fa1, $fa2, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a2, $a2, 2
	addi.d	$a3, $a3, 16
	addi.d	$a0, $a0, 2
	blt	$a2, $s6, .LBB286_5
# %bb.6:                                # %.loopexit24
                                        #   in Loop: Header=BB286_3 Depth=1
	addi.w	$a2, $a0, 0
	blt	$a2, $s0, .LBB286_8
	b	.LBB286_10
	.p2align	4, , 16
.LBB286_7:                              #   in Loop: Header=BB286_3 Depth=1
	fmov.d	$fa0, $fs0
	addi.w	$a2, $a0, 0
	bge	$a2, $s0, .LBB286_10
.LBB286_8:                              # %.preheader.preheader
                                        #   in Loop: Header=BB286_3 Depth=1
	ld.d	$a2, $sp, 32                    # 8-byte Folded Reload
	alsl.d	$a2, $a0, $a2, 3
	sub.d	$a0, $s7, $a0
	.p2align	4, , 16
.LBB286_9:                              # %.preheader
                                        #   Parent Loop BB286_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB286_9
.LBB286_10:                             # %.loopexit
                                        #   in Loop: Header=BB286_3 Depth=1
	fld.d	$fa1, $s4, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fadd.d	$fa1, $fa1, $fs1
	fmadd.d	$fa1, $fa1, $fs2, $fa3
	fmul.d	$fa1, $fa1, $fs3
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs4, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs5
	bcnez	$fcc0, .LBB286_2
# %bb.11:                               #   in Loop: Header=BB286_3 Depth=1
	ld.w	$a1, $s1, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB286_2
.LBB286_12:                             # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $a1, %pc_lo12(start_time)
	pcalau12i	$s2, %pc_hi20(results)
	ld.d	$a2, $s2, %pc_lo12(results)
	pcalau12i	$s3, %pc_hi20(allocated_results)
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB286_14
# %bb.13:                               # %._crit_edge
	ld.w	$a0, $s1, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB286_16
.LBB286_14:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s3, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s2, %pc_lo12(results)
	beqz	$a0, .LBB286_17
# %bb.15:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s1, %pc_lo12(current_test)
.LBB286_16:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI286_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI286_5)
	sub.d	$a1, $s0, $fp
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	ld.d	$a2, $sp, 16                    # 8-byte Folded Reload
	st.d	$a2, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s1, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB286_17:
	ld.w	$a1, $s3, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end286:
	.size	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end286-_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function _Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI287_0:
	.dword	0x40c81c8000000000              # double 12345
.LCPI287_1:
	.dword	0x412be67a00000000              # double 914237
.LCPI287_2:
	.dword	0xc0bf400000000000              # double -8000
.LCPI287_3:
	.dword	0x3e45798ee2308c3a              # double 1.0E-8
.LCPI287_4:
	.dword	0x3eb0c6f7a0b5ed8d              # double 9.9999999999999995E-7
.LCPI287_5:
	.dword	0x412e848000000000              # double 1.0E+6
	.section	.text._Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	5
	.type	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc: # @_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	move	$fp, $a2
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	pcalau12i	$s5, %pc_hi20(iterations)
	ld.w	$a1, $s5, %pc_lo12(iterations)
	pcalau12i	$s4, %pc_hi20(start_time)
	st.d	$a0, $s4, %pc_lo12(start_time)
	pcalau12i	$s3, %pc_hi20(current_test)
	blez	$a1, .LBB287_8
# %bb.1:                                # %.lr.ph
	bstrpick.d	$s6, $s0, 31, 0
	pcalau12i	$a0, %pc_hi20(.LCPI287_0)
	fld.d	$fs0, $a0, %pc_lo12(.LCPI287_0)
	pcalau12i	$a0, %pc_hi20(.LCPI287_1)
	fld.d	$fs1, $a0, %pc_lo12(.LCPI287_1)
	pcalau12i	$a0, %pc_hi20(.LCPI287_2)
	fld.d	$fs2, $a0, %pc_lo12(.LCPI287_2)
	pcalau12i	$a0, %pc_hi20(.LCPI287_3)
	fld.d	$fs3, $a0, %pc_lo12(.LCPI287_3)
	pcalau12i	$a0, %pc_hi20(.LCPI287_4)
	fld.d	$fs4, $a0, %pc_lo12(.LCPI287_4)
	movgr2fr.d	$fs5, $zero
	vldi	$vr3, -854
	pcalau12i	$s7, %pc_hi20(init_value)
	pcalau12i	$a0, %pc_hi20(.L.str.19)
	addi.d	$s2, $a0, %pc_lo12(.L.str.19)
	move	$s8, $zero
	b	.LBB287_3
	.p2align	4, , 16
.LBB287_2:                              # %_Z9check_sumIdEvT_.exit
                                        #   in Loop: Header=BB287_3 Depth=1
	addi.w	$s8, $s8, 1
	bge	$s8, $a1, .LBB287_8
.LBB287_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_5 Depth 2
	fmov.d	$fa0, $fs5
	blez	$s0, .LBB287_6
# %bb.4:                                # %.preheader23.preheader
                                        #   in Loop: Header=BB287_3 Depth=1
	move	$a0, $s6
	move	$a2, $s1
	fmov.d	$fa0, $fs5
	.p2align	4, , 16
.LBB287_5:                              # %.preheader23
                                        #   Parent Loop BB287_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.d	$fa1, $a2, 0
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 8
	bnez	$a0, .LBB287_5
.LBB287_6:                              # %.loopexit
                                        #   in Loop: Header=BB287_3 Depth=1
	fld.d	$fa1, $s7, %pc_lo12(init_value)
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fadd.d	$fa1, $fa1, $fs0
	fmadd.d	$fa1, $fa1, $fs1, $fa3
	fmul.d	$fa1, $fa1, $fs2
	fadd.d	$fa1, $fa0, $fa1
	fabs.d	$fa2, $fa0
	fdiv.d	$fa0, $fa1, $fa0
	fcmp.clt.d	$fcc0, $fs3, $fa2
	fsel	$fa0, $fa1, $fa0, $fcc0
	fabs.d	$fa0, $fa0
	fcmp.clt.d	$fcc0, $fa0, $fs4
	bcnez	$fcc0, .LBB287_2
# %bb.7:                                #   in Loop: Header=BB287_3 Depth=1
	ld.w	$a1, $s3, %pc_lo12(current_test)
	move	$a0, $s2
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	vldi	$vr3, -854
	ld.w	$a1, $s5, %pc_lo12(iterations)
	b	.LBB287_2
.LBB287_8:                              # %._crit_edge
	pcaddu18i	$ra, %call36(clock)
	jirl	$ra, $ra, 0
	ld.d	$s1, $s4, %pc_lo12(start_time)
	pcalau12i	$s4, %pc_hi20(results)
	ld.d	$a2, $s4, %pc_lo12(results)
	pcalau12i	$s2, %pc_hi20(allocated_results)
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(end_time)
	st.d	$s0, $a0, %pc_lo12(end_time)
	beqz	$a2, .LBB287_10
# %bb.9:                                # %._crit_edge
	ld.w	$a0, $s3, %pc_lo12(current_test)
	blt	$a0, $a1, .LBB287_12
.LBB287_10:
	addi.w	$a0, $a1, 10
	st.w	$a0, $s2, %pc_lo12(allocated_results)
	slli.d	$a1, $a0, 4
	move	$a0, $a2
	pcaddu18i	$ra, %call36(realloc)
	jirl	$ra, $ra, 0
	st.d	$a0, $s4, %pc_lo12(results)
	beqz	$a0, .LBB287_13
# %bb.11:                               # %._crit_edge.i
	move	$a2, $a0
	ld.w	$a0, $s3, %pc_lo12(current_test)
.LBB287_12:                             # %_Z13record_resultdPKc.exit
	pcalau12i	$a1, %pc_hi20(.LCPI287_5)
	fld.d	$fa0, $a1, %pc_lo12(.LCPI287_5)
	sub.d	$a1, $s0, $s1
	movgr2fr.d	$fa1, $a1
	ffint.d.l	$fa1, $fa1
	fdiv.d	$fa0, $fa1, $fa0
	alsl.d	$a1, $a0, $a2, 4
	slli.d	$a3, $a0, 4
	fstx.d	$fa0, $a2, $a3
	st.d	$fp, $a1, 8
	addi.d	$a0, $a0, 1
	st.w	$a0, $s3, %pc_lo12(current_test)
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB287_13:
	ld.w	$a1, $s2, %pc_lo12(allocated_results)
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(printf)
	jirl	$ra, $ra, 0
	addi.w	$a0, $zero, -1
	pcaddu18i	$ra, %call36(exit)
	jirl	$ra, $ra, 0
.Lfunc_end287:
	.size	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end287-_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        # -- End function
	.type	results,@object                 # @results
	.bss
	.globl	results
	.p2align	3, 0x0
results:
	.dword	0
	.size	results, 8

	.type	current_test,@object            # @current_test
	.globl	current_test
	.p2align	2, 0x0
current_test:
	.word	0                               # 0x0
	.size	current_test, 4

	.type	allocated_results,@object       # @allocated_results
	.globl	allocated_results
	.p2align	2, 0x0
allocated_results:
	.word	0                               # 0x0
	.size	allocated_results, 4

	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Could not allocate %d results\n"
	.size	.L.str, 31

	.type	.L.str.1,@object                # @.str.1
.L.str.1:
	.asciz	"\ntest %*s description   absolute   operations   ratio with\n"
	.size	.L.str.1, 60

	.type	.L.str.2,@object                # @.str.2
.L.str.2:
	.asciz	" "
	.size	.L.str.2, 2

	.type	.L.str.3,@object                # @.str.3
.L.str.3:
	.asciz	"number %*s time       per second   test0\n\n"
	.size	.L.str.3, 43

	.type	.L.str.4,@object                # @.str.4
.L.str.4:
	.asciz	"%2i %*s\"%s\"  %5.2f sec   %5.2f M     %.2f\n"
	.size	.L.str.4, 43

	.type	.L.str.5,@object                # @.str.5
.L.str.5:
	.space	1
	.size	.L.str.5, 1

	.type	.L.str.6,@object                # @.str.6
.L.str.6:
	.asciz	"\nTotal absolute time for %s: %.2f sec\n"
	.size	.L.str.6, 39

	.type	.L.str.7,@object                # @.str.7
.L.str.7:
	.asciz	"\n%s Penalty: %.2f\n\n"
	.size	.L.str.7, 20

	.type	.L.str.8,@object                # @.str.8
.L.str.8:
	.asciz	"\ntest %*s description   absolute\n"
	.size	.L.str.8, 34

	.type	.L.str.9,@object                # @.str.9
.L.str.9:
	.asciz	"number %*s time\n\n"
	.size	.L.str.9, 18

	.type	.L.str.10,@object               # @.str.10
.L.str.10:
	.asciz	"%2i %*s\"%s\"  %5.2f sec\n"
	.size	.L.str.10, 24

	.type	start_time,@object              # @start_time
	.bss
	.globl	start_time
	.p2align	3, 0x0
start_time:
	.dword	0                               # 0x0
	.size	start_time, 8

	.type	end_time,@object                # @end_time
	.globl	end_time
	.p2align	3, 0x0
end_time:
	.dword	0                               # 0x0
	.size	end_time, 8

	.type	iterations,@object              # @iterations
	.data
	.globl	iterations
	.p2align	2, 0x0
iterations:
	.word	1000                            # 0x3e8
	.size	iterations, 4

	.type	init_value,@object              # @init_value
	.globl	init_value
	.p2align	3, 0x0
init_value:
	.dword	0x3ff0000000000000              # double 1
	.size	init_value, 8

	.type	dataDouble,@object              # @dataDouble
	.bss
	.globl	dataDouble
	.p2align	3, 0x0
dataDouble:
	.space	64000
	.size	dataDouble, 64000

	.type	data32,@object                  # @data32
	.globl	data32
	.p2align	2, 0x0
data32:
	.space	32000
	.size	data32, 32000

	.type	temp_string,@object             # @temp_string
	.globl	temp_string
temp_string:
	.space	3200
	.size	temp_string, 3200

	.type	.L.str.11,@object               # @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"int32_t for loop unroll"
	.size	.L.str.11, 24

	.type	.L.str.12,@object               # @.str.12
.L.str.12:
	.asciz	"int32_t while loop unroll"
	.size	.L.str.12, 26

	.type	.L.str.13,@object               # @.str.13
.L.str.13:
	.asciz	"int32_t do loop unroll"
	.size	.L.str.13, 23

	.type	.L.str.14,@object               # @.str.14
.L.str.14:
	.asciz	"int32_t goto loop unroll"
	.size	.L.str.14, 25

	.type	.L.str.15,@object               # @.str.15
.L.str.15:
	.asciz	"double for loop unroll"
	.size	.L.str.15, 23

	.type	.L.str.16,@object               # @.str.16
.L.str.16:
	.asciz	"double while loop unroll"
	.size	.L.str.16, 25

	.type	.L.str.17,@object               # @.str.17
.L.str.17:
	.asciz	"double do loop unroll"
	.size	.L.str.17, 22

	.type	.L.str.18,@object               # @.str.18
.L.str.18:
	.asciz	"double goto loop unroll"
	.size	.L.str.18, 24

	.type	.L.str.19,@object               # @.str.19
.L.str.19:
	.asciz	"test %i failed\n"
	.size	.L.str.19, 16

	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym dataDouble
	.addrsig_sym data32
	.addrsig_sym temp_string
