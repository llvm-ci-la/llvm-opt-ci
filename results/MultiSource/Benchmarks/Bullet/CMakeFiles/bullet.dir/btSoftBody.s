	.file	"btSoftBody.cpp"
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf
.LCPI0_0:
	.word	0x3e4ccccd                      # float 0.200000003
	.word	0x00000000                      # float 0
	.word	0x3f800000                      # float 1
	.word	0x3dcccccd                      # float 0.100000001
.LCPI0_1:
	.word	0x3f800000                      # float 1
	.word	0x3f333333                      # float 0.699999988
	.word	0x3dcccccd                      # float 0.100000001
	.word	0x3f800000                      # float 1
.LCPI0_2:
	.word	0                               # 0x0
	.word	1                               # 0x1
	.word	0                               # 0x0
	.word	4                               # 0x4
	.text
	.globl	_ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf
	.p2align	5
	.type	_ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf,@function
_ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf: # @_ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf
.Lfunc_begin0:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception0
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	move	$s4, $a4
	move	$s3, $a3
	move	$s6, $a2
	move	$s0, $a1
	move	$fp, $a0
	pcaddu18i	$ra, %call36(_ZN17btCollisionObjectC2Ev)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZTV10btSoftBody+16)
	addi.d	$a0, $a0, %pc_lo12(_ZTV10btSoftBody+16)
	st.d	$a0, $fp, 0
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 304
	st.d	$zero, $fp, 296
	st.d	$zero, $fp, 284
	st.b	$a0, $fp, 440
	st.d	$zero, $fp, 432
	st.d	$zero, $fp, 420
	st.b	$a0, $fp, 472
	st.d	$zero, $fp, 464
	st.d	$zero, $fp, 452
	st.b	$a0, $fp, 504
	st.d	$zero, $fp, 496
	st.d	$zero, $fp, 484
	st.b	$a0, $fp, 568
	st.d	$zero, $fp, 560
	st.d	$zero, $fp, 548
	st.b	$a0, $fp, 600
	st.d	$zero, $fp, 592
	st.d	$zero, $fp, 580
	st.d	$s0, $fp, 776
	st.b	$a0, $fp, 808
	st.d	$zero, $fp, 800
	st.d	$zero, $fp, 788
	st.b	$a0, $fp, 840
	st.d	$zero, $fp, 832
	st.d	$zero, $fp, 820
	st.b	$a0, $fp, 872
	st.d	$zero, $fp, 864
	st.d	$zero, $fp, 852
	st.b	$a0, $fp, 904
	st.d	$zero, $fp, 896
	st.d	$zero, $fp, 884
	st.b	$a0, $fp, 936
	st.d	$zero, $fp, 928
	st.d	$zero, $fp, 916
	st.b	$a0, $fp, 968
	st.d	$zero, $fp, 960
	st.d	$zero, $fp, 948
	st.b	$a0, $fp, 1000
	st.d	$zero, $fp, 992
	st.d	$zero, $fp, 980
	st.b	$a0, $fp, 1032
	st.d	$zero, $fp, 1024
	st.d	$zero, $fp, 1012
	st.b	$a0, $fp, 1064
	st.d	$zero, $fp, 1056
	st.d	$zero, $fp, 1044
	st.b	$a0, $fp, 1096
	st.d	$zero, $fp, 1088
	st.d	$zero, $fp, 1076
	addi.d	$s0, $fp, 1144
.Ltmp0:                                 # EH_LABEL
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN6btDbvtC1Ev)
	jirl	$ra, $ra, 0
.Ltmp1:                                 # EH_LABEL
# %bb.1:
	addi.d	$s2, $fp, 1208
.Ltmp3:                                 # EH_LABEL
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN6btDbvtC1Ev)
	jirl	$ra, $ra, 0
.Ltmp4:                                 # EH_LABEL
# %bb.2:
	addi.d	$a0, $fp, 1272
.Ltmp6:                                 # EH_LABEL
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_ZN6btDbvtC1Ev)
	jirl	$ra, $ra, 0
.Ltmp7:                                 # EH_LABEL
# %bb.3:
	addi.d	$a3, $fp, 1108
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1360
	st.d	$zero, $fp, 1352
	st.d	$zero, $fp, 1340
	st.b	$a0, $fp, 1392
	st.d	$zero, $fp, 1384
	st.d	$zero, $fp, 1372
	st.b	$a0, $fp, 1488
	st.d	$zero, $fp, 1480
	st.d	$zero, $fp, 1468
	ori	$a1, $zero, 4
	pcalau12i	$a2, %pc_hi20(.LCPI0_0)
	vld	$vr0, $a2, %pc_lo12(.LCPI0_0)
	st.w	$a1, $fp, 256
	lu52i.d	$a1, $zero, 1016
	st.d	$a1, $fp, 312
	vst	$vr0, $fp, 340
	pcalau12i	$a1, %pc_hi20(.LCPI0_1)
	vld	$vr0, $a1, %pc_lo12(.LCPI0_1)
	vrepli.b	$vr1, 0
	vst	$vr1, $fp, 320
	st.w	$zero, $fp, 336
	vst	$vr0, $fp, 356
	lu12i.w	$a1, 258048
	vreplgr2vr.w	$vr0, $a1
	vst	$vr0, $fp, 372
	pcalau12i	$a1, %pc_hi20(.LCPI0_2)
	vld	$vr0, $a1, %pc_lo12(.LCPI0_2)
	lu12i.w	$s5, 260096
	lu52i.d	$s1, $s5, 1016
	st.d	$s1, $fp, 388
	vst	$vr0, $fp, 396
	st.w	$a0, $fp, 412
	st.h	$zero, $fp, 536
	st.w	$zero, $fp, 540
	vst	$vr1, $fp, 608
	st.w	$s5, $fp, 624
	vst	$vr1, $fp, 628
	st.w	$s5, $fp, 644
	vst	$vr1, $fp, 648
	st.d	$s5, $fp, 664
	st.w	$s5, $fp, 672
	vst	$vr1, $fp, 676
	st.w	$s5, $fp, 692
	vst	$vr1, $fp, 696
	st.d	$s5, $fp, 712
	st.d	$zero, $fp, 768
	st.w	$zero, $fp, 1104
	st.b	$a0, $fp, 1140
	vst	$vr1, $a3, 0
	st.d	$a3, $sp, 24                    # 8-byte Folded Spill
	vst	$vr1, $a3, 16
	st.w	$s5, $fp, 8
	vst	$vr1, $fp, 12
	st.w	$s5, $fp, 28
	vst	$vr1, $fp, 32
	st.w	$s5, $fp, 48
	st.w	$zero, $fp, 68
	vst	$vr1, $sp, 32                   # 16-byte Folded Spill
	vst	$vr1, $fp, 52
.Ltmp9:                                 # EH_LABEL
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E)
	jirl	$ra, $ra, 0
.Ltmp10:                                # EH_LABEL
# %bb.4:
.Ltmp12:                                # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody14appendMaterialEv)
	jirl	$ra, $ra, 0
.Ltmp13:                                # EH_LABEL
# %bb.5:
	move	$s7, $a0
	st.d	$s1, $a0, 8
	move	$a0, $s5
	lu32i.d	$a0, 1
	st.d	$a0, $s7, 16
.Ltmp14:                                # EH_LABEL
	ori	$a0, $zero, 40
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
.Ltmp15:                                # EH_LABEL
# %bb.6:
.Ltmp17:                                # EH_LABEL
	move	$s1, $a0
	pcaddu18i	$ra, %call36(_ZN14btConcaveShapeC2Ev)
	jirl	$ra, $ra, 0
.Ltmp18:                                # EH_LABEL
# %bb.7:
	pcalau12i	$a0, %pc_hi20(_ZTV24btSoftBodyCollisionShape+16)
	addi.d	$a0, $a0, %pc_lo12(_ZTV24btSoftBodyCollisionShape+16)
	st.d	$a0, $s1, 0
	ori	$a0, $zero, 32
	st.w	$a0, $s1, 8
	ld.w	$s2, $fp, 820
	st.d	$fp, $s1, 32
	st.d	$s1, $fp, 200
	lu12i.w	$a0, 256000
	st.w	$a0, $s1, 24
	bge	$s2, $s6, .LBB0_21
# %bb.8:
	ld.w	$a0, $fp, 824
	bge	$a0, $s6, .LBB0_19
# %bb.9:
	beqz	$s6, .LBB0_12
# %bb.10:
	ori	$a0, $zero, 120
	mul.d	$a0, $s6, $a0
.Ltmp20:                                # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp21:                                # EH_LABEL
# %bb.11:                               # %.noexc
	move	$s1, $a0
	ld.w	$a0, $fp, 820
	bgtz	$a0, .LBB0_13
	b	.LBB0_15
.LBB0_12:
	move	$s1, $zero
	move	$a0, $s2
	blez	$a0, .LBB0_15
.LBB0_13:                               # %.lr.ph.i.i.i
	move	$s5, $zero
	ori	$a1, $zero, 120
	mul.d	$s8, $a0, $a1
	.p2align	4, , 16
.LBB0_14:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 832
	add.d	$a0, $s1, $s5
	add.d	$a1, $a1, $s5
	ori	$a2, $zero, 120
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$s5, $s5, 120
	bne	$s8, $s5, .LBB0_14
.LBB0_15:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody4NodeEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $fp, 832
	beqz	$a0, .LBB0_18
# %bb.16:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody4NodeEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $fp, 840
	andi	$a1, $a1, 1
	beqz	$a1, .LBB0_18
# %bb.17:
.Ltmp22:                                # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp23:                                # EH_LABEL
.LBB0_18:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 840
	st.d	$s1, $fp, 832
	st.w	$s6, $fp, 824
.LBB0_19:                               # %.lr.ph.i
	sub.d	$a0, $s6, $s2
	ori	$a1, $zero, 120
	mul.d	$a1, $s2, $a1
	.p2align	4, , 16
.LBB0_20:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $fp, 832
	stx.d	$zero, $a2, $a1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 120
	bnez	$a0, .LBB0_20
.LBB0_21:                               # %.loopexit
	st.w	$s6, $fp, 820
	blez	$s6, .LBB0_34
# %bb.22:                               # %.lr.ph
	ori	$a0, $zero, 120
	mul.d	$s5, $s6, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	addi.d	$s6, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	pcalau12i	$a0, %pc_hi20(_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	addi.d	$s8, $a0, %pc_lo12(_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	move	$s2, $zero
	movgr2fr.w	$fs0, $zero
	.p2align	4, , 16
.LBB0_23:                               # =>This Inner Loop Header: Depth=1
	ld.d	$s1, $fp, 832
	ld.b	$a0, $s6, 0
	dbar	20
	beqz	$a0, .LBB0_32
.LBB0_24:                               #   in Loop: Header=BB0_23 Depth=1
	add.d	$s1, $s1, $s2
	ori	$a2, $zero, 113
	move	$a0, $s1
	move	$a1, $s8
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	beqz	$s3, .LBB0_26
# %bb.25:                               #   in Loop: Header=BB0_23 Depth=1
	vld	$vr0, $s3, 0
	addi.d	$s3, $s3, 16
	b	.LBB0_27
	.p2align	4, , 16
.LBB0_26:                               #   in Loop: Header=BB0_23 Depth=1
	move	$s3, $zero
	vld	$vr0, $sp, 32                   # 16-byte Folded Reload
.LBB0_27:                               #   in Loop: Header=BB0_23 Depth=1
	vst	$vr0, $s1, 16
	vld	$vr1, $s1, 16
	vst	$vr1, $s1, 32
	beqz	$s4, .LBB0_29
# %bb.28:                               #   in Loop: Header=BB0_23 Depth=1
	fld.s	$fa1, $s4, 0
	addi.d	$s4, $s4, 4
	b	.LBB0_30
	.p2align	4, , 16
.LBB0_29:                               #   in Loop: Header=BB0_23 Depth=1
	move	$s4, $zero
	vldi	$vr1, -1168
.LBB0_30:                               #   in Loop: Header=BB0_23 Depth=1
	frecip.s	$fa2, $fa1
	fcmp.clt.s	$fcc0, $fs0, $fa1
	fsel	$fa1, $fs0, $fa2, $fcc0
	fst.s	$fa1, $s1, 96
	vreplvei.w	$vr1, $vr0, 0
	vldi	$vr5, -1072
	fadd.s	$fa2, $fa1, $fa5
	vreplvei.w	$vr3, $vr0, 1
	fadd.s	$fa4, $fa3, $fa5
	vreplvei.w	$vr0, $vr0, 2
	fadd.s	$fa5, $fa0, $fa5
	movfr2gr.s	$a0, $fa2
	movfr2gr.s	$a1, $fa4
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa5
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $sp, 48
	st.d	$a1, $sp, 56
	vldi	$vr4, -1200
	fadd.s	$fa1, $fa1, $fa4
	fadd.s	$fa2, $fa3, $fa4
	fadd.s	$fa0, $fa0, $fa4
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa0
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $sp, 64
	st.d	$a1, $sp, 72
.Ltmp25:                                # EH_LABEL
	addi.d	$a1, $sp, 48
	move	$a0, $s0
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt6insertERK12btDbvtAabbMmPv)
	jirl	$ra, $ra, 0
.Ltmp26:                                # EH_LABEL
# %bb.31:                               #   in Loop: Header=BB0_23 Depth=1
	st.d	$a0, $s1, 104
	addi.d	$s2, $s2, 120
	st.d	$s7, $s1, 8
	bne	$s5, $s2, .LBB0_23
	b	.LBB0_34
.LBB0_32:                               #   in Loop: Header=BB0_23 Depth=1
	move	$a0, $s6
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB0_24
# %bb.33:                               #   in Loop: Header=BB0_23 Depth=1
	st.d	$zero, $s8, 0
	move	$a0, $s6
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB0_24
.LBB0_34:                               # %._crit_edge
	ld.d	$s1, $s0, 0
	beqz	$s1, .LBB0_38
# %bb.35:
	ld.d	$a0, $fp, 200
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
.Ltmp28:                                # EH_LABEL
	jirl	$ra, $a1, 0
.Ltmp29:                                # EH_LABEL
	lu12i.w	$s2, 260096
# %bb.36:                               # %.noexc87
	fld.s	$fa1, $s1, 0
	fld.s	$fa2, $s1, 4
	fld.s	$fa3, $s1, 8
	fsub.s	$fa1, $fa1, $fa0
	fsub.s	$fa2, $fa2, $fa0
	fsub.s	$fa3, $fa3, $fa0
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa3
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 1108
	st.d	$a1, $fp, 1116
	fld.s	$fa1, $s1, 16
	fld.s	$fa2, $s1, 20
	fld.s	$fa3, $s1, 24
	fadd.s	$fa1, $fa0, $fa1
	fadd.s	$fa2, $fa0, $fa2
	fadd.s	$fa0, $fa0, $fa3
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	ld.d	$a1, $fp, 192
	movfr2gr.s	$a2, $fa0
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a0, $fp, 1124
	st.d	$a2, $fp, 1132
	beqz	$a1, .LBB0_39
# %bb.37:
	ld.d	$a2, $fp, 776
	ld.d	$a0, $a2, 32
	ld.d	$a3, $a0, 0
	ld.d	$a4, $a2, 40
	ld.d	$a5, $a3, 32
	addi.d	$a3, $fp, 1124
.Ltmp30:                                # EH_LABEL
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	jirl	$ra, $a5, 0
.Ltmp31:                                # EH_LABEL
	b	.LBB0_39
.LBB0_38:
	ld.d	$a0, $sp, 24                    # 8-byte Folded Reload
	vld	$vr0, $sp, 32                   # 16-byte Folded Reload
	vst	$vr0, $a0, 16
	vst	$vr0, $a0, 0
	lu12i.w	$s2, 260096
.LBB0_39:
	st.w	$s2, $fp, 1400
	vld	$vr0, $sp, 32                   # 16-byte Folded Reload
	vst	$vr0, $fp, 1404
	st.w	$s2, $fp, 1420
	vst	$vr0, $fp, 1424
	st.w	$s2, $fp, 1440
	vst	$vr0, $fp, 1444
	st.w	$zero, $fp, 1460
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB0_40:
.Ltmp24:                                # EH_LABEL
	b	.LBB0_49
.LBB0_41:
.Ltmp19:                                # EH_LABEL
	move	$s3, $a0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	b	.LBB0_50
.LBB0_42:
.Ltmp11:                                # EH_LABEL
	b	.LBB0_49
.LBB0_43:
.Ltmp8:                                 # EH_LABEL
	move	$s3, $a0
	b	.LBB0_54
.LBB0_44:
.Ltmp5:                                 # EH_LABEL
	move	$s3, $a0
	b	.LBB0_55
.LBB0_45:
.Ltmp2:                                 # EH_LABEL
	move	$s3, $a0
	b	.LBB0_56
.LBB0_46:
.Ltmp32:                                # EH_LABEL
	b	.LBB0_49
.LBB0_47:
.Ltmp16:                                # EH_LABEL
	b	.LBB0_49
.LBB0_48:
.Ltmp27:                                # EH_LABEL
.LBB0_49:
	move	$s3, $a0
.LBB0_50:
.Ltmp33:                                # EH_LABEL
	addi.d	$a0, $fp, 1464
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIiED2Ev)
	jirl	$ra, $ra, 0
.Ltmp34:                                # EH_LABEL
# %bb.51:
.Ltmp35:                                # EH_LABEL
	addi.d	$a0, $fp, 1368
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIbED2Ev)
	jirl	$ra, $ra, 0
.Ltmp36:                                # EH_LABEL
# %bb.52:
.Ltmp37:                                # EH_LABEL
	addi.d	$a0, $fp, 1336
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp38:                                # EH_LABEL
# %bb.53:
.Ltmp39:                                # EH_LABEL
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN6btDbvtD1Ev)
	jirl	$ra, $ra, 0
.Ltmp40:                                # EH_LABEL
.LBB0_54:
.Ltmp41:                                # EH_LABEL
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN6btDbvtD1Ev)
	jirl	$ra, $ra, 0
.Ltmp42:                                # EH_LABEL
.LBB0_55:
.Ltmp43:                                # EH_LABEL
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN6btDbvtD1Ev)
	jirl	$ra, $ra, 0
.Ltmp44:                                # EH_LABEL
.LBB0_56:
.Ltmp45:                                # EH_LABEL
	addi.d	$a0, $fp, 1072
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp46:                                # EH_LABEL
# %bb.57:
.Ltmp47:                                # EH_LABEL
	addi.d	$a0, $fp, 1040
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp48:                                # EH_LABEL
# %bb.58:
.Ltmp49:                                # EH_LABEL
	addi.d	$a0, $fp, 1008
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp50:                                # EH_LABEL
# %bb.59:
.Ltmp51:                                # EH_LABEL
	addi.d	$a0, $fp, 976
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp52:                                # EH_LABEL
# %bb.60:
.Ltmp53:                                # EH_LABEL
	addi.d	$a0, $fp, 944
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp54:                                # EH_LABEL
# %bb.61:
.Ltmp55:                                # EH_LABEL
	addi.d	$a0, $fp, 912
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp56:                                # EH_LABEL
# %bb.62:
.Ltmp57:                                # EH_LABEL
	addi.d	$a0, $fp, 880
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp58:                                # EH_LABEL
# %bb.63:
.Ltmp59:                                # EH_LABEL
	addi.d	$a0, $fp, 848
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp60:                                # EH_LABEL
# %bb.64:
.Ltmp61:                                # EH_LABEL
	addi.d	$a0, $fp, 816
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp62:                                # EH_LABEL
# %bb.65:
.Ltmp63:                                # EH_LABEL
	addi.d	$a0, $fp, 784
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp64:                                # EH_LABEL
# %bb.66:
.Ltmp65:                                # EH_LABEL
	addi.d	$a0, $fp, 536
	pcaddu18i	$ra, %call36(_ZN10btSoftBody4PoseD2Ev)
	jirl	$ra, $ra, 0
.Ltmp66:                                # EH_LABEL
# %bb.67:
.Ltmp67:                                # EH_LABEL
	addi.d	$a0, $fp, 312
	pcaddu18i	$ra, %call36(_ZN10btSoftBody6ConfigD2Ev)
	jirl	$ra, $ra, 0
.Ltmp68:                                # EH_LABEL
# %bb.68:
.Ltmp69:                                # EH_LABEL
	addi.d	$a0, $fp, 280
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev)
	jirl	$ra, $ra, 0
.Ltmp70:                                # EH_LABEL
# %bb.69:
.Ltmp71:                                # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN17btCollisionObjectD2Ev)
	jirl	$ra, $ra, 0
.Ltmp72:                                # EH_LABEL
# %bb.70:
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB0_71:
.Ltmp73:                                # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end0:
	.size	_ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf, .Lfunc_end0-_ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table0:
.Lexception0:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase0-.Lttbaseref0
.Lttbaseref0:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end0-.Lcst_begin0
.Lcst_begin0:
	.uleb128 .Lfunc_begin0-.Lfunc_begin0    # >> Call Site 1 <<
	.uleb128 .Ltmp0-.Lfunc_begin0           #   Call between .Lfunc_begin0 and .Ltmp0
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp0-.Lfunc_begin0           # >> Call Site 2 <<
	.uleb128 .Ltmp1-.Ltmp0                  #   Call between .Ltmp0 and .Ltmp1
	.uleb128 .Ltmp2-.Lfunc_begin0           #     jumps to .Ltmp2
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp3-.Lfunc_begin0           # >> Call Site 3 <<
	.uleb128 .Ltmp4-.Ltmp3                  #   Call between .Ltmp3 and .Ltmp4
	.uleb128 .Ltmp5-.Lfunc_begin0           #     jumps to .Ltmp5
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp6-.Lfunc_begin0           # >> Call Site 4 <<
	.uleb128 .Ltmp7-.Ltmp6                  #   Call between .Ltmp6 and .Ltmp7
	.uleb128 .Ltmp8-.Lfunc_begin0           #     jumps to .Ltmp8
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp9-.Lfunc_begin0           # >> Call Site 5 <<
	.uleb128 .Ltmp10-.Ltmp9                 #   Call between .Ltmp9 and .Ltmp10
	.uleb128 .Ltmp11-.Lfunc_begin0          #     jumps to .Ltmp11
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp12-.Lfunc_begin0          # >> Call Site 6 <<
	.uleb128 .Ltmp15-.Ltmp12                #   Call between .Ltmp12 and .Ltmp15
	.uleb128 .Ltmp16-.Lfunc_begin0          #     jumps to .Ltmp16
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp17-.Lfunc_begin0          # >> Call Site 7 <<
	.uleb128 .Ltmp18-.Ltmp17                #   Call between .Ltmp17 and .Ltmp18
	.uleb128 .Ltmp19-.Lfunc_begin0          #     jumps to .Ltmp19
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp20-.Lfunc_begin0          # >> Call Site 8 <<
	.uleb128 .Ltmp21-.Ltmp20                #   Call between .Ltmp20 and .Ltmp21
	.uleb128 .Ltmp24-.Lfunc_begin0          #     jumps to .Ltmp24
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp21-.Lfunc_begin0          # >> Call Site 9 <<
	.uleb128 .Ltmp22-.Ltmp21                #   Call between .Ltmp21 and .Ltmp22
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp22-.Lfunc_begin0          # >> Call Site 10 <<
	.uleb128 .Ltmp23-.Ltmp22                #   Call between .Ltmp22 and .Ltmp23
	.uleb128 .Ltmp24-.Lfunc_begin0          #     jumps to .Ltmp24
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp23-.Lfunc_begin0          # >> Call Site 11 <<
	.uleb128 .Ltmp25-.Ltmp23                #   Call between .Ltmp23 and .Ltmp25
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp25-.Lfunc_begin0          # >> Call Site 12 <<
	.uleb128 .Ltmp26-.Ltmp25                #   Call between .Ltmp25 and .Ltmp26
	.uleb128 .Ltmp27-.Lfunc_begin0          #     jumps to .Ltmp27
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp26-.Lfunc_begin0          # >> Call Site 13 <<
	.uleb128 .Ltmp28-.Ltmp26                #   Call between .Ltmp26 and .Ltmp28
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp28-.Lfunc_begin0          # >> Call Site 14 <<
	.uleb128 .Ltmp31-.Ltmp28                #   Call between .Ltmp28 and .Ltmp31
	.uleb128 .Ltmp32-.Lfunc_begin0          #     jumps to .Ltmp32
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp31-.Lfunc_begin0          # >> Call Site 15 <<
	.uleb128 .Ltmp33-.Ltmp31                #   Call between .Ltmp31 and .Ltmp33
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp33-.Lfunc_begin0          # >> Call Site 16 <<
	.uleb128 .Ltmp72-.Ltmp33                #   Call between .Ltmp33 and .Ltmp72
	.uleb128 .Ltmp73-.Lfunc_begin0          #     jumps to .Ltmp73
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp72-.Lfunc_begin0          # >> Call Site 17 <<
	.uleb128 .Lfunc_end0-.Ltmp72            #   Call between .Ltmp72 and .Lfunc_end0
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end0:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase0:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E # -- Begin function _ZN10btSoftBody9setSolverENS_14eSolverPresets1_E
	.p2align	5
	.type	_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E,@function
_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E: # @_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	move	$fp, $a0
	ld.d	$a0, $a0, 432
	move	$s0, $a1
	beqz	$a0, .LBB1_3
# %bb.1:
	ld.b	$a1, $fp, 440
	andi	$a1, $a1, 1
	beqz	$a1, .LBB1_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB1_3:                                # %_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EE5clearEv.exit
	ld.d	$a0, $fp, 464
	ori	$s1, $zero, 1
	st.b	$s1, $fp, 440
	st.d	$zero, $fp, 432
	st.d	$zero, $fp, 420
	beqz	$a0, .LBB1_6
# %bb.4:                                # %_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EE5clearEv.exit
	ld.b	$a1, $fp, 472
	andi	$a1, $a1, 1
	beqz	$a1, .LBB1_6
# %bb.5:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB1_6:                                # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE5clearEv.exit
	ld.d	$a0, $fp, 496
	st.b	$s1, $fp, 472
	st.d	$zero, $fp, 464
	st.d	$zero, $fp, 452
	beqz	$a0, .LBB1_9
# %bb.7:                                # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE5clearEv.exit
	ld.b	$a1, $fp, 504
	andi	$a1, $a1, 1
	beqz	$a1, .LBB1_9
# %bb.8:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB1_9:                                # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE5clearEv.exit5
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 504
	st.d	$zero, $fp, 496
	st.d	$zero, $fp, 484
	beq	$s0, $a0, .LBB1_23
# %bb.10:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE5clearEv.exit5
	bnez	$s0, .LBB1_183
# %bb.11:
	ld.w	$a2, $fp, 452
	ld.w	$s1, $fp, 456
	bne	$a2, $s1, .LBB1_41
# %bb.12:
	sltui	$a0, $a2, 1
	slli.w	$a1, $a2, 1
	masknez	$a1, $a1, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s1, $a0, $a1
	bge	$a2, $s1, .LBB1_35
# %bb.13:
	beqz	$s1, .LBB1_36
# %bb.14:
	slli.d	$a0, $s1, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a2, $fp, 452
	move	$s0, $a0
	ld.d	$a0, $fp, 464
	blez	$a2, .LBB1_37
.LBB1_15:                               # %.lr.ph.i.i.i
	ori	$a3, $zero, 8
	move	$a1, $zero
	bltu	$a2, $a3, .LBB1_20
# %bb.16:                               # %.lr.ph.i.i.i
	sub.d	$a3, $s0, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB1_20
# %bb.17:                               # %vector.ph305
	bstrpick.d	$a1, $a2, 30, 3
	slli.d	$a1, $a1, 3
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a1
	.p2align	4, , 16
.LBB1_18:                               # %vector.body308
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB1_18
# %bb.19:                               # %middle.block313
	beq	$a1, $a2, .LBB1_22
.LBB1_20:                               # %scalar.ph303.preheader
	sub.d	$a3, $a2, $a1
	alsl.d	$a4, $a1, $a0, 2
	alsl.d	$a1, $a1, $s0, 2
	.p2align	4, , 16
.LBB1_21:                               # %scalar.ph303
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a5, $a4, 0
	st.w	$a5, $a1, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 4
	addi.d	$a1, $a1, 4
	bnez	$a3, .LBB1_21
.LBB1_22:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.thread.i.i
	ld.bu	$a1, $fp, 472
	bnez	$a1, .LBB1_39
	b	.LBB1_40
.LBB1_23:
	ld.w	$a1, $fp, 420
	ld.w	$a0, $fp, 424
	bne	$a1, $a0, .LBB1_107
# %bb.24:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s1, $a0, $a2
	bge	$a1, $s1, .LBB1_107
# %bb.25:
	beqz	$s1, .LBB1_102
# %bb.26:
	slli.d	$a0, $s1, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 420
	move	$s0, $a0
	ld.d	$a0, $fp, 432
	blez	$a1, .LBB1_103
.LBB1_27:                               # %.lr.ph.i.i.i79
	ori	$a3, $zero, 8
	move	$a2, $zero
	bltu	$a1, $a3, .LBB1_32
# %bb.28:                               # %.lr.ph.i.i.i79
	sub.d	$a3, $s0, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB1_32
# %bb.29:                               # %vector.ph
	bstrpick.d	$a2, $a1, 30, 3
	slli.d	$a2, $a2, 3
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB1_30:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB1_30
# %bb.31:                               # %middle.block
	beq	$a2, $a1, .LBB1_34
.LBB1_32:                               # %scalar.ph.preheader
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 2
	alsl.d	$a2, $a2, $s0, 2
	.p2align	4, , 16
.LBB1_33:                               # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a5, $a4, 0
	st.w	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 4
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB1_33
.LBB1_34:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EE4copyEiiPS2_.exit.thread.i.i
	ld.bu	$a2, $fp, 440
	bnez	$a2, .LBB1_105
	b	.LBB1_106
.LBB1_35:
	move	$s1, $a2
	b	.LBB1_41
.LBB1_36:
	move	$s0, $zero
	ld.d	$a0, $fp, 464
	bgtz	$a2, .LBB1_15
.LBB1_37:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i
	beqz	$a0, .LBB1_40
# %bb.38:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i
	ld.b	$a1, $fp, 472
	andi	$a1, $a1, 1
	beqz	$a1, .LBB1_40
.LBB1_39:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a2, $fp, 452
.LBB1_40:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 472
	st.d	$s0, $fp, 464
	st.w	$s1, $fp, 456
.LBB1_41:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit
	ld.d	$a1, $fp, 464
	slli.d	$a0, $a2, 2
	ori	$a3, $zero, 1
	stx.w	$a3, $a1, $a0
	addi.w	$a0, $a2, 1
	st.w	$a0, $fp, 452
	bne	$a0, $s1, .LBB1_53
# %bb.42:
	sltui	$a0, $s1, 1
	slli.w	$a2, $s1, 1
	masknez	$a2, $a2, $a0
	maskeqz	$a0, $a3, $a0
	or	$s2, $a0, $a2
	bge	$s1, $s2, .LBB1_54
# %bb.43:
	beqz	$s2, .LBB1_55
# %bb.44:
	slli.d	$a0, $s2, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 452
	ld.d	$a1, $fp, 464
	move	$s0, $a0
	blez	$s1, .LBB1_56
.LBB1_45:                               # %.lr.ph.i.i.i19
	ori	$a2, $zero, 8
	move	$a0, $zero
	bltu	$s1, $a2, .LBB1_50
# %bb.46:                               # %.lr.ph.i.i.i19
	sub.d	$a2, $s0, $a1
	ori	$a3, $zero, 32
	bltu	$a2, $a3, .LBB1_50
# %bb.47:                               # %vector.ph321
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$a0, $a0, 3
	addi.d	$a2, $a1, 16
	addi.d	$a3, $s0, 16
	move	$a4, $a0
	.p2align	4, , 16
.LBB1_48:                               # %vector.body324
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a2, -16
	vld	$vr1, $a2, 0
	vst	$vr0, $a3, -16
	vst	$vr1, $a3, 0
	addi.d	$a4, $a4, -8
	addi.d	$a2, $a2, 32
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB1_48
# %bb.49:                               # %middle.block329
	beq	$a0, $s1, .LBB1_52
.LBB1_50:                               # %scalar.ph319.preheader
	sub.d	$a2, $s1, $a0
	alsl.d	$a3, $a0, $a1, 2
	alsl.d	$a0, $a0, $s0, 2
	.p2align	4, , 16
.LBB1_51:                               # %scalar.ph319
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a4, $a3, 0
	st.w	$a4, $a0, 0
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	addi.d	$a0, $a0, 4
	bnez	$a2, .LBB1_51
.LBB1_52:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.thread.i.i24
	ld.bu	$a0, $fp, 472
	bnez	$a0, .LBB1_58
	b	.LBB1_59
.LBB1_53:
	move	$s2, $s1
	move	$s0, $a1
	b	.LBB1_61
.LBB1_54:
	move	$s2, $s1
	move	$s0, $a1
	b	.LBB1_60
.LBB1_55:
	move	$s0, $zero
	bgtz	$s1, .LBB1_45
.LBB1_56:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i13
	beqz	$a1, .LBB1_59
# %bb.57:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i13
	ld.b	$a0, $fp, 472
	andi	$a0, $a0, 1
	beqz	$a0, .LBB1_59
.LBB1_58:
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 452
.LBB1_59:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE10deallocateEv.exit.i.i16
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 472
	st.d	$s0, $fp, 464
	st.w	$s2, $fp, 456
.LBB1_60:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit28
	move	$a0, $s1
.LBB1_61:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit28
	slli.d	$a1, $a0, 2
	ori	$a2, $zero, 2
	stx.w	$a2, $s0, $a1
	addi.w	$a0, $a0, 1
	st.w	$a0, $fp, 452
	bne	$a0, $s2, .LBB1_73
# %bb.62:
	sltui	$a0, $s2, 1
	slli.w	$a1, $s2, 1
	masknez	$a1, $a1, $a0
	ori	$a2, $zero, 1
	maskeqz	$a0, $a2, $a0
	or	$s3, $a0, $a1
	bge	$s2, $s3, .LBB1_74
# %bb.63:
	beqz	$s3, .LBB1_75
# %bb.64:
	slli.d	$a0, $s3, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$s2, $fp, 452
	ld.d	$s0, $fp, 464
	move	$s1, $a0
	blez	$s2, .LBB1_76
.LBB1_65:                               # %.lr.ph.i.i.i40
	ori	$a1, $zero, 8
	move	$a0, $zero
	bltu	$s2, $a1, .LBB1_70
# %bb.66:                               # %.lr.ph.i.i.i40
	sub.d	$a1, $s1, $s0
	ori	$a2, $zero, 32
	bltu	$a1, $a2, .LBB1_70
# %bb.67:                               # %vector.ph337
	bstrpick.d	$a0, $s2, 30, 3
	slli.d	$a0, $a0, 3
	addi.d	$a1, $s0, 16
	addi.d	$a2, $s1, 16
	move	$a3, $a0
	.p2align	4, , 16
.LBB1_68:                               # %vector.body340
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a1, -16
	vld	$vr1, $a1, 0
	vst	$vr0, $a2, -16
	vst	$vr1, $a2, 0
	addi.d	$a3, $a3, -8
	addi.d	$a1, $a1, 32
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB1_68
# %bb.69:                               # %middle.block345
	beq	$a0, $s2, .LBB1_72
.LBB1_70:                               # %scalar.ph335.preheader
	sub.d	$a1, $s2, $a0
	alsl.d	$a2, $a0, $s0, 2
	alsl.d	$a0, $a0, $s1, 2
	.p2align	4, , 16
.LBB1_71:                               # %scalar.ph335
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a2, 0
	st.w	$a3, $a0, 0
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 4
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB1_71
.LBB1_72:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.thread.i.i45
	ld.bu	$a0, $fp, 472
	bnez	$a0, .LBB1_78
	b	.LBB1_79
.LBB1_73:
	move	$s3, $s2
	move	$s1, $s0
	b	.LBB1_81
.LBB1_74:
	move	$s3, $s2
	move	$s1, $s0
	b	.LBB1_80
.LBB1_75:
	move	$s1, $zero
	bgtz	$s2, .LBB1_65
.LBB1_76:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i34
	beqz	$s0, .LBB1_79
# %bb.77:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i34
	ld.b	$a0, $fp, 472
	andi	$a0, $a0, 1
	beqz	$a0, .LBB1_79
.LBB1_78:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$s2, $fp, 452
.LBB1_79:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE10deallocateEv.exit.i.i37
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 472
	st.d	$s1, $fp, 464
	st.w	$s3, $fp, 456
.LBB1_80:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit49
	move	$a0, $s2
.LBB1_81:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit49
	slli.d	$a1, $a0, 2
	ori	$a2, $zero, 3
	stx.w	$a2, $s1, $a1
	addi.w	$a0, $a0, 1
	st.w	$a0, $fp, 452
	bne	$a0, $s3, .LBB1_93
# %bb.82:
	sltui	$a0, $s3, 1
	slli.w	$a1, $s3, 1
	masknez	$a1, $a1, $a0
	ori	$a2, $zero, 1
	maskeqz	$a0, $a2, $a0
	or	$s2, $a0, $a1
	bge	$s3, $s2, .LBB1_94
# %bb.83:
	beqz	$s2, .LBB1_95
# %bb.84:
	slli.d	$a0, $s2, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$s3, $fp, 452
	ld.d	$s1, $fp, 464
	move	$s0, $a0
	blez	$s3, .LBB1_96
.LBB1_85:                               # %.lr.ph.i.i.i61
	ori	$a1, $zero, 8
	move	$a0, $zero
	bltu	$s3, $a1, .LBB1_90
# %bb.86:                               # %.lr.ph.i.i.i61
	sub.d	$a1, $s0, $s1
	ori	$a2, $zero, 32
	bltu	$a1, $a2, .LBB1_90
# %bb.87:                               # %vector.ph353
	bstrpick.d	$a0, $s3, 30, 3
	slli.d	$a0, $a0, 3
	addi.d	$a1, $s1, 16
	addi.d	$a2, $s0, 16
	move	$a3, $a0
	.p2align	4, , 16
.LBB1_88:                               # %vector.body356
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a1, -16
	vld	$vr1, $a1, 0
	vst	$vr0, $a2, -16
	vst	$vr1, $a2, 0
	addi.d	$a3, $a3, -8
	addi.d	$a1, $a1, 32
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB1_88
# %bb.89:                               # %middle.block361
	beq	$a0, $s3, .LBB1_92
.LBB1_90:                               # %scalar.ph351.preheader
	sub.d	$a1, $s3, $a0
	alsl.d	$a2, $a0, $s1, 2
	alsl.d	$a0, $a0, $s0, 2
	.p2align	4, , 16
.LBB1_91:                               # %scalar.ph351
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a2, 0
	st.w	$a3, $a0, 0
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 4
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB1_91
.LBB1_92:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.thread.i.i66
	ld.bu	$a0, $fp, 472
	bnez	$a0, .LBB1_98
	b	.LBB1_99
.LBB1_93:
	move	$s0, $s1
	b	.LBB1_101
.LBB1_94:
	move	$s0, $s1
	b	.LBB1_100
.LBB1_95:
	move	$s0, $zero
	bgtz	$s3, .LBB1_85
.LBB1_96:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i55
	beqz	$s1, .LBB1_99
# %bb.97:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i55
	ld.b	$a0, $fp, 472
	andi	$a0, $a0, 1
	beqz	$a0, .LBB1_99
.LBB1_98:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$s3, $fp, 452
.LBB1_99:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE10deallocateEv.exit.i.i58
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 472
	st.d	$s0, $fp, 464
	st.w	$s2, $fp, 456
.LBB1_100:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit70
	move	$a0, $s3
.LBB1_101:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit70
	slli.d	$a1, $a0, 2
	stx.w	$zero, $s0, $a1
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 452
	b	.LBB1_183
.LBB1_102:
	move	$s0, $zero
	ld.d	$a0, $fp, 432
	bgtz	$a1, .LBB1_27
.LBB1_103:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EE4copyEiiPS2_.exit.i.i
	beqz	$a0, .LBB1_106
# %bb.104:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EE4copyEiiPS2_.exit.i.i
	ld.b	$a2, $fp, 440
	andi	$a2, $a2, 1
	beqz	$a2, .LBB1_106
.LBB1_105:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 420
.LBB1_106:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 440
	st.d	$s0, $fp, 432
	st.w	$s1, $fp, 424
.LBB1_107:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EE9push_backERKS2_.exit
	ld.d	$a0, $fp, 432
	ld.w	$a2, $fp, 452
	ld.w	$s1, $fp, 456
	slli.d	$a3, $a1, 2
	stx.w	$zero, $a0, $a3
	addi.d	$a0, $a1, 1
	st.w	$a0, $fp, 420
	bne	$a2, $s1, .LBB1_125
# %bb.108:
	sltui	$a0, $a2, 1
	slli.w	$a1, $a2, 1
	masknez	$a1, $a1, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s1, $a0, $a1
	bge	$a2, $s1, .LBB1_119
# %bb.109:
	beqz	$s1, .LBB1_120
# %bb.110:
	slli.d	$a0, $s1, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a2, $fp, 452
	move	$s0, $a0
	ld.d	$a0, $fp, 464
	blez	$a2, .LBB1_121
.LBB1_111:                              # %.lr.ph.i.i.i98
	ori	$a3, $zero, 8
	move	$a1, $zero
	bltu	$a2, $a3, .LBB1_116
# %bb.112:                              # %.lr.ph.i.i.i98
	sub.d	$a3, $s0, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB1_116
# %bb.113:                              # %vector.ph241
	bstrpick.d	$a1, $a2, 30, 3
	slli.d	$a1, $a1, 3
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a1
	.p2align	4, , 16
.LBB1_114:                              # %vector.body244
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB1_114
# %bb.115:                              # %middle.block249
	beq	$a1, $a2, .LBB1_118
.LBB1_116:                              # %scalar.ph239.preheader
	sub.d	$a3, $a2, $a1
	alsl.d	$a4, $a1, $a0, 2
	alsl.d	$a1, $a1, $s0, 2
	.p2align	4, , 16
.LBB1_117:                              # %scalar.ph239
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a5, $a4, 0
	st.w	$a5, $a1, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 4
	addi.d	$a1, $a1, 4
	bnez	$a3, .LBB1_117
.LBB1_118:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.thread.i.i103
	ld.bu	$a1, $fp, 472
	bnez	$a1, .LBB1_123
	b	.LBB1_124
.LBB1_119:
	move	$s1, $a2
	b	.LBB1_125
.LBB1_120:
	move	$s0, $zero
	ld.d	$a0, $fp, 464
	bgtz	$a2, .LBB1_111
.LBB1_121:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i92
	beqz	$a0, .LBB1_124
# %bb.122:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i92
	ld.b	$a1, $fp, 472
	andi	$a1, $a1, 1
	beqz	$a1, .LBB1_124
.LBB1_123:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a2, $fp, 452
.LBB1_124:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE10deallocateEv.exit.i.i95
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 472
	st.d	$s0, $fp, 464
	st.w	$s1, $fp, 456
.LBB1_125:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit107
	ld.d	$a1, $fp, 464
	slli.d	$a0, $a2, 2
	ori	$a3, $zero, 1
	stx.w	$a3, $a1, $a0
	addi.w	$a0, $a2, 1
	st.w	$a0, $fp, 452
	bne	$a0, $s1, .LBB1_137
# %bb.126:
	sltui	$a0, $s1, 1
	slli.w	$a2, $s1, 1
	masknez	$a2, $a2, $a0
	maskeqz	$a0, $a3, $a0
	or	$s2, $a0, $a2
	bge	$s1, $s2, .LBB1_138
# %bb.127:
	beqz	$s2, .LBB1_139
# %bb.128:
	slli.d	$a0, $s2, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 452
	ld.d	$a1, $fp, 464
	move	$s0, $a0
	blez	$s1, .LBB1_140
.LBB1_129:                              # %.lr.ph.i.i.i119
	ori	$a2, $zero, 8
	move	$a0, $zero
	bltu	$s1, $a2, .LBB1_134
# %bb.130:                              # %.lr.ph.i.i.i119
	sub.d	$a2, $s0, $a1
	ori	$a3, $zero, 32
	bltu	$a2, $a3, .LBB1_134
# %bb.131:                              # %vector.ph257
	bstrpick.d	$a0, $s1, 30, 3
	slli.d	$a0, $a0, 3
	addi.d	$a2, $a1, 16
	addi.d	$a3, $s0, 16
	move	$a4, $a0
	.p2align	4, , 16
.LBB1_132:                              # %vector.body260
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a2, -16
	vld	$vr1, $a2, 0
	vst	$vr0, $a3, -16
	vst	$vr1, $a3, 0
	addi.d	$a4, $a4, -8
	addi.d	$a2, $a2, 32
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB1_132
# %bb.133:                              # %middle.block265
	beq	$a0, $s1, .LBB1_136
.LBB1_134:                              # %scalar.ph255.preheader
	sub.d	$a2, $s1, $a0
	alsl.d	$a3, $a0, $a1, 2
	alsl.d	$a0, $a0, $s0, 2
	.p2align	4, , 16
.LBB1_135:                              # %scalar.ph255
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a4, $a3, 0
	st.w	$a4, $a0, 0
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	addi.d	$a0, $a0, 4
	bnez	$a2, .LBB1_135
.LBB1_136:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.thread.i.i124
	ld.bu	$a0, $fp, 472
	bnez	$a0, .LBB1_142
	b	.LBB1_143
.LBB1_137:
	move	$s2, $s1
	move	$s0, $a1
	b	.LBB1_145
.LBB1_138:
	move	$s2, $s1
	move	$s0, $a1
	b	.LBB1_144
.LBB1_139:
	move	$s0, $zero
	bgtz	$s1, .LBB1_129
.LBB1_140:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i113
	beqz	$a1, .LBB1_143
# %bb.141:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i113
	ld.b	$a0, $fp, 472
	andi	$a0, $a0, 1
	beqz	$a0, .LBB1_143
.LBB1_142:
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$s1, $fp, 452
.LBB1_143:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE10deallocateEv.exit.i.i116
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 472
	st.d	$s0, $fp, 464
	st.w	$s2, $fp, 456
.LBB1_144:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit128
	move	$a0, $s1
.LBB1_145:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit128
	slli.d	$a1, $a0, 2
	ori	$a2, $zero, 2
	stx.w	$a2, $s0, $a1
	addi.w	$a0, $a0, 1
	st.w	$a0, $fp, 452
	bne	$a0, $s2, .LBB1_157
# %bb.146:
	sltui	$a0, $s2, 1
	slli.w	$a1, $s2, 1
	masknez	$a1, $a1, $a0
	ori	$a2, $zero, 1
	maskeqz	$a0, $a2, $a0
	or	$s3, $a0, $a1
	bge	$s2, $s3, .LBB1_158
# %bb.147:
	beqz	$s3, .LBB1_159
# %bb.148:
	slli.d	$a0, $s3, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$s2, $fp, 452
	ld.d	$s0, $fp, 464
	move	$s1, $a0
	blez	$s2, .LBB1_160
.LBB1_149:                              # %.lr.ph.i.i.i140
	ori	$a1, $zero, 8
	move	$a0, $zero
	bltu	$s2, $a1, .LBB1_154
# %bb.150:                              # %.lr.ph.i.i.i140
	sub.d	$a1, $s1, $s0
	ori	$a2, $zero, 32
	bltu	$a1, $a2, .LBB1_154
# %bb.151:                              # %vector.ph273
	bstrpick.d	$a0, $s2, 30, 3
	slli.d	$a0, $a0, 3
	addi.d	$a1, $s0, 16
	addi.d	$a2, $s1, 16
	move	$a3, $a0
	.p2align	4, , 16
.LBB1_152:                              # %vector.body276
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a1, -16
	vld	$vr1, $a1, 0
	vst	$vr0, $a2, -16
	vst	$vr1, $a2, 0
	addi.d	$a3, $a3, -8
	addi.d	$a1, $a1, 32
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB1_152
# %bb.153:                              # %middle.block281
	beq	$a0, $s2, .LBB1_156
.LBB1_154:                              # %scalar.ph271.preheader
	sub.d	$a1, $s2, $a0
	alsl.d	$a2, $a0, $s0, 2
	alsl.d	$a0, $a0, $s1, 2
	.p2align	4, , 16
.LBB1_155:                              # %scalar.ph271
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a2, 0
	st.w	$a3, $a0, 0
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 4
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB1_155
.LBB1_156:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.thread.i.i145
	ld.bu	$a0, $fp, 472
	bnez	$a0, .LBB1_162
	b	.LBB1_163
.LBB1_157:
	move	$s1, $s0
	b	.LBB1_165
.LBB1_158:
	move	$s1, $s0
	b	.LBB1_164
.LBB1_159:
	move	$s1, $zero
	bgtz	$s2, .LBB1_149
.LBB1_160:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i134
	beqz	$s0, .LBB1_163
# %bb.161:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i134
	ld.b	$a0, $fp, 472
	andi	$a0, $a0, 1
	beqz	$a0, .LBB1_163
.LBB1_162:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$s2, $fp, 452
.LBB1_163:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE10deallocateEv.exit.i.i137
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 472
	st.d	$s1, $fp, 464
	st.w	$s3, $fp, 456
.LBB1_164:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit149
	move	$a0, $s2
.LBB1_165:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit149
	slli.d	$a2, $a0, 2
	ld.w	$a1, $fp, 484
	ld.w	$a3, $fp, 488
	ori	$a4, $zero, 3
	stx.w	$a4, $s1, $a2
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 452
	bne	$a1, $a3, .LBB1_182
# %bb.166:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s1, $a0, $a2
	bge	$a1, $s1, .LBB1_182
# %bb.167:
	beqz	$s1, .LBB1_177
# %bb.168:
	slli.d	$a0, $s1, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 484
	move	$s0, $a0
	ld.d	$a0, $fp, 496
	blez	$a1, .LBB1_178
.LBB1_169:                              # %.lr.ph.i.i.i161
	ori	$a3, $zero, 8
	move	$a2, $zero
	bltu	$a1, $a3, .LBB1_174
# %bb.170:                              # %.lr.ph.i.i.i161
	sub.d	$a3, $s0, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB1_174
# %bb.171:                              # %vector.ph289
	bstrpick.d	$a2, $a1, 30, 3
	slli.d	$a2, $a2, 3
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB1_172:                              # %vector.body292
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB1_172
# %bb.173:                              # %middle.block297
	beq	$a2, $a1, .LBB1_176
.LBB1_174:                              # %scalar.ph287.preheader
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 2
	alsl.d	$a2, $a2, $s0, 2
	.p2align	4, , 16
.LBB1_175:                              # %scalar.ph287
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a5, $a4, 0
	st.w	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 4
	addi.d	$a2, $a2, 4
	bnez	$a3, .LBB1_175
.LBB1_176:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.thread.i.i166
	ld.bu	$a2, $fp, 504
	bnez	$a2, .LBB1_180
	b	.LBB1_181
.LBB1_177:
	move	$s0, $zero
	ld.d	$a0, $fp, 496
	bgtz	$a1, .LBB1_169
.LBB1_178:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i155
	beqz	$a0, .LBB1_181
# %bb.179:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE4copyEiiPS2_.exit.i.i155
	ld.b	$a2, $fp, 504
	andi	$a2, $a2, 1
	beqz	$a2, .LBB1_181
.LBB1_180:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 484
.LBB1_181:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE10deallocateEv.exit.i.i158
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 504
	st.d	$s0, $fp, 496
	st.w	$s1, $fp, 488
.LBB1_182:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE9push_backERKS2_.exit170
	ld.d	$a0, $fp, 496
	slli.d	$a2, $a1, 2
	stx.w	$zero, $a0, $a2
	addi.d	$a0, $a1, 1
	st.w	$a0, $fp, 484
.LBB1_183:
	ld.d	$s3, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end1:
	.size	_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E, .Lfunc_end1-_ZN10btSoftBody9setSolverENS_14eSolverPresets1_E
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody14appendMaterialEv # -- Begin function _ZN10btSoftBody14appendMaterialEv
	.p2align	5
	.type	_ZN10btSoftBody14appendMaterialEv,@function
_ZN10btSoftBody14appendMaterialEv:      # @_ZN10btSoftBody14appendMaterialEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	move	$fp, $a0
	ori	$a0, $zero, 24
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 1076
	st.d	$zero, $a0, 0
	blez	$a1, .LBB2_2
# %bb.1:
	ld.d	$a1, $fp, 1088
	ld.d	$a1, $a1, 0
	ld.d	$a2, $a1, 16
	st.d	$a2, $a0, 16
	vld	$vr0, $a1, 0
	b	.LBB2_4
.LBB2_2:
	pcalau12i	$a1, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy)
	ld.b	$a1, $a1, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy)
	dbar	20
	pcalau12i	$a2, %pc_hi20(_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy)
	addi.d	$s0, $a2, %pc_lo12(_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy)
	beqz	$a1, .LBB2_22
.LBB2_3:                                # %_ZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_.exit
	ld.d	$a1, $s0, 16
	st.d	$a1, $a0, 16
	vld	$vr0, $s0, 0
.LBB2_4:
	vst	$vr0, $a0, 0
	ld.w	$a2, $fp, 1076
	ld.w	$a1, $fp, 1080
	bne	$a2, $a1, .LBB2_21
# %bb.5:
	sltui	$a1, $a2, 1
	slli.w	$a3, $a2, 1
	masknez	$a3, $a3, $a1
	ori	$a4, $zero, 1
	maskeqz	$a1, $a4, $a1
	or	$s1, $a1, $a3
	bge	$a2, $s1, .LBB2_21
# %bb.6:
	move	$s2, $a0
	beqz	$s1, .LBB2_16
# %bb.7:
	slli.d	$a0, $s1, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a2, $fp, 1076
	move	$s0, $a0
	ld.d	$a1, $fp, 1088
	blez	$a2, .LBB2_17
.LBB2_8:                                # %.lr.ph.i.i.i
	ori	$a4, $zero, 4
	move	$a3, $zero
	move	$a0, $s2
	bltu	$a2, $a4, .LBB2_13
# %bb.9:                                # %.lr.ph.i.i.i
	sub.d	$a4, $s0, $a1
	ori	$a5, $zero, 32
	bltu	$a4, $a5, .LBB2_13
# %bb.10:                               # %vector.ph
	bstrpick.d	$a3, $a2, 30, 2
	slli.d	$a3, $a3, 2
	addi.d	$a4, $a1, 16
	addi.d	$a5, $s0, 16
	move	$a6, $a3
	.p2align	4, , 16
.LBB2_11:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a4, -16
	vld	$vr1, $a4, 0
	vst	$vr0, $a5, -16
	vst	$vr1, $a5, 0
	addi.d	$a6, $a6, -4
	addi.d	$a4, $a4, 32
	addi.d	$a5, $a5, 32
	bnez	$a6, .LBB2_11
# %bb.12:                               # %middle.block
	beq	$a3, $a2, .LBB2_15
.LBB2_13:                               # %scalar.ph.preheader
	sub.d	$a4, $a2, $a3
	alsl.d	$a5, $a3, $a1, 3
	alsl.d	$a3, $a3, $s0, 3
	.p2align	4, , 16
.LBB2_14:                               # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a6, $a5, 0
	st.d	$a6, $a3, 0
	addi.d	$a4, $a4, -1
	addi.d	$a5, $a5, 8
	addi.d	$a3, $a3, 8
	bnez	$a4, .LBB2_14
.LBB2_15:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody8MaterialEE4copyEiiPS2_.exit.thread.i.i
	ld.bu	$a3, $fp, 1096
	bnez	$a3, .LBB2_19
	b	.LBB2_20
.LBB2_16:
	move	$s0, $zero
	ld.d	$a1, $fp, 1088
	bgtz	$a2, .LBB2_8
.LBB2_17:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody8MaterialEE4copyEiiPS2_.exit.i.i
	move	$a0, $s2
	beqz	$a1, .LBB2_20
# %bb.18:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody8MaterialEE4copyEiiPS2_.exit.i.i
	ld.b	$a3, $fp, 1096
	andi	$a3, $a3, 1
	beqz	$a3, .LBB2_20
.LBB2_19:
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	ld.w	$a2, $fp, 1076
.LBB2_20:                               # %_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEE10deallocateEv.exit.i.i
	ori	$a1, $zero, 1
	st.b	$a1, $fp, 1096
	st.d	$s0, $fp, 1088
	st.w	$s1, $fp, 1080
.LBB2_21:                               # %_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEE9push_backERKS2_.exit
	ld.d	$a1, $fp, 1088
	slli.d	$a3, $a2, 3
	stx.d	$a0, $a1, $a3
	addi.d	$a1, $a2, 1
	st.w	$a1, $fp, 1076
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB2_22:
	pcalau12i	$a1, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy)
	addi.d	$a1, $a1, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy)
	move	$s1, $a0
	move	$a0, $a1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	move	$a1, $a0
	move	$a0, $s1
	addi.w	$a1, $a1, 0
	beqz	$a1, .LBB2_3
# %bb.23:
	st.d	$zero, $s0, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	b	.LBB2_3
.Lfunc_end2:
	.size	_ZN10btSoftBody14appendMaterialEv, .Lfunc_end2-_ZN10btSoftBody14appendMaterialEv
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody12updateBoundsEv # -- Begin function _ZN10btSoftBody12updateBoundsEv
	.p2align	5
	.type	_ZN10btSoftBody12updateBoundsEv,@function
_ZN10btSoftBody12updateBoundsEv:        # @_ZN10btSoftBody12updateBoundsEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
	ld.d	$s0, $a0, 1144
	beqz	$s0, .LBB3_3
# %bb.1:
	ld.d	$a0, $fp, 200
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	jirl	$ra, $a1, 0
	fld.s	$fa1, $s0, 0
	fld.s	$fa2, $s0, 4
	fld.s	$fa3, $s0, 8
	fsub.s	$fa1, $fa1, $fa0
	fsub.s	$fa2, $fa2, $fa0
	fsub.s	$fa3, $fa3, $fa0
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa3
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 1108
	st.d	$a1, $fp, 1116
	fld.s	$fa1, $s0, 16
	fld.s	$fa2, $s0, 20
	fld.s	$fa3, $s0, 24
	fadd.s	$fa1, $fa0, $fa1
	fadd.s	$fa2, $fa0, $fa2
	fadd.s	$fa0, $fa0, $fa3
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	ld.d	$a1, $fp, 192
	movfr2gr.s	$a2, $fa0
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a0, $fp, 1124
	st.d	$a2, $fp, 1132
	beqz	$a1, .LBB3_4
# %bb.2:
	ld.d	$a2, $fp, 776
	ld.d	$a0, $a2, 32
	ld.d	$a3, $a0, 0
	ld.d	$a4, $a2, 40
	ld.d	$a5, $a3, 32
	addi.d	$a2, $fp, 1108
	addi.d	$a3, $fp, 1124
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	jr	$a5
.LBB3_3:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 1124
	vst	$vr0, $fp, 1108
.LBB3_4:
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end3:
	.size	_ZN10btSoftBody12updateBoundsEv, .Lfunc_end3-_ZN10btSoftBody12updateBoundsEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIiED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIiED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIiED2Ev # -- Begin function _ZN20btAlignedObjectArrayIiED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIiED2Ev,@function
_ZN20btAlignedObjectArrayIiED2Ev:       # @_ZN20btAlignedObjectArrayIiED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB4_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB4_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB4_3:                                # %_ZN20btAlignedObjectArrayIiE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end4:
	.size	_ZN20btAlignedObjectArrayIiED2Ev, .Lfunc_end4-_ZN20btAlignedObjectArrayIiED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text.__clang_call_terminate,"axG",@progbits,__clang_call_terminate,comdat
	.hidden	__clang_call_terminate          # -- Begin function __clang_call_terminate
	.weak	__clang_call_terminate
	.p2align	5
	.type	__clang_call_terminate,@function
__clang_call_terminate:                 # @__clang_call_terminate
# %bb.0:
	addi.d	$sp, $sp, -16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(__cxa_begin_catch)
	jirl	$ra, $ra, 0
	pcaddu18i	$ra, %call36(_ZSt9terminatev)
	jirl	$ra, $ra, 0
.Lfunc_end5:
	.size	__clang_call_terminate, .Lfunc_end5-__clang_call_terminate
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIbED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIbED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIbED2Ev # -- Begin function _ZN20btAlignedObjectArrayIbED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIbED2Ev,@function
_ZN20btAlignedObjectArrayIbED2Ev:       # @_ZN20btAlignedObjectArrayIbED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB6_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB6_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB6_3:                                # %_ZN20btAlignedObjectArrayIbE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end6:
	.size	_ZN20btAlignedObjectArrayIbED2Ev, .Lfunc_end6-_ZN20btAlignedObjectArrayIbED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev,@function
_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev: # @_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB7_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB7_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB7_3:                                # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end7:
	.size	_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev, .Lfunc_end7-_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev,@function
_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev: # @_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB8_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB8_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB8_3:                                # %_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end8:
	.size	_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev, .Lfunc_end8-_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev,@function
_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev: # @_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB9_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB9_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB9_3:                                # %_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end9:
	.size	_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev, .Lfunc_end9-_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB10_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB10_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB10_3:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end10:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev, .Lfunc_end10-_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB11_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB11_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB11_3:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end11:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev, .Lfunc_end11-_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB12_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB12_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB12_3:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end12:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev, .Lfunc_end12-_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB13_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB13_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB13_3:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end13:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev, .Lfunc_end13-_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB14_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB14_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB14_3:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end14:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev, .Lfunc_end14-_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB15_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB15_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB15_3:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end15:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev, .Lfunc_end15-_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB16_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB16_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB16_3:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end16:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev, .Lfunc_end16-_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB17_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB17_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB17_3:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end17:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev, .Lfunc_end17-_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN10btSoftBody4PoseD2Ev,"axG",@progbits,_ZN10btSoftBody4PoseD2Ev,comdat
	.weak	_ZN10btSoftBody4PoseD2Ev        # -- Begin function _ZN10btSoftBody4PoseD2Ev
	.p2align	5
	.type	_ZN10btSoftBody4PoseD2Ev,@function
_ZN10btSoftBody4PoseD2Ev:               # @_ZN10btSoftBody4PoseD2Ev
.Lfunc_begin1:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception1
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
	ld.d	$a0, $a0, 56
	beqz	$a0, .LBB18_3
# %bb.1:
	ld.b	$a1, $fp, 64
	andi	$a1, $a1, 1
	beqz	$a1, .LBB18_3
# %bb.2:
.Ltmp74:                                # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp75:                                # EH_LABEL
.LBB18_3:
	ld.d	$a0, $fp, 24
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 64
	st.d	$zero, $fp, 56
	st.d	$zero, $fp, 44
	beqz	$a0, .LBB18_6
# %bb.4:
	ld.b	$a1, $fp, 32
	andi	$a1, $a1, 1
	beqz	$a1, .LBB18_6
# %bb.5:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB18_6:                               # %_ZN20btAlignedObjectArrayI9btVector3ED2Ev.exit
	st.b	$s0, $fp, 32
	st.d	$zero, $fp, 24
	st.d	$zero, $fp, 12
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB18_7:
.Ltmp76:                                # EH_LABEL
	move	$s0, $a0
	addi.d	$a0, $fp, 8
.Ltmp77:                                # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayI9btVector3ED2Ev)
	jirl	$ra, $ra, 0
.Ltmp78:                                # EH_LABEL
# %bb.8:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB18_9:
.Ltmp79:                                # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end18:
	.size	_ZN10btSoftBody4PoseD2Ev, .Lfunc_end18-_ZN10btSoftBody4PoseD2Ev
	.cfi_endproc
	.section	.gcc_except_table._ZN10btSoftBody4PoseD2Ev,"aG",@progbits,_ZN10btSoftBody4PoseD2Ev,comdat
	.p2align	2, 0x0
GCC_except_table18:
.Lexception1:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase1-.Lttbaseref1
.Lttbaseref1:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end1-.Lcst_begin1
.Lcst_begin1:
	.uleb128 .Ltmp74-.Lfunc_begin1          # >> Call Site 1 <<
	.uleb128 .Ltmp75-.Ltmp74                #   Call between .Ltmp74 and .Ltmp75
	.uleb128 .Ltmp76-.Lfunc_begin1          #     jumps to .Ltmp76
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp75-.Lfunc_begin1          # >> Call Site 2 <<
	.uleb128 .Ltmp77-.Ltmp75                #   Call between .Ltmp75 and .Ltmp77
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp77-.Lfunc_begin1          # >> Call Site 3 <<
	.uleb128 .Ltmp78-.Ltmp77                #   Call between .Ltmp77 and .Ltmp78
	.uleb128 .Ltmp79-.Lfunc_begin1          #     jumps to .Ltmp79
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp78-.Lfunc_begin1          # >> Call Site 4 <<
	.uleb128 .Lfunc_end18-.Ltmp78           #   Call between .Ltmp78 and .Lfunc_end18
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end1:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase1:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN10btSoftBody6ConfigD2Ev,"axG",@progbits,_ZN10btSoftBody6ConfigD2Ev,comdat
	.weak	_ZN10btSoftBody6ConfigD2Ev      # -- Begin function _ZN10btSoftBody6ConfigD2Ev
	.p2align	5
	.type	_ZN10btSoftBody6ConfigD2Ev,@function
_ZN10btSoftBody6ConfigD2Ev:             # @_ZN10btSoftBody6ConfigD2Ev
.Lfunc_begin2:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception2
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
	ld.d	$a0, $a0, 184
	beqz	$a0, .LBB19_3
# %bb.1:
	ld.b	$a1, $fp, 192
	andi	$a1, $a1, 1
	beqz	$a1, .LBB19_3
# %bb.2:
.Ltmp80:                                # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp81:                                # EH_LABEL
.LBB19_3:
	ld.d	$a0, $fp, 152
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 192
	st.d	$zero, $fp, 184
	st.d	$zero, $fp, 172
	beqz	$a0, .LBB19_6
# %bb.4:
	ld.b	$a1, $fp, 160
	andi	$a1, $a1, 1
	beqz	$a1, .LBB19_6
# %bb.5:
.Ltmp85:                                # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp86:                                # EH_LABEL
.LBB19_6:
	ld.d	$a0, $fp, 120
	st.b	$s0, $fp, 160
	st.d	$zero, $fp, 152
	st.d	$zero, $fp, 140
	beqz	$a0, .LBB19_9
# %bb.7:
	ld.b	$a1, $fp, 128
	andi	$a1, $a1, 1
	beqz	$a1, .LBB19_9
# %bb.8:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB19_9:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 128
	st.d	$zero, $fp, 120
	st.d	$zero, $fp, 108
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB19_10:
.Ltmp87:                                # EH_LABEL
	move	$s0, $a0
	b	.LBB19_12
.LBB19_11:
.Ltmp82:                                # EH_LABEL
	move	$s0, $a0
	addi.d	$a0, $fp, 136
.Ltmp83:                                # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev)
	jirl	$ra, $ra, 0
.Ltmp84:                                # EH_LABEL
.LBB19_12:
	addi.d	$a0, $fp, 104
.Ltmp88:                                # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev)
	jirl	$ra, $ra, 0
.Ltmp89:                                # EH_LABEL
# %bb.13:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB19_14:
.Ltmp90:                                # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end19:
	.size	_ZN10btSoftBody6ConfigD2Ev, .Lfunc_end19-_ZN10btSoftBody6ConfigD2Ev
	.cfi_endproc
	.section	.gcc_except_table._ZN10btSoftBody6ConfigD2Ev,"aG",@progbits,_ZN10btSoftBody6ConfigD2Ev,comdat
	.p2align	2, 0x0
GCC_except_table19:
.Lexception2:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase2-.Lttbaseref2
.Lttbaseref2:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end2-.Lcst_begin2
.Lcst_begin2:
	.uleb128 .Ltmp80-.Lfunc_begin2          # >> Call Site 1 <<
	.uleb128 .Ltmp81-.Ltmp80                #   Call between .Ltmp80 and .Ltmp81
	.uleb128 .Ltmp82-.Lfunc_begin2          #     jumps to .Ltmp82
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp85-.Lfunc_begin2          # >> Call Site 2 <<
	.uleb128 .Ltmp86-.Ltmp85                #   Call between .Ltmp85 and .Ltmp86
	.uleb128 .Ltmp87-.Lfunc_begin2          #     jumps to .Ltmp87
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp86-.Lfunc_begin2          # >> Call Site 3 <<
	.uleb128 .Ltmp83-.Ltmp86                #   Call between .Ltmp86 and .Ltmp83
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp83-.Lfunc_begin2          # >> Call Site 4 <<
	.uleb128 .Ltmp89-.Ltmp83                #   Call between .Ltmp83 and .Ltmp89
	.uleb128 .Ltmp90-.Lfunc_begin2          #     jumps to .Ltmp90
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp89-.Lfunc_begin2          # >> Call Site 5 <<
	.uleb128 .Lfunc_end19-.Ltmp89           #   Call between .Ltmp89 and .Lfunc_end19
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end2:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase2:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev # -- Begin function _ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev,@function
_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev: # @_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB20_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB20_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB20_3:                               # %_ZN20btAlignedObjectArrayIP17btCollisionObjectE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end20:
	.size	_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev, .Lfunc_end20-_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_ZN10btSoftBodyD2Ev             # -- Begin function _ZN10btSoftBodyD2Ev
	.p2align	5
	.type	_ZN10btSoftBodyD2Ev,@function
_ZN10btSoftBodyD2Ev:                    # @_ZN10btSoftBodyD2Ev
.Lfunc_begin3:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception3
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZTV10btSoftBody+16)
	addi.d	$a1, $a0, %pc_lo12(_ZTV10btSoftBody+16)
	ld.d	$a0, $fp, 200
	st.d	$a1, $fp, 0
	beqz	$a0, .LBB21_2
# %bb.1:
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 8
.Ltmp91:                                # EH_LABEL
	jirl	$ra, $a1, 0
.Ltmp92:                                # EH_LABEL
.LBB21_2:
.Ltmp94:                                # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody15releaseClustersEv)
	jirl	$ra, $ra, 0
.Ltmp95:                                # EH_LABEL
# %bb.3:                                # %.preheader92
	ld.w	$a0, $fp, 1076
	blez	$a0, .LBB21_7
# %bb.4:                                # %.lr.ph
	move	$s0, $zero
	move	$s1, $zero
	.p2align	4, , 16
.LBB21_5:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 1088
	ldx.d	$a0, $a0, $s0
.Ltmp97:                                # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp98:                                # EH_LABEL
# %bb.6:                                #   in Loop: Header=BB21_5 Depth=1
	ld.w	$a0, $fp, 1076
	addi.d	$s1, $s1, 1
	addi.d	$s0, $s0, 8
	blt	$s1, $a0, .LBB21_5
.LBB21_7:                               # %.preheader
	ld.w	$a0, $fp, 1044
	blez	$a0, .LBB21_11
# %bb.8:                                # %.lr.ph101
	move	$s0, $zero
	move	$s1, $zero
	.p2align	4, , 16
.LBB21_9:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 1056
	ldx.d	$a0, $a0, $s0
.Ltmp100:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp101:                               # EH_LABEL
# %bb.10:                               #   in Loop: Header=BB21_9 Depth=1
	ld.w	$a0, $fp, 1044
	addi.d	$s1, $s1, 1
	addi.d	$s0, $s0, 8
	blt	$s1, $a0, .LBB21_9
.LBB21_11:                              # %._crit_edge
	ld.d	$a0, $fp, 1480
	beqz	$a0, .LBB21_14
# %bb.12:                               # %._crit_edge
	ld.b	$a1, $fp, 1488
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_14
# %bb.13:
.Ltmp105:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp106:                               # EH_LABEL
.LBB21_14:
	ld.d	$a0, $fp, 1384
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 1488
	st.d	$zero, $fp, 1480
	st.d	$zero, $fp, 1468
	beqz	$a0, .LBB21_17
# %bb.15:
	ld.b	$a1, $fp, 1392
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_17
# %bb.16:
.Ltmp110:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp111:                               # EH_LABEL
.LBB21_17:
	ld.d	$a0, $fp, 1352
	st.b	$s0, $fp, 1392
	st.d	$zero, $fp, 1384
	st.d	$zero, $fp, 1372
	beqz	$a0, .LBB21_20
# %bb.18:
	ld.b	$a1, $fp, 1360
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_20
# %bb.19:
.Ltmp115:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp116:                               # EH_LABEL
.LBB21_20:
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1360
	st.d	$zero, $fp, 1352
	st.d	$zero, $fp, 1340
	addi.d	$a0, $fp, 1272
.Ltmp120:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN6btDbvtD1Ev)
	jirl	$ra, $ra, 0
.Ltmp121:                               # EH_LABEL
# %bb.21:
	addi.d	$a0, $fp, 1208
.Ltmp125:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN6btDbvtD1Ev)
	jirl	$ra, $ra, 0
.Ltmp126:                               # EH_LABEL
# %bb.22:
	addi.d	$a0, $fp, 1144
.Ltmp130:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN6btDbvtD1Ev)
	jirl	$ra, $ra, 0
.Ltmp131:                               # EH_LABEL
# %bb.23:
	ld.d	$a0, $fp, 1088
	beqz	$a0, .LBB21_26
# %bb.24:
	ld.b	$a1, $fp, 1096
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_26
# %bb.25:
.Ltmp135:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp136:                               # EH_LABEL
.LBB21_26:
	ld.d	$a0, $fp, 1056
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 1096
	st.d	$zero, $fp, 1088
	st.d	$zero, $fp, 1076
	beqz	$a0, .LBB21_29
# %bb.27:
	ld.b	$a1, $fp, 1064
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_29
# %bb.28:
.Ltmp140:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp141:                               # EH_LABEL
.LBB21_29:
	ld.d	$a0, $fp, 1024
	st.b	$s0, $fp, 1064
	st.d	$zero, $fp, 1056
	st.d	$zero, $fp, 1044
	beqz	$a0, .LBB21_32
# %bb.30:
	ld.b	$a1, $fp, 1032
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_32
# %bb.31:
.Ltmp145:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp146:                               # EH_LABEL
.LBB21_32:
	ld.d	$a0, $fp, 992
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 1032
	st.d	$zero, $fp, 1024
	st.d	$zero, $fp, 1012
	beqz	$a0, .LBB21_35
# %bb.33:
	ld.b	$a1, $fp, 1000
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_35
# %bb.34:
.Ltmp150:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp151:                               # EH_LABEL
.LBB21_35:
	ld.d	$a0, $fp, 960
	st.b	$s0, $fp, 1000
	st.d	$zero, $fp, 992
	st.d	$zero, $fp, 980
	beqz	$a0, .LBB21_38
# %bb.36:
	ld.b	$a1, $fp, 968
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_38
# %bb.37:
.Ltmp155:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp156:                               # EH_LABEL
.LBB21_38:
	ld.d	$a0, $fp, 928
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 968
	st.d	$zero, $fp, 960
	st.d	$zero, $fp, 948
	beqz	$a0, .LBB21_41
# %bb.39:
	ld.b	$a1, $fp, 936
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_41
# %bb.40:
.Ltmp160:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp161:                               # EH_LABEL
.LBB21_41:
	ld.d	$a0, $fp, 896
	st.b	$s0, $fp, 936
	st.d	$zero, $fp, 928
	st.d	$zero, $fp, 916
	beqz	$a0, .LBB21_44
# %bb.42:
	ld.b	$a1, $fp, 904
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_44
# %bb.43:
.Ltmp165:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp166:                               # EH_LABEL
.LBB21_44:
	ld.d	$a0, $fp, 864
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 904
	st.d	$zero, $fp, 896
	st.d	$zero, $fp, 884
	beqz	$a0, .LBB21_47
# %bb.45:
	ld.b	$a1, $fp, 872
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_47
# %bb.46:
.Ltmp170:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp171:                               # EH_LABEL
.LBB21_47:
	ld.d	$a0, $fp, 832
	st.b	$s0, $fp, 872
	st.d	$zero, $fp, 864
	st.d	$zero, $fp, 852
	beqz	$a0, .LBB21_50
# %bb.48:
	ld.b	$a1, $fp, 840
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_50
# %bb.49:
.Ltmp175:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp176:                               # EH_LABEL
.LBB21_50:
	ld.d	$a0, $fp, 800
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 840
	st.d	$zero, $fp, 832
	st.d	$zero, $fp, 820
	beqz	$a0, .LBB21_53
# %bb.51:
	ld.b	$a1, $fp, 808
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_53
# %bb.52:
.Ltmp180:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp181:                               # EH_LABEL
.LBB21_53:
	ld.d	$a0, $fp, 592
	st.b	$s0, $fp, 808
	st.d	$zero, $fp, 800
	st.d	$zero, $fp, 788
	beqz	$a0, .LBB21_56
# %bb.54:
	ld.b	$a1, $fp, 600
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_56
# %bb.55:
.Ltmp185:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp186:                               # EH_LABEL
.LBB21_56:
	ld.d	$a0, $fp, 560
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 600
	st.d	$zero, $fp, 592
	st.d	$zero, $fp, 580
	beqz	$a0, .LBB21_59
# %bb.57:
	ld.b	$a1, $fp, 568
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_59
# %bb.58:
.Ltmp191:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp192:                               # EH_LABEL
.LBB21_59:
	st.b	$s0, $fp, 568
	st.d	$zero, $fp, 560
	st.d	$zero, $fp, 548
	addi.d	$a0, $fp, 312
.Ltmp196:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN10btSoftBody6ConfigD2Ev)
	jirl	$ra, $ra, 0
.Ltmp197:                               # EH_LABEL
# %bb.60:
	ld.d	$a0, $fp, 296
	beqz	$a0, .LBB21_63
# %bb.61:
	ld.b	$a1, $fp, 304
	andi	$a1, $a1, 1
	beqz	$a1, .LBB21_63
# %bb.62:
.Ltmp201:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp202:                               # EH_LABEL
.LBB21_63:
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 304
	st.d	$zero, $fp, 296
	st.d	$zero, $fp, 284
	move	$a0, $fp
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_ZN17btCollisionObjectD2Ev)
	jr	$t8
.LBB21_64:
.Ltmp203:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_108
.LBB21_65:
.Ltmp193:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_106
.LBB21_66:
.Ltmp187:                               # EH_LABEL
	move	$s0, $a0
	addi.d	$a0, $fp, 544
.Ltmp188:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayI9btVector3ED2Ev)
	jirl	$ra, $ra, 0
.Ltmp189:                               # EH_LABEL
	b	.LBB21_106
.LBB21_67:
.Ltmp190:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.LBB21_68:
.Ltmp182:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_105
.LBB21_69:
.Ltmp177:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_104
.LBB21_70:
.Ltmp172:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_103
.LBB21_71:
.Ltmp167:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_102
.LBB21_72:
.Ltmp162:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_101
.LBB21_73:
.Ltmp157:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_100
.LBB21_74:
.Ltmp152:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_99
.LBB21_75:
.Ltmp147:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_98
.LBB21_76:
.Ltmp142:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_97
.LBB21_77:
.Ltmp137:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_96
.LBB21_78:
.Ltmp117:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_92
.LBB21_79:
.Ltmp112:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_91
.LBB21_80:
.Ltmp107:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_90
.LBB21_81:
.Ltmp93:                                # EH_LABEL
	b	.LBB21_89
.LBB21_82:
.Ltmp198:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_107
.LBB21_83:
.Ltmp132:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_95
.LBB21_84:
.Ltmp127:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_94
.LBB21_85:
.Ltmp122:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB21_93
.LBB21_86:                              # %.loopexit.split-lp.loopexit.split-lp
.Ltmp96:                                # EH_LABEL
	b	.LBB21_89
.LBB21_87:                              # %.loopexit
.Ltmp102:                               # EH_LABEL
	b	.LBB21_89
.LBB21_88:                              # %.loopexit.split-lp.loopexit
.Ltmp99:                                # EH_LABEL
.LBB21_89:                              # %.loopexit.split-lp
	move	$s0, $a0
	addi.d	$a0, $fp, 1464
.Ltmp103:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIiED2Ev)
	jirl	$ra, $ra, 0
.Ltmp104:                               # EH_LABEL
.LBB21_90:
	addi.d	$a0, $fp, 1368
.Ltmp108:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIbED2Ev)
	jirl	$ra, $ra, 0
.Ltmp109:                               # EH_LABEL
.LBB21_91:
	addi.d	$a0, $fp, 1336
.Ltmp113:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp114:                               # EH_LABEL
.LBB21_92:
	addi.d	$a0, $fp, 1272
.Ltmp118:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN6btDbvtD1Ev)
	jirl	$ra, $ra, 0
.Ltmp119:                               # EH_LABEL
.LBB21_93:
	addi.d	$a0, $fp, 1208
.Ltmp123:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN6btDbvtD1Ev)
	jirl	$ra, $ra, 0
.Ltmp124:                               # EH_LABEL
.LBB21_94:
	addi.d	$a0, $fp, 1144
.Ltmp128:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN6btDbvtD1Ev)
	jirl	$ra, $ra, 0
.Ltmp129:                               # EH_LABEL
.LBB21_95:
	addi.d	$a0, $fp, 1072
.Ltmp133:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIPN10btSoftBody8MaterialEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp134:                               # EH_LABEL
.LBB21_96:
	addi.d	$a0, $fp, 1040
.Ltmp138:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp139:                               # EH_LABEL
.LBB21_97:
	addi.d	$a0, $fp, 1008
.Ltmp143:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp144:                               # EH_LABEL
.LBB21_98:
	addi.d	$a0, $fp, 976
.Ltmp148:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp149:                               # EH_LABEL
.LBB21_99:
	addi.d	$a0, $fp, 944
.Ltmp153:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp154:                               # EH_LABEL
.LBB21_100:
	addi.d	$a0, $fp, 912
.Ltmp158:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp159:                               # EH_LABEL
.LBB21_101:
	addi.d	$a0, $fp, 880
.Ltmp163:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp164:                               # EH_LABEL
.LBB21_102:
	addi.d	$a0, $fp, 848
.Ltmp168:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp169:                               # EH_LABEL
.LBB21_103:
	addi.d	$a0, $fp, 816
.Ltmp173:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp174:                               # EH_LABEL
.LBB21_104:
	addi.d	$a0, $fp, 784
.Ltmp178:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp179:                               # EH_LABEL
.LBB21_105:
	addi.d	$a0, $fp, 536
.Ltmp183:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN10btSoftBody4PoseD2Ev)
	jirl	$ra, $ra, 0
.Ltmp184:                               # EH_LABEL
.LBB21_106:                             # %.body
	addi.d	$a0, $fp, 312
.Ltmp194:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN10btSoftBody6ConfigD2Ev)
	jirl	$ra, $ra, 0
.Ltmp195:                               # EH_LABEL
.LBB21_107:
	addi.d	$a0, $fp, 280
.Ltmp199:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIP17btCollisionObjectED2Ev)
	jirl	$ra, $ra, 0
.Ltmp200:                               # EH_LABEL
.LBB21_108:
.Ltmp204:                               # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN17btCollisionObjectD2Ev)
	jirl	$ra, $ra, 0
.Ltmp205:                               # EH_LABEL
# %bb.109:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB21_110:
.Ltmp206:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end21:
	.size	_ZN10btSoftBodyD2Ev, .Lfunc_end21-_ZN10btSoftBodyD2Ev
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table21:
.Lexception3:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase3-.Lttbaseref3
.Lttbaseref3:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end3-.Lcst_begin3
.Lcst_begin3:
	.uleb128 .Ltmp91-.Lfunc_begin3          # >> Call Site 1 <<
	.uleb128 .Ltmp92-.Ltmp91                #   Call between .Ltmp91 and .Ltmp92
	.uleb128 .Ltmp93-.Lfunc_begin3          #     jumps to .Ltmp93
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp94-.Lfunc_begin3          # >> Call Site 2 <<
	.uleb128 .Ltmp95-.Ltmp94                #   Call between .Ltmp94 and .Ltmp95
	.uleb128 .Ltmp96-.Lfunc_begin3          #     jumps to .Ltmp96
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp97-.Lfunc_begin3          # >> Call Site 3 <<
	.uleb128 .Ltmp98-.Ltmp97                #   Call between .Ltmp97 and .Ltmp98
	.uleb128 .Ltmp99-.Lfunc_begin3          #     jumps to .Ltmp99
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp100-.Lfunc_begin3         # >> Call Site 4 <<
	.uleb128 .Ltmp101-.Ltmp100              #   Call between .Ltmp100 and .Ltmp101
	.uleb128 .Ltmp102-.Lfunc_begin3         #     jumps to .Ltmp102
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp105-.Lfunc_begin3         # >> Call Site 5 <<
	.uleb128 .Ltmp106-.Ltmp105              #   Call between .Ltmp105 and .Ltmp106
	.uleb128 .Ltmp107-.Lfunc_begin3         #     jumps to .Ltmp107
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp110-.Lfunc_begin3         # >> Call Site 6 <<
	.uleb128 .Ltmp111-.Ltmp110              #   Call between .Ltmp110 and .Ltmp111
	.uleb128 .Ltmp112-.Lfunc_begin3         #     jumps to .Ltmp112
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp115-.Lfunc_begin3         # >> Call Site 7 <<
	.uleb128 .Ltmp116-.Ltmp115              #   Call between .Ltmp115 and .Ltmp116
	.uleb128 .Ltmp117-.Lfunc_begin3         #     jumps to .Ltmp117
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp120-.Lfunc_begin3         # >> Call Site 8 <<
	.uleb128 .Ltmp121-.Ltmp120              #   Call between .Ltmp120 and .Ltmp121
	.uleb128 .Ltmp122-.Lfunc_begin3         #     jumps to .Ltmp122
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp125-.Lfunc_begin3         # >> Call Site 9 <<
	.uleb128 .Ltmp126-.Ltmp125              #   Call between .Ltmp125 and .Ltmp126
	.uleb128 .Ltmp127-.Lfunc_begin3         #     jumps to .Ltmp127
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp130-.Lfunc_begin3         # >> Call Site 10 <<
	.uleb128 .Ltmp131-.Ltmp130              #   Call between .Ltmp130 and .Ltmp131
	.uleb128 .Ltmp132-.Lfunc_begin3         #     jumps to .Ltmp132
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp135-.Lfunc_begin3         # >> Call Site 11 <<
	.uleb128 .Ltmp136-.Ltmp135              #   Call between .Ltmp135 and .Ltmp136
	.uleb128 .Ltmp137-.Lfunc_begin3         #     jumps to .Ltmp137
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp140-.Lfunc_begin3         # >> Call Site 12 <<
	.uleb128 .Ltmp141-.Ltmp140              #   Call between .Ltmp140 and .Ltmp141
	.uleb128 .Ltmp142-.Lfunc_begin3         #     jumps to .Ltmp142
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp145-.Lfunc_begin3         # >> Call Site 13 <<
	.uleb128 .Ltmp146-.Ltmp145              #   Call between .Ltmp145 and .Ltmp146
	.uleb128 .Ltmp147-.Lfunc_begin3         #     jumps to .Ltmp147
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp150-.Lfunc_begin3         # >> Call Site 14 <<
	.uleb128 .Ltmp151-.Ltmp150              #   Call between .Ltmp150 and .Ltmp151
	.uleb128 .Ltmp152-.Lfunc_begin3         #     jumps to .Ltmp152
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp155-.Lfunc_begin3         # >> Call Site 15 <<
	.uleb128 .Ltmp156-.Ltmp155              #   Call between .Ltmp155 and .Ltmp156
	.uleb128 .Ltmp157-.Lfunc_begin3         #     jumps to .Ltmp157
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp160-.Lfunc_begin3         # >> Call Site 16 <<
	.uleb128 .Ltmp161-.Ltmp160              #   Call between .Ltmp160 and .Ltmp161
	.uleb128 .Ltmp162-.Lfunc_begin3         #     jumps to .Ltmp162
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp165-.Lfunc_begin3         # >> Call Site 17 <<
	.uleb128 .Ltmp166-.Ltmp165              #   Call between .Ltmp165 and .Ltmp166
	.uleb128 .Ltmp167-.Lfunc_begin3         #     jumps to .Ltmp167
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp170-.Lfunc_begin3         # >> Call Site 18 <<
	.uleb128 .Ltmp171-.Ltmp170              #   Call between .Ltmp170 and .Ltmp171
	.uleb128 .Ltmp172-.Lfunc_begin3         #     jumps to .Ltmp172
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp175-.Lfunc_begin3         # >> Call Site 19 <<
	.uleb128 .Ltmp176-.Ltmp175              #   Call between .Ltmp175 and .Ltmp176
	.uleb128 .Ltmp177-.Lfunc_begin3         #     jumps to .Ltmp177
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp180-.Lfunc_begin3         # >> Call Site 20 <<
	.uleb128 .Ltmp181-.Ltmp180              #   Call between .Ltmp180 and .Ltmp181
	.uleb128 .Ltmp182-.Lfunc_begin3         #     jumps to .Ltmp182
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp185-.Lfunc_begin3         # >> Call Site 21 <<
	.uleb128 .Ltmp186-.Ltmp185              #   Call between .Ltmp185 and .Ltmp186
	.uleb128 .Ltmp187-.Lfunc_begin3         #     jumps to .Ltmp187
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp191-.Lfunc_begin3         # >> Call Site 22 <<
	.uleb128 .Ltmp192-.Ltmp191              #   Call between .Ltmp191 and .Ltmp192
	.uleb128 .Ltmp193-.Lfunc_begin3         #     jumps to .Ltmp193
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp196-.Lfunc_begin3         # >> Call Site 23 <<
	.uleb128 .Ltmp197-.Ltmp196              #   Call between .Ltmp196 and .Ltmp197
	.uleb128 .Ltmp198-.Lfunc_begin3         #     jumps to .Ltmp198
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp201-.Lfunc_begin3         # >> Call Site 24 <<
	.uleb128 .Ltmp202-.Ltmp201              #   Call between .Ltmp201 and .Ltmp202
	.uleb128 .Ltmp203-.Lfunc_begin3         #     jumps to .Ltmp203
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp202-.Lfunc_begin3         # >> Call Site 25 <<
	.uleb128 .Ltmp188-.Ltmp202              #   Call between .Ltmp202 and .Ltmp188
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp188-.Lfunc_begin3         # >> Call Site 26 <<
	.uleb128 .Ltmp189-.Ltmp188              #   Call between .Ltmp188 and .Ltmp189
	.uleb128 .Ltmp190-.Lfunc_begin3         #     jumps to .Ltmp190
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp189-.Lfunc_begin3         # >> Call Site 27 <<
	.uleb128 .Ltmp103-.Ltmp189              #   Call between .Ltmp189 and .Ltmp103
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp103-.Lfunc_begin3         # >> Call Site 28 <<
	.uleb128 .Ltmp205-.Ltmp103              #   Call between .Ltmp103 and .Ltmp205
	.uleb128 .Ltmp206-.Lfunc_begin3         #     jumps to .Ltmp206
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp205-.Lfunc_begin3         # >> Call Site 29 <<
	.uleb128 .Lfunc_end21-.Ltmp205          #   Call between .Ltmp205 and .Lfunc_end21
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end3:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase3:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody15releaseClustersEv # -- Begin function _ZN10btSoftBody15releaseClustersEv
	.p2align	5
	.type	_ZN10btSoftBody15releaseClustersEv,@function
_ZN10btSoftBody15releaseClustersEv:     # @_ZN10btSoftBody15releaseClustersEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	move	$fp, $a0
	ld.w	$a0, $a0, 1340
	blez	$a0, .LBB22_10
# %bb.1:                                # %.lr.ph
	addi.d	$s0, $fp, 1272
	ori	$s2, $zero, 1
	.p2align	4, , 16
.LBB22_2:                               # %.backedge
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_6 Depth 2
	ld.d	$a0, $fp, 1352
	ld.d	$s1, $a0, 0
	ld.d	$a1, $s1, 384
	beqz	$a1, .LBB22_4
# %bb.3:                                #   in Loop: Header=BB22_2 Depth=1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN6btDbvt6removeEP10btDbvtNode)
	jirl	$ra, $ra, 0
.LBB22_4:                               #   in Loop: Header=BB22_2 Depth=1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN10btSoftBody7ClusterD2Ev)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 1340
	blez	$a0, .LBB22_10
# %bb.5:                                # %.lr.ph.i.i.i
                                        #   in Loop: Header=BB22_2 Depth=1
	ld.d	$a1, $fp, 1352
	move	$a3, $zero
	move	$a4, $a0
	move	$a2, $a1
	.p2align	4, , 16
.LBB22_6:                               #   Parent Loop BB22_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a5, $a2, 0
	beq	$a5, $s1, .LBB22_8
# %bb.7:                                #   in Loop: Header=BB22_6 Depth=2
	addi.d	$a2, $a2, 8
	addi.d	$a4, $a4, -1
	addi.w	$a3, $a3, 1
	bnez	$a4, .LBB22_6
	b	.LBB22_2
	.p2align	4, , 16
.LBB22_8:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE16findLinearSearchERKS2_.exit.i.i
                                        #   in Loop: Header=BB22_2 Depth=1
	bge	$a3, $a0, .LBB22_2
# %bb.9:                                #   in Loop: Header=BB22_2 Depth=1
	addi.w	$a3, $a0, -1
	slli.d	$a4, $a3, 3
	ldx.d	$a5, $a1, $a4
	ld.d	$a6, $a2, 0
	st.d	$a5, $a2, 0
	stx.d	$a6, $a1, $a4
	st.w	$a3, $fp, 1340
	bne	$a0, $s2, .LBB22_2
.LBB22_10:                              # %._crit_edge
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end22:
	.size	_ZN10btSoftBody15releaseClustersEv, .Lfunc_end22-_ZN10btSoftBody15releaseClustersEv
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBodyD0Ev             # -- Begin function _ZN10btSoftBodyD0Ev
	.p2align	5
	.type	_ZN10btSoftBodyD0Ev,@function
_ZN10btSoftBodyD0Ev:                    # @_ZN10btSoftBodyD0Ev
.Lfunc_begin4:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception4
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
.Ltmp207:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN10btSoftBodyD2Ev)
	jirl	$ra, $ra, 0
.Ltmp208:                               # EH_LABEL
# %bb.1:
	move	$a0, $fp
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z21btAlignedFreeInternalPv)
	jr	$t8
.LBB23_2:
.Ltmp209:                               # EH_LABEL
	move	$s0, $a0
.Ltmp210:                               # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp211:                               # EH_LABEL
# %bb.3:                                # %_ZN17btCollisionObjectdlEPv.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB23_4:
.Ltmp212:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end23:
	.size	_ZN10btSoftBodyD0Ev, .Lfunc_end23-_ZN10btSoftBodyD0Ev
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table23:
.Lexception4:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase4-.Lttbaseref4
.Lttbaseref4:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end4-.Lcst_begin4
.Lcst_begin4:
	.uleb128 .Ltmp207-.Lfunc_begin4         # >> Call Site 1 <<
	.uleb128 .Ltmp208-.Ltmp207              #   Call between .Ltmp207 and .Ltmp208
	.uleb128 .Ltmp209-.Lfunc_begin4         #     jumps to .Ltmp209
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp208-.Lfunc_begin4         # >> Call Site 2 <<
	.uleb128 .Ltmp210-.Ltmp208              #   Call between .Ltmp208 and .Ltmp210
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp210-.Lfunc_begin4         # >> Call Site 3 <<
	.uleb128 .Ltmp211-.Ltmp210              #   Call between .Ltmp210 and .Ltmp211
	.uleb128 .Ltmp212-.Lfunc_begin4         #     jumps to .Ltmp212
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp211-.Lfunc_begin4         # >> Call Site 4 <<
	.uleb128 .Lfunc_end23-.Ltmp211          #   Call between .Ltmp211 and .Lfunc_end23
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end4:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase4:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZNK10btSoftBody9checkLinkEii   # -- Begin function _ZNK10btSoftBody9checkLinkEii
	.p2align	5
	.type	_ZNK10btSoftBody9checkLinkEii,@function
_ZNK10btSoftBody9checkLinkEii:          # @_ZNK10btSoftBody9checkLinkEii
# %bb.0:
	ld.w	$a3, $a0, 852
	blez	$a3, .LBB24_8
# %bb.1:                                # %.lr.ph.i
	ld.d	$a4, $a0, 832
	ori	$a5, $zero, 120
	mul.d	$a1, $a1, $a5
	ld.d	$a6, $a0, 864
	add.d	$a0, $a4, $a1
	mul.d	$a1, $a2, $a5
	add.d	$a1, $a4, $a1
	addi.d	$a2, $a6, 24
	b	.LBB24_3
	.p2align	4, , 16
.LBB24_2:                               # %.critedge.i
                                        #   in Loop: Header=BB24_3 Depth=1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 72
	beqz	$a3, .LBB24_8
.LBB24_3:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a2, -8
	bne	$a4, $a0, .LBB24_5
# %bb.4:                                #   in Loop: Header=BB24_3 Depth=1
	ld.d	$a5, $a2, 0
	beq	$a5, $a1, .LBB24_7
.LBB24_5:                               #   in Loop: Header=BB24_3 Depth=1
	bne	$a4, $a1, .LBB24_2
# %bb.6:                                #   in Loop: Header=BB24_3 Depth=1
	ld.d	$a4, $a2, 0
	bne	$a4, $a0, .LBB24_2
.LBB24_7:
	ori	$a0, $zero, 1
	ret
.LBB24_8:
	move	$a0, $zero
	ret
.Lfunc_end24:
	.size	_ZNK10btSoftBody9checkLinkEii, .Lfunc_end24-_ZNK10btSoftBody9checkLinkEii
                                        # -- End function
	.globl	_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_ # -- Begin function _ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_
	.p2align	5
	.type	_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_,@function
_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_: # @_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_
# %bb.0:
	ld.w	$a3, $a0, 852
	blez	$a3, .LBB25_8
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $a0, 864
	addi.d	$a0, $a0, 24
	b	.LBB25_3
	.p2align	4, , 16
.LBB25_2:                               # %.critedge
                                        #   in Loop: Header=BB25_3 Depth=1
	addi.d	$a3, $a3, -1
	addi.d	$a0, $a0, 72
	beqz	$a3, .LBB25_8
.LBB25_3:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a0, -8
	bne	$a4, $a1, .LBB25_5
# %bb.4:                                #   in Loop: Header=BB25_3 Depth=1
	ld.d	$a5, $a0, 0
	beq	$a5, $a2, .LBB25_7
.LBB25_5:                               #   in Loop: Header=BB25_3 Depth=1
	bne	$a4, $a2, .LBB25_2
# %bb.6:                                #   in Loop: Header=BB25_3 Depth=1
	ld.d	$a4, $a0, 0
	bne	$a4, $a1, .LBB25_2
.LBB25_7:
	ori	$a0, $zero, 1
	ret
.LBB25_8:
	move	$a0, $zero
	ret
.Lfunc_end25:
	.size	_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_, .Lfunc_end25-_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_
                                        # -- End function
	.globl	_ZNK10btSoftBody9checkFaceEiii  # -- Begin function _ZNK10btSoftBody9checkFaceEiii
	.p2align	5
	.type	_ZNK10btSoftBody9checkFaceEiii,@function
_ZNK10btSoftBody9checkFaceEiii:         # @_ZNK10btSoftBody9checkFaceEiii
# %bb.0:
	ld.w	$a4, $a0, 884
	blez	$a4, .LBB26_13
# %bb.1:                                # %.lr.ph
	ld.d	$a5, $a0, 832
	ori	$a6, $zero, 120
	mul.d	$a1, $a1, $a6
	add.d	$a1, $a5, $a1
	mul.d	$a2, $a2, $a6
	ld.d	$a0, $a0, 896
	add.d	$a2, $a5, $a2
	mul.d	$a3, $a3, $a6
	add.d	$a3, $a5, $a3
	addi.d	$a5, $a0, 32
	b	.LBB26_3
	.p2align	4, , 16
.LBB26_2:                               #   in Loop: Header=BB26_3 Depth=1
	addi.d	$a4, $a4, -1
	addi.d	$a5, $a5, 72
	beqz	$a4, .LBB26_13
.LBB26_3:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $a5, -16
	beq	$a0, $a3, .LBB26_6
# %bb.4:                                #   in Loop: Header=BB26_3 Depth=1
	beq	$a0, $a1, .LBB26_6
# %bb.5:                                #   in Loop: Header=BB26_3 Depth=1
	bne	$a0, $a2, .LBB26_2
.LBB26_6:                               #   in Loop: Header=BB26_3 Depth=1
	ld.d	$a0, $a5, -8
	beq	$a0, $a3, .LBB26_9
# %bb.7:                                #   in Loop: Header=BB26_3 Depth=1
	beq	$a0, $a1, .LBB26_9
# %bb.8:                                #   in Loop: Header=BB26_3 Depth=1
	bne	$a0, $a2, .LBB26_2
.LBB26_9:                               #   in Loop: Header=BB26_3 Depth=1
	ld.d	$a6, $a5, 0
	ori	$a0, $zero, 1
	beq	$a6, $a3, .LBB26_12
# %bb.10:                               #   in Loop: Header=BB26_3 Depth=1
	beq	$a6, $a1, .LBB26_12
# %bb.11:                               #   in Loop: Header=BB26_3 Depth=1
	bne	$a6, $a2, .LBB26_2
.LBB26_12:                              # %.critedge
	ret
.LBB26_13:
	move	$a0, $zero
	ret
.Lfunc_end26:
	.size	_ZNK10btSoftBody9checkFaceEiii, .Lfunc_end26-_ZNK10btSoftBody9checkFaceEiii
                                        # -- End function
	.globl	_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_ # -- Begin function _ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_
	.p2align	5
	.type	_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_,@function
_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_: # @_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	pcalau12i	$t0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy)
	ld.b	$t0, $t0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy)
	move	$fp, $a0
	dbar	20
	pcalau12i	$a0, %pc_hi20(_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy)
	addi.d	$s0, $a0, %pc_lo12(_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy)
	beqz	$t0, .LBB27_13
.LBB27_1:                               # %_ZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_.exit
	ld.d	$s2, $s0, 0
	ld.w	$s1, $s0, 36
	vld	$vr0, $a2, 0
	ld.w	$a2, $fp, 788
	ld.w	$a0, $fp, 792
	vld	$vr1, $a3, 0
	vst	$vr0, $sp, 56
	bne	$a2, $a0, .LBB27_12
# %bb.2:
	sltui	$a0, $a2, 1
	slli.w	$a3, $a2, 1
	masknez	$a3, $a3, $a0
	ori	$t0, $zero, 1
	maskeqz	$a0, $t0, $a0
	or	$s5, $a0, $a3
	bge	$a2, $s5, .LBB27_12
# %bb.3:
	vst	$vr1, $sp, 16                   # 16-byte Folded Spill
	st.d	$a1, $sp, 48                    # 8-byte Folded Spill
	st.d	$a4, $sp, 40                    # 8-byte Folded Spill
	move	$s6, $a5
	move	$s7, $a6
	move	$s8, $a7
	beqz	$s5, .LBB27_5
# %bb.4:
	ori	$a0, $zero, 88
	mul.d	$a0, $s5, $a0
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a2, $fp, 788
	move	$s0, $a0
	bgtz	$a2, .LBB27_6
	b	.LBB27_8
.LBB27_5:
	move	$s0, $zero
	blez	$a2, .LBB27_8
.LBB27_6:                               # %.lr.ph.i.i.i
	move	$s3, $zero
	ori	$a0, $zero, 88
	mul.d	$s4, $a2, $a0
	.p2align	4, , 16
.LBB27_7:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 800
	add.d	$a0, $s0, $s3
	add.d	$a1, $a1, $s3
	ori	$a2, $zero, 88
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$s3, $s3, 88
	bne	$s4, $s3, .LBB27_7
.LBB27_8:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody4NoteEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $fp, 800
	beqz	$a0, .LBB27_11
# %bb.9:                                # %_ZNK20btAlignedObjectArrayIN10btSoftBody4NoteEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $fp, 808
	andi	$a1, $a1, 1
	beqz	$a1, .LBB27_11
# %bb.10:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB27_11:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$a2, $fp, 788
	st.b	$a0, $fp, 808
	st.d	$s0, $fp, 800
	st.w	$s5, $fp, 792
	move	$a7, $s8
	move	$a6, $s7
	move	$a5, $s6
	ld.d	$a4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	vld	$vr1, $sp, 16                   # 16-byte Folded Reload
.LBB27_12:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody4NoteEE9push_backERKS1_.exit
	sltu	$a0, $zero, $a4
	sltu	$a3, $zero, $a5
	add.d	$a0, $a3, $a0
	sltu	$a3, $zero, $a6
	add.d	$a0, $a0, $a3
	sltu	$a3, $zero, $a7
	add.d	$a0, $a0, $a3
	ld.d	$a3, $fp, 800
	ori	$t0, $zero, 88
	mul.d	$a2, $a2, $t0
	vld	$vr0, $sp, 56
	add.d	$t0, $a3, $a2
	stx.d	$s2, $a3, $a2
	st.d	$a1, $t0, 8
	vst	$vr0, $t0, 16
	st.w	$a0, $t0, 32
	st.w	$s1, $t0, 36
	st.d	$a4, $t0, 40
	st.d	$a5, $t0, 48
	st.d	$a6, $t0, 56
	st.d	$a7, $t0, 64
	vst	$vr1, $t0, 72
	ld.w	$a0, $fp, 788
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 788
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.LBB27_13:
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy)
	move	$s4, $a7
	move	$s7, $a6
	move	$s3, $a5
	move	$s6, $a4
	move	$s2, $a1
	move	$s5, $a3
	move	$s1, $a2
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	move	$a2, $s1
	move	$a3, $s5
	move	$a1, $s2
	move	$a4, $s6
	move	$a5, $s3
	move	$a6, $s7
	move	$a7, $s4
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB27_1
# %bb.14:
	st.d	$zero, $s0, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	move	$a2, $s1
	move	$a3, $s5
	move	$a1, $s2
	move	$a4, $s6
	move	$a5, $s3
	move	$a6, $s7
	move	$a7, $s4
	b	.LBB27_1
.Lfunc_end27:
	.size	_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_, .Lfunc_end27-_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4NodeE
.LCPI28_0:
	.word	0x3f800000                      # float 1
	.word	0x00000000                      # float 0
	.word	0x00000000                      # float 0
	.word	0x00000000                      # float 0
	.text
	.globl	_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4NodeE
	.p2align	5
	.type	_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4NodeE,@function
_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4NodeE: # @_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4NodeE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	pcalau12i	$a4, %pc_hi20(.LCPI28_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI28_0)
	move	$a4, $a3
	vst	$vr0, $sp, 0
	addi.d	$a3, $sp, 0
	move	$a5, $zero
	move	$a6, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end28:
	.size	_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4NodeE, .Lfunc_end28-_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4NodeE
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4LinkE
.LCPI29_0:
	.word	0x3f000000                      # float 0.5
	.word	0x3f000000                      # float 0.5
	.word	0x00000000                      # float 0
	.word	0x00000000                      # float 0
	.text
	.globl	_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4LinkE
	.p2align	5
	.type	_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4LinkE,@function
_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4LinkE: # @_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4LinkE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	pcalau12i	$a4, %pc_hi20(.LCPI29_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI29_0)
	ld.d	$a4, $a3, 16
	ld.d	$a5, $a3, 24
	vst	$vr0, $sp, 0
	addi.d	$a3, $sp, 0
	move	$a6, $zero
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end29:
	.size	_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4LinkE, .Lfunc_end29-_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4LinkE
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4FaceE
.LCPI30_0:
	.word	0x3eaaaaab                      # float 0.333333343
	.word	0x3eaaaaab                      # float 0.333333343
	.word	0x3eaaaaab                      # float 0.333333343
	.word	0x00000000                      # float 0
	.text
	.globl	_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4FaceE
	.p2align	5
	.type	_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4FaceE,@function
_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4FaceE: # @_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4FaceE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	pcalau12i	$a4, %pc_hi20(.LCPI30_0)
	vld	$vr0, $a4, %pc_lo12(.LCPI30_0)
	ld.d	$a4, $a3, 16
	ld.d	$a5, $a3, 24
	ld.d	$a6, $a3, 32
	vst	$vr0, $sp, 0
	addi.d	$a3, $sp, 0
	move	$a7, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendNoteEPKcRK9btVector3RK9btVector4PNS_4NodeES9_S9_S9_)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end30:
	.size	_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4FaceE, .Lfunc_end30-_ZN10btSoftBody10appendNoteEPKcRK9btVector3PNS_4FaceE
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody10appendNodeERK9btVector3f # -- Begin function _ZN10btSoftBody10appendNodeERK9btVector3f
	.p2align	5
	.type	_ZN10btSoftBody10appendNodeERK9btVector3f,@function
_ZN10btSoftBody10appendNodeERK9btVector3f: # @_ZN10btSoftBody10appendNodeERK9btVector3f
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 56, -64
	.cfi_offset 57, -72
	move	$fp, $a0
	ld.w	$a0, $a0, 824
	ld.w	$a2, $fp, 820
	fmov.s	$fs0, $fa0
	move	$s0, $a1
	bne	$a0, $a2, .LBB31_10
# %bb.1:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody17pointersToIndicesEv)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 820
	ld.w	$a1, $fp, 824
	slli.w	$a0, $a0, 1
	blt	$a0, $a1, .LBB31_9
# %bb.2:
	addi.w	$s2, $a0, 1
	ori	$s3, $zero, 120
	mul.d	$a0, $s2, $s3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 820
	move	$s1, $a0
	blez	$a1, .LBB31_5
# %bb.3:                                # %.lr.ph.i.i
	move	$s4, $zero
	mul.d	$s3, $a1, $s3
	.p2align	4, , 16
.LBB31_4:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 832
	add.d	$a0, $s1, $s4
	add.d	$a1, $a1, $s4
	ori	$a2, $zero, 120
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$s4, $s4, 120
	bne	$s3, $s4, .LBB31_4
.LBB31_5:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody4NodeEE4copyEiiPS1_.exit.i
	ld.d	$a0, $fp, 832
	beqz	$a0, .LBB31_8
# %bb.6:                                # %_ZNK20btAlignedObjectArrayIN10btSoftBody4NodeEE4copyEiiPS1_.exit.i
	ld.b	$a1, $fp, 840
	andi	$a1, $a1, 1
	beqz	$a1, .LBB31_8
# %bb.7:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB31_8:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEE10deallocateEv.exit.i
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 840
	st.d	$s1, $fp, 832
	st.w	$s2, $fp, 824
.LBB31_9:                               # %_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEE7reserveEi.exit
	move	$a0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody17indicesToPointersEPKi)
	jirl	$ra, $ra, 0
.LBB31_10:
	ld.d	$a0, $fp, 200
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	jirl	$ra, $a1, 0
	ld.w	$a1, $fp, 820
	ld.w	$a0, $fp, 824
	fmov.s	$fs1, $fa0
	bne	$a1, $a0, .LBB31_21
# %bb.11:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s2, $a0, $a2
	bge	$a1, $s2, .LBB31_21
# %bb.12:
	beqz	$s2, .LBB31_14
# %bb.13:
	ori	$a0, $zero, 120
	mul.d	$a0, $s2, $a0
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 820
	move	$s1, $a0
	bgtz	$a1, .LBB31_15
	b	.LBB31_17
.LBB31_14:
	move	$s1, $zero
	blez	$a1, .LBB31_17
.LBB31_15:                              # %.lr.ph.i.i.i
	move	$s3, $zero
	ori	$a0, $zero, 120
	mul.d	$s4, $a1, $a0
	.p2align	4, , 16
.LBB31_16:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 832
	add.d	$a0, $s1, $s3
	add.d	$a1, $a1, $s3
	ori	$a2, $zero, 120
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$s3, $s3, 120
	bne	$s4, $s3, .LBB31_16
.LBB31_17:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody4NodeEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $fp, 832
	beqz	$a0, .LBB31_20
# %bb.18:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody4NodeEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $fp, 840
	andi	$a1, $a1, 1
	beqz	$a1, .LBB31_20
# %bb.19:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB31_20:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$a1, $fp, 820
	st.b	$a0, $fp, 840
	st.d	$s1, $fp, 832
	st.w	$s2, $fp, 824
.LBB31_21:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody4NodeEE9push_backERKS1_.exit
	ld.d	$a0, $fp, 832
	ori	$s1, $zero, 120
	mul.d	$a1, $a1, $s1
	stx.d	$zero, $a0, $a1
	ld.w	$s2, $fp, 820
	addi.d	$a0, $s2, 1
	st.w	$a0, $fp, 820
	ld.d	$s3, $fp, 832
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	dbar	20
	beqz	$a0, .LBB31_23
.LBB31_22:                              # %_ZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_.exit
	mul.d	$a0, $s2, $s1
	add.d	$s1, $s3, $a0
	pcalau12i	$a0, %pc_hi20(_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	addi.d	$a1, $a0, %pc_lo12(_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	ori	$a2, $zero, 113
	move	$a0, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	vld	$vr0, $s0, 0
	vst	$vr0, $s1, 16
	vld	$vr0, $s0, 0
	vst	$vr0, $s1, 32
	ld.d	$a0, $fp, 1088
	frecip.s	$fa0, $fs0
	movgr2fr.w	$fa1, $zero
	ld.d	$a0, $a0, 0
	fcmp.clt.s	$fcc0, $fa1, $fs0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fst.s	$fa0, $s1, 96
	st.d	$a0, $s1, 8
	fld.s	$fa0, $s1, 16
	fld.s	$fa1, $s1, 20
	fld.s	$fa2, $s1, 24
	addi.d	$a0, $fp, 1144
	fsub.s	$fa3, $fa0, $fs1
	fsub.s	$fa4, $fa1, $fs1
	fsub.s	$fa5, $fa2, $fs1
	movfr2gr.s	$a1, $fa3
	movfr2gr.s	$a2, $fa4
	bstrins.d	$a1, $a2, 63, 32
	movfr2gr.s	$a2, $fa5
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a1, $sp, 8
	st.d	$a2, $sp, 16
	fadd.s	$fa0, $fs1, $fa0
	fadd.s	$fa1, $fs1, $fa1
	fadd.s	$fa2, $fs1, $fa2
	movfr2gr.s	$a1, $fa0
	movfr2gr.s	$a2, $fa1
	bstrins.d	$a1, $a2, 63, 32
	movfr2gr.s	$a2, $fa2
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a1, $sp, 24
	st.d	$a2, $sp, 32
	addi.d	$a1, $sp, 8
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt6insertERK12btDbvtAabbMmPv)
	jirl	$ra, $ra, 0
	st.d	$a0, $s1, 104
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB31_23:
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB31_22
# %bb.24:
	pcalau12i	$a0, %pc_hi20(_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	st.d	$zero, $a0, %pc_lo12(_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB31_22
.Lfunc_end31:
	.size	_ZN10btSoftBody10appendNodeERK9btVector3f, .Lfunc_end31-_ZN10btSoftBody10appendNodeERK9btVector3f
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody17pointersToIndicesEv # -- Begin function _ZN10btSoftBody17pointersToIndicesEv
	.p2align	5
	.type	_ZN10btSoftBody17pointersToIndicesEv,@function
_ZN10btSoftBody17pointersToIndicesEv:   # @_ZN10btSoftBody17pointersToIndicesEv
# %bb.0:
	addi.d	$sp, $sp, -16
	ld.w	$a4, $a0, 820
	ld.d	$a1, $a0, 832
	st.w	$zero, $sp, 8
	blez	$a4, .LBB32_5
# %bb.1:                                # %.lr.ph.preheader
	move	$a2, $zero
	ori	$a3, $zero, 120
	mul.d	$a4, $a4, $a3
	ori	$a5, $zero, 1
	b	.LBB32_3
	.p2align	4, , 16
.LBB32_2:                               #   in Loop: Header=BB32_3 Depth=1
	st.w	$a5, $sp, 8
	addi.d	$a2, $a2, 120
	addi.d	$a5, $a5, 1
	beq	$a4, $a2, .LBB32_5
.LBB32_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a6, $a0, 832
	add.d	$a7, $a6, $a2
	ld.d	$a7, $a7, 104
	beqz	$a7, .LBB32_2
# %bb.4:                                #   in Loop: Header=BB32_3 Depth=1
	ld.d	$a7, $sp, 8
	addi.w	$t0, $a7, 0
	mul.d	$t0, $t0, $a3
	add.d	$a6, $a6, $t0
	ld.d	$a6, $a6, 104
	st.d	$a7, $a6, 40
	b	.LBB32_2
.LBB32_5:                               # %._crit_edge
	ld.w	$a3, $a0, 852
	vreplgr2vr.d	$vr0, $a1
	lu12i.w	$a2, -69906
	blez	$a3, .LBB32_8
# %bb.6:                                # %.lr.ph51
	ld.d	$a4, $a0, 864
	addi.d	$a4, $a4, 16
	ori	$a5, $a2, 3823
	lu32i.d	$a5, -69906
	lu52i.d	$a5, $a5, -274
	vreplgr2vr.d	$vr1, $a5
	.p2align	4, , 16
.LBB32_7:                               # =>This Inner Loop Header: Depth=1
	vld	$vr2, $a4, 0
	vsub.d	$vr2, $vr2, $vr0
	vsrai.d	$vr2, $vr2, 3
	vmul.d	$vr2, $vr2, $vr1
	vst	$vr2, $a4, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 72
	bnez	$a3, .LBB32_7
.LBB32_8:                               # %._crit_edge52
	ld.w	$a4, $a0, 884
	st.w	$zero, $sp, 8
	blez	$a4, .LBB32_13
# %bb.9:                                # %.lr.ph56
	move	$a3, $zero
	slli.d	$a5, $a4, 6
	alsl.d	$a4, $a4, $a5, 3
	ori	$a5, $zero, 1
	ori	$a6, $a2, 3823
	lu32i.d	$a6, -69906
	lu52i.d	$a6, $a6, -274
	vreplgr2vr.d	$vr1, $a6
	b	.LBB32_11
	.p2align	4, , 16
.LBB32_10:                              #   in Loop: Header=BB32_11 Depth=1
	st.w	$a5, $sp, 8
	addi.d	$a3, $a3, 72
	addi.d	$a5, $a5, 1
	beq	$a4, $a3, .LBB32_13
.LBB32_11:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a7, $a0, 896
	add.d	$t0, $a7, $a3
	vld	$vr2, $t0, 16
	vsub.d	$vr2, $vr2, $vr0
	vsrai.d	$vr2, $vr2, 3
	ld.d	$t1, $t0, 32
	vmul.d	$vr2, $vr2, $vr1
	vst	$vr2, $t0, 16
	ld.d	$t2, $t0, 64
	sub.d	$t1, $t1, $a1
	srai.d	$t1, $t1, 3
	mul.d	$t1, $t1, $a6
	st.d	$t1, $t0, 32
	beqz	$t2, .LBB32_10
# %bb.12:                               #   in Loop: Header=BB32_11 Depth=1
	ld.d	$t0, $sp, 8
	addi.w	$t1, $t0, 0
	slli.d	$t2, $t1, 6
	alsl.d	$t1, $t1, $t2, 3
	add.d	$a7, $a7, $t1
	ld.d	$a7, $a7, 64
	st.d	$t0, $a7, 40
	b	.LBB32_10
.LBB32_13:                              # %._crit_edge57
	ld.w	$a3, $a0, 948
	blez	$a3, .LBB32_21
# %bb.14:                               # %.lr.ph61
	ld.d	$a4, $a0, 960
	ori	$a5, $zero, 1
	bne	$a3, $a5, .LBB32_16
# %bb.15:
	move	$a5, $zero
	b	.LBB32_19
.LBB32_16:                              # %vector.ph
	bstrpick.d	$a5, $a3, 30, 1
	slli.d	$a5, $a5, 1
	ori	$a6, $a2, 3823
	lu32i.d	$a6, -69906
	lu52i.d	$a6, $a6, -274
	move	$a7, $a5
	move	$t0, $a4
	.p2align	4, , 16
.LBB32_17:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$t1, $t0, 0
	ld.d	$t2, $t0, 104
	sub.d	$t1, $t1, $a1
	sub.d	$t2, $t2, $a1
	srai.d	$t1, $t1, 3
	mul.d	$t1, $t1, $a6
	srai.d	$t2, $t2, 3
	mul.d	$t2, $t2, $a6
	st.d	$t1, $t0, 0
	st.d	$t2, $t0, 104
	addi.d	$a7, $a7, -2
	addi.d	$t0, $t0, 208
	bnez	$a7, .LBB32_17
# %bb.18:                               # %middle.block
	beq	$a5, $a3, .LBB32_21
.LBB32_19:                              # %scalar.ph.preheader
	ori	$a6, $zero, 104
	mul.d	$a6, $a5, $a6
	add.d	$a4, $a4, $a6
	sub.d	$a3, $a3, $a5
	ori	$a5, $a2, 3823
	lu32i.d	$a5, -69906
	lu52i.d	$a5, $a5, -274
	.p2align	4, , 16
.LBB32_20:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a6, $a4, 0
	sub.d	$a6, $a6, $a1
	srai.d	$a6, $a6, 3
	mul.d	$a6, $a6, $a5
	st.d	$a6, $a4, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 104
	bnez	$a3, .LBB32_20
.LBB32_21:                              # %._crit_edge62
	ld.w	$a3, $a0, 788
	blez	$a3, .LBB32_32
# %bb.22:                               # %.preheader.lr.ph
	ld.d	$a0, $a0, 800
	move	$a4, $zero
	addi.d	$a5, $a0, 56
	addi.d	$a6, $a0, 40
	ori	$a7, $zero, 88
	ori	$t0, $zero, 4
	ori	$a2, $a2, 3823
	lu32i.d	$a2, -69906
	lu52i.d	$a2, $a2, -274
	vreplgr2vr.d	$vr1, $a2
	b	.LBB32_24
	.p2align	4, , 16
.LBB32_23:                              # %._crit_edge66
                                        #   in Loop: Header=BB32_24 Depth=1
	addi.d	$a4, $a4, 1
	addi.d	$a5, $a5, 88
	addi.d	$a6, $a6, 88
	beq	$a4, $a3, .LBB32_32
.LBB32_24:                              # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_28 Depth 2
                                        #     Child Loop BB32_31 Depth 2
	mul.d	$t1, $a4, $a7
	add.d	$t1, $a0, $t1
	ld.w	$t1, $t1, 32
	blez	$t1, .LBB32_23
# %bb.25:                               # %.lr.ph65
                                        #   in Loop: Header=BB32_24 Depth=1
	bgeu	$t1, $t0, .LBB32_27
# %bb.26:                               #   in Loop: Header=BB32_24 Depth=1
	move	$t2, $zero
	b	.LBB32_30
	.p2align	4, , 16
.LBB32_27:                              # %vector.ph99
                                        #   in Loop: Header=BB32_24 Depth=1
	bstrpick.d	$t2, $t1, 30, 2
	slli.d	$t2, $t2, 2
	move	$t3, $a5
	move	$t4, $t2
	.p2align	4, , 16
.LBB32_28:                              # %vector.body102
                                        #   Parent Loop BB32_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr2, $t3, -16
	vld	$vr3, $t3, 0
	vsub.d	$vr2, $vr2, $vr0
	vsub.d	$vr3, $vr3, $vr0
	vsrai.d	$vr2, $vr2, 3
	vmul.d	$vr2, $vr2, $vr1
	vsrai.d	$vr3, $vr3, 3
	vmul.d	$vr3, $vr3, $vr1
	vst	$vr2, $t3, -16
	vst	$vr3, $t3, 0
	addi.d	$t4, $t4, -4
	addi.d	$t3, $t3, 32
	bnez	$t4, .LBB32_28
# %bb.29:                               # %middle.block106
                                        #   in Loop: Header=BB32_24 Depth=1
	beq	$t2, $t1, .LBB32_23
.LBB32_30:                              # %scalar.ph97.preheader
                                        #   in Loop: Header=BB32_24 Depth=1
	alsl.d	$t3, $t2, $a6, 3
	sub.d	$t1, $t1, $t2
	.p2align	4, , 16
.LBB32_31:                              # %scalar.ph97
                                        #   Parent Loop BB32_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$t2, $t3, 0
	sub.d	$t2, $t2, $a1
	srai.d	$t2, $t2, 3
	mul.d	$t2, $t2, $a2
	st.d	$t2, $t3, 0
	addi.d	$t1, $t1, -1
	addi.d	$t3, $t3, 8
	bnez	$t1, .LBB32_31
	b	.LBB32_23
.LBB32_32:                              # %._crit_edge69
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end32:
	.size	_ZN10btSoftBody17pointersToIndicesEv, .Lfunc_end32-_ZN10btSoftBody17pointersToIndicesEv
                                        # -- End function
	.globl	_ZN10btSoftBody17indicesToPointersEPKi # -- Begin function _ZN10btSoftBody17indicesToPointersEPKi
	.p2align	5
	.type	_ZN10btSoftBody17indicesToPointersEPKi,@function
_ZN10btSoftBody17indicesToPointersEPKi: # @_ZN10btSoftBody17indicesToPointersEPKi
# %bb.0:
	ld.w	$a4, $a0, 820
	ld.d	$a2, $a0, 832
	blez	$a4, .LBB33_5
# %bb.1:                                # %.lr.ph.preheader
	move	$a3, $zero
	ori	$a5, $zero, 120
	mul.d	$a4, $a4, $a5
	b	.LBB33_3
	.p2align	4, , 16
.LBB33_2:                               #   in Loop: Header=BB33_3 Depth=1
	addi.d	$a3, $a3, 120
	beq	$a4, $a3, .LBB33_5
.LBB33_3:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a0, 832
	add.d	$a5, $a5, $a3
	ld.d	$a6, $a5, 104
	beqz	$a6, .LBB33_2
# %bb.4:                                #   in Loop: Header=BB33_3 Depth=1
	st.d	$a5, $a6, 40
	b	.LBB33_2
.LBB33_5:                               # %._crit_edge
	ld.w	$a3, $a0, 852
	blez	$a3, .LBB33_11
# %bb.6:                                # %.lr.ph101
	ld.d	$a4, $a0, 864
	addi.d	$a4, $a4, 24
	ori	$a5, $zero, 120
	b	.LBB33_9
	.p2align	4, , 16
.LBB33_7:                               #   in Loop: Header=BB33_9 Depth=1
	ld.d	$a7, $a4, 0
	slli.d	$a6, $a6, 2
	ldx.w	$a6, $a1, $a6
	slli.d	$a7, $a7, 2
	ldx.w	$a7, $a1, $a7
.LBB33_8:                               #   in Loop: Header=BB33_9 Depth=1
	mul.d	$a6, $a6, $a5
	add.d	$a6, $a2, $a6
	st.d	$a6, $a4, -8
	mul.d	$a6, $a7, $a5
	add.d	$a6, $a2, $a6
	st.d	$a6, $a4, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 72
	beqz	$a3, .LBB33_11
.LBB33_9:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a6, $a4, -8
	bnez	$a1, .LBB33_7
# %bb.10:                               #   in Loop: Header=BB33_9 Depth=1
	ld.d	$a7, $a4, 0
	b	.LBB33_8
.LBB33_11:                              # %._crit_edge102
	ld.w	$a4, $a0, 884
	blez	$a4, .LBB33_19
# %bb.12:                               # %.lr.ph105
	move	$a3, $zero
	slli.d	$a5, $a4, 6
	alsl.d	$a4, $a4, $a5, 3
	ori	$a5, $zero, 120
	b	.LBB33_14
	.p2align	4, , 16
.LBB33_13:                              #   in Loop: Header=BB33_14 Depth=1
	addi.d	$a3, $a3, 72
	beq	$a4, $a3, .LBB33_19
.LBB33_14:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a6, $a0, 896
	add.d	$a6, $a6, $a3
	ld.d	$a7, $a6, 16
	beqz	$a1, .LBB33_16
# %bb.15:                               #   in Loop: Header=BB33_14 Depth=1
	slli.d	$a7, $a7, 2
	ldx.w	$a7, $a1, $a7
	ld.d	$t0, $a6, 24
	mul.d	$a7, $a7, $a5
	add.d	$a7, $a2, $a7
	ld.d	$t1, $a6, 32
	slli.d	$t0, $t0, 2
	ldx.w	$t0, $a1, $t0
	st.d	$a7, $a6, 16
	slli.d	$a7, $t1, 2
	ldx.w	$a7, $a1, $a7
	b	.LBB33_17
	.p2align	4, , 16
.LBB33_16:                              #   in Loop: Header=BB33_14 Depth=1
	mul.d	$a7, $a7, $a5
	ld.d	$t0, $a6, 24
	add.d	$a7, $a2, $a7
	st.d	$a7, $a6, 16
	ld.d	$a7, $a6, 32
.LBB33_17:                              #   in Loop: Header=BB33_14 Depth=1
	mul.d	$t0, $t0, $a5
	add.d	$t0, $a2, $t0
	st.d	$t0, $a6, 24
	ld.d	$t0, $a6, 64
	mul.d	$a7, $a7, $a5
	add.d	$a7, $a2, $a7
	st.d	$a7, $a6, 32
	beqz	$t0, .LBB33_13
# %bb.18:                               #   in Loop: Header=BB33_14 Depth=1
	st.d	$a6, $t0, 40
	b	.LBB33_13
.LBB33_19:                              # %._crit_edge106
	ld.w	$a3, $a0, 948
	blez	$a3, .LBB33_24
# %bb.20:                               # %.lr.ph109
	ld.d	$a4, $a0, 960
	ori	$a5, $zero, 120
	b	.LBB33_22
	.p2align	4, , 16
.LBB33_21:                              #   in Loop: Header=BB33_22 Depth=1
	mul.d	$a6, $a6, $a5
	add.d	$a6, $a2, $a6
	st.d	$a6, $a4, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 104
	beqz	$a3, .LBB33_24
.LBB33_22:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a6, $a4, 0
	beqz	$a1, .LBB33_21
# %bb.23:                               #   in Loop: Header=BB33_22 Depth=1
	slli.d	$a6, $a6, 2
	ldx.w	$a6, $a1, $a6
	b	.LBB33_21
.LBB33_24:                              # %._crit_edge110
	ld.w	$a3, $a0, 788
	blez	$a3, .LBB33_31
# %bb.25:                               # %.preheader.lr.ph
	ld.d	$a0, $a0, 800
	move	$a4, $zero
	addi.d	$a5, $a0, 40
	ori	$a6, $zero, 88
	ori	$a7, $zero, 120
	b	.LBB33_27
	.p2align	4, , 16
.LBB33_26:                              # %._crit_edge113
                                        #   in Loop: Header=BB33_27 Depth=1
	addi.d	$a4, $a4, 1
	addi.d	$a5, $a5, 88
	beq	$a4, $a3, .LBB33_31
.LBB33_27:                              # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_29 Depth 2
	mul.d	$t0, $a4, $a6
	add.d	$t0, $a0, $t0
	ld.w	$t0, $t0, 32
	move	$t1, $a5
	bgtz	$t0, .LBB33_29
	b	.LBB33_26
	.p2align	4, , 16
.LBB33_28:                              #   in Loop: Header=BB33_29 Depth=2
	mul.d	$t2, $t2, $a7
	add.d	$t2, $a2, $t2
	st.d	$t2, $t1, 0
	addi.d	$t0, $t0, -1
	addi.d	$t1, $t1, 8
	beqz	$t0, .LBB33_26
.LBB33_29:                              #   Parent Loop BB33_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$t2, $t1, 0
	beqz	$a1, .LBB33_28
# %bb.30:                               #   in Loop: Header=BB33_29 Depth=2
	slli.d	$t2, $t2, 2
	ldx.w	$t2, $a1, $t2
	b	.LBB33_28
.LBB33_31:                              # %._crit_edge115
	ret
.Lfunc_end33:
	.size	_ZN10btSoftBody17indicesToPointersEPKi, .Lfunc_end33-_ZN10btSoftBody17indicesToPointersEPKi
                                        # -- End function
	.globl	_ZN10btSoftBody10appendLinkEiPNS_8MaterialE # -- Begin function _ZN10btSoftBody10appendLinkEiPNS_8MaterialE
	.p2align	5
	.type	_ZN10btSoftBody10appendLinkEiPNS_8MaterialE,@function
_ZN10btSoftBody10appendLinkEiPNS_8MaterialE: # @_ZN10btSoftBody10appendLinkEiPNS_8MaterialE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	move	$fp, $a0
	bltz	$a1, .LBB34_2
# %bb.1:
	ld.d	$a0, $fp, 864
	slli.d	$a2, $a1, 6
	alsl.d	$a1, $a1, $a2, 3
	add.d	$a3, $a0, $a1
	ldx.d	$s1, $a0, $a1
	ld.d	$a2, $a3, 8
	vld	$vr0, $a3, 16
	vld	$vr1, $a3, 32
	vld	$vr2, $a3, 48
	ld.w	$a0, $a3, 64
	vst	$vr0, $sp, 8
	vst	$vr1, $sp, 24
	vst	$vr2, $sp, 40
	st.w	$a0, $sp, 56
	b	.LBB34_5
.LBB34_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
	addi.d	$s0, $a1, %pc_lo12(_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
	beqz	$a0, .LBB34_17
.LBB34_3:                               # %_ZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_.exit
	ld.d	$s1, $s0, 0
	vld	$vr0, $s0, 16
	vld	$vr1, $s0, 32
	vld	$vr2, $s0, 48
	ld.w	$a0, $s0, 64
	vst	$vr0, $sp, 8
	vst	$vr1, $sp, 24
	vst	$vr2, $sp, 40
	st.w	$a0, $sp, 56
	bnez	$a2, .LBB34_5
# %bb.4:
	ld.d	$a0, $fp, 1088
	ld.d	$a2, $a0, 0
.LBB34_5:
	ld.w	$a1, $fp, 852
	ld.w	$a0, $fp, 856
	bne	$a1, $a0, .LBB34_16
# %bb.6:
	sltui	$a0, $a1, 1
	slli.w	$a3, $a1, 1
	masknez	$a3, $a3, $a0
	ori	$a4, $zero, 1
	maskeqz	$a0, $a4, $a0
	or	$s2, $a0, $a3
	bge	$a1, $s2, .LBB34_16
# %bb.7:
	move	$s3, $a2
	beqz	$s2, .LBB34_9
# %bb.8:
	slli.d	$a0, $s2, 6
	alsl.d	$a0, $s2, $a0, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 852
	move	$s0, $a0
	bgtz	$a1, .LBB34_10
	b	.LBB34_12
.LBB34_9:
	move	$s0, $zero
	blez	$a1, .LBB34_12
.LBB34_10:                              # %.lr.ph.i.i.i
	move	$s4, $zero
	slli.d	$a0, $a1, 6
	alsl.d	$s5, $a1, $a0, 3
	.p2align	4, , 16
.LBB34_11:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 864
	add.d	$a0, $s0, $s4
	add.d	$a1, $a1, $s4
	ori	$a2, $zero, 72
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$s4, $s4, 72
	bne	$s5, $s4, .LBB34_11
.LBB34_12:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody4LinkEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $fp, 864
	beqz	$a0, .LBB34_15
# %bb.13:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody4LinkEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $fp, 872
	andi	$a1, $a1, 1
	beqz	$a1, .LBB34_15
# %bb.14:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB34_15:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$a1, $fp, 852
	st.b	$a0, $fp, 872
	st.d	$s0, $fp, 864
	st.w	$s2, $fp, 856
	move	$a2, $s3
.LBB34_16:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody4LinkEE9push_backERKS1_.exit
	ld.d	$a0, $fp, 864
	slli.d	$a3, $a1, 6
	vld	$vr0, $sp, 16
	alsl.d	$a1, $a1, $a3, 3
	vld	$vr1, $sp, 32
	add.d	$a3, $a0, $a1
	vst	$vr0, $a3, 24
	ld.d	$a4, $sp, 8
	vst	$vr1, $a3, 40
	vld	$vr0, $sp, 48
	stx.d	$s1, $a0, $a1
	st.d	$a2, $a3, 8
	st.d	$a4, $a3, 16
	vst	$vr0, $a3, 56
	ld.w	$a0, $fp, 852
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 852
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB34_17:
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
	move	$s1, $a2
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	move	$a2, $s1
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB34_3
# %bb.18:
	st.d	$zero, $s0, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	move	$a2, $s1
	b	.LBB34_3
.Lfunc_end34:
	.size	_ZN10btSoftBody10appendLinkEiPNS_8MaterialE, .Lfunc_end34-_ZN10btSoftBody10appendLinkEiPNS_8MaterialE
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody10appendLinkEiiPNS_8MaterialEb # -- Begin function _ZN10btSoftBody10appendLinkEiiPNS_8MaterialEb
	.p2align	5
	.type	_ZN10btSoftBody10appendLinkEiiPNS_8MaterialEb,@function
_ZN10btSoftBody10appendLinkEiiPNS_8MaterialEb: # @_ZN10btSoftBody10appendLinkEiiPNS_8MaterialEb
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	ld.d	$a0, $a0, 832
	ori	$a5, $zero, 120
	mul.d	$a1, $a1, $a5
	add.d	$s0, $a0, $a1
	mul.d	$a1, $a2, $a5
	add.d	$s1, $a0, $a1
	beqz	$a4, .LBB35_8
# %bb.1:
	ld.w	$a0, $fp, 852
	blez	$a0, .LBB35_8
# %bb.2:                                # %.lr.ph.i.i
	ld.d	$a1, $fp, 864
	addi.d	$a1, $a1, 24
	b	.LBB35_4
	.p2align	4, , 16
.LBB35_3:                               # %.critedge.i.i
                                        #   in Loop: Header=BB35_4 Depth=1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 72
	beqz	$a0, .LBB35_8
.LBB35_4:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $a1, -8
	bne	$a2, $s0, .LBB35_6
# %bb.5:                                #   in Loop: Header=BB35_4 Depth=1
	ld.d	$a4, $a1, 0
	beq	$a4, $s1, .LBB35_9
.LBB35_6:                               #   in Loop: Header=BB35_4 Depth=1
	bne	$a2, $s1, .LBB35_3
# %bb.7:                                #   in Loop: Header=BB35_4 Depth=1
	ld.d	$a2, $a1, 0
	bne	$a2, $s0, .LBB35_3
	b	.LBB35_9
.LBB35_8:                               # %_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_.exit.i
	addi.w	$a1, $zero, -1
	move	$a0, $fp
	move	$a2, $a3
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendLinkEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 852
	ld.d	$a1, $fp, 864
	fld.s	$fa0, $s0, 16
	fld.s	$fa1, $s1, 16
	fld.s	$fa2, $s0, 20
	fld.s	$fa3, $s1, 20
	slli.d	$a2, $a0, 6
	alsl.d	$a0, $a0, $a2, 3
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fld.s	$fa2, $s0, 24
	fld.s	$fa3, $s1, 24
	add.d	$a0, $a1, $a0
	st.d	$s0, $a0, -56
	st.d	$s1, $a0, -48
	fsub.s	$fa2, $fa2, $fa3
	fmul.s	$fa1, $fa1, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	fsqrt.s	$fa0, $fa0
	fst.s	$fa0, $a0, -40
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1140
.LBB35_9:                               # %_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb.exit
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end35:
	.size	_ZN10btSoftBody10appendLinkEiiPNS_8MaterialEb, .Lfunc_end35-_ZN10btSoftBody10appendLinkEiiPNS_8MaterialEb
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb # -- Begin function _ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb
	.p2align	5
	.type	_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb,@function
_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb: # @_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$s0, $a2
	move	$s1, $a1
	move	$fp, $a0
	beqz	$a4, .LBB36_8
# %bb.1:
	ld.w	$a0, $fp, 852
	blez	$a0, .LBB36_8
# %bb.2:                                # %.lr.ph.i
	ld.d	$a1, $fp, 864
	addi.d	$a1, $a1, 24
	b	.LBB36_4
	.p2align	4, , 16
.LBB36_3:                               # %.critedge.i
                                        #   in Loop: Header=BB36_4 Depth=1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 72
	beqz	$a0, .LBB36_8
.LBB36_4:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $a1, -8
	bne	$a2, $s1, .LBB36_6
# %bb.5:                                #   in Loop: Header=BB36_4 Depth=1
	ld.d	$a4, $a1, 0
	beq	$a4, $s0, .LBB36_9
.LBB36_6:                               #   in Loop: Header=BB36_4 Depth=1
	bne	$a2, $s0, .LBB36_3
# %bb.7:                                #   in Loop: Header=BB36_4 Depth=1
	ld.d	$a2, $a1, 0
	bne	$a2, $s1, .LBB36_3
	b	.LBB36_9
.LBB36_8:                               # %_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_.exit
	addi.w	$a1, $zero, -1
	move	$a0, $fp
	move	$a2, $a3
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendLinkEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 852
	ld.d	$a1, $fp, 864
	fld.s	$fa0, $s1, 16
	fld.s	$fa1, $s0, 16
	fld.s	$fa2, $s1, 20
	fld.s	$fa3, $s0, 20
	slli.d	$a2, $a0, 6
	alsl.d	$a0, $a0, $a2, 3
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fld.s	$fa2, $s1, 24
	fld.s	$fa3, $s0, 24
	add.d	$a0, $a1, $a0
	st.d	$s1, $a0, -56
	st.d	$s0, $a0, -48
	fsub.s	$fa2, $fa2, $fa3
	fmul.s	$fa1, $fa1, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	fsqrt.s	$fa0, $fa0
	fst.s	$fa0, $a0, -40
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1140
.LBB36_9:                               # %_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_.exit.thread
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end36:
	.size	_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb, .Lfunc_end36-_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody10appendFaceEiPNS_8MaterialE # -- Begin function _ZN10btSoftBody10appendFaceEiPNS_8MaterialE
	.p2align	5
	.type	_ZN10btSoftBody10appendFaceEiPNS_8MaterialE,@function
_ZN10btSoftBody10appendFaceEiPNS_8MaterialE: # @_ZN10btSoftBody10appendFaceEiPNS_8MaterialE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	move	$fp, $a0
	bltz	$a1, .LBB37_2
# %bb.1:
	ld.d	$a0, $fp, 896
	slli.d	$a2, $a1, 6
	alsl.d	$a1, $a1, $a2, 3
	add.d	$a3, $a0, $a1
	ldx.d	$s1, $a0, $a1
	ld.d	$a2, $a3, 8
	ld.d	$a0, $a3, 16
	vld	$vr0, $a3, 24
	vld	$vr1, $a3, 40
	vld	$vr2, $a3, 56
	st.d	$a0, $sp, 8
	vst	$vr0, $sp, 16
	vst	$vr1, $sp, 32
	vst	$vr2, $sp, 48
	b	.LBB37_5
.LBB37_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
	addi.d	$s0, $a1, %pc_lo12(_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
	beqz	$a0, .LBB37_17
.LBB37_3:                               # %_ZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_.exit
	ld.d	$s1, $s0, 0
	ld.d	$a0, $s0, 16
	vld	$vr0, $s0, 24
	vld	$vr1, $s0, 40
	vld	$vr2, $s0, 56
	st.d	$a0, $sp, 8
	vst	$vr0, $sp, 16
	vst	$vr1, $sp, 32
	vst	$vr2, $sp, 48
	bnez	$a2, .LBB37_5
# %bb.4:
	ld.d	$a0, $fp, 1088
	ld.d	$a2, $a0, 0
.LBB37_5:
	ld.w	$a1, $fp, 884
	ld.w	$a0, $fp, 888
	bne	$a1, $a0, .LBB37_16
# %bb.6:
	sltui	$a0, $a1, 1
	slli.w	$a3, $a1, 1
	masknez	$a3, $a3, $a0
	ori	$a4, $zero, 1
	maskeqz	$a0, $a4, $a0
	or	$s2, $a0, $a3
	bge	$a1, $s2, .LBB37_16
# %bb.7:
	move	$s3, $a2
	beqz	$s2, .LBB37_9
# %bb.8:
	slli.d	$a0, $s2, 6
	alsl.d	$a0, $s2, $a0, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 884
	move	$s0, $a0
	bgtz	$a1, .LBB37_10
	b	.LBB37_12
.LBB37_9:
	move	$s0, $zero
	blez	$a1, .LBB37_12
.LBB37_10:                              # %.lr.ph.i.i.i
	move	$s4, $zero
	slli.d	$a0, $a1, 6
	alsl.d	$s5, $a1, $a0, 3
	.p2align	4, , 16
.LBB37_11:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 896
	add.d	$a0, $s0, $s4
	add.d	$a1, $a1, $s4
	ori	$a2, $zero, 72
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$s4, $s4, 72
	bne	$s5, $s4, .LBB37_11
.LBB37_12:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody4FaceEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $fp, 896
	beqz	$a0, .LBB37_15
# %bb.13:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody4FaceEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $fp, 904
	andi	$a1, $a1, 1
	beqz	$a1, .LBB37_15
# %bb.14:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB37_15:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$a1, $fp, 884
	st.b	$a0, $fp, 904
	st.d	$s0, $fp, 896
	st.w	$s2, $fp, 888
	move	$a2, $s3
.LBB37_16:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody4FaceEE9push_backERKS1_.exit
	ld.d	$a0, $fp, 896
	slli.d	$a3, $a1, 6
	vld	$vr0, $sp, 16
	alsl.d	$a1, $a1, $a3, 3
	vld	$vr1, $sp, 32
	add.d	$a3, $a0, $a1
	vst	$vr0, $a3, 24
	ld.d	$a4, $sp, 8
	vst	$vr1, $a3, 40
	vld	$vr0, $sp, 48
	stx.d	$s1, $a0, $a1
	st.d	$a2, $a3, 8
	st.d	$a4, $a3, 16
	vst	$vr0, $a3, 56
	ld.w	$a0, $fp, 884
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 884
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.LBB37_17:
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
	move	$s1, $a2
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	move	$a2, $s1
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB37_3
# %bb.18:
	st.d	$zero, $s0, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	move	$a2, $s1
	b	.LBB37_3
.Lfunc_end37:
	.size	_ZN10btSoftBody10appendFaceEiPNS_8MaterialE, .Lfunc_end37-_ZN10btSoftBody10appendFaceEiPNS_8MaterialE
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody10appendFaceEiiiPNS_8MaterialE # -- Begin function _ZN10btSoftBody10appendFaceEiiiPNS_8MaterialE
	.p2align	5
	.type	_ZN10btSoftBody10appendFaceEiiiPNS_8MaterialE,@function
_ZN10btSoftBody10appendFaceEiiiPNS_8MaterialE: # @_ZN10btSoftBody10appendFaceEiiiPNS_8MaterialE
	.cfi_startproc
# %bb.0:
	beq	$a3, $a1, .LBB38_5
# %bb.1:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	move	$s1, $a2
	move	$s2, $a1
	beq	$a1, $a2, .LBB38_4
# %bb.2:
	move	$s0, $a3
	beq	$s1, $a3, .LBB38_4
# %bb.3:
	addi.w	$a1, $zero, -1
	move	$fp, $a0
	move	$a2, $a4
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendFaceEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 884
	ld.d	$a1, $fp, 896
	slli.d	$a2, $a0, 6
	alsl.d	$a0, $a0, $a2, 3
	ld.d	$a2, $fp, 832
	add.d	$a0, $a1, $a0
	ori	$a1, $zero, 120
	mul.d	$a3, $s2, $a1
	add.d	$a2, $a2, $a3
	st.d	$a2, $a0, -56
	ld.d	$a3, $fp, 832
	mul.d	$a4, $s1, $a1
	add.d	$a3, $a3, $a4
	st.d	$a3, $a0, -48
	ld.d	$a4, $fp, 832
	fld.s	$fa0, $a3, 16
	fld.s	$fa1, $a2, 16
	fld.s	$fa2, $a3, 20
	fld.s	$fa3, $a2, 20
	mul.d	$a1, $s0, $a1
	add.d	$a1, $a4, $a1
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa2, $fa2, $fa3
	fld.s	$fa4, $a1, 16
	fld.s	$fa5, $a3, 24
	fld.s	$fa6, $a1, 20
	fld.s	$fa7, $a2, 24
	fsub.s	$fa1, $fa4, $fa1
	fld.s	$fa4, $a1, 24
	fsub.s	$fa3, $fa6, $fa3
	st.d	$a1, $a0, -40
	fsub.s	$fa5, $fa5, $fa7
	fsub.s	$fa4, $fa4, $fa7
	fneg.s	$fa6, $fa3
	fmul.s	$fa6, $fa5, $fa6
	fmadd.s	$fa6, $fa2, $fa4, $fa6
	fneg.s	$fa4, $fa4
	fmul.s	$fa4, $fa0, $fa4
	fmadd.s	$fa4, $fa5, $fa1, $fa4
	fneg.s	$fa1, $fa1
	fmul.s	$fa1, $fa2, $fa1
	fmadd.s	$fa0, $fa0, $fa3, $fa1
	fmul.s	$fa1, $fa4, $fa4
	fmadd.s	$fa1, $fa6, $fa6, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fsqrt.s	$fa0, $fa0
	fst.s	$fa0, $a0, -16
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1140
.LBB38_4:
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
.LBB38_5:
	ret
.Lfunc_end38:
	.size	_ZN10btSoftBody10appendFaceEiiiPNS_8MaterialE, .Lfunc_end38-_ZN10btSoftBody10appendFaceEiiiPNS_8MaterialE
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody11appendTetraEiPNS_8MaterialE # -- Begin function _ZN10btSoftBody11appendTetraEiPNS_8MaterialE
	.p2align	5
	.type	_ZN10btSoftBody11appendTetraEiPNS_8MaterialE,@function
_ZN10btSoftBody11appendTetraEiPNS_8MaterialE: # @_ZN10btSoftBody11appendTetraEiPNS_8MaterialE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	move	$fp, $a0
	bltz	$a1, .LBB39_2
# %bb.1:
	ld.d	$a0, $fp, 928
	slli.d	$a2, $a1, 7
	alsl.d	$a1, $a1, $a2, 3
	add.d	$a2, $a0, $a1
	ldx.d	$s2, $a0, $a1
	ld.d	$s0, $a2, 8
	addi.d	$a1, $a2, 16
	addi.d	$a0, $sp, 8
	ori	$a2, $zero, 120
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	b	.LBB39_5
.LBB39_2:
	move	$s0, $a2
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy)
	addi.d	$s1, $a1, %pc_lo12(_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy)
	beqz	$a0, .LBB39_17
.LBB39_3:                               # %_ZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_.exit
	ld.d	$s2, $s1, 0
	addi.d	$a1, $s1, 16
	addi.d	$a0, $sp, 8
	ori	$a2, $zero, 120
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	bnez	$s0, .LBB39_5
# %bb.4:
	ld.d	$a0, $fp, 1088
	ld.d	$s0, $a0, 0
.LBB39_5:
	ld.w	$a1, $fp, 916
	ld.w	$a0, $fp, 920
	bne	$a1, $a0, .LBB39_16
# %bb.6:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s3, $a0, $a2
	bge	$a1, $s3, .LBB39_16
# %bb.7:
	beqz	$s3, .LBB39_9
# %bb.8:
	slli.d	$a0, $s3, 7
	alsl.d	$a0, $s3, $a0, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 916
	move	$s1, $a0
	bgtz	$a1, .LBB39_10
	b	.LBB39_12
.LBB39_9:
	move	$s1, $zero
	blez	$a1, .LBB39_12
.LBB39_10:                              # %.lr.ph.i.i.i
	move	$s4, $zero
	slli.d	$a0, $a1, 7
	alsl.d	$s5, $a1, $a0, 3
	.p2align	4, , 16
.LBB39_11:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 928
	add.d	$a0, $s1, $s4
	add.d	$a1, $a1, $s4
	ori	$a2, $zero, 136
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$s4, $s4, 136
	bne	$s5, $s4, .LBB39_11
.LBB39_12:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody5TetraEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $fp, 928
	beqz	$a0, .LBB39_15
# %bb.13:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody5TetraEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $fp, 936
	andi	$a1, $a1, 1
	beqz	$a1, .LBB39_15
# %bb.14:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB39_15:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$a1, $fp, 916
	st.b	$a0, $fp, 936
	st.d	$s1, $fp, 928
	st.w	$s3, $fp, 920
.LBB39_16:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody5TetraEE9push_backERKS1_.exit
	ld.d	$a0, $fp, 928
	slli.d	$a2, $a1, 7
	alsl.d	$a1, $a1, $a2, 3
	add.d	$a2, $a0, $a1
	stx.d	$s2, $a0, $a1
	st.d	$s0, $a2, 8
	addi.d	$a0, $a2, 16
	addi.d	$a1, $sp, 8
	ori	$a2, $zero, 120
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 916
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 916
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB39_17:
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB39_3
# %bb.18:
	st.d	$zero, $s1, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB39_3
.Lfunc_end39:
	.size	_ZN10btSoftBody11appendTetraEiPNS_8MaterialE, .Lfunc_end39-_ZN10btSoftBody11appendTetraEiPNS_8MaterialE
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody11appendTetraEiiiiPNS_8MaterialE # -- Begin function _ZN10btSoftBody11appendTetraEiiiiPNS_8MaterialE
	.p2align	5
	.type	_ZN10btSoftBody11appendTetraEiiiiPNS_8MaterialE,@function
_ZN10btSoftBody11appendTetraEiiiiPNS_8MaterialE: # @_ZN10btSoftBody11appendTetraEiiiiPNS_8MaterialE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	move	$s0, $a4
	move	$s1, $a3
	move	$s2, $a2
	move	$s3, $a1
	move	$fp, $a0
	addi.w	$a1, $zero, -1
	move	$a2, $a5
	pcaddu18i	$ra, %call36(_ZN10btSoftBody11appendTetraEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 916
	ld.d	$a1, $fp, 928
	slli.d	$a2, $a0, 7
	alsl.d	$a0, $a0, $a2, 3
	ld.d	$a2, $fp, 832
	add.d	$a0, $a1, $a0
	ori	$a1, $zero, 120
	mul.d	$a3, $s3, $a1
	add.d	$a2, $a2, $a3
	st.d	$a2, $a0, -120
	ld.d	$a3, $fp, 832
	mul.d	$a4, $s2, $a1
	add.d	$a3, $a3, $a4
	st.d	$a3, $a0, -112
	ld.d	$a4, $fp, 832
	mul.d	$a5, $s1, $a1
	add.d	$a4, $a4, $a5
	st.d	$a4, $a0, -104
	ld.d	$a5, $fp, 832
	fld.s	$fa0, $a3, 16
	fld.s	$fa1, $a2, 16
	fld.s	$fa2, $a3, 20
	fld.s	$fa3, $a2, 20
	mul.d	$a1, $s0, $a1
	add.d	$a1, $a5, $a1
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa2, $fa2, $fa3
	fld.s	$fa4, $a3, 24
	fld.s	$fa5, $a4, 16
	fld.s	$fa6, $a2, 24
	fld.s	$fa7, $a4, 20
	fld.s	$ft0, $a1, 16
	fsub.s	$fa5, $fa5, $fa1
	fld.s	$ft1, $a1, 20
	fsub.s	$fa7, $fa7, $fa3
	fsub.s	$fa1, $ft0, $fa1
	fld.s	$ft0, $a4, 24
	fsub.s	$fa3, $ft1, $fa3
	fld.s	$ft1, $a1, 24
	st.d	$a1, $a0, -96
	fsub.s	$fa4, $fa4, $fa6
	fsub.s	$ft0, $ft0, $fa6
	fsub.s	$fa6, $ft1, $fa6
	fneg.s	$ft1, $fa3
	fmul.s	$ft1, $ft0, $ft1
	fmadd.s	$ft1, $fa7, $fa6, $ft1
	fneg.s	$fa6, $fa6
	fmul.s	$fa6, $fa5, $fa6
	fmadd.s	$fa6, $ft0, $fa1, $fa6
	fneg.s	$fa1, $fa1
	fmul.s	$fa1, $fa7, $fa1
	fmadd.s	$fa1, $fa5, $fa3, $fa1
	fmul.s	$fa2, $fa2, $fa6
	fmadd.s	$fa0, $fa0, $ft1, $fa2
	fmadd.s	$fa0, $fa4, $fa1, $fa0
	fst.s	$fa0, $a0, -88
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1140
	ld.d	$s3, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end40:
	.size	_ZN10btSoftBody11appendTetraEiiiiPNS_8MaterialE, .Lfunc_end40-_ZN10btSoftBody11appendTetraEiiiiPNS_8MaterialE
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody12appendAnchorEiP11btRigidBodyb # -- Begin function _ZN10btSoftBody12appendAnchorEiP11btRigidBodyb
	.p2align	5
	.type	_ZN10btSoftBody12appendAnchorEiP11btRigidBodyb,@function
_ZN10btSoftBody12appendAnchorEiP11btRigidBodyb: # @_ZN10btSoftBody12appendAnchorEiP11btRigidBodyb
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 104                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 48                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 56, -56
	.cfi_offset 57, -64
	.cfi_offset 58, -72
	.cfi_offset 59, -80
	.cfi_offset 60, -88
	.cfi_offset 61, -96
	.cfi_offset 62, -104
	.cfi_offset 63, -112
	move	$s0, $a2
	move	$fp, $a0
	beqz	$a3, .LBB41_24
# %bb.1:
	ld.w	$a2, $fp, 284
	blez	$a2, .LBB41_6
# %bb.2:                                # %.lr.ph.i
	ld.d	$a0, $fp, 296
	move	$a4, $a2
	move	$a3, $a2
	.p2align	4, , 16
.LBB41_3:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a0, 0
	beq	$a5, $s0, .LBB41_5
# %bb.4:                                #   in Loop: Header=BB41_3 Depth=1
	addi.w	$a3, $a3, -1
	addi.d	$a4, $a4, -1
	addi.d	$a0, $a0, 8
	bnez	$a4, .LBB41_3
	b	.LBB41_6
.LBB41_5:                               # %_ZNK20btAlignedObjectArrayIP17btCollisionObjectE16findLinearSearchERKS1_.exit
	bnez	$a3, .LBB41_24
.LBB41_6:                               # %_ZNK20btAlignedObjectArrayIP17btCollisionObjectE16findLinearSearchERKS1_.exit.thread
	ld.w	$a0, $fp, 288
	bne	$a2, $a0, .LBB41_23
# %bb.7:
	sltui	$a0, $a2, 1
	slli.w	$a3, $a2, 1
	masknez	$a3, $a3, $a0
	ori	$a4, $zero, 1
	maskeqz	$a0, $a4, $a0
	or	$s2, $a0, $a3
	bge	$a2, $s2, .LBB41_23
# %bb.8:
	move	$s3, $a1
	beqz	$s2, .LBB41_18
# %bb.9:
	slli.d	$a0, $s2, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a2, $fp, 284
	move	$s1, $a0
	ld.d	$a0, $fp, 296
	blez	$a2, .LBB41_19
.LBB41_10:                              # %.lr.ph.i.i.i
	ori	$a4, $zero, 4
	move	$a3, $zero
	move	$a1, $s3
	bltu	$a2, $a4, .LBB41_15
# %bb.11:                               # %.lr.ph.i.i.i
	sub.d	$a4, $s1, $a0
	ori	$a5, $zero, 32
	bltu	$a4, $a5, .LBB41_15
# %bb.12:                               # %vector.ph
	bstrpick.d	$a3, $a2, 30, 2
	slli.d	$a3, $a3, 2
	addi.d	$a4, $a0, 16
	addi.d	$a5, $s1, 16
	move	$a6, $a3
	.p2align	4, , 16
.LBB41_13:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a4, -16
	vld	$vr1, $a4, 0
	vst	$vr0, $a5, -16
	vst	$vr1, $a5, 0
	addi.d	$a6, $a6, -4
	addi.d	$a4, $a4, 32
	addi.d	$a5, $a5, 32
	bnez	$a6, .LBB41_13
# %bb.14:                               # %middle.block
	beq	$a3, $a2, .LBB41_17
.LBB41_15:                              # %scalar.ph.preheader
	sub.d	$a4, $a2, $a3
	alsl.d	$a5, $a3, $a0, 3
	alsl.d	$a3, $a3, $s1, 3
	.p2align	4, , 16
.LBB41_16:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a6, $a5, 0
	st.d	$a6, $a3, 0
	addi.d	$a4, $a4, -1
	addi.d	$a5, $a5, 8
	addi.d	$a3, $a3, 8
	bnez	$a4, .LBB41_16
.LBB41_17:                              # %_ZNK20btAlignedObjectArrayIP17btCollisionObjectE4copyEiiPS1_.exit.thread.i.i
	ld.bu	$a3, $fp, 304
	bnez	$a3, .LBB41_21
	b	.LBB41_22
.LBB41_18:
	move	$s1, $zero
	ld.d	$a0, $fp, 296
	bgtz	$a2, .LBB41_10
.LBB41_19:                              # %_ZNK20btAlignedObjectArrayIP17btCollisionObjectE4copyEiiPS1_.exit.i.i
	move	$a1, $s3
	beqz	$a0, .LBB41_22
# %bb.20:                               # %_ZNK20btAlignedObjectArrayIP17btCollisionObjectE4copyEiiPS1_.exit.i.i
	ld.b	$a3, $fp, 304
	andi	$a3, $a3, 1
	beqz	$a3, .LBB41_22
.LBB41_21:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	move	$a1, $s3
	ld.w	$a2, $fp, 284
.LBB41_22:                              # %_ZN20btAlignedObjectArrayIP17btCollisionObjectE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 304
	st.d	$s1, $fp, 296
	st.w	$s2, $fp, 288
.LBB41_23:                              # %_ZN20btAlignedObjectArrayIP17btCollisionObjectE9push_backERKS1_.exit
	ld.d	$a0, $fp, 296
	slli.d	$a3, $a2, 3
	stx.d	$s0, $a0, $a3
	addi.d	$a0, $a2, 1
	st.w	$a0, $fp, 284
.LBB41_24:
	ld.d	$a0, $fp, 832
	ori	$a2, $zero, 120
	mul.d	$a1, $a1, $a2
	add.d	$s2, $a0, $a1
	fld.s	$fa5, $s0, 72
	fld.s	$fa7, $s0, 88
	fld.s	$fa6, $s0, 104
	fld.s	$ft0, $s0, 76
	fld.s	$fs5, $s0, 92
	fld.s	$fs4, $s0, 108
	fld.s	$fs0, $s0, 80
	fld.s	$fs2, $s0, 96
	fld.s	$fs1, $s0, 112
	fld.s	$fa1, $s0, 120
	fld.s	$fa2, $s0, 124
	ld.b	$a0, $s2, 112
	fld.s	$fa0, $s0, 128
	fld.s	$fs6, $s2, 16
	fld.s	$fs7, $s2, 20
	ori	$a0, $a0, 1
	st.b	$a0, $s2, 112
	ld.w	$a1, $fp, 948
	ld.w	$a0, $fp, 952
	fld.s	$fs3, $s2, 24
	bne	$a1, $a0, .LBB41_35
# %bb.25:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s3, $a0, $a2
	bge	$a1, $s3, .LBB41_35
# %bb.26:
	fst.s	$fa0, $sp, 20                   # 4-byte Folded Spill
	fst.s	$fa5, $sp, 44                   # 4-byte Folded Spill
	fst.s	$fa6, $sp, 40                   # 4-byte Folded Spill
	fst.s	$fa7, $sp, 36                   # 4-byte Folded Spill
	fst.s	$ft0, $sp, 32                   # 4-byte Folded Spill
	fst.s	$fa1, $sp, 28                   # 4-byte Folded Spill
	fst.s	$fa2, $sp, 24                   # 4-byte Folded Spill
	beqz	$s3, .LBB41_28
# %bb.27:
	ori	$a0, $zero, 104
	mul.d	$a0, $s3, $a0
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	fld.s	$fa2, $sp, 24                   # 4-byte Folded Reload
	fld.s	$fa1, $sp, 28                   # 4-byte Folded Reload
	fld.s	$ft0, $sp, 32                   # 4-byte Folded Reload
	fld.s	$fa7, $sp, 36                   # 4-byte Folded Reload
	fld.s	$fa6, $sp, 40                   # 4-byte Folded Reload
	fld.s	$fa5, $sp, 44                   # 4-byte Folded Reload
	ld.w	$a1, $fp, 948
	move	$s1, $a0
	bgtz	$a1, .LBB41_29
	b	.LBB41_31
.LBB41_28:
	move	$s1, $zero
	blez	$a1, .LBB41_31
.LBB41_29:                              # %.lr.ph.i.i.i12
	move	$a0, $zero
	ori	$a2, $zero, 104
	mul.d	$a1, $a1, $a2
	.p2align	4, , 16
.LBB41_30:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $fp, 960
	vldx	$vr0, $a2, $a0
	add.d	$a2, $a2, $a0
	vstx	$vr0, $s1, $a0
	vld	$vr0, $a2, 16
	add.d	$a3, $s1, $a0
	vst	$vr0, $a3, 16
	vld	$vr0, $a2, 32
	vst	$vr0, $a3, 32
	vld	$vr0, $a2, 48
	vst	$vr0, $a3, 48
	vld	$vr0, $a2, 64
	vst	$vr0, $a3, 64
	vld	$vr0, $a2, 80
	vst	$vr0, $a3, 80
	ld.w	$a2, $a2, 96
	addi.d	$a0, $a0, 104
	st.w	$a2, $a3, 96
	bne	$a1, $a0, .LBB41_30
.LBB41_31:                              # %_ZNK20btAlignedObjectArrayIN10btSoftBody6AnchorEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $fp, 960
	beqz	$a0, .LBB41_34
# %bb.32:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody6AnchorEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $fp, 968
	andi	$a1, $a1, 1
	beqz	$a1, .LBB41_34
# %bb.33:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	fld.s	$fa2, $sp, 24                   # 4-byte Folded Reload
	fld.s	$fa1, $sp, 28                   # 4-byte Folded Reload
	fld.s	$ft0, $sp, 32                   # 4-byte Folded Reload
	fld.s	$fa7, $sp, 36                   # 4-byte Folded Reload
	fld.s	$fa6, $sp, 40                   # 4-byte Folded Reload
	fld.s	$fa5, $sp, 44                   # 4-byte Folded Reload
.LBB41_34:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$a1, $fp, 948
	st.b	$a0, $fp, 968
	st.d	$s1, $fp, 960
	st.w	$s3, $fp, 952
	fld.s	$fa0, $sp, 20                   # 4-byte Folded Reload
.LBB41_35:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody6AnchorEE9push_backERKS1_.exit
	fneg.s	$fa0, $fa0
	fneg.s	$fa1, $fa1
	fneg.s	$fa2, $fa2
	fmul.s	$fa3, $fs2, $fa2
	fmadd.s	$fa3, $fs0, $fa1, $fa3
	fmadd.s	$fa3, $fs1, $fa0, $fa3
	fmul.s	$fa4, $fs2, $fs7
	fmadd.s	$fa4, $fs0, $fs6, $fa4
	fmadd.s	$fa4, $fs1, $fs3, $fa4
	fadd.s	$fa3, $fa3, $fa4
	movfr2gr.s	$a0, $fa3
	bstrpick.d	$a0, $a0, 31, 0
	fmul.s	$fa3, $fs5, $fa2
	fmadd.s	$fa3, $ft0, $fa1, $fa3
	fmadd.s	$fa3, $fs4, $fa0, $fa3
	fmul.s	$fa4, $fs5, $fs7
	fmadd.s	$fa4, $ft0, $fs6, $fa4
	fmadd.s	$fa4, $fs4, $fs3, $fa4
	fadd.s	$fa3, $fa3, $fa4
	movfr2gr.s	$a2, $fa3
	fmul.s	$fa3, $fa7, $fs7
	fmadd.s	$fa3, $fa5, $fs6, $fa3
	fmadd.s	$fa3, $fa6, $fs3, $fa3
	fmul.s	$fa2, $fa7, $fa2
	fmadd.s	$fa1, $fa5, $fa1, $fa2
	fmadd.s	$fa0, $fa6, $fa0, $fa1
	fadd.s	$fa0, $fa0, $fa3
	movfr2gr.s	$a3, $fa0
	ld.d	$a4, $fp, 960
	bstrins.d	$a3, $a2, 63, 32
	ori	$a2, $zero, 104
	mul.d	$a1, $a1, $a2
	add.d	$a2, $a4, $a1
	stx.d	$s2, $a4, $a1
	st.d	$a3, $a2, 8
	st.d	$a0, $a2, 16
	st.d	$s0, $a2, 24
	ld.w	$a0, $fp, 948
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 948
	fld.d	$fs7, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 96                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 104                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.Lfunc_end41:
	.size	_ZN10btSoftBody12appendAnchorEiP11btRigidBodyb, .Lfunc_end41-_ZN10btSoftBody12appendAnchorEiP11btRigidBodyb
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE # -- Begin function _ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE
	.p2align	5
	.type	_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE,@function
_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE: # @_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE
.Lfunc_begin5:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception5
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	move	$s2, $a3
	move	$s3, $a2
	move	$s1, $a1
	move	$fp, $a0
	ori	$a0, $zero, 216
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	addi.d	$a0, $a0, 32
	ori	$a2, $zero, 184
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZTVN10btSoftBody6LJointE+16)
	addi.d	$a0, $a0, %pc_lo12(_ZTVN10btSoftBody6LJointE+16)
	st.d	$a0, $s0, 0
	st.d	$s3, $s0, 8
	vrepli.b	$vr0, 0
	vst	$vr0, $s0, 16
	ld.d	$a0, $s2, 0
	st.d	$a0, $s0, 32
	vld	$vr0, $s2, 8
	vst	$vr0, $s0, 40
	pcalau12i	$s3, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	ld.b	$a0, $s3, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$s2, $a1, %pc_lo12(_ZZNK10btSoftBody4Body5xformEvE8identity)
	beqz	$a0, .LBB42_20
.LBB42_1:                               # %_ZNK10btSoftBody4Body5xformEv.exit
	ld.d	$a0, $s0, 24
	ld.d	$a1, $s0, 8
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s2, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 0
	fld.s	$fa1, $a0, 16
	fld.s	$fa2, $a0, 32
	fld.s	$fa3, $a0, 4
	fld.s	$fa4, $a0, 20
	fld.s	$fa5, $a0, 36
	fld.s	$fa6, $a0, 8
	fld.s	$fa7, $a0, 24
	fld.s	$ft0, $a0, 48
	fld.s	$ft1, $a0, 52
	fld.s	$ft2, $a0, 56
	fld.s	$ft3, $a0, 40
	fneg.s	$ft0, $ft0
	fneg.s	$ft1, $ft1
	fneg.s	$ft2, $ft2
	fmul.s	$ft4, $fa1, $ft1
	fmadd.s	$ft4, $fa0, $ft0, $ft4
	fmadd.s	$ft4, $fa2, $ft2, $ft4
	fmul.s	$ft5, $fa4, $ft1
	fmadd.s	$ft5, $fa3, $ft0, $ft5
	fmadd.s	$ft5, $fa5, $ft2, $ft5
	fmul.s	$ft1, $fa7, $ft1
	fmadd.s	$ft0, $fa6, $ft0, $ft1
	fld.s	$ft1, $s1, 16
	fld.s	$ft6, $s1, 12
	fld.s	$ft7, $s1, 20
	fmadd.s	$ft0, $ft3, $ft2, $ft0
	fmul.s	$fa1, $fa1, $ft1
	fmadd.s	$fa0, $fa0, $ft6, $fa1
	fmadd.s	$fa0, $fa2, $ft7, $fa0
	fadd.s	$fa0, $ft4, $fa0
	fmul.s	$fa1, $fa4, $ft1
	fmadd.s	$fa1, $fa3, $ft6, $fa1
	fmadd.s	$fa1, $fa5, $ft7, $fa1
	fadd.s	$fa1, $ft5, $fa1
	fmul.s	$fa2, $fa7, $ft1
	fmadd.s	$fa2, $fa6, $ft6, $fa2
	fmadd.s	$fa2, $ft3, $ft7, $fa2
	fadd.s	$fa2, $ft0, $fa2
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa2
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $s0, 56
	st.d	$a1, $s0, 64
	ld.b	$a0, $s3, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	beqz	$a0, .LBB42_23
.LBB42_2:                               # %_ZNK10btSoftBody4Body5xformEv.exit26
	ld.d	$a0, $s0, 48
	ld.d	$a1, $s0, 32
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s2, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 0
	fld.s	$fa1, $a0, 16
	fld.s	$fa2, $a0, 32
	fld.s	$fa3, $a0, 4
	fld.s	$fa4, $a0, 20
	fld.s	$fa5, $a0, 36
	fld.s	$fa6, $a0, 8
	fld.s	$fa7, $a0, 24
	fld.s	$ft0, $a0, 48
	fld.s	$ft1, $a0, 52
	fld.s	$ft2, $a0, 56
	fld.s	$ft3, $a0, 40
	fneg.s	$ft0, $ft0
	fneg.s	$ft1, $ft1
	fneg.s	$ft2, $ft2
	fmul.s	$ft4, $fa1, $ft1
	fmadd.s	$ft4, $fa0, $ft0, $ft4
	fmadd.s	$ft4, $fa2, $ft2, $ft4
	fmul.s	$ft5, $fa4, $ft1
	fmadd.s	$ft5, $fa3, $ft0, $ft5
	fmadd.s	$ft5, $fa5, $ft2, $ft5
	fmul.s	$ft1, $fa7, $ft1
	fmadd.s	$ft0, $fa6, $ft0, $ft1
	fld.s	$ft1, $s1, 16
	fld.s	$ft6, $s1, 12
	fld.s	$ft7, $s1, 20
	fmadd.s	$ft0, $ft3, $ft2, $ft0
	fmul.s	$fa1, $fa1, $ft1
	fmadd.s	$fa0, $fa0, $ft6, $fa1
	fmadd.s	$fa0, $fa2, $ft7, $fa0
	fadd.s	$fa0, $ft4, $fa0
	fmul.s	$fa1, $fa4, $ft1
	fmadd.s	$fa1, $fa3, $ft6, $fa1
	fmadd.s	$fa1, $fa5, $ft7, $fa1
	fadd.s	$fa1, $ft5, $fa1
	fmul.s	$fa2, $fa7, $ft1
	fmadd.s	$fa2, $fa6, $ft6, $fa2
	fmadd.s	$fa2, $ft3, $ft7, $fa2
	fadd.s	$fa2, $ft0, $fa2
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa2
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $s0, 72
	st.d	$a1, $s0, 80
	fld.s	$fa0, $s1, 4
	fld.s	$fa1, $s1, 0
	fld.s	$fa2, $s1, 8
	ld.w	$a1, $fp, 1044
	ld.w	$a0, $fp, 1048
	fst.s	$fa0, $s0, 88
	fst.s	$fa1, $s0, 92
	fst.s	$fa2, $s0, 96
	bne	$a1, $a0, .LBB42_19
# %bb.3:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s2, $a0, $a2
	bge	$a1, $s2, .LBB42_19
# %bb.4:
	beqz	$s2, .LBB42_14
# %bb.5:
	slli.d	$a0, $s2, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 1044
	move	$s1, $a0
	ld.d	$a0, $fp, 1056
	blez	$a1, .LBB42_15
.LBB42_6:                               # %.lr.ph.i.i.i
	ori	$a3, $zero, 4
	move	$a2, $zero
	bltu	$a1, $a3, .LBB42_11
# %bb.7:                                # %.lr.ph.i.i.i
	sub.d	$a3, $s1, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB42_11
# %bb.8:                                # %vector.ph
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s1, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB42_9:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB42_9
# %bb.10:                               # %middle.block
	beq	$a2, $a1, .LBB42_13
.LBB42_11:                              # %scalar.ph.preheader
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s1, 3
	.p2align	4, , 16
.LBB42_12:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB42_12
.LBB42_13:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.thread.i.i
	ld.bu	$a2, $fp, 1064
	bnez	$a2, .LBB42_17
	b	.LBB42_18
.LBB42_14:
	move	$s1, $zero
	ld.d	$a0, $fp, 1056
	bgtz	$a1, .LBB42_6
.LBB42_15:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.i.i
	beqz	$a0, .LBB42_18
# %bb.16:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.i.i
	ld.b	$a2, $fp, 1064
	andi	$a2, $a2, 1
	beqz	$a2, .LBB42_18
.LBB42_17:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 1044
.LBB42_18:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1064
	st.d	$s1, $fp, 1056
	st.w	$s2, $fp, 1048
.LBB42_19:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEE9push_backERKS2_.exit
	ld.d	$a0, $fp, 1056
	slli.d	$a2, $a1, 3
	stx.d	$s0, $a0, $a2
	addi.d	$a0, $a1, 1
	st.w	$a0, $fp, 1044
	ld.d	$s3, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB42_20:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_1
# %bb.21:
.Ltmp213:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp214:                               # EH_LABEL
# %bb.22:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s2, 0
	vst	$vr1, $s2, 16
	vst	$vr2, $s2, 32
	vst	$vr3, $s2, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_1
.LBB42_23:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB42_2
# %bb.24:
.Ltmp216:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp217:                               # EH_LABEL
# %bb.25:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s2, 0
	vst	$vr1, $s2, 16
	vst	$vr2, $s2, 32
	vst	$vr3, $s2, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB42_2
.LBB42_26:
.Ltmp218:                               # EH_LABEL
	b	.LBB42_28
.LBB42_27:
.Ltmp215:                               # EH_LABEL
.LBB42_28:                              # %common.resume
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end42:
	.size	_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE, .Lfunc_end42-_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table42:
.Lexception5:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end5-.Lcst_begin5
.Lcst_begin5:
	.uleb128 .Lfunc_begin5-.Lfunc_begin5    # >> Call Site 1 <<
	.uleb128 .Ltmp213-.Lfunc_begin5         #   Call between .Lfunc_begin5 and .Ltmp213
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp213-.Lfunc_begin5         # >> Call Site 2 <<
	.uleb128 .Ltmp214-.Ltmp213              #   Call between .Ltmp213 and .Ltmp214
	.uleb128 .Ltmp215-.Lfunc_begin5         #     jumps to .Ltmp215
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp214-.Lfunc_begin5         # >> Call Site 3 <<
	.uleb128 .Ltmp216-.Ltmp214              #   Call between .Ltmp214 and .Ltmp216
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp216-.Lfunc_begin5         # >> Call Site 4 <<
	.uleb128 .Ltmp217-.Ltmp216              #   Call between .Ltmp216 and .Ltmp217
	.uleb128 .Ltmp218-.Lfunc_begin5         #     jumps to .Ltmp218
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp217-.Lfunc_begin5         # >> Call Site 5 <<
	.uleb128 .Lfunc_end42-.Ltmp217          #   Call between .Ltmp217 and .Lfunc_end42
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end5:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsENS_4BodyE # -- Begin function _ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsENS_4BodyE
	.p2align	5
	.type	_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsENS_4BodyE,@function
_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsENS_4BodyE: # @_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsENS_4BodyE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	ld.d	$a3, $a0, 1352
	ld.d	$a4, $a2, 0
	vld	$vr0, $a2, 8
	ld.d	$a2, $a3, 0
	st.d	$a4, $sp, 0
	vst	$vr0, $sp, 8
	addi.d	$a3, $sp, 0
	pcaddu18i	$ra, %call36(_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end43:
	.size	_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsENS_4BodyE, .Lfunc_end43-_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsENS_4BodyE
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPS_ # -- Begin function _ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPS_
	.p2align	5
	.type	_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPS_,@function
_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPS_: # @_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPS_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	ld.d	$a2, $a2, 1352
	ld.d	$a3, $a0, 1352
	ld.d	$a4, $a2, 0
	ld.d	$a2, $a3, 0
	st.d	$a4, $sp, 0
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 8
	addi.d	$a3, $sp, 0
	pcaddu18i	$ra, %call36(_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPNS_7ClusterENS_4BodyE)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end44:
	.size	_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPS_, .Lfunc_end44-_ZN10btSoftBody17appendLinearJointERKNS_6LJoint5SpecsEPS_
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE # -- Begin function _ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE
	.p2align	5
	.type	_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE,@function
_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE: # @_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE
.Lfunc_begin6:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception6
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	move	$s2, $a3
	move	$s3, $a2
	move	$s1, $a1
	move	$fp, $a0
	ori	$a0, $zero, 224
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	addi.d	$a0, $a0, 32
	ori	$a2, $zero, 192
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZTVN10btSoftBody6AJointE+16)
	addi.d	$a0, $a0, %pc_lo12(_ZTVN10btSoftBody6AJointE+16)
	st.d	$a0, $s0, 0
	st.d	$s3, $s0, 8
	vrepli.b	$vr0, 0
	vst	$vr0, $s0, 16
	ld.d	$a0, $s2, 0
	st.d	$a0, $s0, 32
	vld	$vr0, $s2, 8
	vst	$vr0, $s0, 40
	pcalau12i	$s3, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	ld.b	$a0, $s3, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$s2, $a1, %pc_lo12(_ZZNK10btSoftBody4Body5xformEvE8identity)
	beqz	$a0, .LBB45_20
.LBB45_1:                               # %_ZNK10btSoftBody4Body5xformEv.exit
	ld.d	$a0, $s0, 24
	ld.d	$a1, $s0, 8
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s2, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 0
	fld.s	$fa1, $a0, 16
	fld.s	$fa2, $a0, 32
	fld.s	$fa3, $a0, 4
	fld.s	$fa4, $a0, 20
	fld.s	$fa5, $a0, 36
	fld.s	$fa6, $a0, 8
	fld.s	$fa7, $s1, 16
	fld.s	$ft0, $s1, 12
	fld.s	$ft1, $a0, 24
	fld.s	$ft2, $s1, 20
	fmul.s	$fa1, $fa1, $fa7
	fmadd.s	$fa0, $fa0, $ft0, $fa1
	fld.s	$fa1, $a0, 40
	fmadd.s	$fa0, $fa2, $ft2, $fa0
	fmul.s	$fa2, $fa4, $fa7
	fmadd.s	$fa2, $fa3, $ft0, $fa2
	fmadd.s	$fa2, $fa5, $ft2, $fa2
	fmul.s	$fa3, $ft1, $fa7
	fmadd.s	$fa3, $fa6, $ft0, $fa3
	fmadd.s	$fa1, $fa1, $ft2, $fa3
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa1
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $s0, 56
	st.d	$a1, $s0, 64
	ld.b	$a0, $s3, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	beqz	$a0, .LBB45_23
.LBB45_2:                               # %_ZNK10btSoftBody4Body5xformEv.exit28
	ld.d	$a0, $s0, 48
	ld.d	$a1, $s0, 32
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s2, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 0
	fld.s	$fa1, $a0, 16
	fld.s	$fa2, $a0, 32
	fld.s	$fa3, $a0, 4
	fld.s	$fa4, $a0, 20
	fld.s	$fa5, $a0, 36
	fld.s	$fa6, $a0, 8
	fld.s	$fa7, $s1, 16
	fld.s	$ft0, $s1, 12
	fld.s	$ft1, $a0, 24
	fld.s	$ft2, $s1, 20
	fmul.s	$fa1, $fa1, $fa7
	fmadd.s	$fa0, $fa0, $ft0, $fa1
	fld.s	$fa1, $a0, 40
	fmadd.s	$fa0, $fa2, $ft2, $fa0
	fmul.s	$fa2, $fa4, $fa7
	fmadd.s	$fa2, $fa3, $ft0, $fa2
	fmadd.s	$fa2, $fa5, $ft2, $fa2
	fmul.s	$fa3, $ft1, $fa7
	fmadd.s	$fa3, $fa6, $ft0, $fa3
	fmadd.s	$fa1, $fa1, $ft2, $fa3
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa1
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $s0, 72
	st.d	$a1, $s0, 80
	fld.s	$fa0, $s1, 4
	fld.s	$fa1, $s1, 0
	fld.s	$fa2, $s1, 8
	ld.d	$a0, $s1, 32
	ld.w	$a1, $fp, 1044
	ld.w	$a2, $fp, 1048
	fst.s	$fa0, $s0, 88
	fst.s	$fa1, $s0, 92
	fst.s	$fa2, $s0, 96
	st.d	$a0, $s0, 216
	bne	$a1, $a2, .LBB45_19
# %bb.3:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s2, $a0, $a2
	bge	$a1, $s2, .LBB45_19
# %bb.4:
	beqz	$s2, .LBB45_14
# %bb.5:
	slli.d	$a0, $s2, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 1044
	move	$s1, $a0
	ld.d	$a0, $fp, 1056
	blez	$a1, .LBB45_15
.LBB45_6:                               # %.lr.ph.i.i.i
	ori	$a3, $zero, 4
	move	$a2, $zero
	bltu	$a1, $a3, .LBB45_11
# %bb.7:                                # %.lr.ph.i.i.i
	sub.d	$a3, $s1, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB45_11
# %bb.8:                                # %vector.ph
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s1, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB45_9:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB45_9
# %bb.10:                               # %middle.block
	beq	$a2, $a1, .LBB45_13
.LBB45_11:                              # %scalar.ph.preheader
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s1, 3
	.p2align	4, , 16
.LBB45_12:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB45_12
.LBB45_13:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.thread.i.i
	ld.bu	$a2, $fp, 1064
	bnez	$a2, .LBB45_17
	b	.LBB45_18
.LBB45_14:
	move	$s1, $zero
	ld.d	$a0, $fp, 1056
	bgtz	$a1, .LBB45_6
.LBB45_15:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.i.i
	beqz	$a0, .LBB45_18
# %bb.16:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.i.i
	ld.b	$a2, $fp, 1064
	andi	$a2, $a2, 1
	beqz	$a2, .LBB45_18
.LBB45_17:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 1044
.LBB45_18:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1064
	st.d	$s1, $fp, 1056
	st.w	$s2, $fp, 1048
.LBB45_19:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEE9push_backERKS2_.exit
	ld.d	$a0, $fp, 1056
	slli.d	$a2, $a1, 3
	stx.d	$s0, $a0, $a2
	addi.d	$a0, $a1, 1
	st.w	$a0, $fp, 1044
	ld.d	$s3, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB45_20:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB45_1
# %bb.21:
.Ltmp219:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp220:                               # EH_LABEL
# %bb.22:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s2, 0
	vst	$vr1, $s2, 16
	vst	$vr2, $s2, 32
	vst	$vr3, $s2, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB45_1
.LBB45_23:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB45_2
# %bb.24:
.Ltmp222:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp223:                               # EH_LABEL
# %bb.25:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s2, 0
	vst	$vr1, $s2, 16
	vst	$vr2, $s2, 32
	vst	$vr3, $s2, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB45_2
.LBB45_26:
.Ltmp224:                               # EH_LABEL
	b	.LBB45_28
.LBB45_27:
.Ltmp221:                               # EH_LABEL
.LBB45_28:                              # %common.resume
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end45:
	.size	_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE, .Lfunc_end45-_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table45:
.Lexception6:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end6-.Lcst_begin6
.Lcst_begin6:
	.uleb128 .Lfunc_begin6-.Lfunc_begin6    # >> Call Site 1 <<
	.uleb128 .Ltmp219-.Lfunc_begin6         #   Call between .Lfunc_begin6 and .Ltmp219
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp219-.Lfunc_begin6         # >> Call Site 2 <<
	.uleb128 .Ltmp220-.Ltmp219              #   Call between .Ltmp219 and .Ltmp220
	.uleb128 .Ltmp221-.Lfunc_begin6         #     jumps to .Ltmp221
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp220-.Lfunc_begin6         # >> Call Site 3 <<
	.uleb128 .Ltmp222-.Ltmp220              #   Call between .Ltmp220 and .Ltmp222
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp222-.Lfunc_begin6         # >> Call Site 4 <<
	.uleb128 .Ltmp223-.Ltmp222              #   Call between .Ltmp222 and .Ltmp223
	.uleb128 .Ltmp224-.Lfunc_begin6         #     jumps to .Ltmp224
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp223-.Lfunc_begin6         # >> Call Site 5 <<
	.uleb128 .Lfunc_end45-.Ltmp223          #   Call between .Ltmp223 and .Lfunc_end45
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end6:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsENS_4BodyE # -- Begin function _ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsENS_4BodyE
	.p2align	5
	.type	_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsENS_4BodyE,@function
_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsENS_4BodyE: # @_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsENS_4BodyE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	ld.d	$a3, $a0, 1352
	ld.d	$a4, $a2, 0
	vld	$vr0, $a2, 8
	ld.d	$a2, $a3, 0
	st.d	$a4, $sp, 0
	vst	$vr0, $sp, 8
	addi.d	$a3, $sp, 0
	pcaddu18i	$ra, %call36(_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end46:
	.size	_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsENS_4BodyE, .Lfunc_end46-_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsENS_4BodyE
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPS_ # -- Begin function _ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPS_
	.p2align	5
	.type	_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPS_,@function
_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPS_: # @_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPS_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	ld.d	$a2, $a2, 1352
	ld.d	$a3, $a0, 1352
	ld.d	$a4, $a2, 0
	ld.d	$a2, $a3, 0
	st.d	$a4, $sp, 0
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 8
	addi.d	$a3, $sp, 0
	pcaddu18i	$ra, %call36(_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPNS_7ClusterENS_4BodyE)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end47:
	.size	_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPS_, .Lfunc_end47-_ZN10btSoftBody18appendAngularJointERKNS_6AJoint5SpecsEPS_
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody8addForceERK9btVector3 # -- Begin function _ZN10btSoftBody8addForceERK9btVector3
	.p2align	5
	.type	_ZN10btSoftBody8addForceERK9btVector3,@function
_ZN10btSoftBody8addForceERK9btVector3:  # @_ZN10btSoftBody8addForceERK9btVector3
# %bb.0:
	ld.w	$a2, $a0, 820
	blez	$a2, .LBB48_5
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $a0, 832
	addi.d	$a0, $a0, 64
	movgr2fr.w	$fa0, $zero
	b	.LBB48_3
	.p2align	4, , 16
.LBB48_2:                               # %_ZN10btSoftBody8addForceERK9btVector3i.exit
                                        #   in Loop: Header=BB48_3 Depth=1
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 120
	beqz	$a2, .LBB48_5
.LBB48_3:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a0, 32
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB48_2
# %bb.4:                                #   in Loop: Header=BB48_3 Depth=1
	fld.s	$fa1, $a1, 0
	fld.s	$fa2, $a0, 0
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a0, 0
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a0, 4
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a0, 4
	fld.s	$fa1, $a1, 8
	fld.s	$fa2, $a0, 8
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a0, 8
	b	.LBB48_2
.LBB48_5:                               # %._crit_edge
	ret
.Lfunc_end48:
	.size	_ZN10btSoftBody8addForceERK9btVector3, .Lfunc_end48-_ZN10btSoftBody8addForceERK9btVector3
                                        # -- End function
	.globl	_ZN10btSoftBody8addForceERK9btVector3i # -- Begin function _ZN10btSoftBody8addForceERK9btVector3i
	.p2align	5
	.type	_ZN10btSoftBody8addForceERK9btVector3i,@function
_ZN10btSoftBody8addForceERK9btVector3i: # @_ZN10btSoftBody8addForceERK9btVector3i
# %bb.0:
	ld.d	$a0, $a0, 832
	ori	$a3, $zero, 120
	mul.d	$a2, $a2, $a3
	add.d	$a0, $a0, $a2
	fld.s	$fa0, $a0, 96
	movgr2fr.w	$fa1, $zero
	fcmp.cule.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB49_2
# %bb.1:
	fld.s	$fa0, $a1, 0
	fld.s	$fa1, $a0, 64
	fadd.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $a0, 64
	fld.s	$fa0, $a1, 4
	fld.s	$fa1, $a0, 68
	fadd.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $a0, 68
	fld.s	$fa0, $a1, 8
	fld.s	$fa1, $a0, 72
	fadd.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $a0, 72
.LBB49_2:
	ret
.Lfunc_end49:
	.size	_ZN10btSoftBody8addForceERK9btVector3i, .Lfunc_end49-_ZN10btSoftBody8addForceERK9btVector3i
                                        # -- End function
	.globl	_ZN10btSoftBody11addVelocityERK9btVector3 # -- Begin function _ZN10btSoftBody11addVelocityERK9btVector3
	.p2align	5
	.type	_ZN10btSoftBody11addVelocityERK9btVector3,@function
_ZN10btSoftBody11addVelocityERK9btVector3: # @_ZN10btSoftBody11addVelocityERK9btVector3
# %bb.0:
	ld.w	$a2, $a0, 820
	blez	$a2, .LBB50_5
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $a0, 832
	addi.d	$a0, $a0, 48
	movgr2fr.w	$fa0, $zero
	b	.LBB50_3
	.p2align	4, , 16
.LBB50_2:                               # %_ZN10btSoftBody11addVelocityERK9btVector3i.exit
                                        #   in Loop: Header=BB50_3 Depth=1
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 120
	beqz	$a2, .LBB50_5
.LBB50_3:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a0, 48
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB50_2
# %bb.4:                                #   in Loop: Header=BB50_3 Depth=1
	fld.s	$fa1, $a1, 0
	fld.s	$fa2, $a0, 0
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a0, 0
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a0, 4
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a0, 4
	fld.s	$fa1, $a1, 8
	fld.s	$fa2, $a0, 8
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a0, 8
	b	.LBB50_2
.LBB50_5:                               # %._crit_edge
	ret
.Lfunc_end50:
	.size	_ZN10btSoftBody11addVelocityERK9btVector3, .Lfunc_end50-_ZN10btSoftBody11addVelocityERK9btVector3
                                        # -- End function
	.globl	_ZN10btSoftBody11addVelocityERK9btVector3i # -- Begin function _ZN10btSoftBody11addVelocityERK9btVector3i
	.p2align	5
	.type	_ZN10btSoftBody11addVelocityERK9btVector3i,@function
_ZN10btSoftBody11addVelocityERK9btVector3i: # @_ZN10btSoftBody11addVelocityERK9btVector3i
# %bb.0:
	ld.d	$a0, $a0, 832
	ori	$a3, $zero, 120
	mul.d	$a2, $a2, $a3
	add.d	$a0, $a0, $a2
	fld.s	$fa0, $a0, 96
	movgr2fr.w	$fa1, $zero
	fcmp.cule.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB51_2
# %bb.1:
	fld.s	$fa0, $a1, 0
	fld.s	$fa1, $a0, 48
	fadd.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $a0, 48
	fld.s	$fa0, $a1, 4
	fld.s	$fa1, $a0, 52
	fadd.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $a0, 52
	fld.s	$fa0, $a1, 8
	fld.s	$fa1, $a0, 56
	fadd.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $a0, 56
.LBB51_2:
	ret
.Lfunc_end51:
	.size	_ZN10btSoftBody11addVelocityERK9btVector3i, .Lfunc_end51-_ZN10btSoftBody11addVelocityERK9btVector3i
                                        # -- End function
	.globl	_ZN10btSoftBody11setVelocityERK9btVector3 # -- Begin function _ZN10btSoftBody11setVelocityERK9btVector3
	.p2align	5
	.type	_ZN10btSoftBody11setVelocityERK9btVector3,@function
_ZN10btSoftBody11setVelocityERK9btVector3: # @_ZN10btSoftBody11setVelocityERK9btVector3
# %bb.0:
	ld.w	$a3, $a0, 820
	blez	$a3, .LBB52_5
# %bb.1:                                # %.lr.ph
	move	$a2, $zero
	ori	$a4, $zero, 120
	mul.d	$a3, $a3, $a4
	movgr2fr.w	$fa0, $zero
	b	.LBB52_3
	.p2align	4, , 16
.LBB52_2:                               #   in Loop: Header=BB52_3 Depth=1
	addi.d	$a2, $a2, 120
	beq	$a3, $a2, .LBB52_5
.LBB52_3:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a0, 832
	add.d	$a4, $a4, $a2
	fld.s	$fa1, $a4, 96
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB52_2
# %bb.4:                                #   in Loop: Header=BB52_3 Depth=1
	vld	$vr1, $a1, 0
	vst	$vr1, $a4, 48
	b	.LBB52_2
.LBB52_5:                               # %._crit_edge
	ret
.Lfunc_end52:
	.size	_ZN10btSoftBody11setVelocityERK9btVector3, .Lfunc_end52-_ZN10btSoftBody11setVelocityERK9btVector3
                                        # -- End function
	.globl	_ZN10btSoftBody7setMassEif      # -- Begin function _ZN10btSoftBody7setMassEif
	.p2align	5
	.type	_ZN10btSoftBody7setMassEif,@function
_ZN10btSoftBody7setMassEif:             # @_ZN10btSoftBody7setMassEif
# %bb.0:
	frecip.s	$fa1, $fa0
	movgr2fr.w	$fa2, $zero
	fcmp.clt.s	$fcc0, $fa2, $fa0
	ld.d	$a2, $a0, 832
	fsel	$fa0, $fa2, $fa1, $fcc0
	ori	$a3, $zero, 120
	mul.d	$a1, $a1, $a3
	add.d	$a1, $a2, $a1
	fst.s	$fa0, $a1, 96
	ori	$a1, $zero, 1
	st.b	$a1, $a0, 1140
	ret
.Lfunc_end53:
	.size	_ZN10btSoftBody7setMassEif, .Lfunc_end53-_ZN10btSoftBody7setMassEif
                                        # -- End function
	.globl	_ZNK10btSoftBody7getMassEi      # -- Begin function _ZNK10btSoftBody7getMassEi
	.p2align	5
	.type	_ZNK10btSoftBody7getMassEi,@function
_ZNK10btSoftBody7getMassEi:             # @_ZNK10btSoftBody7getMassEi
# %bb.0:
	ld.d	$a0, $a0, 832
	ori	$a2, $zero, 120
	mul.d	$a1, $a1, $a2
	add.d	$a0, $a0, $a1
	fld.s	$fa0, $a0, 96
	frecip.s	$fa1, $fa0
	movgr2fr.w	$fa2, $zero
	fcmp.clt.s	$fcc0, $fa2, $fa0
	fsel	$fa0, $fa2, $fa1, $fcc0
	ret
.Lfunc_end54:
	.size	_ZNK10btSoftBody7getMassEi, .Lfunc_end54-_ZNK10btSoftBody7getMassEi
                                        # -- End function
	.globl	_ZNK10btSoftBody12getTotalMassEv # -- Begin function _ZNK10btSoftBody12getTotalMassEv
	.p2align	5
	.type	_ZNK10btSoftBody12getTotalMassEv,@function
_ZNK10btSoftBody12getTotalMassEv:       # @_ZNK10btSoftBody12getTotalMassEv
# %bb.0:
	ld.w	$a1, $a0, 820
	blez	$a1, .LBB55_4
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $a0, 832
	movgr2fr.w	$fa1, $zero
	addi.d	$a0, $a0, 96
	fmov.s	$fa0, $fa1
	.p2align	4, , 16
.LBB55_2:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa2, $a0, 0
	frecip.s	$fa3, $fa2
	fcmp.clt.s	$fcc0, $fa1, $fa2
	fsel	$fa2, $fa1, $fa3, $fcc0
	fadd.s	$fa0, $fa0, $fa2
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 120
	bnez	$a1, .LBB55_2
# %bb.3:                                # %._crit_edge
	ret
.LBB55_4:
	movgr2fr.w	$fa0, $zero
	ret
.Lfunc_end55:
	.size	_ZNK10btSoftBody12getTotalMassEv, .Lfunc_end55-_ZNK10btSoftBody12getTotalMassEv
                                        # -- End function
	.globl	_ZN10btSoftBody12setTotalMassEfb # -- Begin function _ZN10btSoftBody12setTotalMassEfb
	.p2align	5
	.type	_ZN10btSoftBody12setTotalMassEfb,@function
_ZN10btSoftBody12setTotalMassEfb:       # @_ZN10btSoftBody12setTotalMassEfb
# %bb.0:
	ld.w	$a2, $a0, 820
	beqz	$a1, .LBB56_4
# %bb.1:                                # %.preheader27
	blez	$a2, .LBB56_10
# %bb.2:                                # %.lr.ph
	ld.d	$a1, $a0, 832
	ori	$a3, $zero, 1
	bne	$a2, $a3, .LBB56_5
# %bb.3:
	move	$a3, $zero
	b	.LBB56_8
.LBB56_4:                               # %.loopexit
	bgtz	$a2, .LBB56_21
	b	.LBB56_30
.LBB56_5:                               # %vector.ph
	bstrpick.d	$a3, $a2, 30, 1
	slli.d	$a3, $a3, 1
	addi.d	$a4, $a1, 216
	move	$a5, $a3
	.p2align	4, , 16
.LBB56_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	st.w	$zero, $a4, -120
	st.w	$zero, $a4, 0
	addi.d	$a5, $a5, -2
	addi.d	$a4, $a4, 240
	bnez	$a5, .LBB56_6
# %bb.7:                                # %middle.block
	beq	$a3, $a2, .LBB56_10
.LBB56_8:                               # %scalar.ph.preheader
	ori	$a4, $zero, 120
	mul.d	$a4, $a3, $a4
	add.d	$a1, $a4, $a1
	addi.d	$a1, $a1, 96
	sub.d	$a3, $a2, $a3
	.p2align	4, , 16
.LBB56_9:                               # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	st.w	$zero, $a1, 0
	addi.d	$a3, $a3, -1
	addi.d	$a1, $a1, 120
	bnez	$a3, .LBB56_9
.LBB56_10:                              # %.preheader26
	ld.w	$a1, $a0, 884
	blez	$a1, .LBB56_13
# %bb.11:                               # %.lr.ph32
	ld.d	$a3, $a0, 896
	addi.d	$a3, $a3, 32
	.p2align	4, , 16
.LBB56_12:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a3, -8
	ld.d	$a5, $a3, -16
	fld.s	$fa1, $a4, 16
	fld.s	$fa2, $a5, 16
	ld.d	$a6, $a3, 0
	fsub.s	$fa1, $fa1, $fa2
	fld.s	$fa3, $a4, 20
	fld.s	$fa4, $a5, 20
	fld.s	$fa5, $a6, 16
	fld.s	$fa6, $a4, 24
	fld.s	$fa7, $a5, 24
	fld.s	$ft0, $a6, 20
	fsub.s	$fa2, $fa5, $fa2
	fld.s	$fa5, $a6, 24
	fsub.s	$fa3, $fa3, $fa4
	fsub.s	$fa4, $ft0, $fa4
	fsub.s	$fa6, $fa6, $fa7
	fsub.s	$fa5, $fa5, $fa7
	fneg.s	$fa7, $fa4
	fmul.s	$fa7, $fa6, $fa7
	fmadd.s	$fa7, $fa3, $fa5, $fa7
	fneg.s	$fa5, $fa5
	fmul.s	$fa5, $fa1, $fa5
	fmadd.s	$fa5, $fa6, $fa2, $fa5
	fneg.s	$fa2, $fa2
	fmul.s	$fa2, $fa3, $fa2
	fmadd.s	$fa1, $fa1, $fa4, $fa2
	fmul.s	$fa2, $fa5, $fa5
	fld.s	$fa3, $a5, 96
	fmadd.s	$fa2, $fa7, $fa7, $fa2
	fmadd.s	$fa1, $fa1, $fa1, $fa2
	fsqrt.s	$fa1, $fa1
	fadd.s	$fa2, $fa1, $fa3
	fst.s	$fa2, $a5, 96
	fld.s	$fa2, $a4, 96
	fadd.s	$fa2, $fa1, $fa2
	fst.s	$fa2, $a4, 96
	fld.s	$fa2, $a6, 96
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a6, 96
	addi.d	$a1, $a1, -1
	addi.d	$a3, $a3, 72
	bnez	$a1, .LBB56_12
.LBB56_13:                              # %.preheader
	blez	$a2, .LBB56_30
# %bb.14:                               # %.lr.ph34
	ld.d	$a1, $a0, 832
	ori	$a3, $zero, 4
	bgeu	$a2, $a3, .LBB56_16
# %bb.15:
	move	$a3, $zero
	b	.LBB56_19
.LBB56_16:                              # %vector.ph60
	bstrpick.d	$a3, $a2, 30, 2
	slli.d	$a3, $a3, 2
	addi.d	$a4, $a1, 336
	move	$a5, $a3
	.p2align	4, , 16
.LBB56_17:                              # %vector.body63
                                        # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a4, -240
	fld.s	$fa2, $a4, -120
	fld.s	$fa3, $a4, 0
	fld.s	$fa4, $a4, 120
	vextrins.w	$vr1, $vr2, 16
	vextrins.w	$vr1, $vr3, 32
	vextrins.w	$vr1, $vr4, 48
	vfrecip.s	$vr1, $vr1
	vstelm.w	$vr1, $a4, -240, 0
	vstelm.w	$vr1, $a4, -120, 1
	vstelm.w	$vr1, $a4, 0, 2
	vstelm.w	$vr1, $a4, 120, 3
	addi.d	$a5, $a5, -4
	addi.d	$a4, $a4, 480
	bnez	$a5, .LBB56_17
# %bb.18:                               # %middle.block66
	beq	$a3, $a2, .LBB56_21
.LBB56_19:                              # %scalar.ph58.preheader
	ori	$a4, $zero, 120
	mul.d	$a4, $a3, $a4
	add.d	$a1, $a4, $a1
	addi.d	$a1, $a1, 96
	sub.d	$a3, $a2, $a3
	.p2align	4, , 16
.LBB56_20:                              # %scalar.ph58
                                        # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a1, 0
	frecip.s	$fa1, $fa1
	fst.s	$fa1, $a1, 0
	addi.d	$a3, $a3, -1
	addi.d	$a1, $a1, 120
	bnez	$a3, .LBB56_20
.LBB56_21:                              # %.lr.ph.i
	ld.d	$a1, $a0, 832
	movgr2fr.w	$fa2, $zero
	addi.d	$a1, $a1, 96
	move	$a3, $a2
	fmov.s	$fa1, $fa2
	.p2align	4, , 16
.LBB56_22:                              # =>This Inner Loop Header: Depth=1
	fld.s	$fa3, $a1, 0
	frecip.s	$fa4, $fa3
	fcmp.clt.s	$fcc0, $fa2, $fa3
	fsel	$fa3, $fa2, $fa4, $fcc0
	fadd.s	$fa1, $fa1, $fa3
	addi.d	$a3, $a3, -1
	addi.d	$a1, $a1, 120
	bnez	$a3, .LBB56_22
# %bb.23:                               # %.lr.ph36
	ld.d	$a1, $a0, 832
	frecip.s	$fa1, $fa1
	ori	$a3, $zero, 4
	fmul.s	$fa0, $fa0, $fa1
	bgeu	$a2, $a3, .LBB56_25
# %bb.24:
	move	$a3, $zero
	b	.LBB56_28
.LBB56_25:                              # %vector.ph71
	bstrpick.d	$a3, $a2, 30, 2
	slli.d	$a3, $a3, 2
	vreplvei.w	$vr1, $vr0, 0
	addi.d	$a4, $a1, 336
	move	$a5, $a3
	.p2align	4, , 16
.LBB56_26:                              # %vector.body74
                                        # =>This Inner Loop Header: Depth=1
	fld.s	$fa2, $a4, -240
	fld.s	$fa3, $a4, -120
	fld.s	$fa4, $a4, 0
	fld.s	$fa5, $a4, 120
	vextrins.w	$vr2, $vr3, 16
	vextrins.w	$vr2, $vr4, 32
	vextrins.w	$vr2, $vr5, 48
	vfdiv.s	$vr2, $vr2, $vr1
	vstelm.w	$vr2, $a4, -240, 0
	vstelm.w	$vr2, $a4, -120, 1
	vstelm.w	$vr2, $a4, 0, 2
	vstelm.w	$vr2, $a4, 120, 3
	addi.d	$a5, $a5, -4
	addi.d	$a4, $a4, 480
	bnez	$a5, .LBB56_26
# %bb.27:                               # %middle.block77
	beq	$a3, $a2, .LBB56_30
.LBB56_28:                              # %scalar.ph69.preheader
	ori	$a4, $zero, 120
	mul.d	$a4, $a3, $a4
	add.d	$a1, $a4, $a1
	addi.d	$a1, $a1, 96
	sub.d	$a2, $a2, $a3
	.p2align	4, , 16
.LBB56_29:                              # %scalar.ph69
                                        # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a1, 0
	fdiv.s	$fa1, $fa1, $fa0
	fst.s	$fa1, $a1, 0
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 120
	bnez	$a2, .LBB56_29
.LBB56_30:                              # %._crit_edge
	ori	$a1, $zero, 1
	st.b	$a1, $a0, 1140
	ret
.Lfunc_end56:
	.size	_ZN10btSoftBody12setTotalMassEfb, .Lfunc_end56-_ZN10btSoftBody12setTotalMassEfb
                                        # -- End function
	.globl	_ZN10btSoftBody15setTotalDensityEf # -- Begin function _ZN10btSoftBody15setTotalDensityEf
	.p2align	5
	.type	_ZN10btSoftBody15setTotalDensityEf,@function
_ZN10btSoftBody15setTotalDensityEf:     # @_ZN10btSoftBody15setTotalDensityEf
# %bb.0:
	ld.w	$a1, $a0, 820
	blez	$a1, .LBB57_4
# %bb.1:
	ld.w	$a1, $a0, 884
	blez	$a1, .LBB57_5
# %bb.2:                                # %.lr.ph.i
	ld.d	$a2, $a0, 832
	fld.s	$fa1, $a2, 16
	ld.d	$a3, $a0, 896
	fld.s	$fa3, $a2, 20
	fld.s	$fa4, $a2, 24
	addi.d	$a2, $a3, 32
	movgr2fr.w	$fa2, $zero
	.p2align	4, , 16
.LBB57_3:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a2, -16
	fld.s	$fa5, $a3, 16
	fld.s	$fa6, $a3, 20
	ld.d	$a4, $a2, -8
	fld.s	$fa7, $a3, 24
	fsub.s	$fa5, $fa5, $fa1
	fsub.s	$fa6, $fa6, $fa3
	fld.s	$ft0, $a4, 16
	fld.s	$ft1, $a4, 20
	fld.s	$ft2, $a4, 24
	ld.d	$a3, $a2, 0
	fsub.s	$fa7, $fa7, $fa4
	fsub.s	$ft0, $ft0, $fa1
	fsub.s	$ft1, $ft1, $fa3
	fld.s	$ft3, $a3, 16
	fld.s	$ft4, $a3, 20
	fld.s	$ft5, $a3, 24
	fsub.s	$ft2, $ft2, $fa4
	fsub.s	$ft3, $ft3, $fa1
	fsub.s	$ft4, $ft4, $fa3
	fsub.s	$ft5, $ft5, $fa4
	fneg.s	$ft6, $ft4
	fmul.s	$ft6, $ft2, $ft6
	fmadd.s	$ft6, $ft1, $ft5, $ft6
	fneg.s	$ft5, $ft5
	fmul.s	$ft5, $ft0, $ft5
	fmadd.s	$ft2, $ft2, $ft3, $ft5
	fneg.s	$ft3, $ft3
	fmul.s	$ft1, $ft1, $ft3
	fmadd.s	$ft0, $ft0, $ft4, $ft1
	fmul.s	$fa6, $fa6, $ft2
	fmadd.s	$fa5, $fa5, $ft6, $fa6
	fmadd.s	$fa5, $fa7, $ft0, $fa5
	fadd.s	$fa2, $fa2, $fa5
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 72
	bnez	$a1, .LBB57_3
	b	.LBB57_6
.LBB57_4:
	movgr2fr.w	$fa1, $zero
	b	.LBB57_7
.LBB57_5:
	movgr2fr.w	$fa2, $zero
.LBB57_6:                               # %._crit_edge.i
	vldi	$vr1, -1256
	fdiv.s	$fa1, $fa2, $fa1
.LBB57_7:                               # %_ZNK10btSoftBody9getVolumeEv.exit
	fmul.s	$fa0, $fa0, $fa1
	ori	$a1, $zero, 1
	pcaddu18i	$t8, %call36(_ZN10btSoftBody12setTotalMassEfb)
	jr	$t8
.Lfunc_end57:
	.size	_ZN10btSoftBody15setTotalDensityEf, .Lfunc_end57-_ZN10btSoftBody15setTotalDensityEf
                                        # -- End function
	.globl	_ZNK10btSoftBody9getVolumeEv    # -- Begin function _ZNK10btSoftBody9getVolumeEv
	.p2align	5
	.type	_ZNK10btSoftBody9getVolumeEv,@function
_ZNK10btSoftBody9getVolumeEv:           # @_ZNK10btSoftBody9getVolumeEv
# %bb.0:
	ld.w	$a1, $a0, 820
	blez	$a1, .LBB58_4
# %bb.1:
	ld.w	$a1, $a0, 884
	blez	$a1, .LBB58_5
# %bb.2:                                # %.lr.ph
	ld.d	$a2, $a0, 832
	fld.s	$fa0, $a2, 16
	ld.d	$a0, $a0, 896
	fld.s	$fa2, $a2, 20
	fld.s	$fa3, $a2, 24
	addi.d	$a0, $a0, 32
	movgr2fr.w	$fa1, $zero
	.p2align	4, , 16
.LBB58_3:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $a0, -16
	fld.s	$fa4, $a2, 16
	fld.s	$fa5, $a2, 20
	ld.d	$a3, $a0, -8
	fld.s	$fa6, $a2, 24
	fsub.s	$fa4, $fa4, $fa0
	fsub.s	$fa5, $fa5, $fa2
	fld.s	$fa7, $a3, 16
	fld.s	$ft0, $a3, 20
	fld.s	$ft1, $a3, 24
	ld.d	$a2, $a0, 0
	fsub.s	$fa6, $fa6, $fa3
	fsub.s	$fa7, $fa7, $fa0
	fsub.s	$ft0, $ft0, $fa2
	fld.s	$ft2, $a2, 16
	fld.s	$ft3, $a2, 20
	fld.s	$ft4, $a2, 24
	fsub.s	$ft1, $ft1, $fa3
	fsub.s	$ft2, $ft2, $fa0
	fsub.s	$ft3, $ft3, $fa2
	fsub.s	$ft4, $ft4, $fa3
	fneg.s	$ft5, $ft3
	fmul.s	$ft5, $ft1, $ft5
	fmadd.s	$ft5, $ft0, $ft4, $ft5
	fneg.s	$ft4, $ft4
	fmul.s	$ft4, $fa7, $ft4
	fmadd.s	$ft1, $ft1, $ft2, $ft4
	fneg.s	$ft2, $ft2
	fmul.s	$ft0, $ft0, $ft2
	fmadd.s	$fa7, $fa7, $ft3, $ft0
	fmul.s	$fa5, $fa5, $ft1
	fmadd.s	$fa4, $fa4, $ft5, $fa5
	fmadd.s	$fa4, $fa6, $fa7, $fa4
	fadd.s	$fa1, $fa1, $fa4
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 72
	bnez	$a1, .LBB58_3
	b	.LBB58_6
.LBB58_4:
	movgr2fr.w	$fa0, $zero
	ret
.LBB58_5:
	movgr2fr.w	$fa1, $zero
.LBB58_6:                               # %._crit_edge
	vldi	$vr0, -1256
	fdiv.s	$fa0, $fa1, $fa0
	ret
.Lfunc_end58:
	.size	_ZNK10btSoftBody9getVolumeEv, .Lfunc_end58-_ZNK10btSoftBody9getVolumeEv
                                        # -- End function
	.globl	_ZN10btSoftBody13setVolumeMassEf # -- Begin function _ZN10btSoftBody13setVolumeMassEf
	.p2align	5
	.type	_ZN10btSoftBody13setVolumeMassEf,@function
_ZN10btSoftBody13setVolumeMassEf:       # @_ZN10btSoftBody13setVolumeMassEf
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 56, -40
	move	$fp, $a0
	ld.w	$a0, $a0, 820
	fmov.s	$fs0, $fa0
	blez	$a0, .LBB59_4
# %bb.1:                                # %_ZN20btAlignedObjectArrayIfE6resizeEiRKf.exit
	slli.d	$s1, $a0, 2
	ori	$a1, $zero, 16
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	move	$a1, $zero
	move	$a2, $s1
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 820
	blez	$a0, .LBB59_5
# %bb.2:                                # %.lr.ph
	ld.d	$a2, $fp, 832
	ori	$a1, $zero, 1
	bne	$a0, $a1, .LBB59_6
# %bb.3:
	move	$a3, $zero
	b	.LBB59_9
.LBB59_4:
	move	$a1, $zero
	move	$s0, $zero
	b	.LBB59_12
.LBB59_5:
	move	$a1, $zero
	b	.LBB59_12
.LBB59_6:                               # %vector.ph
	bstrpick.d	$a1, $a0, 30, 1
	slli.d	$a3, $a1, 1
	addi.d	$a1, $a2, 216
	move	$a4, $a3
	.p2align	4, , 16
.LBB59_7:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	st.w	$zero, $a1, -120
	st.w	$zero, $a1, 0
	addi.d	$a4, $a4, -2
	addi.d	$a1, $a1, 240
	bnez	$a4, .LBB59_7
# %bb.8:                                # %middle.block
	ori	$a1, $zero, 1
	beq	$a3, $a0, .LBB59_12
.LBB59_9:                               # %scalar.ph.preheader
	ori	$a1, $zero, 120
	mul.d	$a1, $a3, $a1
	add.d	$a1, $a1, $a2
	addi.d	$a1, $a1, 96
	sub.d	$a2, $a0, $a3
	.p2align	4, , 16
.LBB59_10:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	st.w	$zero, $a1, 0
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 120
	bnez	$a2, .LBB59_10
# %bb.11:
	ori	$a1, $zero, 1
.LBB59_12:                              # %.preheader44
	ld.w	$a2, $fp, 916
	blez	$a2, .LBB59_15
# %bb.13:                               # %.lr.ph49
	ld.d	$a4, $fp, 928
	ld.d	$a3, $fp, 832
	addi.d	$a4, $a4, 48
	ori	$a5, $zero, 0
	lu32i.d	$a5, -69905
	lu52i.d	$a5, $a5, -274
	vldi	$vr0, -1168
	.p2align	4, , 16
.LBB59_14:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a6, $a4, -32
	fld.s	$fa1, $a4, 0
	fld.s	$fa2, $a6, 96
	fabs.s	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a6, 96
	sub.d	$a6, $a6, $a3
	srli.d	$a6, $a6, 3
	mul.d	$a6, $a6, $a5
	srai.d	$a6, $a6, 30
	fldx.s	$fa1, $s0, $a6
	ld.d	$a7, $a4, -24
	fadd.s	$fa1, $fa1, $fa0
	fstx.s	$fa1, $s0, $a6
	fld.s	$fa1, $a4, 0
	fld.s	$fa2, $a7, 96
	fabs.s	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a7, 96
	sub.d	$a6, $a7, $a3
	srli.d	$a6, $a6, 3
	mul.d	$a6, $a6, $a5
	srai.d	$a6, $a6, 30
	fldx.s	$fa1, $s0, $a6
	ld.d	$a7, $a4, -16
	fadd.s	$fa1, $fa1, $fa0
	fstx.s	$fa1, $s0, $a6
	fld.s	$fa1, $a4, 0
	fld.s	$fa2, $a7, 96
	fabs.s	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a7, 96
	sub.d	$a6, $a7, $a3
	srli.d	$a6, $a6, 3
	mul.d	$a6, $a6, $a5
	srai.d	$a6, $a6, 30
	fldx.s	$fa1, $s0, $a6
	ld.d	$a7, $a4, -8
	fadd.s	$fa1, $fa1, $fa0
	fstx.s	$fa1, $s0, $a6
	fld.s	$fa1, $a4, 0
	fld.s	$fa2, $a7, 96
	fabs.s	$fa1, $fa1
	fadd.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a7, 96
	sub.d	$a6, $a7, $a3
	srli.d	$a6, $a6, 3
	mul.d	$a6, $a6, $a5
	srai.d	$a6, $a6, 30
	fldx.s	$fa1, $s0, $a6
	fadd.s	$fa1, $fa1, $fa0
	fstx.s	$fa1, $s0, $a6
	addi.d	$a2, $a2, -1
	addi.d	$a4, $a4, 136
	bnez	$a2, .LBB59_14
.LBB59_15:                              # %.preheader
	beqz	$a1, .LBB59_29
# %bb.16:                               # %.lr.ph51
	ld.d	$a2, $fp, 832
	bstrpick.d	$a1, $a0, 31, 0
	addi.d	$a2, $a2, 96
	movgr2fr.w	$fa0, $zero
	move	$a3, $a1
	move	$a4, $s0
	b	.LBB59_18
	.p2align	4, , 16
.LBB59_17:                              #   in Loop: Header=BB59_18 Depth=1
	addi.d	$a4, $a4, 4
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 120
	beqz	$a3, .LBB59_20
.LBB59_18:                              # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a2, 0
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB59_17
# %bb.19:                               #   in Loop: Header=BB59_18 Depth=1
	fld.s	$fa2, $a4, 0
	fdiv.s	$fa1, $fa2, $fa1
	fst.s	$fa1, $a2, 0
	b	.LBB59_17
.LBB59_20:                              # %.lr.ph.i.i
	ld.d	$a2, $fp, 832
	addi.d	$a3, $a2, 96
	move	$a4, $a1
	fmov.s	$fa1, $fa0
	.p2align	4, , 16
.LBB59_21:                              # =>This Inner Loop Header: Depth=1
	fld.s	$fa2, $a3, 0
	frecip.s	$fa3, $fa2
	fcmp.clt.s	$fcc0, $fa0, $fa2
	fsel	$fa2, $fa0, $fa3, $fcc0
	fadd.s	$fa1, $fa1, $fa2
	addi.d	$a4, $a4, -1
	addi.d	$a3, $a3, 120
	bnez	$a4, .LBB59_21
# %bb.22:                               # %.lr.ph36.i
	frecip.s	$fa0, $fa1
	ori	$a3, $zero, 4
	fmul.s	$fa0, $fs0, $fa0
	bgeu	$a0, $a3, .LBB59_24
# %bb.23:
	move	$a0, $zero
	b	.LBB59_27
.LBB59_24:                              # %vector.ph71
	bstrpick.d	$a0, $a1, 31, 2
	slli.d	$a0, $a0, 2
	vreplvei.w	$vr1, $vr0, 0
	addi.d	$a3, $a2, 336
	move	$a4, $a0
	.p2align	4, , 16
.LBB59_25:                              # %vector.body74
                                        # =>This Inner Loop Header: Depth=1
	fld.s	$fa2, $a3, -240
	fld.s	$fa3, $a3, -120
	fld.s	$fa4, $a3, 0
	fld.s	$fa5, $a3, 120
	vextrins.w	$vr2, $vr3, 16
	vextrins.w	$vr2, $vr4, 32
	vextrins.w	$vr2, $vr5, 48
	vfdiv.s	$vr2, $vr2, $vr1
	vstelm.w	$vr2, $a3, -240, 0
	vstelm.w	$vr2, $a3, -120, 1
	vstelm.w	$vr2, $a3, 0, 2
	vstelm.w	$vr2, $a3, 120, 3
	addi.d	$a4, $a4, -4
	addi.d	$a3, $a3, 480
	bnez	$a4, .LBB59_25
# %bb.26:                               # %middle.block77
	beq	$a0, $a1, .LBB59_29
.LBB59_27:                              # %scalar.ph69.preheader
	sub.d	$a1, $a1, $a0
	ori	$a3, $zero, 120
	mul.d	$a0, $a0, $a3
	add.d	$a0, $a0, $a2
	addi.d	$a0, $a0, 96
	.p2align	4, , 16
.LBB59_28:                              # %scalar.ph69
                                        # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a0, 0
	fdiv.s	$fa1, $fa1, $fa0
	fst.s	$fa1, $a0, 0
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 120
	bnez	$a1, .LBB59_28
.LBB59_29:                              # %.loopexit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1140
	beqz	$s0, .LBB59_31
# %bb.30:
	move	$a0, $s0
	fld.d	$fs0, $sp, 8                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	pcaddu18i	$t8, %call36(_Z21btAlignedFreeInternalPv)
	jr	$t8
.LBB59_31:                              # %_ZN20btAlignedObjectArrayIfED2Ev.exit
	fld.d	$fs0, $sp, 8                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end59:
	.size	_ZN10btSoftBody13setVolumeMassEf, .Lfunc_end59-_ZN10btSoftBody13setVolumeMassEf
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIfED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIfED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIfED2Ev # -- Begin function _ZN20btAlignedObjectArrayIfED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIfED2Ev,@function
_ZN20btAlignedObjectArrayIfED2Ev:       # @_ZN20btAlignedObjectArrayIfED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB60_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB60_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB60_3:                               # %_ZN20btAlignedObjectArrayIfE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end60:
	.size	_ZN20btAlignedObjectArrayIfED2Ev, .Lfunc_end60-_ZN20btAlignedObjectArrayIfED2Ev
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody16setVolumeDensityEf # -- Begin function _ZN10btSoftBody16setVolumeDensityEf
	.p2align	5
	.type	_ZN10btSoftBody16setVolumeDensityEf,@function
_ZN10btSoftBody16setVolumeDensityEf:    # @_ZN10btSoftBody16setVolumeDensityEf
	.cfi_startproc
# %bb.0:
	ld.w	$a1, $a0, 916
	blez	$a1, .LBB61_3
# %bb.1:                                # %.lr.ph
	ld.d	$a2, $a0, 928
	addi.d	$a2, $a2, 48
	movgr2fr.w	$fa1, $zero
	.p2align	4, , 16
.LBB61_2:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa2, $a2, 0
	fabs.s	$fa2, $fa2
	fadd.s	$fa1, $fa1, $fa2
	fadd.s	$fa1, $fa1, $fa2
	fadd.s	$fa1, $fa1, $fa2
	fadd.s	$fa1, $fa1, $fa2
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 136
	bnez	$a1, .LBB61_2
	b	.LBB61_4
.LBB61_3:
	movgr2fr.w	$fa1, $zero
.LBB61_4:                               # %._crit_edge
	fmul.s	$fa0, $fa0, $fa1
	vldi	$vr1, -1256
	fdiv.s	$fa0, $fa0, $fa1
	pcaddu18i	$t8, %call36(_ZN10btSoftBody13setVolumeMassEf)
	jr	$t8
.Lfunc_end61:
	.size	_ZN10btSoftBody16setVolumeDensityEf, .Lfunc_end61-_ZN10btSoftBody16setVolumeDensityEf
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody9transformERK11btTransform # -- Begin function _ZN10btSoftBody9transformERK11btTransform
	.p2align	5
	.type	_ZN10btSoftBody9transformERK11btTransform,@function
_ZN10btSoftBody9transformERK11btTransform: # @_ZN10btSoftBody9transformERK11btTransform
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 56, -56
	move	$fp, $a0
	ld.d	$a0, $a0, 200
	ld.d	$a2, $a0, 0
	ld.d	$a2, $a2, 88
	move	$s0, $a1
	jirl	$ra, $a2, 0
	ld.w	$a0, $fp, 820
	blez	$a0, .LBB62_3
# %bb.1:                                # %.lr.ph
	fmov.s	$fs0, $fa0
	move	$s2, $zero
	addi.d	$s1, $fp, 1144
	ori	$a1, $zero, 120
	mul.d	$s3, $a0, $a1
	.p2align	4, , 16
.LBB62_2:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 832
	add.d	$a0, $a0, $s2
	fld.s	$fa0, $s0, 0
	fld.s	$fa2, $a0, 16
	fld.s	$fa1, $s0, 4
	fld.s	$fa3, $a0, 20
	fld.s	$fa4, $s0, 8
	fld.s	$fa5, $a0, 24
	fld.s	$fa6, $s0, 48
	fmul.s	$fa1, $fa1, $fa3
	fmadd.s	$fa0, $fa0, $fa2, $fa1
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fadd.s	$fa0, $fa0, $fa6
	fld.s	$fa1, $s0, 20
	fld.s	$fa4, $s0, 16
	fld.s	$fa6, $s0, 24
	fld.s	$fa7, $s0, 52
	fmul.s	$fa1, $fa3, $fa1
	fmadd.s	$fa1, $fa4, $fa2, $fa1
	fmadd.s	$fa1, $fa6, $fa5, $fa1
	fadd.s	$fa1, $fa7, $fa1
	fld.s	$fa4, $s0, 36
	fld.s	$fa6, $s0, 32
	fld.s	$fa7, $s0, 40
	fld.s	$ft0, $s0, 56
	fmul.s	$fa3, $fa3, $fa4
	fmadd.s	$fa2, $fa6, $fa2, $fa3
	fmadd.s	$fa2, $fa7, $fa5, $fa2
	fadd.s	$fa2, $ft0, $fa2
	movfr2gr.s	$a1, $fa0
	movfr2gr.s	$a2, $fa1
	bstrins.d	$a1, $a2, 63, 32
	movfr2gr.s	$a2, $fa2
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a1, $a0, 16
	st.d	$a2, $a0, 24
	fld.s	$fa3, $s0, 0
	fld.s	$fa4, $a0, 32
	fld.s	$fa5, $s0, 4
	fld.s	$fa6, $a0, 36
	fld.s	$fa7, $s0, 8
	fld.s	$ft0, $a0, 40
	fld.s	$ft1, $s0, 48
	fmul.s	$fa5, $fa5, $fa6
	fmadd.s	$fa3, $fa3, $fa4, $fa5
	fmadd.s	$fa3, $fa7, $ft0, $fa3
	fadd.s	$fa3, $fa3, $ft1
	fld.s	$fa5, $s0, 20
	fld.s	$fa7, $s0, 16
	fld.s	$ft1, $s0, 24
	fld.s	$ft2, $s0, 52
	fmul.s	$fa5, $fa6, $fa5
	fmadd.s	$fa5, $fa7, $fa4, $fa5
	fmadd.s	$fa5, $ft1, $ft0, $fa5
	fadd.s	$fa5, $ft2, $fa5
	fld.s	$fa7, $s0, 36
	fld.s	$ft1, $s0, 32
	fld.s	$ft2, $s0, 40
	fld.s	$ft3, $s0, 56
	fmul.s	$fa6, $fa6, $fa7
	fmadd.s	$fa4, $ft1, $fa4, $fa6
	fmadd.s	$fa4, $ft2, $ft0, $fa4
	fadd.s	$fa4, $ft3, $fa4
	movfr2gr.s	$a1, $fa3
	movfr2gr.s	$a2, $fa5
	bstrins.d	$a1, $a2, 63, 32
	movfr2gr.s	$a2, $fa4
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a1, $a0, 32
	st.d	$a2, $a0, 40
	fld.s	$fa3, $s0, 4
	fld.s	$fa4, $a0, 84
	fld.s	$fa5, $s0, 0
	fld.s	$fa6, $a0, 80
	fmul.s	$fa3, $fa3, $fa4
	fld.s	$fa7, $s0, 8
	fld.s	$ft0, $a0, 88
	fld.s	$ft1, $s0, 20
	fld.s	$ft2, $s0, 16
	fmadd.s	$fa3, $fa5, $fa6, $fa3
	fmadd.s	$fa3, $fa7, $ft0, $fa3
	fmul.s	$fa5, $fa4, $ft1
	fmadd.s	$fa5, $ft2, $fa6, $fa5
	fld.s	$fa7, $s0, 24
	fld.s	$ft1, $s0, 36
	fld.s	$ft2, $s0, 32
	fld.s	$ft3, $s0, 40
	fmadd.s	$fa5, $fa7, $ft0, $fa5
	fmul.s	$fa4, $fa4, $ft1
	fmadd.s	$fa4, $ft2, $fa6, $fa4
	fmadd.s	$fa4, $ft3, $ft0, $fa4
	movfr2gr.s	$a1, $fa3
	movfr2gr.s	$a2, $fa5
	bstrins.d	$a1, $a2, 63, 32
	movfr2gr.s	$a2, $fa4
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a1, $a0, 80
	st.d	$a2, $a0, 88
	fsub.s	$fa3, $fa0, $fs0
	fsub.s	$fa4, $fa1, $fs0
	fsub.s	$fa5, $fa2, $fs0
	movfr2gr.s	$a1, $fa3
	movfr2gr.s	$a2, $fa4
	bstrins.d	$a1, $a2, 63, 32
	movfr2gr.s	$a2, $fa5
	bstrpick.d	$a2, $a2, 31, 0
	fadd.s	$fa0, $fs0, $fa0
	fadd.s	$fa1, $fs0, $fa1
	fadd.s	$fa2, $fs0, $fa2
	movfr2gr.s	$a3, $fa0
	movfr2gr.s	$a4, $fa1
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa2
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a1, $sp, 8
	st.d	$a2, $sp, 16
	st.d	$a3, $sp, 24
	st.d	$a4, $sp, 32
	ld.d	$a1, $a0, 104
	addi.d	$a2, $sp, 8
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMm)
	jirl	$ra, $ra, 0
	addi.d	$s2, $s2, 120
	bne	$s3, $s2, .LBB62_2
.LBB62_3:                               # %._crit_edge
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody13updateNormalsEv)
	jirl	$ra, $ra, 0
	ld.d	$s1, $fp, 1144
	beqz	$s1, .LBB62_6
# %bb.4:
	ld.d	$a0, $fp, 200
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	jirl	$ra, $a1, 0
	fld.s	$fa1, $s1, 0
	fld.s	$fa2, $s1, 4
	fld.s	$fa3, $s1, 8
	fsub.s	$fa1, $fa1, $fa0
	fsub.s	$fa2, $fa2, $fa0
	fsub.s	$fa3, $fa3, $fa0
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa3
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 1108
	st.d	$a1, $fp, 1116
	fld.s	$fa1, $s1, 16
	fld.s	$fa2, $s1, 20
	fld.s	$fa3, $s1, 24
	fadd.s	$fa1, $fa0, $fa1
	fadd.s	$fa2, $fa0, $fa2
	fadd.s	$fa0, $fa0, $fa3
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	ld.d	$a1, $fp, 192
	movfr2gr.s	$a2, $fa0
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a0, $fp, 1124
	st.d	$a2, $fp, 1132
	beqz	$a1, .LBB62_7
# %bb.5:
	ld.d	$a2, $fp, 776
	ld.d	$a0, $a2, 32
	ld.d	$a3, $a0, 0
	ld.d	$a4, $a2, 40
	ld.d	$a5, $a3, 32
	addi.d	$a2, $fp, 1108
	addi.d	$a3, $fp, 1124
	jirl	$ra, $a5, 0
	b	.LBB62_7
.LBB62_6:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 1124
	vst	$vr0, $fp, 1108
.LBB62_7:                               # %_ZN10btSoftBody12updateBoundsEv.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody15updateConstantsEv)
	jirl	$ra, $ra, 0
	vld	$vr0, $s0, 0
	vst	$vr0, $fp, 1400
	vld	$vr0, $s0, 16
	vst	$vr0, $fp, 1416
	vld	$vr0, $s0, 32
	vst	$vr0, $fp, 1432
	vld	$vr0, $s0, 48
	vst	$vr0, $fp, 1448
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.Lfunc_end62:
	.size	_ZN10btSoftBody9transformERK11btTransform, .Lfunc_end62-_ZN10btSoftBody9transformERK11btTransform
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody13updateNormalsEv
.LCPI63_0:
	.word	0x34000000                      # float 1.1920929E-7
	.text
	.globl	_ZN10btSoftBody13updateNormalsEv
	.p2align	5
	.type	_ZN10btSoftBody13updateNormalsEv,@function
_ZN10btSoftBody13updateNormalsEv:       # @_ZN10btSoftBody13updateNormalsEv
# %bb.0:
	ld.w	$a2, $a0, 820
	blez	$a2, .LBB63_3
# %bb.1:                                # %.lr.ph
	move	$a1, $zero
	ori	$a3, $zero, 120
	mul.d	$a2, $a2, $a3
	vrepli.b	$vr0, 0
	.p2align	4, , 16
.LBB63_2:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a0, 832
	add.d	$a3, $a3, $a1
	addi.d	$a1, $a1, 120
	vst	$vr0, $a3, 80
	bne	$a2, $a1, .LBB63_2
.LBB63_3:                               # %._crit_edge
	ld.w	$a2, $a0, 884
	blez	$a2, .LBB63_6
# %bb.4:                                # %.lr.ph62
	move	$a1, $zero
	slli.d	$a3, $a2, 6
	alsl.d	$a2, $a2, $a3, 3
	.p2align	4, , 16
.LBB63_5:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a0, 896
	add.d	$a6, $a3, $a1
	ld.d	$a4, $a6, 24
	ld.d	$a5, $a6, 16
	fld.s	$fa0, $a4, 16
	fld.s	$fa1, $a5, 16
	ld.d	$a3, $a6, 32
	fsub.s	$fa0, $fa0, $fa1
	fld.s	$fa2, $a4, 20
	fld.s	$fa3, $a5, 20
	fld.s	$fa4, $a3, 16
	fld.s	$fa5, $a4, 24
	fld.s	$fa6, $a5, 24
	fld.s	$fa7, $a3, 20
	fsub.s	$fa1, $fa4, $fa1
	fld.s	$fa4, $a3, 24
	fsub.s	$fa2, $fa2, $fa3
	fsub.s	$fa3, $fa7, $fa3
	fsub.s	$fa5, $fa5, $fa6
	fsub.s	$fa4, $fa4, $fa6
	fneg.s	$fa6, $fa3
	fmul.s	$fa6, $fa5, $fa6
	fmadd.s	$fa6, $fa2, $fa4, $fa6
	fneg.s	$fa4, $fa4
	fmul.s	$fa4, $fa0, $fa4
	fmadd.s	$fa4, $fa5, $fa1, $fa4
	fneg.s	$fa1, $fa1
	fmul.s	$fa1, $fa2, $fa1
	fmadd.s	$fa0, $fa0, $fa3, $fa1
	fmul.s	$fa1, $fa4, $fa4
	fmadd.s	$fa1, $fa6, $fa6, $fa1
	fmadd.s	$fa1, $fa0, $fa0, $fa1
	frsqrt.s	$fa1, $fa1
	fmul.s	$fa2, $fa6, $fa1
	fmul.s	$fa3, $fa4, $fa1
	fmul.s	$fa1, $fa0, $fa1
	movfr2gr.s	$a7, $fa2
	movfr2gr.s	$t0, $fa3
	bstrins.d	$a7, $t0, 63, 32
	movfr2gr.s	$t0, $fa1
	bstrpick.d	$t0, $t0, 31, 0
	st.d	$a7, $a6, 40
	st.d	$t0, $a6, 48
	fld.s	$fa1, $a5, 80
	fld.s	$fa2, $a5, 84
	fadd.s	$fa1, $fa6, $fa1
	fld.s	$fa3, $a5, 88
	fst.s	$fa1, $a5, 80
	fadd.s	$fa1, $fa4, $fa2
	fst.s	$fa1, $a5, 84
	fadd.s	$fa1, $fa0, $fa3
	fst.s	$fa1, $a5, 88
	fld.s	$fa1, $a4, 80
	fld.s	$fa2, $a4, 84
	fadd.s	$fa1, $fa6, $fa1
	fld.s	$fa3, $a4, 88
	fst.s	$fa1, $a4, 80
	fadd.s	$fa1, $fa4, $fa2
	fst.s	$fa1, $a4, 84
	fadd.s	$fa1, $fa0, $fa3
	fst.s	$fa1, $a4, 88
	fld.s	$fa1, $a3, 80
	fld.s	$fa2, $a3, 84
	fadd.s	$fa1, $fa6, $fa1
	fld.s	$fa3, $a3, 88
	fst.s	$fa1, $a3, 80
	fadd.s	$fa1, $fa4, $fa2
	fst.s	$fa1, $a3, 84
	fadd.s	$fa0, $fa0, $fa3
	addi.d	$a1, $a1, 72
	fst.s	$fa0, $a3, 88
	bne	$a2, $a1, .LBB63_5
.LBB63_6:                               # %._crit_edge63
	ld.w	$a1, $a0, 820
	blez	$a1, .LBB63_11
# %bb.7:                                # %.lr.ph66
	ld.d	$a0, $a0, 832
	pcalau12i	$a2, %pc_hi20(.LCPI63_0)
	fld.s	$fa0, $a2, %pc_lo12(.LCPI63_0)
	addi.d	$a0, $a0, 88
	b	.LBB63_9
	.p2align	4, , 16
.LBB63_8:                               #   in Loop: Header=BB63_9 Depth=1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 120
	beqz	$a1, .LBB63_11
.LBB63_9:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a0, -4
	fld.s	$fa3, $a0, -8
	fld.s	$fa2, $a0, 0
	fmul.s	$fa4, $fa1, $fa1
	fmadd.s	$fa4, $fa3, $fa3, $fa4
	fmadd.s	$fa4, $fa2, $fa2, $fa4
	fsqrt.s	$fa4, $fa4
	fcmp.cule.s	$fcc0, $fa4, $fa0
	bcnez	$fcc0, .LBB63_8
# %bb.10:                               #   in Loop: Header=BB63_9 Depth=1
	frecip.s	$fa4, $fa4
	fmul.s	$fa3, $fa3, $fa4
	fst.s	$fa3, $a0, -8
	fmul.s	$fa1, $fa1, $fa4
	fst.s	$fa1, $a0, -4
	fmul.s	$fa1, $fa2, $fa4
	fst.s	$fa1, $a0, 0
	b	.LBB63_8
.LBB63_11:                              # %._crit_edge67
	ret
.Lfunc_end63:
	.size	_ZN10btSoftBody13updateNormalsEv, .Lfunc_end63-_ZN10btSoftBody13updateNormalsEv
                                        # -- End function
	.globl	_ZN10btSoftBody15updateConstantsEv # -- Begin function _ZN10btSoftBody15updateConstantsEv
	.p2align	5
	.type	_ZN10btSoftBody15updateConstantsEv,@function
_ZN10btSoftBody15updateConstantsEv:     # @_ZN10btSoftBody15updateConstantsEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	ld.w	$a0, $a0, 852
	blez	$a0, .LBB64_3
# %bb.1:                                # %.lr.ph
	ld.d	$a1, $fp, 864
	addi.d	$a1, $a1, 24
	.p2align	4, , 16
.LBB64_2:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $a1, -8
	ld.d	$a3, $a1, 0
	fld.s	$fa0, $a2, 16
	fld.s	$fa1, $a3, 16
	fld.s	$fa2, $a2, 20
	fld.s	$fa3, $a3, 20
	fld.s	$fa4, $a2, 24
	fld.s	$fa5, $a3, 24
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	ld.d	$a4, $a1, -16
	fsub.s	$fa2, $fa4, $fa5
	fmul.s	$fa1, $fa1, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	fld.s	$fa1, $a2, 96
	fld.s	$fa2, $a3, 96
	fld.s	$fa3, $a4, 8
	fsqrt.s	$fa0, $fa0
	fst.s	$fa0, $a1, 8
	fadd.s	$fa1, $fa1, $fa2
	fdiv.s	$fa1, $fa1, $fa3
	fst.s	$fa1, $a1, 16
	fmul.s	$fa0, $fa0, $fa0
	fst.s	$fa0, $a1, 20
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 72
	bnez	$a0, .LBB64_2
.LBB64_3:                               # %._crit_edge
	ld.w	$a0, $fp, 884
	blez	$a0, .LBB64_6
# %bb.4:                                # %.lr.ph70
	ld.d	$a1, $fp, 896
	addi.d	$a1, $a1, 32
	.p2align	4, , 16
.LBB64_5:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $a1, -8
	ld.d	$a3, $a1, -16
	fld.s	$fa0, $a2, 16
	fld.s	$fa1, $a3, 16
	ld.d	$a4, $a1, 0
	fsub.s	$fa0, $fa0, $fa1
	fld.s	$fa2, $a2, 20
	fld.s	$fa3, $a3, 20
	fld.s	$fa4, $a4, 16
	fld.s	$fa5, $a2, 24
	fld.s	$fa6, $a3, 24
	fld.s	$fa7, $a4, 20
	fsub.s	$fa1, $fa4, $fa1
	fld.s	$fa4, $a4, 24
	fsub.s	$fa2, $fa2, $fa3
	fsub.s	$fa3, $fa7, $fa3
	fsub.s	$fa5, $fa5, $fa6
	fsub.s	$fa4, $fa4, $fa6
	fneg.s	$fa6, $fa3
	fmul.s	$fa6, $fa5, $fa6
	fmadd.s	$fa6, $fa2, $fa4, $fa6
	fneg.s	$fa4, $fa4
	fmul.s	$fa4, $fa0, $fa4
	fmadd.s	$fa4, $fa5, $fa1, $fa4
	fneg.s	$fa1, $fa1
	fmul.s	$fa1, $fa2, $fa1
	fmadd.s	$fa0, $fa0, $fa3, $fa1
	fmul.s	$fa1, $fa4, $fa4
	fmadd.s	$fa1, $fa6, $fa6, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fsqrt.s	$fa0, $fa0
	fst.s	$fa0, $a1, 24
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 72
	bnez	$a0, .LBB64_5
.LBB64_6:                               # %._crit_edge71
	ld.w	$a0, $fp, 820
	blez	$a0, .LBB64_10
# %bb.7:                                # %_ZN20btAlignedObjectArrayIiE6resizeEiRKi.exit
	slli.d	$s1, $a0, 2
	ori	$a1, $zero, 16
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	move	$a1, $zero
	move	$a2, $s1
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 820
	blez	$a0, .LBB64_16
# %bb.8:                                # %.lr.ph73
	ld.d	$a1, $fp, 832
	ori	$a2, $zero, 1
	bne	$a0, $a2, .LBB64_11
# %bb.9:
	move	$a2, $zero
	b	.LBB64_14
.LBB64_10:
	move	$s0, $zero
	b	.LBB64_16
.LBB64_11:                              # %vector.ph
	bstrpick.d	$a2, $a0, 30, 1
	slli.d	$a2, $a2, 1
	addi.d	$a3, $a1, 220
	move	$a4, $a2
	.p2align	4, , 16
.LBB64_12:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	st.w	$zero, $a3, -120
	st.w	$zero, $a3, 0
	addi.d	$a4, $a4, -2
	addi.d	$a3, $a3, 240
	bnez	$a4, .LBB64_12
# %bb.13:                               # %middle.block
	beq	$a2, $a0, .LBB64_16
.LBB64_14:                              # %scalar.ph.preheader
	ori	$a3, $zero, 120
	mul.d	$a3, $a2, $a3
	add.d	$a1, $a3, $a1
	addi.d	$a1, $a1, 100
	sub.d	$a2, $a0, $a2
	.p2align	4, , 16
.LBB64_15:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	st.w	$zero, $a1, 0
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 120
	bnez	$a2, .LBB64_15
.LBB64_16:                              # %._crit_edge74
	ld.w	$a1, $fp, 884
	blez	$a1, .LBB64_20
# %bb.17:                               # %.lr.ph78
	ld.d	$a2, $fp, 896
	ld.d	$a0, $fp, 832
	addi.d	$a2, $a2, 32
	ori	$a3, $zero, 0
	lu32i.d	$a3, -69905
	lu52i.d	$a3, $a3, -274
	.p2align	4, , 16
.LBB64_18:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a2, -16
	fld.s	$fa0, $a2, 24
	sub.d	$a5, $a4, $a0
	srli.d	$a5, $a5, 3
	mul.d	$a5, $a5, $a3
	srai.d	$a5, $a5, 30
	ldx.w	$a6, $s0, $a5
	fabs.s	$fa0, $fa0
	fld.s	$fa1, $a4, 100
	ld.d	$a7, $a2, -8
	addi.d	$a6, $a6, 1
	stx.w	$a6, $s0, $a5
	fadd.s	$fa1, $fa1, $fa0
	sub.d	$a5, $a7, $a0
	srli.d	$a5, $a5, 3
	mul.d	$a5, $a5, $a3
	srai.d	$a5, $a5, 30
	ldx.w	$a6, $s0, $a5
	fst.s	$fa1, $a4, 100
	fld.s	$fa1, $a7, 100
	ld.d	$a4, $a2, 0
	addi.d	$a6, $a6, 1
	stx.w	$a6, $s0, $a5
	fadd.s	$fa1, $fa1, $fa0
	sub.d	$a5, $a4, $a0
	srli.d	$a5, $a5, 3
	mul.d	$a5, $a5, $a3
	srai.d	$a5, $a5, 30
	ldx.w	$a6, $s0, $a5
	fst.s	$fa1, $a7, 100
	fld.s	$fa1, $a4, 100
	addi.d	$a6, $a6, 1
	stx.w	$a6, $s0, $a5
	fadd.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $a4, 100
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 72
	bnez	$a1, .LBB64_18
# %bb.19:                               # %._crit_edge79.loopexit
	ld.w	$a0, $fp, 820
.LBB64_20:                              # %._crit_edge79
	blez	$a0, .LBB64_26
# %bb.21:                               # %.lr.ph82
	ld.d	$a1, $fp, 832
	addi.d	$a1, $a1, 100
	move	$a2, $s0
	b	.LBB64_24
	.p2align	4, , 16
.LBB64_22:                              #   in Loop: Header=BB64_24 Depth=1
	st.w	$zero, $a1, 0
.LBB64_23:                              #   in Loop: Header=BB64_24 Depth=1
	addi.d	$a1, $a1, 120
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 4
	beqz	$a0, .LBB64_27
.LBB64_24:                              # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a2, 0
	blez	$a3, .LBB64_22
# %bb.25:                               #   in Loop: Header=BB64_24 Depth=1
	fld.s	$fa0, $a1, 0
	bstrpick.d	$a3, $a3, 31, 0
	movgr2fr.d	$fa1, $a3
	ffint.s.l	$fa1, $fa1
	fdiv.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $a1, 0
	b	.LBB64_23
.LBB64_26:                              # %._crit_edge83
	beqz	$s0, .LBB64_28
.LBB64_27:                              # %._crit_edge83.thread
	move	$a0, $s0
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z21btAlignedFreeInternalPv)
	jr	$t8
.LBB64_28:                              # %_ZN20btAlignedObjectArrayIiED2Ev.exit54
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end64:
	.size	_ZN10btSoftBody15updateConstantsEv, .Lfunc_end64-_ZN10btSoftBody15updateConstantsEv
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody9translateERK9btVector3 # -- Begin function _ZN10btSoftBody9translateERK9btVector3
	.p2align	5
	.type	_ZN10btSoftBody9translateERK9btVector3,@function
_ZN10btSoftBody9translateERK9btVector3: # @_ZN10btSoftBody9translateERK9btVector3
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	lu12i.w	$a2, 260096
	st.w	$a2, $sp, 8
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 12
	vld	$vr1, $a1, 0
	st.w	$a2, $sp, 28
	vst	$vr0, $sp, 32
	st.d	$a2, $sp, 48
	vst	$vr1, $sp, 56
	addi.d	$a1, $sp, 8
	pcaddu18i	$ra, %call36(_ZN10btSoftBody9transformERK11btTransform)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.Lfunc_end65:
	.size	_ZN10btSoftBody9translateERK9btVector3, .Lfunc_end65-_ZN10btSoftBody9translateERK9btVector3
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody6rotateERK12btQuaternion # -- Begin function _ZN10btSoftBody6rotateERK12btQuaternion
	.p2align	5
	.type	_ZN10btSoftBody6rotateERK12btQuaternion,@function
_ZN10btSoftBody6rotateERK12btQuaternion: # @_ZN10btSoftBody6rotateERK12btQuaternion
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 56
	fld.s	$fa0, $a1, 4
	fld.s	$fa1, $a1, 0
	fld.s	$fa2, $a1, 8
	fld.s	$fa3, $a1, 12
	fmul.s	$fa4, $fa0, $fa0
	fmadd.s	$fa4, $fa1, $fa1, $fa4
	fmadd.s	$fa4, $fa2, $fa2, $fa4
	fmadd.s	$fa4, $fa3, $fa3, $fa4
	vldi	$vr5, -1280
	fdiv.s	$fa4, $fa5, $fa4
	fmul.s	$fa5, $fa1, $fa4
	fmul.s	$fa6, $fa0, $fa4
	fmul.s	$fa4, $fa2, $fa4
	fmul.s	$fa7, $fa3, $fa5
	fmul.s	$ft0, $fa3, $fa6
	fmul.s	$fa3, $fa3, $fa4
	fmul.s	$fa5, $fa1, $fa5
	fmul.s	$ft1, $fa1, $fa6
	fmul.s	$fa1, $fa1, $fa4
	fmul.s	$fa6, $fa0, $fa6
	fmul.s	$fa0, $fa0, $fa4
	fmul.s	$fa2, $fa2, $fa4
	fadd.s	$fa4, $fa6, $fa2
	vldi	$vr10, -1168
	fsub.s	$fa4, $ft2, $fa4
	fsub.s	$ft3, $ft1, $fa3
	fadd.s	$ft4, $fa1, $ft0
	fadd.s	$fa3, $ft1, $fa3
	fadd.s	$fa2, $fa5, $fa2
	fsub.s	$fa2, $ft2, $fa2
	fsub.s	$ft1, $fa0, $fa7
	fsub.s	$fa1, $fa1, $ft0
	fadd.s	$fa0, $fa0, $fa7
	fadd.s	$fa5, $fa5, $fa6
	fsub.s	$fa5, $ft2, $fa5
	fst.s	$fa4, $sp, 8
	fst.s	$ft3, $sp, 12
	fst.s	$ft4, $sp, 16
	st.w	$zero, $sp, 20
	fst.s	$fa3, $sp, 24
	fst.s	$fa2, $sp, 28
	fst.s	$ft1, $sp, 32
	st.w	$zero, $sp, 36
	fst.s	$fa1, $sp, 40
	fst.s	$fa0, $sp, 44
	fst.s	$fa5, $sp, 48
	st.w	$zero, $sp, 52
	addi.d	$a1, $sp, 8
	pcaddu18i	$ra, %call36(_ZN10btSoftBody9transformERK11btTransform)
	jirl	$ra, $ra, 0
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.Lfunc_end66:
	.size	_ZN10btSoftBody6rotateERK12btQuaternion, .Lfunc_end66-_ZN10btSoftBody6rotateERK12btQuaternion
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody5scaleERK9btVector3 # -- Begin function _ZN10btSoftBody5scaleERK9btVector3
	.p2align	5
	.type	_ZN10btSoftBody5scaleERK9btVector3,@function
_ZN10btSoftBody5scaleERK9btVector3:     # @_ZN10btSoftBody5scaleERK9btVector3
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 56, -56
	move	$fp, $a0
	ld.d	$a0, $a0, 200
	ld.d	$a2, $a0, 0
	ld.d	$a2, $a2, 88
	move	$s0, $a1
	jirl	$ra, $a2, 0
	ld.w	$a0, $fp, 820
	blez	$a0, .LBB67_3
# %bb.1:                                # %.lr.ph
	fmov.s	$fs0, $fa0
	move	$s2, $zero
	addi.d	$s1, $fp, 1144
	ori	$a1, $zero, 120
	mul.d	$s3, $a0, $a1
	.p2align	4, , 16
.LBB67_2:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 832
	add.d	$a0, $a0, $s2
	fld.s	$fa0, $s0, 0
	fld.s	$fa1, $a0, 16
	fmul.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $a0, 16
	fld.s	$fa1, $s0, 4
	fld.s	$fa2, $a0, 20
	fmul.s	$fa1, $fa1, $fa2
	fst.s	$fa1, $a0, 20
	fld.s	$fa2, $s0, 8
	fld.s	$fa3, $a0, 24
	fmul.s	$fa2, $fa2, $fa3
	fst.s	$fa2, $a0, 24
	fld.s	$fa3, $s0, 0
	fld.s	$fa4, $a0, 32
	fmul.s	$fa3, $fa3, $fa4
	fst.s	$fa3, $a0, 32
	fld.s	$fa3, $s0, 4
	fld.s	$fa4, $a0, 36
	fmul.s	$fa3, $fa3, $fa4
	fst.s	$fa3, $a0, 36
	fld.s	$fa3, $s0, 8
	fld.s	$fa4, $a0, 40
	fmul.s	$fa3, $fa3, $fa4
	fst.s	$fa3, $a0, 40
	fsub.s	$fa3, $fa0, $fs0
	fsub.s	$fa4, $fa1, $fs0
	fsub.s	$fa5, $fa2, $fs0
	movfr2gr.s	$a1, $fa3
	movfr2gr.s	$a2, $fa4
	bstrins.d	$a1, $a2, 63, 32
	movfr2gr.s	$a2, $fa5
	bstrpick.d	$a2, $a2, 31, 0
	fadd.s	$fa0, $fs0, $fa0
	fadd.s	$fa1, $fs0, $fa1
	fadd.s	$fa2, $fs0, $fa2
	movfr2gr.s	$a3, $fa0
	movfr2gr.s	$a4, $fa1
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa2
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a1, $sp, 8
	st.d	$a2, $sp, 16
	st.d	$a3, $sp, 24
	st.d	$a4, $sp, 32
	ld.d	$a1, $a0, 104
	addi.d	$a2, $sp, 8
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMm)
	jirl	$ra, $ra, 0
	addi.d	$s2, $s2, 120
	bne	$s3, $s2, .LBB67_2
.LBB67_3:                               # %._crit_edge
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody13updateNormalsEv)
	jirl	$ra, $ra, 0
	ld.d	$s0, $fp, 1144
	beqz	$s0, .LBB67_6
# %bb.4:
	ld.d	$a0, $fp, 200
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	jirl	$ra, $a1, 0
	fld.s	$fa1, $s0, 0
	fld.s	$fa2, $s0, 4
	fld.s	$fa3, $s0, 8
	fsub.s	$fa1, $fa1, $fa0
	fsub.s	$fa2, $fa2, $fa0
	fsub.s	$fa3, $fa3, $fa0
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa3
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 1108
	st.d	$a1, $fp, 1116
	fld.s	$fa1, $s0, 16
	fld.s	$fa2, $s0, 20
	fld.s	$fa3, $s0, 24
	fadd.s	$fa1, $fa0, $fa1
	fadd.s	$fa2, $fa0, $fa2
	fadd.s	$fa0, $fa0, $fa3
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	ld.d	$a1, $fp, 192
	movfr2gr.s	$a2, $fa0
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a0, $fp, 1124
	st.d	$a2, $fp, 1132
	beqz	$a1, .LBB67_7
# %bb.5:
	ld.d	$a2, $fp, 776
	ld.d	$a0, $a2, 32
	ld.d	$a3, $a0, 0
	ld.d	$a4, $a2, 40
	ld.d	$a5, $a3, 32
	addi.d	$a2, $fp, 1108
	addi.d	$a3, $fp, 1124
	jirl	$ra, $a5, 0
	b	.LBB67_7
.LBB67_6:
	vrepli.b	$vr0, 0
	vst	$vr0, $fp, 1124
	vst	$vr0, $fp, 1108
.LBB67_7:                               # %_ZN10btSoftBody12updateBoundsEv.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody15updateConstantsEv)
	jirl	$ra, $ra, 0
	fld.d	$fs0, $sp, 40                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.Lfunc_end67:
	.size	_ZN10btSoftBody5scaleERK9btVector3, .Lfunc_end67-_ZN10btSoftBody5scaleERK9btVector3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody7setPoseEbb
.LCPI68_0:
	.word	0x447a0000                      # float 1000
	.text
	.globl	_ZN10btSoftBody7setPoseEbb
	.p2align	5
	.type	_ZN10btSoftBody7setPoseEbb,@function
_ZN10btSoftBody7setPoseEbb:             # @_ZN10btSoftBody7setPoseEbb
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 56, -64
	.cfi_offset 57, -72
	.cfi_offset 58, -80
	move	$fp, $a0
	ld.w	$s3, $a0, 820
	move	$s0, $a1
	st.b	$a1, $a0, 536
	st.b	$a2, $a0, 537
	blez	$s3, .LBB68_3
# %bb.1:                                # %.lr.ph.i
	ld.d	$a0, $fp, 832
	movgr2fr.w	$fa0, $zero
	addi.d	$a0, $a0, 96
	move	$a1, $s3
	fmov.s	$fa7, $fa0
	.p2align	4, , 16
.LBB68_2:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a0, 0
	frecip.s	$fa2, $fa1
	fcmp.clt.s	$fcc0, $fa0, $fa1
	fsel	$fa1, $fa0, $fa2, $fcc0
	fadd.s	$fa7, $fa7, $fa1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 120
	bnez	$a1, .LBB68_2
	b	.LBB68_4
.LBB68_3:
	movgr2fr.w	$fa7, $zero
.LBB68_4:                               # %_ZNK10btSoftBody12getTotalMassEv.exit
	ld.w	$s4, $fp, 580
	move	$s2, $s3
	bge	$s4, $s3, .LBB68_23
# %bb.5:
	ld.w	$a0, $fp, 584
	vst	$vr7, $sp, 16                   # 16-byte Folded Spill
	bge	$a0, $s3, .LBB68_16
# %bb.6:
	beqz	$s3, .LBB68_17
# %bb.7:
	slli.d	$a0, $s3, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 580
	move	$s1, $a0
	ld.d	$a0, $fp, 592
	blez	$a1, .LBB68_18
.LBB68_8:                               # %.lr.ph.i.i.i
	ori	$a3, $zero, 8
	move	$a2, $zero
	bltu	$a1, $a3, .LBB68_13
# %bb.9:                                # %.lr.ph.i.i.i
	sub.d	$a3, $s1, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB68_13
# %bb.10:                               # %vector.ph
	bstrpick.d	$a2, $a1, 30, 3
	slli.d	$a2, $a2, 3
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s1, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB68_11:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB68_11
# %bb.12:                               # %middle.block
	beq	$a2, $a1, .LBB68_15
.LBB68_13:                              # %scalar.ph.preheader
	sub.d	$a1, $a1, $a2
	alsl.d	$a3, $a2, $a0, 2
	alsl.d	$a2, $a2, $s1, 2
	.p2align	4, , 16
.LBB68_14:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	fld.s	$fa0, $a3, 0
	fst.s	$fa0, $a2, 0
	addi.d	$a1, $a1, -1
	addi.d	$a3, $a3, 4
	addi.d	$a2, $a2, 4
	bnez	$a1, .LBB68_14
.LBB68_15:                              # %_ZNK20btAlignedObjectArrayIfE4copyEiiPf.exit.thread.i.i
	ld.bu	$a1, $fp, 600
	bnez	$a1, .LBB68_20
	b	.LBB68_21
.LBB68_16:                              # %..lr.ph.i57_crit_edge
	ld.d	$s1, $fp, 592
	move	$s2, $s3
	b	.LBB68_22
.LBB68_17:
	move	$s1, $zero
	move	$a1, $s4
	ld.d	$a0, $fp, 592
	bgtz	$a1, .LBB68_8
.LBB68_18:                              # %_ZNK20btAlignedObjectArrayIfE4copyEiiPf.exit.i.i
	beqz	$a0, .LBB68_21
# %bb.19:                               # %_ZNK20btAlignedObjectArrayIfE4copyEiiPf.exit.i.i
	ld.b	$a1, $fp, 600
	andi	$a1, $a1, 1
	beqz	$a1, .LBB68_21
.LBB68_20:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB68_21:                              # %_ZN20btAlignedObjectArrayIfE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$s2, $fp, 820
	st.b	$a0, $fp, 600
	st.d	$s1, $fp, 592
	st.w	$s3, $fp, 584
.LBB68_22:                              # %.lr.ph.i57
	alsl.d	$a0, $s4, $s1, 2
	sub.d	$a1, $s3, $s4
	slli.d	$a2, $a1, 2
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	vld	$vr7, $sp, 16                   # 16-byte Folded Reload
.LBB68_23:                              # %_ZN20btAlignedObjectArrayIfE6resizeEiRKf.exit
	st.w	$s3, $fp, 580
	vrepli.b	$vr14, 0
	blez	$s2, .LBB68_34
# %bb.24:                               # %.lr.ph
	movgr2fr.w	$fa0, $s3
	pcalau12i	$a0, %pc_hi20(.LCPI68_0)
	fld.s	$fa1, $a0, %pc_lo12(.LCPI68_0)
	ld.d	$a0, $fp, 832
	ffint.s.w	$fa0, $fa0
	fmul.s	$fa0, $fa7, $fa0
	fmul.s	$fa0, $fa0, $fa1
	addi.d	$a0, $a0, 96
	movgr2fr.w	$fs0, $zero
	move	$a1, $s2
	.p2align	4, , 16
.LBB68_25:                              # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a0, 0
	fadd.s	$fa2, $fa0, $fa7
	fcmp.cult.s	$fcc0, $fs0, $fa1
	fsel	$fa7, $fa2, $fa7, $fcc0
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 120
	bnez	$a1, .LBB68_25
# %bb.26:                               # %.lr.ph141
	ld.d	$a0, $fp, 832
	ld.d	$a1, $fp, 592
	ori	$a2, $zero, 8
	fdiv.s	$fa0, $fa0, $fa7
	bltu	$s2, $a2, .LBB68_29
# %bb.27:                               # %vector.memcheck227
	ori	$a2, $zero, 120
	mul.d	$a2, $s2, $a2
	add.d	$a2, $a0, $a2
	addi.d	$a2, $a2, -20
	bgeu	$a1, $a2, .LBB68_35
# %bb.28:                               # %vector.memcheck227
	alsl.d	$a2, $s2, $a1, 2
	addi.d	$a3, $a0, 96
	bgeu	$a3, $a2, .LBB68_35
.LBB68_29:
	move	$a2, $zero
.LBB68_30:                              # %scalar.ph231.preheader
	alsl.d	$a1, $a2, $a1, 2
	ori	$a3, $zero, 120
	mul.d	$a3, $a2, $a3
	add.d	$a0, $a3, $a0
	addi.d	$a0, $a0, 96
	sub.d	$a2, $s2, $a2
	movgr2fr.w	$fa1, $zero
	b	.LBB68_32
	.p2align	4, , 16
.LBB68_31:                              #   in Loop: Header=BB68_32 Depth=1
	fst.s	$fa2, $a1, 0
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 120
	beqz	$a2, .LBB68_38
.LBB68_32:                              # %scalar.ph231
                                        # =>This Inner Loop Header: Depth=1
	fld.s	$fa3, $a0, 0
	fcmp.cule.s	$fcc0, $fa3, $fa1
	fmov.s	$fa2, $fa0
	bcnez	$fcc0, .LBB68_31
# %bb.33:                               #   in Loop: Header=BB68_32 Depth=1
	fmul.s	$fa2, $fa7, $fa3
	frecip.s	$fa2, $fa2
	b	.LBB68_31
.LBB68_34:
	movgr2fr.w	$fs0, $zero
	fmov.s	$fs2, $fs0
	fmov.s	$fs1, $fs0
	b	.LBB68_41
.LBB68_35:                              # %vector.ph233
	bstrpick.d	$a2, $s2, 30, 2
	slli.d	$a2, $a2, 2
	vreplvei.w	$vr1, $vr7, 0
	vreplvei.w	$vr2, $vr0, 0
	addi.d	$a3, $a0, 336
	move	$a4, $a2
	move	$a5, $a1
	.p2align	4, , 16
.LBB68_36:                              # %vector.body238
                                        # =>This Inner Loop Header: Depth=1
	fld.s	$fa3, $a3, -240
	fld.s	$fa4, $a3, -120
	fld.s	$fa5, $a3, 0
	fld.s	$fa6, $a3, 120
	vextrins.w	$vr3, $vr4, 16
	vextrins.w	$vr3, $vr5, 32
	vextrins.w	$vr3, $vr6, 48
	vfcmp.clt.s	$vr4, $vr14, $vr3
	vfmul.s	$vr3, $vr1, $vr3
	vfrecip.s	$vr3, $vr3
	vbitsel.v	$vr3, $vr2, $vr3, $vr4
	vst	$vr3, $a5, 0
	addi.d	$a3, $a3, 480
	addi.d	$a4, $a4, -4
	addi.d	$a5, $a5, 16
	bnez	$a4, .LBB68_36
# %bb.37:                               # %middle.block241
	bne	$a2, $s2, .LBB68_30
.LBB68_38:                              # %._crit_edge
	ld.bu	$a0, $fp, 537
	fmov.s	$fs2, $fs0
	fmov.s	$fs1, $fs0
	beqz	$a0, .LBB68_41
# %bb.39:                               # %.lr.ph.i62
	ld.d	$a1, $fp, 832
	ld.d	$a0, $fp, 592
	movgr2fr.w	$fs1, $zero
	addi.d	$a1, $a1, 24
	move	$a2, $s2
	fmov.s	$fs2, $fs1
	fmov.s	$fs0, $fs1
	.p2align	4, , 16
.LBB68_40:                              # =>This Inner Loop Header: Depth=1
	fld.s	$fa0, $a1, -8
	fld.s	$fa1, $a0, 0
	fld.s	$fa2, $a1, -4
	fld.s	$fa3, $a1, 0
	fmul.s	$fa0, $fa0, $fa1
	fmul.s	$fa2, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa3
	fadd.s	$fs0, $fs0, $fa0
	fadd.s	$fs2, $fs2, $fa2
	fadd.s	$fs1, $fs1, $fa1
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 4
	addi.d	$a1, $a1, 120
	bnez	$a2, .LBB68_40
.LBB68_41:                              # %_ZNK10btSoftBody11evaluateComEv.exit
	ld.w	$a1, $fp, 548
	move	$a2, $s2
	bge	$a1, $s2, .LBB68_52
# %bb.42:
	ld.w	$a0, $fp, 552
	move	$a2, $s2
	bge	$a0, $s2, .LBB68_52
# %bb.43:
	vst	$vr14, $sp, 16                  # 16-byte Folded Spill
	beqz	$s2, .LBB68_45
# %bb.44:
	slli.d	$a0, $s2, 4
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 548
	move	$s1, $a0
	bgtz	$a1, .LBB68_46
	b	.LBB68_48
.LBB68_45:
	move	$s1, $zero
	blez	$a1, .LBB68_48
.LBB68_46:                              # %.lr.ph.i.i.i76
	move	$a0, $zero
	slli.d	$a1, $a1, 4
	.p2align	4, , 16
.LBB68_47:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $fp, 560
	vldx	$vr0, $a2, $a0
	vstx	$vr0, $s1, $a0
	addi.d	$a0, $a0, 16
	bne	$a1, $a0, .LBB68_47
.LBB68_48:                              # %_ZNK20btAlignedObjectArrayI9btVector3E4copyEiiPS0_.exit.i.i
	ld.d	$a0, $fp, 560
	beqz	$a0, .LBB68_51
# %bb.49:                               # %_ZNK20btAlignedObjectArrayI9btVector3E4copyEiiPS0_.exit.i.i
	ld.b	$a1, $fp, 568
	andi	$a1, $a1, 1
	beqz	$a1, .LBB68_51
# %bb.50:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB68_51:                              # %_ZN20btAlignedObjectArrayI9btVector3E10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$a2, $fp, 820
	st.b	$a0, $fp, 568
	st.d	$s1, $fp, 560
	st.w	$s2, $fp, 552
	vld	$vr14, $sp, 16                  # 16-byte Folded Reload
.LBB68_52:                              # %_ZN20btAlignedObjectArrayI9btVector3E6resizeEiRKS0_.exit
	st.w	$s2, $fp, 548
	blez	$a2, .LBB68_55
# %bb.53:                               # %.lr.ph143
	move	$a0, $zero
	ori	$a1, $zero, 120
	mul.d	$a1, $a2, $a1
	ori	$a2, $zero, 8
	.p2align	4, , 16
.LBB68_54:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $fp, 832
	add.d	$a3, $a3, $a0
	fld.s	$fa0, $a3, 16
	fld.s	$fa1, $a3, 20
	fld.s	$fa2, $a3, 24
	fsub.s	$fa0, $fa0, $fs0
	fsub.s	$fa1, $fa1, $fs2
	fsub.s	$fa2, $fa2, $fs1
	movfr2gr.s	$a3, $fa0
	movfr2gr.s	$a4, $fa1
	ld.d	$a5, $fp, 560
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa2
	bstrpick.d	$a4, $a4, 31, 0
	add.d	$a6, $a5, $a2
	st.d	$a3, $a6, -8
	stx.d	$a4, $a5, $a2
	addi.d	$a0, $a0, 120
	addi.d	$a2, $a2, 16
	bne	$a1, $a0, .LBB68_54
.LBB68_55:                              # %._crit_edge144
	ld.w	$a0, $fp, 820
	movgr2fr.w	$fa0, $zero
	beqz	$s0, .LBB68_62
# %bb.56:                               # %._crit_edge144
	blez	$a0, .LBB68_62
# %bb.57:
	ld.w	$a1, $fp, 884
	blez	$a1, .LBB68_60
# %bb.58:                               # %.lr.ph.i84
	ld.d	$a2, $fp, 832
	fld.s	$fa0, $a2, 16
	ld.d	$a3, $fp, 896
	fld.s	$fa2, $a2, 20
	fld.s	$fa3, $a2, 24
	addi.d	$a2, $a3, 32
	movgr2fr.w	$fa1, $zero
	.p2align	4, , 16
.LBB68_59:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a2, -16
	fld.s	$fa4, $a3, 16
	fld.s	$fa5, $a3, 20
	ld.d	$a4, $a2, -8
	fld.s	$fa6, $a3, 24
	fsub.s	$fa4, $fa4, $fa0
	fsub.s	$fa5, $fa5, $fa2
	fld.s	$fa7, $a4, 16
	fld.s	$ft0, $a4, 20
	fld.s	$ft1, $a4, 24
	ld.d	$a3, $a2, 0
	fsub.s	$fa6, $fa6, $fa3
	fsub.s	$fa7, $fa7, $fa0
	fsub.s	$ft0, $ft0, $fa2
	fld.s	$ft2, $a3, 16
	fld.s	$ft3, $a3, 20
	fld.s	$ft4, $a3, 24
	fsub.s	$ft1, $ft1, $fa3
	fsub.s	$ft2, $ft2, $fa0
	fsub.s	$ft3, $ft3, $fa2
	fsub.s	$ft4, $ft4, $fa3
	fneg.s	$ft5, $ft3
	fmul.s	$ft5, $ft1, $ft5
	fmadd.s	$ft5, $ft0, $ft4, $ft5
	fneg.s	$ft4, $ft4
	fmul.s	$ft4, $fa7, $ft4
	fmadd.s	$ft1, $ft1, $ft2, $ft4
	fneg.s	$ft2, $ft2
	fmul.s	$ft0, $ft0, $ft2
	fmadd.s	$fa7, $fa7, $ft3, $ft0
	fmul.s	$fa5, $fa5, $ft1
	fmadd.s	$fa4, $fa4, $ft5, $fa5
	fmadd.s	$fa4, $fa6, $fa7, $fa4
	fadd.s	$fa1, $fa1, $fa4
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 72
	bnez	$a1, .LBB68_59
	b	.LBB68_61
.LBB68_60:
	movgr2fr.w	$fa1, $zero
.LBB68_61:                              # %._crit_edge.i
	vldi	$vr0, -1256
	fdiv.s	$fa0, $fa1, $fa0
.LBB68_62:                              # %_ZNK10btSoftBody9getVolumeEv.exit
	fst.s	$fa0, $fp, 540
	fst.s	$fs0, $fp, 608
	fst.s	$fs2, $fp, 612
	fst.s	$fs1, $fp, 616
	lu52i.d	$a1, $zero, 1016
	st.d	$a1, $fp, 620
	vst	$vr14, $fp, 628
	lu12i.w	$a1, 260096
	st.w	$a1, $fp, 644
	vst	$vr14, $fp, 648
	st.d	$a1, $fp, 664
	st.w	$a1, $fp, 672
	vst	$vr14, $fp, 676
	st.w	$a1, $fp, 692
	vst	$vr14, $fp, 696
	st.w	$a1, $fp, 712
	st.w	$zero, $fp, 764
	vst	$vr14, $fp, 716
	vst	$vr14, $fp, 732
	vst	$vr14, $fp, 748
	blez	$a0, .LBB68_65
# %bb.63:                               # %.lr.ph148
	fld.s	$fa1, $fp, 736
	fld.s	$fa0, $fp, 720
	ld.d	$a2, $fp, 560
	ld.d	$a1, $fp, 592
	fld.s	$fa3, $fp, 724
	fld.s	$fa4, $fp, 728
	fld.s	$fa2, $fp, 740
	fld.s	$fa5, $fp, 744
	movgr2fr.w	$fa6, $zero
	addi.d	$a2, $a2, 8
	fmov.s	$ft0, $fa6
	fmov.s	$fa7, $fa6
	.p2align	4, , 16
.LBB68_64:                              # =>This Inner Loop Header: Depth=1
	fld.s	$ft1, $a2, -8
	fld.s	$ft2, $a1, 0
	fld.s	$ft3, $a2, -4
	fld.s	$ft4, $a2, 0
	fmul.s	$ft5, $ft1, $ft2
	fmul.s	$ft1, $ft1, $ft5
	fmul.s	$ft6, $ft5, $ft3
	fmul.s	$ft5, $ft5, $ft4
	fadd.s	$fa0, $ft1, $fa0
	fst.s	$fa0, $fp, 720
	fadd.s	$fa3, $ft6, $fa3
	fst.s	$fa3, $fp, 724
	fadd.s	$fa4, $ft5, $fa4
	fst.s	$fa4, $fp, 728
	fld.s	$ft1, $a2, -8
	fld.s	$ft5, $a2, -4
	fld.s	$ft6, $a2, 0
	fmul.s	$ft3, $ft2, $ft3
	fmul.s	$ft1, $ft3, $ft1
	fmul.s	$ft5, $ft3, $ft5
	fmul.s	$ft3, $ft3, $ft6
	fadd.s	$fa1, $ft1, $fa1
	fst.s	$fa1, $fp, 736
	fadd.s	$fa2, $ft5, $fa2
	fst.s	$fa2, $fp, 740
	fadd.s	$fa5, $ft3, $fa5
	fst.s	$fa5, $fp, 744
	fld.s	$ft1, $a2, -8
	fld.s	$ft3, $a2, -4
	fld.s	$ft5, $a2, 0
	fmul.s	$ft2, $ft2, $ft4
	fmul.s	$ft1, $ft2, $ft1
	fmul.s	$ft3, $ft2, $ft3
	fmul.s	$ft2, $ft2, $ft5
	fadd.s	$fa6, $ft1, $fa6
	fst.s	$fa6, $fp, 752
	fadd.s	$ft0, $ft3, $ft0
	fst.s	$ft0, $fp, 756
	fadd.s	$fa7, $ft2, $fa7
	fst.s	$fa7, $fp, 760
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 16
	bnez	$a0, .LBB68_64
	b	.LBB68_66
.LBB68_65:                              # %_ZNK10btSoftBody9getVolumeEv.exit.._crit_edge149_crit_edge
	fld.s	$fa2, $fp, 740
	fld.s	$fa5, $fp, 744
	fld.s	$fa1, $fp, 736
	fld.s	$fa0, $fp, 720
	fld.s	$fa3, $fp, 724
	fld.s	$fa4, $fp, 728
	movgr2fr.w	$fa6, $zero
	fmov.s	$ft0, $fa6
	fmov.s	$fa7, $fa6
.LBB68_66:                              # %._crit_edge149
	fneg.s	$ft1, $ft0
	fmul.s	$ft2, $fa5, $ft1
	fmadd.s	$ft2, $fa2, $fa7, $ft2
	fneg.s	$ft3, $fa7
	fmul.s	$ft4, $fa1, $ft3
	fmadd.s	$ft4, $fa5, $fa6, $ft4
	fneg.s	$ft5, $fa6
	fmul.s	$ft6, $fa2, $ft5
	fmadd.s	$ft6, $fa1, $ft0, $ft6
	fmul.s	$ft7, $fa3, $ft4
	fmadd.s	$ft7, $fa0, $ft2, $ft7
	fmadd.s	$ft7, $fa4, $ft6, $ft7
	frecip.s	$ft7, $ft7
	fmul.s	$ft2, $ft2, $ft7
	fmul.s	$ft3, $fa3, $ft3
	fmadd.s	$ft0, $fa4, $ft0, $ft3
	fmul.s	$ft0, $ft0, $ft7
	fneg.s	$ft3, $fa2
	fmul.s	$ft3, $fa4, $ft3
	fmadd.s	$ft3, $fa3, $fa5, $ft3
	fmul.s	$ft3, $ft3, $ft7
	fmul.s	$ft4, $ft4, $ft7
	fmul.s	$ft5, $fa4, $ft5
	fmadd.s	$fa7, $fa0, $fa7, $ft5
	fmul.s	$fa7, $fa7, $ft7
	fneg.s	$fa5, $fa5
	fmul.s	$fa5, $fa0, $fa5
	fmadd.s	$fa4, $fa4, $fa1, $fa5
	fmul.s	$fa4, $fa4, $ft7
	fmul.s	$fa5, $ft6, $ft7
	fmul.s	$ft1, $fa0, $ft1
	fmadd.s	$fa6, $fa3, $fa6, $ft1
	fmul.s	$fa6, $fa6, $ft7
	fneg.s	$fa1, $fa1
	fmul.s	$fa1, $fa3, $fa1
	fmadd.s	$fa0, $fa0, $fa2, $fa1
	fmul.s	$fa0, $fa0, $ft7
	fst.s	$ft2, $fp, 720
	fst.s	$ft0, $fp, 724
	fst.s	$ft3, $fp, 728
	st.w	$zero, $fp, 732
	fst.s	$ft4, $fp, 736
	fst.s	$fa7, $fp, 740
	fst.s	$fa4, $fp, 744
	st.w	$zero, $fp, 748
	fst.s	$fa5, $fp, 752
	fst.s	$fa6, $fp, 756
	fst.s	$fa0, $fp, 760
	st.w	$zero, $fp, 764
	move	$a0, $fp
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	pcaddu18i	$t8, %call36(_ZN10btSoftBody15updateConstantsEv)
	jr	$t8
.Lfunc_end68:
	.size	_ZN10btSoftBody7setPoseEbb, .Lfunc_end68-_ZN10btSoftBody7setPoseEbb
	.cfi_endproc
                                        # -- End function
	.globl	_ZNK10btSoftBody11evaluateComEv # -- Begin function _ZNK10btSoftBody11evaluateComEv
	.p2align	5
	.type	_ZNK10btSoftBody11evaluateComEv,@function
_ZNK10btSoftBody11evaluateComEv:        # @_ZNK10btSoftBody11evaluateComEv
# %bb.0:
	ld.bu	$a1, $a0, 537
	beqz	$a1, .LBB69_5
# %bb.1:
	ld.w	$a1, $a0, 820
	blez	$a1, .LBB69_5
# %bb.2:                                # %.lr.ph
	ld.d	$a2, $a0, 832
	ld.d	$a0, $a0, 592
	movgr2fr.w	$fa0, $zero
	addi.d	$a2, $a2, 24
	fmov.s	$fa1, $fa0
	fmov.s	$fa2, $fa0
	.p2align	4, , 16
.LBB69_3:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa3, $a2, -8
	fld.s	$fa4, $a0, 0
	fld.s	$fa5, $a2, -4
	fld.s	$fa6, $a2, 0
	fmul.s	$fa3, $fa3, $fa4
	fmul.s	$fa5, $fa4, $fa5
	fmul.s	$fa4, $fa4, $fa6
	fadd.s	$fa2, $fa2, $fa3
	fadd.s	$fa1, $fa1, $fa5
	fadd.s	$fa0, $fa0, $fa4
	addi.d	$a0, $a0, 4
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 120
	bnez	$a1, .LBB69_3
# %bb.4:                                # %.loopexit.loopexit
	movfr2gr.s	$a0, $fa2
	movfr2gr.s	$a1, $fa1
	slli.d	$a2, $a1, 32
	bstrpick.d	$a0, $a0, 31, 0
	movfr2gr.s	$a1, $fa0
	bstrpick.d	$a1, $a1, 31, 0
	or	$a0, $a2, $a0
	ret
.LBB69_5:
	move	$a1, $zero
	move	$a0, $zero
	ret
.Lfunc_end69:
	.size	_ZNK10btSoftBody11evaluateComEv, .Lfunc_end69-_ZNK10btSoftBody11evaluateComEv
                                        # -- End function
	.globl	_ZNK10btSoftBody12clusterCountEv # -- Begin function _ZNK10btSoftBody12clusterCountEv
	.p2align	5
	.type	_ZNK10btSoftBody12clusterCountEv,@function
_ZNK10btSoftBody12clusterCountEv:       # @_ZNK10btSoftBody12clusterCountEv
# %bb.0:
	ld.w	$a0, $a0, 1340
	ret
.Lfunc_end70:
	.size	_ZNK10btSoftBody12clusterCountEv, .Lfunc_end70-_ZNK10btSoftBody12clusterCountEv
                                        # -- End function
	.globl	_ZN10btSoftBody10clusterComEPKNS_7ClusterE # -- Begin function _ZN10btSoftBody10clusterComEPKNS_7ClusterE
	.p2align	5
	.type	_ZN10btSoftBody10clusterComEPKNS_7ClusterE,@function
_ZN10btSoftBody10clusterComEPKNS_7ClusterE: # @_ZN10btSoftBody10clusterComEPKNS_7ClusterE
# %bb.0:
	ld.w	$a1, $a0, 4
	blez	$a1, .LBB71_3
# %bb.1:                                # %.lr.ph
	ld.d	$a2, $a0, 16
	ld.d	$a3, $a0, 48
	movgr2fr.w	$fa0, $zero
	fmov.s	$fa1, $fa0
	fmov.s	$fa2, $fa0
	.p2align	4, , 16
.LBB71_2:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a2, 0
	fld.s	$fa3, $a4, 16
	fld.s	$fa4, $a3, 0
	fld.s	$fa5, $a4, 20
	fld.s	$fa6, $a4, 24
	fmul.s	$fa3, $fa3, $fa4
	fmul.s	$fa5, $fa4, $fa5
	fmul.s	$fa4, $fa4, $fa6
	fadd.s	$fa2, $fa2, $fa3
	fadd.s	$fa1, $fa1, $fa5
	fadd.s	$fa0, $fa0, $fa4
	addi.d	$a3, $a3, 4
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 8
	bnez	$a1, .LBB71_2
	b	.LBB71_4
.LBB71_3:
	movgr2fr.w	$fa2, $zero
	fmov.s	$fa1, $fa2
	fmov.s	$fa0, $fa2
.LBB71_4:                               # %._crit_edge
	fld.s	$fa3, $a0, 164
	fmul.s	$fa2, $fa2, $fa3
	fmul.s	$fa1, $fa1, $fa3
	fmul.s	$fa0, $fa0, $fa3
	movfr2gr.s	$a0, $fa2
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa0
	bstrpick.d	$a1, $a1, 31, 0
	ret
.Lfunc_end71:
	.size	_ZN10btSoftBody10clusterComEPKNS_7ClusterE, .Lfunc_end71-_ZN10btSoftBody10clusterComEPKNS_7ClusterE
                                        # -- End function
	.globl	_ZNK10btSoftBody10clusterComEi  # -- Begin function _ZNK10btSoftBody10clusterComEi
	.p2align	5
	.type	_ZNK10btSoftBody10clusterComEi,@function
_ZNK10btSoftBody10clusterComEi:         # @_ZNK10btSoftBody10clusterComEi
# %bb.0:
	ld.d	$a0, $a0, 1352
	slli.d	$a1, $a1, 3
	ldx.d	$a0, $a0, $a1
	ld.w	$a1, $a0, 4
	blez	$a1, .LBB72_3
# %bb.1:                                # %.lr.ph.i
	ld.d	$a2, $a0, 16
	ld.d	$a3, $a0, 48
	movgr2fr.w	$fa0, $zero
	fmov.s	$fa2, $fa0
	fmov.s	$fa1, $fa0
	.p2align	4, , 16
.LBB72_2:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a2, 0
	fld.s	$fa3, $a4, 16
	fld.s	$fa4, $a3, 0
	fld.s	$fa5, $a4, 20
	fld.s	$fa6, $a4, 24
	fmul.s	$fa3, $fa3, $fa4
	fmul.s	$fa5, $fa4, $fa5
	fmul.s	$fa4, $fa4, $fa6
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa2, $fa2, $fa5
	fadd.s	$fa0, $fa0, $fa4
	addi.d	$a1, $a1, -1
	addi.d	$a3, $a3, 4
	addi.d	$a2, $a2, 8
	bnez	$a1, .LBB72_2
	b	.LBB72_4
.LBB72_3:
	movgr2fr.w	$fa1, $zero
	fmov.s	$fa2, $fa1
	fmov.s	$fa0, $fa1
.LBB72_4:                               # %_ZN10btSoftBody10clusterComEPKNS_7ClusterE.exit
	fld.s	$fa3, $a0, 164
	fmul.s	$fa1, $fa1, $fa3
	fmul.s	$fa2, $fa2, $fa3
	fmul.s	$fa0, $fa0, $fa3
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa0
	bstrpick.d	$a1, $a1, 31, 0
	ret
.Lfunc_end72:
	.size	_ZNK10btSoftBody10clusterComEi, .Lfunc_end72-_ZNK10btSoftBody10clusterComEi
                                        # -- End function
	.globl	_ZN10btSoftBody15clusterVelocityEPKNS_7ClusterERK9btVector3 # -- Begin function _ZN10btSoftBody15clusterVelocityEPKNS_7ClusterERK9btVector3
	.p2align	5
	.type	_ZN10btSoftBody15clusterVelocityEPKNS_7ClusterERK9btVector3,@function
_ZN10btSoftBody15clusterVelocityEPKNS_7ClusterERK9btVector3: # @_ZN10btSoftBody15clusterVelocityEPKNS_7ClusterERK9btVector3
# %bb.0:
	fld.s	$fa0, $a1, 4
	fld.s	$fa1, $a0, 376
	fld.s	$fa2, $a0, 372
	fld.s	$fa3, $a1, 8
	fneg.s	$fa4, $fa0
	fmul.s	$fa4, $fa1, $fa4
	fld.s	$fa5, $a0, 368
	fld.s	$fa6, $a1, 0
	fmadd.s	$fa4, $fa2, $fa3, $fa4
	fneg.s	$fa3, $fa3
	fmul.s	$fa3, $fa5, $fa3
	fmadd.s	$fa1, $fa1, $fa6, $fa3
	fneg.s	$fa3, $fa6
	fmul.s	$fa2, $fa2, $fa3
	fld.s	$fa3, $a0, 352
	fld.s	$fa6, $a0, 356
	fld.s	$fa7, $a0, 360
	fmadd.s	$fa0, $fa5, $fa0, $fa2
	fadd.s	$fa2, $fa4, $fa3
	fadd.s	$fa1, $fa6, $fa1
	fadd.s	$fa0, $fa0, $fa7
	movfr2gr.s	$a0, $fa2
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa0
	bstrpick.d	$a1, $a1, 31, 0
	ret
.Lfunc_end73:
	.size	_ZN10btSoftBody15clusterVelocityEPKNS_7ClusterERK9btVector3, .Lfunc_end73-_ZN10btSoftBody15clusterVelocityEPKNS_7ClusterERK9btVector3
                                        # -- End function
	.globl	_ZN10btSoftBody15clusterVImpulseEPNS_7ClusterERK9btVector3S4_ # -- Begin function _ZN10btSoftBody15clusterVImpulseEPNS_7ClusterERK9btVector3S4_
	.p2align	5
	.type	_ZN10btSoftBody15clusterVImpulseEPNS_7ClusterERK9btVector3S4_,@function
_ZN10btSoftBody15clusterVImpulseEPNS_7ClusterERK9btVector3S4_: # @_ZN10btSoftBody15clusterVImpulseEPNS_7ClusterERK9btVector3S4_
# %bb.0:
	fld.s	$fa3, $a2, 0
	fld.s	$fa0, $a0, 164
	fld.s	$fa4, $a2, 4
	fld.s	$fa5, $a2, 8
	fmul.s	$fa2, $fa3, $fa0
	fmul.s	$fa1, $fa0, $fa4
	fmul.s	$fa0, $fa0, $fa5
	fld.s	$fa6, $a1, 8
	fld.s	$fa7, $a1, 4
	fneg.s	$ft0, $fa4
	fld.s	$ft1, $a1, 0
	fmul.s	$ft0, $fa6, $ft0
	fmadd.s	$ft0, $fa7, $fa5, $ft0
	fneg.s	$fa5, $fa5
	fmul.s	$fa5, $ft1, $fa5
	fmadd.s	$fa5, $fa6, $fa3, $fa5
	fneg.s	$fa3, $fa3
	fld.s	$fa6, $a0, 220
	fmul.s	$fa3, $fa7, $fa3
	fld.s	$fa7, $a0, 216
	fmadd.s	$fa3, $ft1, $fa4, $fa3
	fmul.s	$fa4, $fa6, $fa5
	fld.s	$fa6, $a0, 236
	fmadd.s	$fa4, $fa7, $ft0, $fa4
	fld.s	$fa7, $a0, 232
	fld.s	$ft1, $a0, 252
	fmul.s	$fa6, $fa5, $fa6
	fld.s	$ft2, $a0, 248
	fmadd.s	$fa6, $fa7, $ft0, $fa6
	fmul.s	$fa5, $fa5, $ft1
	fld.s	$fa7, $a0, 224
	fmadd.s	$fa5, $ft2, $ft0, $fa5
	fld.s	$ft0, $a0, 240
	fld.s	$ft1, $a0, 256
	fmadd.s	$fa4, $fa7, $fa3, $fa4
	fld.s	$fa7, $a0, 280
	fmadd.s	$fa6, $ft0, $fa3, $fa6
	fmadd.s	$fa3, $ft1, $fa3, $fa5
	fld.s	$fa5, $a0, 284
	fadd.s	$fa7, $fa2, $fa7
	fst.s	$fa7, $a0, 280
	fld.s	$fa7, $a0, 288
	fadd.s	$fa5, $fa1, $fa5
	fst.s	$fa5, $a0, 284
	fld.s	$fa5, $a0, 352
	fadd.s	$fa7, $fa0, $fa7
	fst.s	$fa7, $a0, 288
	fld.s	$fa7, $a0, 356
	fadd.s	$fa2, $fa2, $fa5
	fst.s	$fa2, $a0, 352
	fld.s	$fa2, $a0, 360
	fadd.s	$fa1, $fa1, $fa7
	fst.s	$fa1, $a0, 356
	fld.s	$fa1, $a0, 296
	fadd.s	$fa0, $fa0, $fa2
	fst.s	$fa0, $a0, 360
	fld.s	$fa0, $a0, 300
	fadd.s	$fa1, $fa4, $fa1
	fst.s	$fa1, $a0, 296
	fld.s	$fa1, $a0, 304
	fadd.s	$fa0, $fa6, $fa0
	fst.s	$fa0, $a0, 300
	fld.s	$fa0, $a0, 368
	fadd.s	$fa1, $fa3, $fa1
	fst.s	$fa1, $a0, 304
	fld.s	$fa1, $a0, 372
	fadd.s	$fa0, $fa4, $fa0
	fst.s	$fa0, $a0, 368
	fld.s	$fa0, $a0, 376
	fadd.s	$fa1, $fa6, $fa1
	ld.w	$a1, $a0, 344
	fst.s	$fa1, $a0, 372
	fadd.s	$fa0, $fa3, $fa0
	fst.s	$fa0, $a0, 376
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 344
	ret
.Lfunc_end74:
	.size	_ZN10btSoftBody15clusterVImpulseEPNS_7ClusterERK9btVector3S4_, .Lfunc_end74-_ZN10btSoftBody15clusterVImpulseEPNS_7ClusterERK9btVector3S4_
                                        # -- End function
	.globl	_ZN10btSoftBody15clusterDImpulseEPNS_7ClusterERK9btVector3S4_ # -- Begin function _ZN10btSoftBody15clusterDImpulseEPNS_7ClusterERK9btVector3S4_
	.p2align	5
	.type	_ZN10btSoftBody15clusterDImpulseEPNS_7ClusterERK9btVector3S4_,@function
_ZN10btSoftBody15clusterDImpulseEPNS_7ClusterERK9btVector3S4_: # @_ZN10btSoftBody15clusterDImpulseEPNS_7ClusterERK9btVector3S4_
# %bb.0:
	fld.s	$fa0, $a2, 0
	fld.s	$fa1, $a0, 164
	fld.s	$fa2, $a2, 4
	fld.s	$fa3, $a2, 8
	fmul.s	$fa4, $fa0, $fa1
	fmul.s	$fa5, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa3
	fld.s	$fa6, $a1, 8
	fld.s	$fa7, $a1, 4
	fneg.s	$ft0, $fa2
	fld.s	$ft1, $a1, 0
	fmul.s	$ft0, $fa6, $ft0
	fmadd.s	$ft0, $fa7, $fa3, $ft0
	fneg.s	$fa3, $fa3
	fmul.s	$fa3, $ft1, $fa3
	fmadd.s	$fa3, $fa6, $fa0, $fa3
	fneg.s	$fa0, $fa0
	fld.s	$fa6, $a0, 220
	fmul.s	$fa0, $fa7, $fa0
	fld.s	$fa7, $a0, 216
	fmadd.s	$fa0, $ft1, $fa2, $fa0
	fmul.s	$fa2, $fa6, $fa3
	fld.s	$fa6, $a0, 236
	fmadd.s	$fa2, $fa7, $ft0, $fa2
	fld.s	$fa7, $a0, 232
	fld.s	$ft1, $a0, 252
	fmul.s	$fa6, $fa3, $fa6
	fld.s	$ft2, $a0, 248
	fmadd.s	$fa6, $fa7, $ft0, $fa6
	fmul.s	$fa3, $fa3, $ft1
	fld.s	$fa7, $a0, 224
	fmadd.s	$fa3, $ft2, $ft0, $fa3
	fld.s	$ft0, $a0, 240
	fld.s	$ft1, $a0, 256
	fmadd.s	$fa2, $fa7, $fa0, $fa2
	fld.s	$fa7, $a0, 312
	fmadd.s	$fa6, $ft0, $fa0, $fa6
	fmadd.s	$fa0, $ft1, $fa0, $fa3
	fld.s	$fa3, $a0, 316
	fadd.s	$fa4, $fa4, $fa7
	fst.s	$fa4, $a0, 312
	fld.s	$fa4, $a0, 320
	fadd.s	$fa3, $fa5, $fa3
	fst.s	$fa3, $a0, 316
	fld.s	$fa3, $a0, 328
	fadd.s	$fa1, $fa1, $fa4
	fst.s	$fa1, $a0, 320
	fld.s	$fa1, $a0, 332
	fadd.s	$fa2, $fa2, $fa3
	fst.s	$fa2, $a0, 328
	fld.s	$fa2, $a0, 336
	fadd.s	$fa1, $fa6, $fa1
	ld.w	$a1, $a0, 348
	fst.s	$fa1, $a0, 332
	fadd.s	$fa0, $fa0, $fa2
	fst.s	$fa0, $a0, 336
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 348
	ret
.Lfunc_end75:
	.size	_ZN10btSoftBody15clusterDImpulseEPNS_7ClusterERK9btVector3S4_, .Lfunc_end75-_ZN10btSoftBody15clusterDImpulseEPNS_7ClusterERK9btVector3S4_
                                        # -- End function
	.globl	_ZN10btSoftBody14clusterImpulseEPNS_7ClusterERK9btVector3RKNS_7ImpulseE # -- Begin function _ZN10btSoftBody14clusterImpulseEPNS_7ClusterERK9btVector3RKNS_7ImpulseE
	.p2align	5
	.type	_ZN10btSoftBody14clusterImpulseEPNS_7ClusterERK9btVector3RKNS_7ImpulseE,@function
_ZN10btSoftBody14clusterImpulseEPNS_7ClusterERK9btVector3RKNS_7ImpulseE: # @_ZN10btSoftBody14clusterImpulseEPNS_7ClusterERK9btVector3RKNS_7ImpulseE
# %bb.0:
	ld.bu	$a3, $a2, 32
	andi	$a4, $a3, 1
	bnez	$a4, .LBB76_3
# %bb.1:
	andi	$a3, $a3, 2
	bnez	$a3, .LBB76_4
.LBB76_2:
	ret
.LBB76_3:
	fld.s	$fa3, $a2, 0
	fld.s	$fa0, $a0, 164
	fld.s	$fa4, $a2, 4
	fld.s	$fa5, $a2, 8
	fmul.s	$fa2, $fa3, $fa0
	fmul.s	$fa1, $fa0, $fa4
	fmul.s	$fa0, $fa0, $fa5
	fld.s	$fa6, $a1, 8
	fld.s	$fa7, $a1, 4
	fneg.s	$ft0, $fa4
	fld.s	$ft1, $a1, 0
	fmul.s	$ft0, $fa6, $ft0
	fmadd.s	$ft0, $fa7, $fa5, $ft0
	fneg.s	$fa5, $fa5
	fmul.s	$fa5, $ft1, $fa5
	fmadd.s	$fa5, $fa6, $fa3, $fa5
	fneg.s	$fa3, $fa3
	fld.s	$fa6, $a0, 220
	fmul.s	$fa3, $fa7, $fa3
	fld.s	$fa7, $a0, 216
	fmadd.s	$fa3, $ft1, $fa4, $fa3
	fmul.s	$fa4, $fa6, $fa5
	fld.s	$fa6, $a0, 236
	fmadd.s	$fa4, $fa7, $ft0, $fa4
	fld.s	$fa7, $a0, 232
	fld.s	$ft1, $a0, 252
	fmul.s	$fa6, $fa5, $fa6
	fld.s	$ft2, $a0, 248
	fmadd.s	$fa6, $fa7, $ft0, $fa6
	fmul.s	$fa5, $fa5, $ft1
	fld.s	$fa7, $a0, 224
	fmadd.s	$fa5, $ft2, $ft0, $fa5
	fld.s	$ft0, $a0, 240
	fld.s	$ft1, $a0, 256
	fmadd.s	$fa4, $fa7, $fa3, $fa4
	fld.s	$fa7, $a0, 280
	fmadd.s	$fa6, $ft0, $fa3, $fa6
	fmadd.s	$fa3, $ft1, $fa3, $fa5
	fld.s	$fa5, $a0, 284
	fadd.s	$fa7, $fa2, $fa7
	fst.s	$fa7, $a0, 280
	fld.s	$fa7, $a0, 288
	fadd.s	$fa5, $fa1, $fa5
	fst.s	$fa5, $a0, 284
	fld.s	$fa5, $a0, 352
	fadd.s	$fa7, $fa0, $fa7
	fst.s	$fa7, $a0, 288
	fld.s	$fa7, $a0, 356
	fadd.s	$fa2, $fa2, $fa5
	fst.s	$fa2, $a0, 352
	fld.s	$fa2, $a0, 360
	fadd.s	$fa1, $fa1, $fa7
	fst.s	$fa1, $a0, 356
	fld.s	$fa1, $a0, 296
	fadd.s	$fa0, $fa0, $fa2
	fst.s	$fa0, $a0, 360
	fld.s	$fa0, $a0, 300
	fadd.s	$fa1, $fa4, $fa1
	fst.s	$fa1, $a0, 296
	fld.s	$fa1, $a0, 304
	fadd.s	$fa0, $fa6, $fa0
	fst.s	$fa0, $a0, 300
	fld.s	$fa0, $a0, 368
	fadd.s	$fa1, $fa3, $fa1
	fst.s	$fa1, $a0, 304
	fld.s	$fa1, $a0, 372
	fadd.s	$fa0, $fa4, $fa0
	fst.s	$fa0, $a0, 368
	fld.s	$fa0, $a0, 376
	fadd.s	$fa1, $fa6, $fa1
	ld.w	$a3, $a0, 344
	fst.s	$fa1, $a0, 372
	fadd.s	$fa0, $fa3, $fa0
	fst.s	$fa0, $a0, 376
	addi.d	$a3, $a3, 1
	st.w	$a3, $a0, 344
	ld.bu	$a3, $a2, 32
	andi	$a3, $a3, 2
	beqz	$a3, .LBB76_2
.LBB76_4:
	fld.s	$fa0, $a2, 16
	fld.s	$fa1, $a0, 164
	fld.s	$fa2, $a2, 20
	fld.s	$fa3, $a2, 24
	fmul.s	$fa4, $fa0, $fa1
	fmul.s	$fa5, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa3
	fld.s	$fa6, $a1, 8
	fld.s	$fa7, $a1, 4
	fneg.s	$ft0, $fa2
	fld.s	$ft1, $a1, 0
	fmul.s	$ft0, $fa6, $ft0
	fmadd.s	$ft0, $fa7, $fa3, $ft0
	fneg.s	$fa3, $fa3
	fmul.s	$fa3, $ft1, $fa3
	fmadd.s	$fa3, $fa6, $fa0, $fa3
	fneg.s	$fa0, $fa0
	fld.s	$fa6, $a0, 220
	fmul.s	$fa0, $fa7, $fa0
	fld.s	$fa7, $a0, 216
	fmadd.s	$fa0, $ft1, $fa2, $fa0
	fmul.s	$fa2, $fa6, $fa3
	fld.s	$fa6, $a0, 236
	fmadd.s	$fa2, $fa7, $ft0, $fa2
	fld.s	$fa7, $a0, 232
	fld.s	$ft1, $a0, 252
	fmul.s	$fa6, $fa3, $fa6
	fld.s	$ft2, $a0, 248
	fmadd.s	$fa6, $fa7, $ft0, $fa6
	fmul.s	$fa3, $fa3, $ft1
	fld.s	$fa7, $a0, 224
	fmadd.s	$fa3, $ft2, $ft0, $fa3
	fld.s	$ft0, $a0, 240
	fld.s	$ft1, $a0, 256
	fmadd.s	$fa2, $fa7, $fa0, $fa2
	fld.s	$fa7, $a0, 312
	fmadd.s	$fa6, $ft0, $fa0, $fa6
	fmadd.s	$fa0, $ft1, $fa0, $fa3
	fld.s	$fa3, $a0, 316
	fadd.s	$fa4, $fa4, $fa7
	fst.s	$fa4, $a0, 312
	fld.s	$fa4, $a0, 320
	fadd.s	$fa3, $fa5, $fa3
	fst.s	$fa3, $a0, 316
	fld.s	$fa3, $a0, 328
	fadd.s	$fa1, $fa1, $fa4
	fst.s	$fa1, $a0, 320
	fld.s	$fa1, $a0, 332
	fadd.s	$fa2, $fa2, $fa3
	fst.s	$fa2, $a0, 328
	fld.s	$fa2, $a0, 336
	fadd.s	$fa1, $fa6, $fa1
	ld.w	$a1, $a0, 348
	fst.s	$fa1, $a0, 332
	fadd.s	$fa0, $fa0, $fa2
	fst.s	$fa0, $a0, 336
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 348
	ret
.Lfunc_end76:
	.size	_ZN10btSoftBody14clusterImpulseEPNS_7ClusterERK9btVector3RKNS_7ImpulseE, .Lfunc_end76-_ZN10btSoftBody14clusterImpulseEPNS_7ClusterERK9btVector3RKNS_7ImpulseE
                                        # -- End function
	.globl	_ZN10btSoftBody16clusterVAImpulseEPNS_7ClusterERK9btVector3 # -- Begin function _ZN10btSoftBody16clusterVAImpulseEPNS_7ClusterERK9btVector3
	.p2align	5
	.type	_ZN10btSoftBody16clusterVAImpulseEPNS_7ClusterERK9btVector3,@function
_ZN10btSoftBody16clusterVAImpulseEPNS_7ClusterERK9btVector3: # @_ZN10btSoftBody16clusterVAImpulseEPNS_7ClusterERK9btVector3
# %bb.0:
	fld.s	$fa0, $a0, 220
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a0, 216
	fld.s	$fa3, $a1, 0
	fld.s	$fa4, $a0, 236
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa5, $a0, 232
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fmul.s	$fa2, $fa1, $fa4
	fld.s	$fa4, $a0, 252
	fmadd.s	$fa2, $fa5, $fa3, $fa2
	fld.s	$fa5, $a0, 248
	fld.s	$fa6, $a0, 224
	fmul.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a1, 8
	fmadd.s	$fa1, $fa5, $fa3, $fa1
	fld.s	$fa3, $a0, 240
	fld.s	$fa5, $a0, 256
	fmadd.s	$fa0, $fa6, $fa4, $fa0
	fld.s	$fa6, $a0, 296
	fmadd.s	$fa2, $fa3, $fa4, $fa2
	fmadd.s	$fa1, $fa5, $fa4, $fa1
	fld.s	$fa3, $a0, 300
	fadd.s	$fa4, $fa0, $fa6
	fst.s	$fa4, $a0, 296
	fld.s	$fa4, $a0, 304
	fadd.s	$fa3, $fa2, $fa3
	fst.s	$fa3, $a0, 300
	fld.s	$fa3, $a0, 368
	fadd.s	$fa4, $fa1, $fa4
	fst.s	$fa4, $a0, 304
	fld.s	$fa4, $a0, 372
	fadd.s	$fa0, $fa0, $fa3
	fst.s	$fa0, $a0, 368
	fld.s	$fa0, $a0, 376
	fadd.s	$fa2, $fa2, $fa4
	ld.w	$a1, $a0, 344
	fst.s	$fa2, $a0, 372
	fadd.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $a0, 376
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 344
	ret
.Lfunc_end77:
	.size	_ZN10btSoftBody16clusterVAImpulseEPNS_7ClusterERK9btVector3, .Lfunc_end77-_ZN10btSoftBody16clusterVAImpulseEPNS_7ClusterERK9btVector3
                                        # -- End function
	.globl	_ZN10btSoftBody16clusterDAImpulseEPNS_7ClusterERK9btVector3 # -- Begin function _ZN10btSoftBody16clusterDAImpulseEPNS_7ClusterERK9btVector3
	.p2align	5
	.type	_ZN10btSoftBody16clusterDAImpulseEPNS_7ClusterERK9btVector3,@function
_ZN10btSoftBody16clusterDAImpulseEPNS_7ClusterERK9btVector3: # @_ZN10btSoftBody16clusterDAImpulseEPNS_7ClusterERK9btVector3
# %bb.0:
	fld.s	$fa0, $a0, 220
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a0, 216
	fld.s	$fa3, $a1, 0
	fld.s	$fa4, $a0, 236
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa5, $a0, 232
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fmul.s	$fa2, $fa1, $fa4
	fld.s	$fa4, $a0, 252
	fmadd.s	$fa2, $fa5, $fa3, $fa2
	fld.s	$fa5, $a0, 248
	fld.s	$fa6, $a0, 224
	fmul.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a1, 8
	fmadd.s	$fa1, $fa5, $fa3, $fa1
	fld.s	$fa3, $a0, 240
	fld.s	$fa5, $a0, 256
	fmadd.s	$fa0, $fa6, $fa4, $fa0
	fld.s	$fa6, $a0, 328
	fmadd.s	$fa2, $fa3, $fa4, $fa2
	fmadd.s	$fa1, $fa5, $fa4, $fa1
	fld.s	$fa3, $a0, 332
	fadd.s	$fa0, $fa0, $fa6
	fst.s	$fa0, $a0, 328
	fld.s	$fa0, $a0, 336
	fadd.s	$fa2, $fa2, $fa3
	ld.w	$a1, $a0, 348
	fst.s	$fa2, $a0, 332
	fadd.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $a0, 336
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 348
	ret
.Lfunc_end78:
	.size	_ZN10btSoftBody16clusterDAImpulseEPNS_7ClusterERK9btVector3, .Lfunc_end78-_ZN10btSoftBody16clusterDAImpulseEPNS_7ClusterERK9btVector3
                                        # -- End function
	.globl	_ZN10btSoftBody15clusterAImpulseEPNS_7ClusterERKNS_7ImpulseE # -- Begin function _ZN10btSoftBody15clusterAImpulseEPNS_7ClusterERKNS_7ImpulseE
	.p2align	5
	.type	_ZN10btSoftBody15clusterAImpulseEPNS_7ClusterERKNS_7ImpulseE,@function
_ZN10btSoftBody15clusterAImpulseEPNS_7ClusterERKNS_7ImpulseE: # @_ZN10btSoftBody15clusterAImpulseEPNS_7ClusterERKNS_7ImpulseE
# %bb.0:
	ld.bu	$a2, $a1, 32
	andi	$a3, $a2, 1
	bnez	$a3, .LBB79_3
# %bb.1:
	andi	$a2, $a2, 2
	bnez	$a2, .LBB79_4
.LBB79_2:
	ret
.LBB79_3:
	fld.s	$fa0, $a0, 220
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a0, 216
	fld.s	$fa3, $a1, 0
	fld.s	$fa4, $a0, 236
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa5, $a0, 232
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fmul.s	$fa2, $fa1, $fa4
	fld.s	$fa4, $a0, 252
	fmadd.s	$fa2, $fa5, $fa3, $fa2
	fld.s	$fa5, $a0, 248
	fld.s	$fa6, $a0, 224
	fmul.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a1, 8
	fmadd.s	$fa1, $fa5, $fa3, $fa1
	fld.s	$fa3, $a0, 240
	fld.s	$fa5, $a0, 256
	fmadd.s	$fa0, $fa6, $fa4, $fa0
	fld.s	$fa6, $a0, 296
	fmadd.s	$fa2, $fa3, $fa4, $fa2
	fmadd.s	$fa1, $fa5, $fa4, $fa1
	fld.s	$fa3, $a0, 300
	fadd.s	$fa4, $fa0, $fa6
	fst.s	$fa4, $a0, 296
	fld.s	$fa4, $a0, 304
	fadd.s	$fa3, $fa2, $fa3
	fst.s	$fa3, $a0, 300
	fld.s	$fa3, $a0, 368
	fadd.s	$fa4, $fa1, $fa4
	fst.s	$fa4, $a0, 304
	fld.s	$fa4, $a0, 372
	fadd.s	$fa0, $fa0, $fa3
	fst.s	$fa0, $a0, 368
	fld.s	$fa0, $a0, 376
	fadd.s	$fa2, $fa2, $fa4
	ld.w	$a2, $a0, 344
	fst.s	$fa2, $a0, 372
	fadd.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $a0, 376
	addi.d	$a2, $a2, 1
	st.w	$a2, $a0, 344
	ld.bu	$a2, $a1, 32
	andi	$a2, $a2, 2
	beqz	$a2, .LBB79_2
.LBB79_4:
	fld.s	$fa0, $a0, 220
	fld.s	$fa1, $a1, 20
	fld.s	$fa2, $a0, 216
	fld.s	$fa3, $a1, 16
	fld.s	$fa4, $a0, 236
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa5, $a0, 232
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fmul.s	$fa2, $fa1, $fa4
	fld.s	$fa4, $a0, 252
	fmadd.s	$fa2, $fa5, $fa3, $fa2
	fld.s	$fa5, $a0, 248
	fld.s	$fa6, $a0, 224
	fmul.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a1, 24
	fmadd.s	$fa1, $fa5, $fa3, $fa1
	fld.s	$fa3, $a0, 240
	fld.s	$fa5, $a0, 256
	fmadd.s	$fa0, $fa6, $fa4, $fa0
	fld.s	$fa6, $a0, 328
	fmadd.s	$fa2, $fa3, $fa4, $fa2
	fmadd.s	$fa1, $fa5, $fa4, $fa1
	fld.s	$fa3, $a0, 332
	fadd.s	$fa0, $fa0, $fa6
	fst.s	$fa0, $a0, 328
	fld.s	$fa0, $a0, 336
	fadd.s	$fa2, $fa2, $fa3
	ld.w	$a1, $a0, 348
	fst.s	$fa2, $a0, 332
	fadd.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $a0, 336
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 348
	ret
.Lfunc_end79:
	.size	_ZN10btSoftBody15clusterAImpulseEPNS_7ClusterERKNS_7ImpulseE, .Lfunc_end79-_ZN10btSoftBody15clusterAImpulseEPNS_7ClusterERKNS_7ImpulseE
                                        # -- End function
	.globl	_ZN10btSoftBody16clusterDCImpulseEPNS_7ClusterERK9btVector3 # -- Begin function _ZN10btSoftBody16clusterDCImpulseEPNS_7ClusterERK9btVector3
	.p2align	5
	.type	_ZN10btSoftBody16clusterDCImpulseEPNS_7ClusterERK9btVector3,@function
_ZN10btSoftBody16clusterDCImpulseEPNS_7ClusterERK9btVector3: # @_ZN10btSoftBody16clusterDCImpulseEPNS_7ClusterERK9btVector3
# %bb.0:
	fld.s	$fa0, $a1, 0
	fld.s	$fa1, $a0, 164
	fld.s	$fa2, $a1, 4
	fld.s	$fa3, $a1, 8
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa4, $a0, 312
	fmul.s	$fa2, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa3
	fld.s	$fa3, $a0, 316
	fadd.s	$fa0, $fa0, $fa4
	fst.s	$fa0, $a0, 312
	fld.s	$fa0, $a0, 320
	fadd.s	$fa2, $fa2, $fa3
	ld.w	$a1, $a0, 348
	fst.s	$fa2, $a0, 316
	fadd.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $a0, 320
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 348
	ret
.Lfunc_end80:
	.size	_ZN10btSoftBody16clusterDCImpulseEPNS_7ClusterERK9btVector3, .Lfunc_end80-_ZN10btSoftBody16clusterDCImpulseEPNS_7ClusterERK9btVector3
                                        # -- End function
	.globl	_ZN10btSoftBody26generateBendingConstraintsEiPNS_8MaterialE # -- Begin function _ZN10btSoftBody26generateBendingConstraintsEiPNS_8MaterialE
	.p2align	5
	.type	_ZN10btSoftBody26generateBendingConstraintsEiPNS_8MaterialE,@function
_ZN10btSoftBody26generateBendingConstraintsEiPNS_8MaterialE: # @_ZN10btSoftBody26generateBendingConstraintsEiPNS_8MaterialE
.Lfunc_begin7:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception7
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	st.d	$s2, $sp, 200                   # 8-byte Folded Spill
	st.d	$s3, $sp, 192                   # 8-byte Folded Spill
	st.d	$s4, $sp, 184                   # 8-byte Folded Spill
	st.d	$s5, $sp, 176                   # 8-byte Folded Spill
	st.d	$s6, $sp, 168                   # 8-byte Folded Spill
	st.d	$s7, $sp, 160                   # 8-byte Folded Spill
	st.d	$s8, $sp, 152                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	ori	$a3, $zero, 2
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	blt	$a1, $a3, .LBB81_9
# %bb.1:
	move	$s4, $a1
	move	$s1, $a0
	ld.w	$fp, $a0, 820
	mul.w	$a0, $fp, $fp
	slli.d	$a0, $a0, 2
	pcaddu18i	$ra, %call36(_Znam)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	blez	$fp, .LBB81_10
# %bb.2:                                # %.preheader214.lr.ph
	move	$a0, $zero
	slli.d	$a1, $fp, 2
	lu12i.w	$a2, 524287
	ori	$a2, $a2, 4095
	move	$a3, $s0
	move	$a4, $s0
	b	.LBB81_4
	.p2align	4, , 16
.LBB81_3:                               # %._crit_edge
                                        #   in Loop: Header=BB81_4 Depth=1
	addi.d	$a0, $a0, 1
	add.d	$a4, $a4, $a1
	addi.d	$a3, $a3, 4
	beq	$a0, $fp, .LBB81_10
.LBB81_4:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_7 Depth 2
	move	$a5, $zero
	mul.d	$a6, $a0, $fp
	alsl.d	$a6, $a6, $s0, 2
	alsl.d	$a6, $a0, $a6, 2
	move	$a7, $a3
	move	$t0, $a4
	b	.LBB81_7
	.p2align	4, , 16
.LBB81_5:                               #   in Loop: Header=BB81_7 Depth=2
	st.w	$zero, $a6, 0
.LBB81_6:                               #   in Loop: Header=BB81_7 Depth=2
	addi.d	$a5, $a5, 1
	addi.d	$t0, $t0, 4
	add.d	$a7, $a7, $a1
	beq	$fp, $a5, .LBB81_3
.LBB81_7:                               #   Parent Loop BB81_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	beq	$a0, $a5, .LBB81_5
# %bb.8:                                #   in Loop: Header=BB81_7 Depth=2
	st.w	$a2, $a7, 0
	st.w	$a2, $t0, 0
	b	.LBB81_6
.LBB81_9:
	move	$s1, $zero
	b	.LBB81_109
.LBB81_10:                              # %.preheader213
	ld.w	$a0, $s1, 852
	blez	$a0, .LBB81_13
# %bb.11:                               # %.lr.ph221
	ld.d	$a2, $s1, 864
	ld.d	$a1, $s1, 832
	addi.d	$a2, $a2, 24
	lu12i.w	$a3, -69906
	ori	$a3, $a3, 3823
	ori	$a4, $zero, 1
	.p2align	4, , 16
.LBB81_12:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a2, -8
	ld.d	$a6, $a2, 0
	sub.d	$a5, $a5, $a1
	srli.d	$a5, $a5, 3
	mul.d	$a5, $a5, $a3
	sub.d	$a6, $a6, $a1
	srli.d	$a6, $a6, 3
	mul.d	$a6, $a6, $a3
	mul.d	$a7, $fp, $a6
	add.w	$a7, $a7, $a5
	slli.d	$a7, $a7, 2
	stx.w	$a4, $s0, $a7
	mul.d	$a5, $fp, $a5
	add.w	$a5, $a5, $a6
	slli.d	$a5, $a5, 2
	stx.w	$a4, $s0, $a5
	addi.d	$a0, $a0, -1
	addi.d	$a2, $a2, 72
	bnez	$a0, .LBB81_12
.LBB81_13:                              # %._crit_edge222
	ori	$a0, $zero, 2
	st.d	$fp, $sp, 24                    # 8-byte Folded Spill
	bne	$s4, $a0, .LBB81_69
# %bb.14:
	ori	$a0, $zero, 1
	st.b	$a0, $sp, 144
	st.d	$zero, $sp, 136
	st.d	$zero, $sp, 124
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 104
	vst	$vr0, $sp, 88
	st.b	$a0, $sp, 112
	st.w	$zero, $sp, 92
.Ltmp225:                               # EH_LABEL
	addi.d	$a0, $sp, 120
	addi.d	$a2, $sp, 88
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_)
	jirl	$ra, $ra, 0
.Ltmp226:                               # EH_LABEL
# %bb.15:
	st.d	$s4, $sp, 80                    # 8-byte Folded Spill
	ld.d	$a0, $sp, 104
	beqz	$a0, .LBB81_18
# %bb.16:
	ld.b	$a1, $sp, 112
	andi	$a1, $a1, 1
	beqz	$a1, .LBB81_18
# %bb.17:
.Ltmp230:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp231:                               # EH_LABEL
.LBB81_18:
	ld.w	$a0, $s1, 852
	blez	$a0, .LBB81_79
# %bb.19:                               # %.lr.ph232
	move	$s5, $zero
	lu12i.w	$a0, -69906
	ori	$a0, $a0, 3823
	lu32i.d	$a0, -69906
	lu52i.d	$s2, $a0, -274
	ori	$s3, $zero, 1
	b	.LBB81_24
.LBB81_20:                              # %.noexc190
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.w	$a1, $s6, 4
.LBB81_21:                              # %_ZN20btAlignedObjectArrayIiE10deallocateEv.exit.i.i182
                                        #   in Loop: Header=BB81_24 Depth=1
	st.b	$s3, $s6, 24
	st.d	$s4, $s6, 16
	st.w	$s7, $s6, 8
.LBB81_22:                              # %_ZN20btAlignedObjectArrayIiE9push_backERKi.exit191
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.d	$a0, $s6, 16
	slli.d	$a1, $a1, 2
	stx.w	$s8, $a0, $a1
	ld.w	$a0, $s6, 4
	addi.d	$a0, $a0, 1
	st.w	$a0, $s6, 4
.LBB81_23:                              #   in Loop: Header=BB81_24 Depth=1
	ld.w	$a0, $s1, 852
	addi.d	$s5, $s5, 1
	bge	$s5, $a0, .LBB81_79
.LBB81_24:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_26 Depth 2
                                        #     Child Loop BB81_37 Depth 2
                                        #     Child Loop BB81_40 Depth 2
                                        #     Child Loop BB81_50 Depth 2
                                        #     Child Loop BB81_61 Depth 2
                                        #     Child Loop BB81_64 Depth 2
	ld.d	$a0, $s1, 864
	slli.d	$a1, $s5, 6
	alsl.d	$a1, $s5, $a1, 3
	add.d	$a1, $a0, $a1
	ld.d	$a0, $a1, 16
	ld.d	$a2, $s1, 832
	sub.d	$a0, $a0, $a2
	srai.d	$a0, $a0, 3
	mul.w	$s8, $a0, $s2
	ld.d	$a0, $sp, 136
	ld.d	$a3, $a1, 24
	slli.d	$a1, $s8, 32
	srai.d	$a1, $a1, 27
	add.d	$s6, $a0, $a1
	ld.w	$a1, $s6, 4
	sub.d	$a2, $a3, $a2
	srai.d	$a2, $a2, 3
	mul.w	$s7, $a2, $s2
	blez	$a1, .LBB81_29
# %bb.25:                               # %.lr.ph.i
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.d	$a2, $s6, 16
	move	$a4, $a1
	move	$a3, $a1
	.p2align	4, , 16
.LBB81_26:                              #   Parent Loop BB81_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a5, $a2, 0
	beq	$a5, $s7, .LBB81_28
# %bb.27:                               #   in Loop: Header=BB81_26 Depth=2
	addi.w	$a3, $a3, -1
	addi.d	$a4, $a4, -1
	addi.d	$a2, $a2, 4
	bnez	$a4, .LBB81_26
	b	.LBB81_29
	.p2align	4, , 16
.LBB81_28:                              # %_ZNK20btAlignedObjectArrayIiE16findLinearSearchERKi.exit
                                        #   in Loop: Header=BB81_24 Depth=1
	bnez	$a3, .LBB81_48
	.p2align	4, , 16
.LBB81_29:                              # %_ZNK20btAlignedObjectArrayIiE16findLinearSearchERKi.exit.thread
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.w	$a2, $s6, 8
	bne	$a1, $a2, .LBB81_47
# %bb.30:                               #   in Loop: Header=BB81_24 Depth=1
	sltui	$a2, $a1, 1
	slli.w	$a3, $a1, 1
	masknez	$a3, $a3, $a2
	maskeqz	$a2, $s3, $a2
	or	$s4, $a2, $a3
	bge	$a1, $s4, .LBB81_47
# %bb.31:                               #   in Loop: Header=BB81_24 Depth=1
	beqz	$s4, .LBB81_41
# %bb.32:                               #   in Loop: Header=BB81_24 Depth=1
	slli.d	$a0, $s4, 2
.Ltmp233:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp234:                               # EH_LABEL
# %bb.33:                               # %.noexc159
                                        #   in Loop: Header=BB81_24 Depth=1
	move	$fp, $a0
	ld.w	$a1, $s6, 4
	ld.d	$a0, $s6, 16
	blez	$a1, .LBB81_42
.LBB81_34:                              # %.lr.ph.i.i.i
                                        #   in Loop: Header=BB81_24 Depth=1
	move	$a2, $zero
	ori	$a3, $zero, 8
	bltu	$a1, $a3, .LBB81_39
# %bb.35:                               # %.lr.ph.i.i.i
                                        #   in Loop: Header=BB81_24 Depth=1
	sub.d	$a3, $fp, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB81_39
# %bb.36:                               # %vector.ph346
                                        #   in Loop: Header=BB81_24 Depth=1
	bstrpick.d	$a2, $a1, 30, 3
	slli.d	$a2, $a2, 3
	addi.d	$a3, $a0, 16
	addi.d	$a4, $fp, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB81_37:                              # %vector.body349
                                        #   Parent Loop BB81_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB81_37
# %bb.38:                               # %middle.block354
                                        #   in Loop: Header=BB81_24 Depth=1
	beq	$a2, $a1, .LBB81_43
.LBB81_39:                              # %scalar.ph344.preheader
                                        #   in Loop: Header=BB81_24 Depth=1
	sub.d	$a1, $a1, $a2
	alsl.d	$a3, $a2, $a0, 2
	alsl.d	$a2, $a2, $fp, 2
	.p2align	4, , 16
.LBB81_40:                              # %scalar.ph344
                                        #   Parent Loop BB81_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	st.w	$a4, $a2, 0
	addi.d	$a1, $a1, -1
	addi.d	$a3, $a3, 4
	addi.d	$a2, $a2, 4
	bnez	$a1, .LBB81_40
	b	.LBB81_43
.LBB81_41:                              #   in Loop: Header=BB81_24 Depth=1
	move	$fp, $zero
	ld.d	$a0, $s6, 16
	bgtz	$a1, .LBB81_34
.LBB81_42:                              # %_ZNK20btAlignedObjectArrayIiE4copyEiiPi.exit.i.i
                                        #   in Loop: Header=BB81_24 Depth=1
	beqz	$a0, .LBB81_46
.LBB81_43:                              # %_ZNK20btAlignedObjectArrayIiE4copyEiiPi.exit.thread.i.i
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.bu	$a1, $s6, 24
	beqz	$a1, .LBB81_45
# %bb.44:                               #   in Loop: Header=BB81_24 Depth=1
.Ltmp235:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp236:                               # EH_LABEL
.LBB81_45:                              # %.noexc160
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.w	$a1, $s6, 4
.LBB81_46:                              # %_ZN20btAlignedObjectArrayIiE10deallocateEv.exit.i.i
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.d	$a0, $sp, 136
	st.b	$s3, $s6, 24
	st.d	$fp, $s6, 16
	st.w	$s4, $s6, 8
.LBB81_47:                              # %_ZN20btAlignedObjectArrayIiE9push_backERKi.exit
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.d	$a2, $s6, 16
	slli.d	$a1, $a1, 2
	stx.w	$s7, $a2, $a1
	ld.w	$a1, $s6, 4
	addi.d	$a1, $a1, 1
	st.w	$a1, $s6, 4
.LBB81_48:                              #   in Loop: Header=BB81_24 Depth=1
	slli.d	$a1, $s7, 32
	srai.d	$a1, $a1, 27
	add.d	$s6, $a0, $a1
	ld.w	$a1, $s6, 4
	blez	$a1, .LBB81_53
# %bb.49:                               # %.lr.ph.i166
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.d	$a0, $s6, 16
	move	$a3, $a1
	move	$a2, $a1
	.p2align	4, , 16
.LBB81_50:                              #   Parent Loop BB81_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a0, 0
	beq	$a4, $s8, .LBB81_52
# %bb.51:                               #   in Loop: Header=BB81_50 Depth=2
	addi.w	$a2, $a2, -1
	addi.d	$a3, $a3, -1
	addi.d	$a0, $a0, 4
	bnez	$a3, .LBB81_50
	b	.LBB81_53
	.p2align	4, , 16
.LBB81_52:                              # %_ZNK20btAlignedObjectArrayIiE16findLinearSearchERKi.exit172
                                        #   in Loop: Header=BB81_24 Depth=1
	bnez	$a2, .LBB81_23
	.p2align	4, , 16
.LBB81_53:                              # %_ZNK20btAlignedObjectArrayIiE16findLinearSearchERKi.exit172.thread
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.w	$a0, $s6, 8
	bne	$a1, $a0, .LBB81_22
# %bb.54:                               #   in Loop: Header=BB81_24 Depth=1
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	maskeqz	$a0, $s3, $a0
	or	$s7, $a0, $a2
	bge	$a1, $s7, .LBB81_22
# %bb.55:                               #   in Loop: Header=BB81_24 Depth=1
	beqz	$s7, .LBB81_65
# %bb.56:                               #   in Loop: Header=BB81_24 Depth=1
	slli.d	$a0, $s7, 2
.Ltmp237:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp238:                               # EH_LABEL
# %bb.57:                               # %.noexc189
                                        #   in Loop: Header=BB81_24 Depth=1
	move	$s4, $a0
	ld.w	$a1, $s6, 4
	ld.d	$a0, $s6, 16
	blez	$a1, .LBB81_66
.LBB81_58:                              # %.lr.ph.i.i.i184
                                        #   in Loop: Header=BB81_24 Depth=1
	move	$a2, $zero
	ori	$a3, $zero, 8
	bltu	$a1, $a3, .LBB81_63
# %bb.59:                               # %.lr.ph.i.i.i184
                                        #   in Loop: Header=BB81_24 Depth=1
	sub.d	$a3, $s4, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB81_63
# %bb.60:                               # %vector.ph
                                        #   in Loop: Header=BB81_24 Depth=1
	bstrpick.d	$a2, $a1, 30, 3
	slli.d	$a2, $a2, 3
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s4, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB81_61:                              # %vector.body
                                        #   Parent Loop BB81_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB81_61
# %bb.62:                               # %middle.block
                                        #   in Loop: Header=BB81_24 Depth=1
	beq	$a2, $a1, .LBB81_67
.LBB81_63:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB81_24 Depth=1
	sub.d	$a1, $a1, $a2
	alsl.d	$a3, $a2, $a0, 2
	alsl.d	$a2, $a2, $s4, 2
	.p2align	4, , 16
.LBB81_64:                              # %scalar.ph
                                        #   Parent Loop BB81_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a4, $a3, 0
	st.w	$a4, $a2, 0
	addi.d	$a1, $a1, -1
	addi.d	$a3, $a3, 4
	addi.d	$a2, $a2, 4
	bnez	$a1, .LBB81_64
	b	.LBB81_67
.LBB81_65:                              #   in Loop: Header=BB81_24 Depth=1
	move	$s4, $zero
	ld.d	$a0, $s6, 16
	bgtz	$a1, .LBB81_58
.LBB81_66:                              # %_ZNK20btAlignedObjectArrayIiE4copyEiiPi.exit.i.i178
                                        #   in Loop: Header=BB81_24 Depth=1
	beqz	$a0, .LBB81_21
.LBB81_67:                              # %_ZNK20btAlignedObjectArrayIiE4copyEiiPi.exit.thread.i.i180
                                        #   in Loop: Header=BB81_24 Depth=1
	ld.bu	$a1, $s6, 24
	beqz	$a1, .LBB81_20
# %bb.68:                               #   in Loop: Header=BB81_24 Depth=1
.Ltmp239:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp240:                               # EH_LABEL
	b	.LBB81_20
.LBB81_69:                              # %.preheader211
	blez	$fp, .LBB81_107
# %bb.70:                               # %.preheader210.lr.ph
	move	$s8, $s1
	move	$a0, $zero
	addi.d	$a1, $s0, 4
	slli.d	$a2, $fp, 2
	addi.d	$a3, $a2, 4
	alsl.d	$a4, $fp, $s0, 2
	move	$a5, $a1
	b	.LBB81_72
	.p2align	4, , 16
.LBB81_71:                              # %._crit_edge228
                                        #   in Loop: Header=BB81_72 Depth=1
	addi.d	$a0, $a0, 1
	add.d	$a5, $a5, $a2
	beq	$a0, $fp, .LBB81_99
.LBB81_72:                              # %.lr.ph227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_74 Depth 2
                                        #       Child Loop BB81_77 Depth 3
	move	$t2, $zero
	alsl.d	$a6, $a0, $s0, 2
	ori	$a7, $zero, 1
	move	$t0, $a4
	move	$t1, $a5
	move	$t3, $a1
	b	.LBB81_74
	.p2align	4, , 16
.LBB81_73:                              # %.loopexit209
                                        #   in Loop: Header=BB81_74 Depth=2
	addi.d	$a7, $a7, 1
	add.d	$t3, $t3, $a3
	addi.d	$t1, $t1, 4
	add.d	$t0, $t0, $a3
	beq	$t2, $fp, .LBB81_71
.LBB81_74:                              #   Parent Loop BB81_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_77 Depth 3
	move	$t4, $t2
	addi.d	$t2, $t2, 1
	bgeu	$t2, $fp, .LBB81_73
# %bb.75:                               # %.lr.ph225
                                        #   in Loop: Header=BB81_74 Depth=2
	mul.d	$t4, $t4, $fp
	alsl.d	$t4, $t4, $a6, 2
	move	$t5, $fp
	move	$t6, $t0
	move	$t7, $t1
	move	$t8, $t3
	b	.LBB81_77
	.p2align	4, , 16
.LBB81_76:                              #   in Loop: Header=BB81_77 Depth=3
	addi.d	$t8, $t8, 4
	addi.d	$t7, $t7, 4
	addi.d	$t5, $t5, -1
	add.d	$t6, $t6, $a2
	beq	$a7, $t5, .LBB81_73
.LBB81_77:                              #   Parent Loop BB81_72 Depth=1
                                        #     Parent Loop BB81_74 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.w	$s1, $t7, 0
	ld.w	$s2, $t4, 0
	ld.w	$s3, $t8, 0
	add.w	$s1, $s2, $s1
	bgeu	$s1, $s3, .LBB81_76
# %bb.78:                               #   in Loop: Header=BB81_77 Depth=3
	st.w	$s1, $t6, 0
	st.w	$s1, $t8, 0
	b	.LBB81_76
.LBB81_79:                              # %.preheader208
	move	$s8, $s1
	ld.w	$a0, $sp, 124
	ld.d	$fp, $sp, 24                    # 8-byte Folded Reload
	blez	$a0, .LBB81_96
# %bb.80:                               # %.preheader.lr.ph
	ld.d	$a2, $sp, 136
	move	$a3, $zero
	bstrpick.d	$a1, $a0, 31, 0
	b	.LBB81_82
	.p2align	4, , 16
.LBB81_81:                              # %._crit_edge239
                                        #   in Loop: Header=BB81_82 Depth=1
	addi.d	$a3, $a3, 1
	beq	$a3, $a0, .LBB81_91
.LBB81_82:                              # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_85 Depth 2
                                        #       Child Loop BB81_88 Depth 3
	slli.d	$a4, $a3, 5
	add.d	$a5, $a2, $a4
	ld.w	$a4, $a5, 4
	blez	$a4, .LBB81_81
# %bb.83:                               # %.lr.ph238
                                        #   in Loop: Header=BB81_82 Depth=1
	ld.d	$a5, $a5, 16
	move	$a6, $zero
	mul.d	$a7, $a3, $fp
	alsl.d	$a7, $a7, $s0, 2
	b	.LBB81_85
	.p2align	4, , 16
.LBB81_84:                              # %._crit_edge236
                                        #   in Loop: Header=BB81_85 Depth=2
	addi.d	$a6, $a6, 1
	bgeu	$a6, $a4, .LBB81_81
.LBB81_85:                              #   Parent Loop BB81_82 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_88 Depth 3
	slli.d	$t0, $a6, 2
	ldx.w	$t0, $a5, $t0
	slli.d	$t1, $t0, 5
	add.d	$t3, $a2, $t1
	ld.w	$t1, $t3, 4
	blez	$t1, .LBB81_84
# %bb.86:                               # %.lr.ph235
                                        #   in Loop: Header=BB81_85 Depth=2
	move	$t2, $zero
	ld.d	$t3, $t3, 16
	mul.d	$t4, $t0, $fp
	add.w	$t4, $t4, $a3
	alsl.d	$t4, $t4, $s0, 2
	b	.LBB81_88
	.p2align	4, , 16
.LBB81_87:                              #   in Loop: Header=BB81_88 Depth=3
	addi.d	$t2, $t2, 1
	addi.d	$t3, $t3, 4
	bgeu	$t2, $t1, .LBB81_84
.LBB81_88:                              #   Parent Loop BB81_82 Depth=1
                                        #     Parent Loop BB81_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.wu	$t5, $t3, 0
	beq	$a3, $t5, .LBB81_87
# %bb.89:                               #   in Loop: Header=BB81_88 Depth=3
	ld.w	$t6, $t4, 0
	mul.d	$t7, $t5, $fp
	add.w	$t8, $t7, $t0
	slli.d	$t8, $t8, 2
	ldx.w	$t8, $s0, $t8
	add.w	$t7, $t7, $a3
	slli.d	$s1, $t7, 2
	ldx.w	$s1, $s0, $s1
	add.w	$t6, $t8, $t6
	bgeu	$t6, $s1, .LBB81_87
# %bb.90:                               #   in Loop: Header=BB81_88 Depth=3
	addi.w	$t5, $t5, 0
	alsl.d	$t7, $t7, $s0, 2
	slli.d	$t5, $t5, 2
	stx.w	$t6, $a7, $t5
	st.w	$t6, $t7, 0
	b	.LBB81_87
.LBB81_91:                              # %.lr.ph.i.i.i193
	move	$s1, $zero
	slli.d	$s2, $a1, 5
	ori	$s3, $zero, 1
	b	.LBB81_93
	.p2align	4, , 16
.LBB81_92:                              # %_ZN9NodeLinksD2Ev.exit.i.i.i
                                        #   in Loop: Header=BB81_93 Depth=1
	st.b	$s3, $s4, 24
	st.d	$zero, $s4, 16
	addi.d	$s1, $s1, 32
	st.d	$zero, $s4, 4
	beq	$s2, $s1, .LBB81_96
.LBB81_93:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 136
	add.d	$s4, $a0, $s1
	ld.d	$a0, $s4, 16
	beqz	$a0, .LBB81_92
# %bb.94:                               #   in Loop: Header=BB81_93 Depth=1
	ld.b	$a1, $s4, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB81_92
# %bb.95:                               #   in Loop: Header=BB81_93 Depth=1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	b	.LBB81_92
.LBB81_96:                              # %_ZN20btAlignedObjectArrayI9NodeLinksE7destroyEii.exit.i.i
	ld.d	$a0, $sp, 136
	ld.d	$s4, $sp, 80                    # 8-byte Folded Reload
	beqz	$a0, .LBB81_99
# %bb.97:                               # %_ZN20btAlignedObjectArrayI9NodeLinksE7destroyEii.exit.i.i
	ld.b	$a1, $sp, 144
	andi	$a1, $a1, 1
	beqz	$a1, .LBB81_99
# %bb.98:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB81_99:                              # %.loopexit212
	blez	$fp, .LBB81_107
# %bb.100:                              # %.lr.ph250
	move	$s6, $zero
	move	$a1, $zero
	move	$s1, $zero
	addi.d	$s7, $s0, 4
	slli.d	$a0, $fp, 2
	addi.d	$a0, $a0, 4
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	ori	$a2, $zero, 1
	b	.LBB81_102
	.p2align	4, , 16
.LBB81_101:                             # %.loopexit
                                        #   in Loop: Header=BB81_102 Depth=1
	addi.d	$a2, $a2, 1
	ld.d	$s7, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	add.d	$s7, $s7, $a0
	ld.d	$s6, $sp, 48                    # 8-byte Folded Reload
	addi.d	$s6, $s6, 120
	ld.d	$fp, $sp, 24                    # 8-byte Folded Reload
	ld.d	$a1, $sp, 32                    # 8-byte Folded Reload
	beq	$a1, $fp, .LBB81_108
.LBB81_102:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_105 Depth 2
	move	$a0, $a1
	addi.d	$a1, $a1, 1
	st.d	$a1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 48                    # 8-byte Folded Spill
	st.d	$s7, $sp, 40                    # 8-byte Folded Spill
	bgeu	$a1, $fp, .LBB81_101
# %bb.103:                              # %.lr.ph245
                                        #   in Loop: Header=BB81_102 Depth=1
	ori	$a1, $zero, 120
	mul.d	$a0, $a0, $a1
	st.d	$a0, $sp, 72                    # 8-byte Folded Spill
	move	$s3, $fp
	b	.LBB81_105
	.p2align	4, , 16
.LBB81_104:                             #   in Loop: Header=BB81_105 Depth=2
	addi.d	$s7, $s7, 4
	addi.d	$s3, $s3, -1
	addi.d	$s6, $s6, 120
	beq	$a2, $s3, .LBB81_101
.LBB81_105:                             #   Parent Loop BB81_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.w	$a0, $s7, 0
	bne	$a0, $s4, .LBB81_104
# %bb.106:                              #   in Loop: Header=BB81_105 Depth=2
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	move	$s1, $s8
	ld.d	$a0, $s8, 832
	add.d	$s2, $a0, $s6
	addi.d	$s5, $s2, 120
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	add.d	$s8, $a0, $a1
	move	$a0, $s1
	ld.d	$a1, $sp, 56                    # 8-byte Folded Reload
	move	$fp, $a2
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendLinkEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 852
	ld.d	$a1, $s1, 864
	fld.s	$fa0, $s2, 136
	fld.s	$fa1, $s8, 16
	fld.s	$fa2, $s2, 140
	fld.s	$fa3, $s8, 20
	slli.d	$a2, $a0, 6
	alsl.d	$a0, $a0, $a2, 3
	move	$a2, $fp
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fld.s	$fa2, $s2, 144
	fld.s	$fa3, $s8, 24
	add.d	$a0, $a1, $a0
	st.d	$s5, $a0, -56
	st.d	$s8, $a0, -48
	fsub.s	$fa2, $fa2, $fa3
	fmul.s	$fa1, $fa1, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	move	$s8, $s1
	ori	$a1, $zero, 1
	st.b	$a1, $s1, 1140
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.b	$a1, $a0, -36
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	fsqrt.s	$fa0, $fa0
	fst.s	$fa0, $a0, -40
	ori	$a1, $a1, 1
	st.b	$a1, $a0, -36
	addi.w	$s1, $s1, 1
	b	.LBB81_104
.LBB81_107:
	move	$s1, $zero
.LBB81_108:                             # %._crit_edge251
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZdaPv)
	jirl	$ra, $ra, 0
.LBB81_109:
	move	$a0, $s1
	ld.d	$s8, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 168                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 176                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.LBB81_110:
.Ltmp232:                               # EH_LABEL
	b	.LBB81_115
.LBB81_111:
.Ltmp227:                               # EH_LABEL
	ld.d	$a1, $sp, 104
	move	$fp, $a0
	beqz	$a1, .LBB81_116
# %bb.112:
	ld.b	$a0, $sp, 112
	andi	$a0, $a0, 1
	beqz	$a0, .LBB81_116
# %bb.113:
.Ltmp228:                               # EH_LABEL
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp229:                               # EH_LABEL
	b	.LBB81_116
.LBB81_114:
.Ltmp241:                               # EH_LABEL
.LBB81_115:
	move	$fp, $a0
.LBB81_116:
.Ltmp242:                               # EH_LABEL
	addi.d	$a0, $sp, 120
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayI9NodeLinksED2Ev)
	jirl	$ra, $ra, 0
.Ltmp243:                               # EH_LABEL
# %bb.117:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB81_118:
.Ltmp244:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end81:
	.size	_ZN10btSoftBody26generateBendingConstraintsEiPNS_8MaterialE, .Lfunc_end81-_ZN10btSoftBody26generateBendingConstraintsEiPNS_8MaterialE
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table81:
.Lexception7:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase5-.Lttbaseref5
.Lttbaseref5:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end7-.Lcst_begin7
.Lcst_begin7:
	.uleb128 .Lfunc_begin7-.Lfunc_begin7    # >> Call Site 1 <<
	.uleb128 .Ltmp225-.Lfunc_begin7         #   Call between .Lfunc_begin7 and .Ltmp225
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp225-.Lfunc_begin7         # >> Call Site 2 <<
	.uleb128 .Ltmp226-.Ltmp225              #   Call between .Ltmp225 and .Ltmp226
	.uleb128 .Ltmp227-.Lfunc_begin7         #     jumps to .Ltmp227
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp230-.Lfunc_begin7         # >> Call Site 3 <<
	.uleb128 .Ltmp231-.Ltmp230              #   Call between .Ltmp230 and .Ltmp231
	.uleb128 .Ltmp232-.Lfunc_begin7         #     jumps to .Ltmp232
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp233-.Lfunc_begin7         # >> Call Site 4 <<
	.uleb128 .Ltmp240-.Ltmp233              #   Call between .Ltmp233 and .Ltmp240
	.uleb128 .Ltmp241-.Lfunc_begin7         #     jumps to .Ltmp241
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp240-.Lfunc_begin7         # >> Call Site 5 <<
	.uleb128 .Ltmp228-.Ltmp240              #   Call between .Ltmp240 and .Ltmp228
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp228-.Lfunc_begin7         # >> Call Site 6 <<
	.uleb128 .Ltmp243-.Ltmp228              #   Call between .Ltmp228 and .Ltmp243
	.uleb128 .Ltmp244-.Lfunc_begin7         #     jumps to .Ltmp244
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp243-.Lfunc_begin7         # >> Call Site 7 <<
	.uleb128 .Lfunc_end81-.Ltmp243          #   Call between .Ltmp243 and .Lfunc_end81
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end7:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase5:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_,"axG",@progbits,_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_,comdat
	.weak	_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_ # -- Begin function _ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_
	.p2align	5
	.type	_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_,@function
_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_: # @_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	move	$fp, $a0
	ld.w	$s3, $a0, 4
	move	$s0, $a1
	bge	$a1, $s3, .LBB82_6
# %bb.1:                                # %.preheader
	slli.d	$s1, $s0, 5
	sub.d	$s2, $s3, $s0
	ori	$s3, $zero, 1
	b	.LBB82_3
	.p2align	4, , 16
.LBB82_2:                               # %_ZN9NodeLinksD2Ev.exit
                                        #   in Loop: Header=BB82_3 Depth=1
	st.b	$s3, $s4, 24
	st.d	$zero, $s4, 16
	st.d	$zero, $s4, 4
	addi.w	$s2, $s2, -1
	addi.d	$s1, $s1, 32
	beqz	$s2, .LBB82_25
.LBB82_3:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 16
	add.d	$s4, $a0, $s1
	ld.d	$a0, $s4, 16
	beqz	$a0, .LBB82_2
# %bb.4:                                #   in Loop: Header=BB82_3 Depth=1
	ld.b	$a1, $s4, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB82_2
# %bb.5:                                #   in Loop: Header=BB82_3 Depth=1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	b	.LBB82_2
.LBB82_6:
	bge	$s3, $s0, .LBB82_25
# %bb.7:
	move	$s1, $a2
	ld.w	$a0, $fp, 8
	bge	$a0, $s0, .LBB82_23
# %bb.8:
	beqz	$s0, .LBB82_10
# %bb.9:
	slli.d	$a0, $s0, 5
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 4
	move	$s2, $a0
	bgtz	$a1, .LBB82_11
	b	.LBB82_19
.LBB82_10:
	move	$s2, $zero
	move	$a1, $s3
	blez	$a1, .LBB82_19
.LBB82_11:                              # %.lr.ph.i.i
	move	$s4, $zero
	slli.d	$s5, $a1, 5
	.p2align	4, , 16
.LBB82_12:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 16
	add.d	$a0, $s2, $s4
	add.d	$a1, $a1, $s4
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIiEC2ERKS0_)
	jirl	$ra, $ra, 0
	addi.d	$s4, $s4, 32
	bne	$s5, $s4, .LBB82_12
# %bb.13:                               # %_ZNK20btAlignedObjectArrayI9NodeLinksE4copyEiiPS0_.exit.i
	ld.w	$a0, $fp, 4
	blez	$a0, .LBB82_19
# %bb.14:                               # %.lr.ph.i5.i
	move	$s4, $zero
	slli.d	$s5, $a0, 5
	ori	$s6, $zero, 1
	b	.LBB82_16
	.p2align	4, , 16
.LBB82_15:                              # %_ZN9NodeLinksD2Ev.exit.i.i
                                        #   in Loop: Header=BB82_16 Depth=1
	st.b	$s6, $s7, 24
	st.d	$zero, $s7, 16
	addi.d	$s4, $s4, 32
	st.d	$zero, $s7, 4
	beq	$s5, $s4, .LBB82_19
.LBB82_16:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 16
	add.d	$s7, $a0, $s4
	ld.d	$a0, $s7, 16
	beqz	$a0, .LBB82_15
# %bb.17:                               #   in Loop: Header=BB82_16 Depth=1
	ld.b	$a1, $s7, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB82_15
# %bb.18:                               #   in Loop: Header=BB82_16 Depth=1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	b	.LBB82_15
.LBB82_19:                              # %_ZN20btAlignedObjectArrayI9NodeLinksE7destroyEii.exit.i
	ld.d	$a0, $fp, 16
	beqz	$a0, .LBB82_22
# %bb.20:                               # %_ZN20btAlignedObjectArrayI9NodeLinksE7destroyEii.exit.i
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB82_22
# %bb.21:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB82_22:                              # %_ZN20btAlignedObjectArrayI9NodeLinksE7reserveEi.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$s2, $fp, 16
	st.w	$s0, $fp, 8
.LBB82_23:                              # %.lr.ph
	slli.d	$s2, $s3, 5
	sub.d	$s3, $s0, $s3
	.p2align	4, , 16
.LBB82_24:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 16
	add.d	$a0, $a0, $s2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIiEC2ERKS0_)
	jirl	$ra, $ra, 0
	addi.w	$s3, $s3, -1
	addi.d	$s2, $s2, 32
	bnez	$s3, .LBB82_24
.LBB82_25:                              # %.loopexit
	st.w	$s0, $fp, 4
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.Lfunc_end82:
	.size	_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_, .Lfunc_end82-_ZN20btAlignedObjectArrayI9NodeLinksE6resizeEiRKS0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayI9NodeLinksED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayI9NodeLinksED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayI9NodeLinksED2Ev # -- Begin function _ZN20btAlignedObjectArrayI9NodeLinksED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayI9NodeLinksED2Ev,@function
_ZN20btAlignedObjectArrayI9NodeLinksED2Ev: # @_ZN20btAlignedObjectArrayI9NodeLinksED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	move	$fp, $a0
	ld.w	$a0, $a0, 4
	blez	$a0, .LBB83_6
# %bb.1:                                # %.lr.ph.i.i
	move	$s0, $zero
	slli.d	$s1, $a0, 5
	ori	$s2, $zero, 1
	b	.LBB83_3
	.p2align	4, , 16
.LBB83_2:                               # %_ZN9NodeLinksD2Ev.exit.i.i
                                        #   in Loop: Header=BB83_3 Depth=1
	st.b	$s2, $s3, 24
	st.d	$zero, $s3, 16
	addi.d	$s0, $s0, 32
	st.d	$zero, $s3, 4
	beq	$s1, $s0, .LBB83_6
.LBB83_3:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 16
	add.d	$s3, $a0, $s0
	ld.d	$a0, $s3, 16
	beqz	$a0, .LBB83_2
# %bb.4:                                #   in Loop: Header=BB83_3 Depth=1
	ld.b	$a1, $s3, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB83_2
# %bb.5:                                #   in Loop: Header=BB83_3 Depth=1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	b	.LBB83_2
.LBB83_6:                               # %_ZN20btAlignedObjectArrayI9NodeLinksE7destroyEii.exit.i
	ld.d	$a0, $fp, 16
	beqz	$a0, .LBB83_9
# %bb.7:                                # %_ZN20btAlignedObjectArrayI9NodeLinksE7destroyEii.exit.i
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB83_9
# %bb.8:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB83_9:                               # %_ZN20btAlignedObjectArrayI9NodeLinksE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$s3, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end83:
	.size	_ZN20btAlignedObjectArrayI9NodeLinksED2Ev, .Lfunc_end83-_ZN20btAlignedObjectArrayI9NodeLinksED2Ev
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody20randomizeConstraintsEv # -- Begin function _ZN10btSoftBody20randomizeConstraintsEv
	.p2align	5
	.type	_ZN10btSoftBody20randomizeConstraintsEv,@function
_ZN10btSoftBody20randomizeConstraintsEv: # @_ZN10btSoftBody20randomizeConstraintsEv
# %bb.0:
	addi.d	$sp, $sp, -176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	move	$fp, $a0
	ld.w	$s5, $a0, 852
	lu12i.w	$a0, 59
	lu12i.w	$a2, 406
	lu12i.w	$a3, 247535
	blez	$s5, .LBB84_4
# %bb.1:                                # %.lr.ph
	move	$s6, $zero
	slli.d	$a1, $s5, 6
	alsl.d	$s7, $s5, $a1, 3
	ori	$s2, $a0, 2039
	ori	$s8, $a2, 1549
	ori	$s3, $a3, 863
	ori	$s4, $zero, 72
	.p2align	4, , 16
.LBB84_2:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 864
	add.d	$s0, $a0, $s6
	mul.d	$a1, $s2, $s8
	add.d	$a1, $a1, $s3
	bstrpick.d	$s2, $a1, 31, 0
	addi.w	$a1, $a1, 0
	mod.wu	$a1, $a1, $s5
	mul.d	$a1, $a1, $s4
	add.d	$s1, $a0, $a1
	addi.d	$a0, $sp, 16
	ori	$a2, $zero, 72
	move	$a1, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ori	$a2, $zero, 68
	move	$a0, $s0
	move	$a1, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$a1, $sp, 16
	ori	$a2, $zero, 68
	move	$a0, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$s6, $s6, 72
	bne	$s7, $s6, .LBB84_2
# %bb.3:                                # %._crit_edge
	ld.w	$s5, $fp, 884
	bgtz	$s5, .LBB84_5
	b	.LBB84_7
.LBB84_4:
	ori	$s2, $a0, 2039
	ld.w	$s5, $fp, 884
	blez	$s5, .LBB84_7
.LBB84_5:                               # %.lr.ph22
	move	$s6, $zero
	slli.d	$a0, $s5, 6
	alsl.d	$s7, $s5, $a0, 3
	lu12i.w	$a0, 406
	ori	$s3, $a0, 1549
	lu12i.w	$a0, 247535
	ori	$s4, $a0, 863
	ori	$s8, $zero, 72
	.p2align	4, , 16
.LBB84_6:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 896
	add.d	$s0, $a0, $s6
	mul.d	$a1, $s2, $s3
	add.d	$a1, $a1, $s4
	bstrpick.d	$s2, $a1, 31, 0
	addi.w	$a1, $a1, 0
	mod.wu	$a1, $a1, $s5
	mul.d	$a1, $a1, $s8
	add.d	$s1, $a0, $a1
	addi.d	$a0, $sp, 16
	ori	$a2, $zero, 72
	move	$a1, $s0
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ori	$a2, $zero, 72
	move	$a0, $s0
	move	$a1, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$a1, $sp, 16
	ori	$a2, $zero, 72
	move	$a0, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$s6, $s6, 72
	bne	$s7, $s6, .LBB84_6
.LBB84_7:                               # %._crit_edge23
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.Lfunc_end84:
	.size	_ZN10btSoftBody20randomizeConstraintsEv, .Lfunc_end84-_ZN10btSoftBody20randomizeConstraintsEv
                                        # -- End function
	.globl	_ZN10btSoftBody14releaseClusterEi # -- Begin function _ZN10btSoftBody14releaseClusterEi
	.p2align	5
	.type	_ZN10btSoftBody14releaseClusterEi,@function
_ZN10btSoftBody14releaseClusterEi:      # @_ZN10btSoftBody14releaseClusterEi
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
	ld.d	$a0, $a0, 1352
	slli.d	$a1, $a1, 3
	ldx.d	$s0, $a0, $a1
	ld.d	$a1, $s0, 384
	beqz	$a1, .LBB85_2
# %bb.1:
	addi.d	$a0, $fp, 1272
	pcaddu18i	$ra, %call36(_ZN6btDbvt6removeEP10btDbvtNode)
	jirl	$ra, $ra, 0
.LBB85_2:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN10btSoftBody7ClusterD2Ev)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 1340
	blez	$a0, .LBB85_8
# %bb.3:                                # %.lr.ph.i.i
	ld.d	$a1, $fp, 1352
	move	$a3, $zero
	move	$a4, $a0
	move	$a2, $a1
	.p2align	4, , 16
.LBB85_4:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a2, 0
	beq	$a5, $s0, .LBB85_6
# %bb.5:                                #   in Loop: Header=BB85_4 Depth=1
	addi.d	$a2, $a2, 8
	addi.d	$a4, $a4, -1
	addi.w	$a3, $a3, 1
	bnez	$a4, .LBB85_4
	b	.LBB85_8
.LBB85_6:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE16findLinearSearchERKS2_.exit.i
	bge	$a3, $a0, .LBB85_8
# %bb.7:
	addi.w	$a0, $a0, -1
	slli.d	$a3, $a0, 3
	ldx.d	$a4, $a1, $a3
	ld.d	$a5, $a2, 0
	st.d	$a4, $a2, 0
	stx.d	$a5, $a1, $a3
	st.w	$a0, $fp, 1340
.LBB85_8:                               # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE6removeERKS2_.exit
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end85:
	.size	_ZN10btSoftBody14releaseClusterEi, .Lfunc_end85-_ZN10btSoftBody14releaseClusterEi
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN10btSoftBody7ClusterD2Ev,"axG",@progbits,_ZN10btSoftBody7ClusterD2Ev,comdat
	.weak	_ZN10btSoftBody7ClusterD2Ev     # -- Begin function _ZN10btSoftBody7ClusterD2Ev
	.p2align	5
	.type	_ZN10btSoftBody7ClusterD2Ev,@function
_ZN10btSoftBody7ClusterD2Ev:            # @_ZN10btSoftBody7ClusterD2Ev
.Lfunc_begin8:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception8
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
	ld.d	$a0, $a0, 80
	beqz	$a0, .LBB86_3
# %bb.1:
	ld.b	$a1, $fp, 88
	andi	$a1, $a1, 1
	beqz	$a1, .LBB86_3
# %bb.2:
.Ltmp245:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp246:                               # EH_LABEL
.LBB86_3:
	ld.d	$a0, $fp, 48
	ori	$s0, $zero, 1
	st.b	$s0, $fp, 88
	st.d	$zero, $fp, 80
	st.d	$zero, $fp, 68
	beqz	$a0, .LBB86_6
# %bb.4:
	ld.b	$a1, $fp, 56
	andi	$a1, $a1, 1
	beqz	$a1, .LBB86_6
# %bb.5:
.Ltmp250:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp251:                               # EH_LABEL
.LBB86_6:
	ld.d	$a0, $fp, 16
	st.b	$s0, $fp, 56
	st.d	$zero, $fp, 48
	st.d	$zero, $fp, 36
	beqz	$a0, .LBB86_9
# %bb.7:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB86_9
# %bb.8:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB86_9:                               # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.LBB86_10:
.Ltmp252:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB86_12
.LBB86_11:
.Ltmp247:                               # EH_LABEL
	move	$s0, $a0
	addi.d	$a0, $fp, 32
.Ltmp248:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIfED2Ev)
	jirl	$ra, $ra, 0
.Ltmp249:                               # EH_LABEL
.LBB86_12:
.Ltmp253:                               # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev)
	jirl	$ra, $ra, 0
.Ltmp254:                               # EH_LABEL
# %bb.13:
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB86_14:
.Ltmp255:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end86:
	.size	_ZN10btSoftBody7ClusterD2Ev, .Lfunc_end86-_ZN10btSoftBody7ClusterD2Ev
	.cfi_endproc
	.section	.gcc_except_table._ZN10btSoftBody7ClusterD2Ev,"aG",@progbits,_ZN10btSoftBody7ClusterD2Ev,comdat
	.p2align	2, 0x0
GCC_except_table86:
.Lexception8:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase6-.Lttbaseref6
.Lttbaseref6:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end8-.Lcst_begin8
.Lcst_begin8:
	.uleb128 .Ltmp245-.Lfunc_begin8         # >> Call Site 1 <<
	.uleb128 .Ltmp246-.Ltmp245              #   Call between .Ltmp245 and .Ltmp246
	.uleb128 .Ltmp247-.Lfunc_begin8         #     jumps to .Ltmp247
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp250-.Lfunc_begin8         # >> Call Site 2 <<
	.uleb128 .Ltmp251-.Ltmp250              #   Call between .Ltmp250 and .Ltmp251
	.uleb128 .Ltmp252-.Lfunc_begin8         #     jumps to .Ltmp252
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp251-.Lfunc_begin8         # >> Call Site 3 <<
	.uleb128 .Ltmp248-.Ltmp251              #   Call between .Ltmp251 and .Ltmp248
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp248-.Lfunc_begin8         # >> Call Site 4 <<
	.uleb128 .Ltmp254-.Ltmp248              #   Call between .Ltmp248 and .Ltmp254
	.uleb128 .Ltmp255-.Lfunc_begin8         #     jumps to .Ltmp255
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp254-.Lfunc_begin8         # >> Call Site 5 <<
	.uleb128 .Lfunc_end86-.Ltmp254          #   Call between .Ltmp254 and .Lfunc_end86
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end8:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase6:
	.p2align	2, 0x0
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody16generateClustersEii
.LCPI87_0:
	.word	0x3d800000                      # float 0.0625
.LCPI87_1:
	.word	0x34000000                      # float 1.1920929E-7
	.text
	.globl	_ZN10btSoftBody16generateClustersEii
	.p2align	5
	.type	_ZN10btSoftBody16generateClustersEii,@function
_ZN10btSoftBody16generateClustersEii:   # @_ZN10btSoftBody16generateClustersEii
.Lfunc_begin9:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception9
# %bb.0:
	addi.d	$sp, $sp, -272
	.cfi_def_cfa_offset 272
	st.d	$ra, $sp, 264                   # 8-byte Folded Spill
	st.d	$fp, $sp, 256                   # 8-byte Folded Spill
	st.d	$s0, $sp, 248                   # 8-byte Folded Spill
	st.d	$s1, $sp, 240                   # 8-byte Folded Spill
	st.d	$s2, $sp, 232                   # 8-byte Folded Spill
	st.d	$s3, $sp, 224                   # 8-byte Folded Spill
	st.d	$s4, $sp, 216                   # 8-byte Folded Spill
	st.d	$s5, $sp, 208                   # 8-byte Folded Spill
	st.d	$s6, $sp, 200                   # 8-byte Folded Spill
	st.d	$s7, $sp, 192                   # 8-byte Folded Spill
	st.d	$s8, $sp, 184                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 176                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 168                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 160                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 152                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 144                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 136                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 128                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 120                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	st.d	$a2, $sp, 24                    # 8-byte Folded Spill
	move	$s0, $a1
	move	$s1, $a0
	pcaddu18i	$ra, %call36(_ZN10btSoftBody15releaseClustersEv)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 820
	slt	$a1, $s0, $a0
	ld.w	$fp, $s1, 1340
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s0, $a1
	or	$s4, $a1, $a0
	bge	$fp, $s4, .LBB87_19
# %bb.1:
	ld.w	$a0, $s1, 1344
	bge	$a0, $s4, .LBB87_12
# %bb.2:
	beqz	$s4, .LBB87_13
# %bb.3:
	slli.d	$a0, $s4, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s1, 1340
	move	$s0, $a0
	ld.d	$a0, $s1, 1352
	blez	$a1, .LBB87_14
.LBB87_4:                               # %.lr.ph.i.i.i
	ori	$a3, $zero, 4
	move	$a2, $zero
	bltu	$a1, $a3, .LBB87_9
# %bb.5:                                # %.lr.ph.i.i.i
	sub.d	$a3, $s0, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_9
# %bb.6:                                # %vector.ph
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_7:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_7
# %bb.8:                                # %middle.block
	beq	$a2, $a1, .LBB87_11
.LBB87_9:                               # %scalar.ph.preheader
	sub.d	$a1, $a1, $a2
	alsl.d	$a3, $a2, $a0, 3
	alsl.d	$a2, $a2, $s0, 3
	.p2align	4, , 16
.LBB87_10:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a3, 0
	st.d	$a4, $a2, 0
	addi.d	$a1, $a1, -1
	addi.d	$a3, $a3, 8
	addi.d	$a2, $a2, 8
	bnez	$a1, .LBB87_10
.LBB87_11:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.thread.i.i
	ld.bu	$a1, $s1, 1360
	bnez	$a1, .LBB87_16
	b	.LBB87_17
.LBB87_12:                              # %..lr.ph.i_crit_edge
	ld.d	$s0, $s1, 1352
	b	.LBB87_18
.LBB87_13:
	move	$s0, $zero
	move	$a1, $fp
	ld.d	$a0, $s1, 1352
	bgtz	$a1, .LBB87_4
.LBB87_14:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.i.i
	beqz	$a0, .LBB87_17
# %bb.15:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.i.i
	ld.b	$a1, $s1, 1360
	andi	$a1, $a1, 1
	beqz	$a1, .LBB87_17
.LBB87_16:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB87_17:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $s1, 1360
	st.d	$s0, $s1, 1352
	st.w	$s4, $s1, 1344
.LBB87_18:                              # %.lr.ph.i
	alsl.d	$a0, $fp, $s0, 3
	sub.d	$a1, $s4, $fp
	slli.d	$a2, $a1, 3
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
.LBB87_19:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE6resizeEiRKS2_.exit
	st.w	$s4, $s1, 1340
	st.d	$s1, $sp, 72                    # 8-byte Folded Spill
	blez	$s4, .LBB87_44
# %bb.20:                               # %.lr.ph
	move	$fp, $zero
	move	$s0, $zero
	move	$s3, $s1
	ori	$s1, $zero, 1
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 32                   # 16-byte Folded Spill
	lu12i.w	$a0, 273536
	lu32i.d	$a0, 251658
	lu52i.d	$s5, $a0, 962
	ori	$s2, $zero, 256
	.p2align	4, , 16
.LBB87_21:                              # =>This Inner Loop Header: Depth=1
	ori	$a0, $zero, 424
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	st.b	$s1, $a0, 24
	st.d	$zero, $a0, 4
	st.d	$zero, $a0, 36
	st.d	$zero, $a0, 68
	st.d	$zero, $a0, 384
	vld	$vr0, $sp, 32                   # 16-byte Folded Reload
	vst	$vr0, $a0, 392
	st.d	$s5, $a0, 408
	st.h	$s2, $a0, 416
	ld.d	$a1, $s3, 1352
	st.d	$zero, $a0, 16
	st.b	$s1, $a0, 56
	st.d	$zero, $a0, 48
	stx.d	$a0, $a1, $fp
	ld.w	$s4, $s3, 1340
	st.b	$s1, $a0, 88
	st.d	$zero, $a0, 80
	addi.d	$s0, $s0, 1
	addi.d	$fp, $fp, 8
	blt	$s0, $s4, .LBB87_21
# %bb.22:                               # %._crit_edge
	blez	$s4, .LBB87_43
# %bb.23:                               # %.preheader637
	st.d	$s5, $sp, 8                     # 8-byte Folded Spill
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 820
	blez	$a0, .LBB87_69
# %bb.24:                               # %.lr.ph669
	move	$fp, $zero
	movgr2fr.w	$fs0, $zero
	ori	$s1, $zero, 120
	lu12i.w	$a1, 7
	ori	$s2, $a1, 1201
	ori	$s3, $zero, 1
	ori	$s5, $zero, 4
	fmov.s	$fs2, $fs0
	fmov.s	$fs1, $fs0
	b	.LBB87_28
.LBB87_25:                              # %.noexc205
                                        #   in Loop: Header=BB87_28 Depth=1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, 4
.LBB87_26:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE10deallocateEv.exit.i.i
                                        #   in Loop: Header=BB87_28 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 820
	st.b	$s3, $s7, 24
	st.d	$s0, $s7, 16
	st.w	$s6, $s7, 8
.LBB87_27:                              #   in Loop: Header=BB87_28 Depth=1
	fadd.s	$fs1, $fs1, $fs5
	ld.d	$a2, $s7, 16
	fadd.s	$fs2, $fs2, $fs3
	fadd.s	$fs0, $fs0, $fs4
	slli.d	$a3, $a1, 3
	stx.d	$s8, $a2, $a3
	addi.d	$a1, $a1, 1
	addi.d	$fp, $fp, 1
	st.w	$a1, $s7, 4
	bge	$fp, $a0, .LBB87_70
.LBB87_28:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_35 Depth 2
                                        #     Child Loop BB87_38 Depth 2
	ld.d	$a4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a1, $a4, 832
	ld.w	$a2, $a4, 1340
	mul.d	$a3, $fp, $s1
	ld.d	$a4, $a4, 1352
	mul.w	$a5, $fp, $s2
	mod.w	$a2, $a5, $a2
	slli.d	$a2, $a2, 3
	ldx.d	$s7, $a4, $a2
	add.d	$s8, $a1, $a3
	fld.s	$fs5, $s8, 16
	fld.s	$fs3, $s8, 20
	ld.w	$a1, $s7, 4
	ld.w	$a2, $s7, 8
	fld.s	$fs4, $s8, 24
	bne	$a1, $a2, .LBB87_27
# %bb.29:                               #   in Loop: Header=BB87_28 Depth=1
	sltui	$a2, $a1, 1
	slli.w	$a3, $a1, 1
	masknez	$a3, $a3, $a2
	maskeqz	$a2, $s3, $a2
	or	$s6, $a2, $a3
	bge	$a1, $s6, .LBB87_27
# %bb.30:                               #   in Loop: Header=BB87_28 Depth=1
	beqz	$s6, .LBB87_40
# %bb.31:                               # %.noexc
                                        #   in Loop: Header=BB87_28 Depth=1
	slli.d	$a0, $s6, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, 4
	move	$s0, $a0
	ld.d	$a0, $s7, 16
	blez	$a1, .LBB87_41
.LBB87_32:                              # %.lr.ph.i.i.i199
                                        #   in Loop: Header=BB87_28 Depth=1
	move	$a2, $zero
	bltu	$a1, $s5, .LBB87_37
# %bb.33:                               # %.lr.ph.i.i.i199
                                        #   in Loop: Header=BB87_28 Depth=1
	sub.d	$a3, $s0, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_37
# %bb.34:                               # %vector.ph1001
                                        #   in Loop: Header=BB87_28 Depth=1
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_35:                              # %vector.body1004
                                        #   Parent Loop BB87_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_35
# %bb.36:                               # %middle.block1009
                                        #   in Loop: Header=BB87_28 Depth=1
	beq	$a2, $a1, .LBB87_39
.LBB87_37:                              # %scalar.ph999.preheader
                                        #   in Loop: Header=BB87_28 Depth=1
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s0, 3
	.p2align	4, , 16
.LBB87_38:                              # %scalar.ph999
                                        #   Parent Loop BB87_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB87_38
.LBB87_39:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.thread.i.i
                                        #   in Loop: Header=BB87_28 Depth=1
	ld.bu	$a2, $s7, 24
	bnez	$a2, .LBB87_25
	b	.LBB87_26
.LBB87_40:                              #   in Loop: Header=BB87_28 Depth=1
	move	$s0, $zero
	ld.d	$a0, $s7, 16
	bgtz	$a1, .LBB87_32
.LBB87_41:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i
                                        #   in Loop: Header=BB87_28 Depth=1
	beqz	$a0, .LBB87_26
# %bb.42:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i
                                        #   in Loop: Header=BB87_28 Depth=1
	ld.b	$a2, $s7, 24
	andi	$a2, $a2, 1
	bnez	$a2, .LBB87_25
	b	.LBB87_26
.LBB87_43:
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
.LBB87_44:                              # %._crit_edge.thread
	ld.w	$fp, $s1, 916
	beqz	$fp, .LBB87_56
# %bb.45:
	bge	$s4, $fp, .LBB87_68
# %bb.46:
	ld.w	$a0, $s1, 1344
	bge	$a0, $fp, .LBB87_177
# %bb.47:                               # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE8allocateEi.exit.i.i413
	slli.d	$s0, $fp, 3
	ori	$a1, $zero, 16
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a2, $s1, 1340
	ld.d	$a1, $s1, 1352
	move	$s1, $a0
	blez	$a2, .LBB87_215
# %bb.48:                               # %.lr.ph.i.i.i419
	ori	$a3, $zero, 4
	move	$a0, $zero
	bltu	$a2, $a3, .LBB87_53
# %bb.49:                               # %.lr.ph.i.i.i419
	sub.d	$a3, $s1, $a1
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_53
# %bb.50:                               # %vector.ph938
	bstrpick.d	$a0, $a2, 30, 2
	slli.d	$a0, $a0, 2
	addi.d	$a3, $a1, 16
	addi.d	$a4, $s1, 16
	move	$a5, $a0
	.p2align	4, , 16
.LBB87_51:                              # %vector.body941
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_51
# %bb.52:                               # %middle.block946
	beq	$a0, $a2, .LBB87_55
.LBB87_53:                              # %scalar.ph936.preheader
	sub.d	$a2, $a2, $a0
	alsl.d	$a3, $a0, $a1, 3
	alsl.d	$a0, $a0, $s1, 3
	.p2align	4, , 16
.LBB87_54:                              # %scalar.ph936
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a3, 0
	st.d	$a4, $a0, 0
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 8
	addi.d	$a0, $a0, 8
	bnez	$a2, .LBB87_54
.LBB87_55:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.thread.i.i424
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.bu	$a0, $a0, 1360
	bnez	$a0, .LBB87_217
	b	.LBB87_218
.LBB87_56:
	ld.w	$fp, $s1, 884
	bge	$s4, $fp, .LBB87_175
# %bb.57:
	ld.w	$a0, $s1, 1344
	bge	$a0, $fp, .LBB87_249
# %bb.58:
	beqz	$fp, .LBB87_244
# %bb.59:                               # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE8allocateEi.exit.i.i458
	slli.d	$a0, $fp, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a2, $s1, 1340
	ld.d	$a1, $s1, 1352
	move	$s0, $a0
	blez	$a2, .LBB87_245
# %bb.60:                               # %.lr.ph.i.i.i464
	ori	$a3, $zero, 4
	move	$a0, $zero
	bltu	$a2, $a3, .LBB87_65
# %bb.61:                               # %.lr.ph.i.i.i464
	sub.d	$a3, $s0, $a1
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_65
# %bb.62:                               # %vector.ph969
	bstrpick.d	$a0, $a2, 30, 2
	slli.d	$a0, $a0, 2
	addi.d	$a3, $a1, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a0
	.p2align	4, , 16
.LBB87_63:                              # %vector.body972
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_63
# %bb.64:                               # %middle.block977
	beq	$a0, $a2, .LBB87_67
.LBB87_65:                              # %scalar.ph967.preheader
	sub.d	$a2, $a2, $a0
	alsl.d	$a3, $a0, $a1, 3
	alsl.d	$a0, $a0, $s0, 3
	.p2align	4, , 16
.LBB87_66:                              # %scalar.ph967
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a3, 0
	st.d	$a4, $a0, 0
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 8
	addi.d	$a0, $a0, 8
	bnez	$a2, .LBB87_66
.LBB87_67:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.thread.i.i469
	ld.bu	$a0, $s1, 1360
	bnez	$a0, .LBB87_247
	b	.LBB87_248
.LBB87_68:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE6resizeEiRKS2_.exit428.thread
	st.w	$fp, $s1, 1340
	move	$s5, $s1
	b	.LBB87_222
.LBB87_69:
	movgr2fr.w	$fs1, $zero
	fmov.s	$fs2, $fs1
	fmov.s	$fs0, $fs1
.LBB87_70:                              # %.lr.ph.i206
	movgr2fr.w	$fa0, $a0
	ffint.s.w	$fa0, $fa0
	frecip.s	$fa0, $fa0
	fmul.s	$fs1, $fs1, $fa0
	fmul.s	$fs2, $fs2, $fa0
	fmul.s	$fs0, $fs0, $fa0
	slli.d	$a0, $s4, 4
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ori	$a1, $zero, 1
	st.d	$a0, $sp, 64                    # 8-byte Folded Spill
	bne	$s4, $a1, .LBB87_72
# %bb.71:
	move	$a3, $zero
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
	b	.LBB87_75
.LBB87_72:                              # %vector.ph1014
	bstrpick.d	$a1, $s4, 30, 1
	slli.d	$a3, $a1, 1
	addi.d	$a1, $a0, 16
	move	$a2, $a3
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB87_73:                              # %vector.body1017
                                        # =>This Inner Loop Header: Depth=1
	fst.s	$fs1, $a1, -16
	fst.s	$fs1, $a1, 0
	fst.s	$fs2, $a1, -12
	fst.s	$fs2, $a1, 4
	fst.s	$fs0, $a1, -8
	fst.s	$fs0, $a1, 8
	st.w	$zero, $a1, -4
	st.w	$zero, $a1, 12
	addi.d	$a2, $a2, -2
	addi.d	$a1, $a1, 32
	bnez	$a2, .LBB87_73
# %bb.74:                               # %middle.block1020
	beq	$a3, $s4, .LBB87_77
.LBB87_75:                              # %scalar.ph1012.preheader
	sub.d	$a1, $s4, $a3
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a0, $a3, $a0, 4
	addi.d	$a0, $a0, 8
	.p2align	4, , 16
.LBB87_76:                              # %scalar.ph1012
                                        # =>This Inner Loop Header: Depth=1
	fst.s	$fs1, $a0, -8
	fst.s	$fs2, $a0, -4
	fst.s	$fs0, $a0, 0
	st.w	$zero, $a0, 4
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 16
	bnez	$a1, .LBB87_76
.LBB87_77:                              # %_ZN20btAlignedObjectArrayI9btVector3E6resizeEiRKS0_.exit.preheader
	move	$s2, $zero
	ori	$s6, $zero, 1
	slt	$a0, $s6, $s4
	masknez	$a1, $s6, $a0
	maskeqz	$a0, $s4, $a0
	or	$s7, $a0, $a1
	ori	$a0, $zero, 2
	slt	$a1, $a0, $s4
	masknez	$a0, $a0, $a1
	maskeqz	$a1, $s4, $a1
	or	$a0, $a1, $a0
	ld.d	$a1, $sp, 64                    # 8-byte Folded Reload
	addi.d	$a1, $a1, 24
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	addi.d	$a0, $a0, -1
	st.d	$a0, $sp, 56                    # 8-byte Folded Spill
	pcalau12i	$a0, %pc_hi20(.LCPI87_0)
	fld.s	$fa0, $a0, %pc_lo12(.LCPI87_0)
	fst.s	$fa0, $sp, 20                   # 4-byte Folded Spill
	movgr2fr.w	$fs1, $zero
	ori	$s3, $zero, 120
	b	.LBB87_79
	.p2align	4, , 16
.LBB87_78:                              # %._crit_edge694
                                        #   in Loop: Header=BB87_79 Depth=1
	ld.d	$a1, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 48                    # 8-byte Folded Reload
	slt	$a1, $s2, $a1
	and	$a1, $s5, $a1
	beqz	$a1, .LBB87_118
.LBB87_79:                              # %.preheader635.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_84 Depth 2
                                        #       Child Loop BB87_86 Depth 3
                                        #     Child Loop BB87_99 Depth 2
                                        #       Child Loop BB87_101 Depth 3
                                        #       Child Loop BB87_110 Depth 3
                                        #       Child Loop BB87_113 Depth 3
	move	$fp, $zero
	move	$s5, $zero
	bstrpick.d	$a0, $s2, 31, 0
	movgr2fr.d	$fa0, $a0
	ffint.s.l	$fa0, $fa0
	fld.s	$fa1, $sp, 20                   # 4-byte Folded Reload
	fmul.s	$fa0, $fa0, $fa1
	vldi	$vr1, -1168
	fcmp.clt.s	$fcc0, $fa1, $fa0
	fsel	$fa0, $fa0, $fa1, $fcc0
	vldi	$vr1, -1280
	fsub.s	$fs2, $fa1, $fa0
	addi.w	$s2, $s2, 1
	b	.LBB87_84
.LBB87_80:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE10deallocateEv.exit.i.i253
                                        #   in Loop: Header=BB87_84 Depth=2
	move	$a0, $zero
	st.b	$s6, $s0, 24
	st.d	$zero, $s0, 16
	st.w	$zero, $s0, 8
.LBB87_81:                              # %.lr.ph.i243
                                        #   in Loop: Header=BB87_84 Depth=2
	slli.d	$a1, $s1, 3
	alsl.d	$a0, $s1, $a0, 3
	sub.d	$a2, $zero, $a1
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
.LBB87_82:                              # %.loopexit634
                                        #   in Loop: Header=BB87_84 Depth=2
	fsub.s	$fa0, $fs6, $fs3
	fsub.s	$fa1, $fs7, $fs4
	fsub.s	$fa2, $fs0, $fs5
	pcalau12i	$a0, %pc_hi20(.LCPI87_1)
	fld.s	$fa3, $a0, %pc_lo12(.LCPI87_1)
	fmul.s	$fa1, $fa1, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	fcmp.clt.s	$fcc0, $fa3, $fa0
	st.w	$zero, $s0, 4
	movcf2gr	$a0, $fcc0
	or	$s5, $s5, $a0
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
.LBB87_83:                              #   in Loop: Header=BB87_84 Depth=2
	addi.d	$fp, $fp, 1
	beq	$fp, $s7, .LBB87_93
.LBB87_84:                              # %.preheader635
                                        #   Parent Loop BB87_79 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_86 Depth 3
	ld.d	$a1, $s1, 1352
	slli.d	$a0, $fp, 3
	ldx.d	$a2, $a1, $a0
	ld.w	$a1, $a2, 4
	blez	$a1, .LBB87_87
# %bb.85:                               # %.lr.ph675
                                        #   in Loop: Header=BB87_84 Depth=2
	ld.d	$a2, $a2, 16
	move	$a3, $a1
	fmov.s	$fa1, $fs1
	fmov.s	$fa2, $fs1
	fmov.s	$fa0, $fs1
	.p2align	4, , 16
.LBB87_86:                              #   Parent Loop BB87_79 Depth=1
                                        #     Parent Loop BB87_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.d	$a4, $a2, 0
	fld.s	$fa3, $a4, 16
	fld.s	$fa4, $a4, 20
	fld.s	$fa5, $a4, 24
	fadd.s	$fa2, $fa2, $fa3
	fadd.s	$fa1, $fa1, $fa4
	fadd.s	$fa0, $fa0, $fa5
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB87_86
	b	.LBB87_88
	.p2align	4, , 16
.LBB87_87:                              # %._crit_edge676
                                        #   in Loop: Header=BB87_84 Depth=2
	fmov.s	$fa1, $fs1
	fmov.s	$fa2, $fs1
	fmov.s	$fa0, $fs1
	beqz	$a1, .LBB87_83
.LBB87_88:                              # %._crit_edge676.thread
                                        #   in Loop: Header=BB87_84 Depth=2
	movgr2fr.w	$fa3, $a1
	ffint.s.w	$fa3, $fa3
	frecip.s	$fa3, $fa3
	fmul.s	$fa2, $fa2, $fa3
	fmul.s	$fa1, $fa1, $fa3
	ld.d	$a3, $sp, 64                    # 8-byte Folded Reload
	alsl.d	$a1, $fp, $a3, 4
	slli.d	$a2, $fp, 4
	fldx.s	$fs3, $a3, $a2
	fld.s	$fs4, $a1, 4
	fld.s	$fs5, $a1, 8
	fmul.s	$fa0, $fa0, $fa3
	fsub.s	$fa2, $fa2, $fs3
	fsub.s	$fa1, $fa1, $fs4
	fsub.s	$fa0, $fa0, $fs5
	fmul.s	$fa2, $fs2, $fa2
	fmul.s	$fa1, $fs2, $fa1
	fmul.s	$fa0, $fs2, $fa0
	fadd.s	$fs6, $fs3, $fa2
	fadd.s	$fs7, $fs4, $fa1
	fadd.s	$fs0, $fs5, $fa0
	fstx.s	$fs6, $a3, $a2
	fst.s	$fs7, $a1, 4
	fst.s	$fs0, $a1, 8
	st.w	$zero, $a1, 12
	ld.d	$a1, $s1, 1352
	ldx.d	$s0, $a1, $a0
	ld.w	$s1, $s0, 4
	bgez	$s1, .LBB87_82
# %bb.89:                               #   in Loop: Header=BB87_84 Depth=2
	ld.w	$a1, $s0, 8
	ld.d	$a0, $s0, 16
	bgez	$a1, .LBB87_81
# %bb.90:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i250
                                        #   in Loop: Header=BB87_84 Depth=2
	beqz	$a0, .LBB87_80
# %bb.91:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i250
                                        #   in Loop: Header=BB87_84 Depth=2
	ld.b	$a1, $s0, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB87_80
# %bb.92:                               #   in Loop: Header=BB87_84 Depth=2
.Ltmp256:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp257:                               # EH_LABEL
	b	.LBB87_80
	.p2align	4, , 16
.LBB87_93:                              # %.preheader636
                                        #   in Loop: Header=BB87_79 Depth=1
	st.d	$s2, $sp, 48                    # 8-byte Folded Spill
	ld.w	$a0, $s1, 820
	blez	$a0, .LBB87_78
# %bb.94:                               # %.lr.ph693.preheader
                                        #   in Loop: Header=BB87_79 Depth=1
	move	$s8, $zero
	b	.LBB87_99
.LBB87_95:                              #   in Loop: Header=BB87_99 Depth=2
.Ltmp261:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp262:                               # EH_LABEL
# %bb.96:                               # %.noexc285
                                        #   in Loop: Header=BB87_99 Depth=2
	ld.w	$a1, $fp, 4
.LBB87_97:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE10deallocateEv.exit.i.i272
                                        #   in Loop: Header=BB87_99 Depth=2
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 820
	st.b	$s6, $fp, 24
	st.d	$s2, $fp, 16
	st.w	$s0, $fp, 8
.LBB87_98:                              #   in Loop: Header=BB87_99 Depth=2
	ld.d	$a2, $fp, 16
	slli.d	$a3, $a1, 3
	stx.d	$s1, $a2, $a3
	addi.d	$a1, $a1, 1
	addi.d	$s8, $s8, 1
	st.w	$a1, $fp, 4
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
	bge	$s8, $a0, .LBB87_78
.LBB87_99:                              # %.lr.ph693
                                        #   Parent Loop BB87_79 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_101 Depth 3
                                        #       Child Loop BB87_110 Depth 3
                                        #       Child Loop BB87_113 Depth 3
	ld.d	$a1, $s1, 832
	mul.d	$a2, $s8, $s3
	add.d	$s1, $a1, $a2
	move	$a1, $zero
	beq	$s4, $s6, .LBB87_102
# %bb.100:                              # %.lr.ph689.preheader
                                        #   in Loop: Header=BB87_99 Depth=2
	fld.s	$fa0, $s1, 16
	ld.d	$a2, $sp, 64                    # 8-byte Folded Reload
	fld.s	$fa3, $a2, 0
	fld.s	$fa1, $s1, 20
	fld.s	$fa2, $s1, 24
	fld.s	$fa4, $a2, 4
	fsub.s	$fa3, $fa3, $fa0
	fabs.s	$fa3, $fa3
	fld.s	$fa5, $a2, 8
	fsub.s	$fa4, $fa4, $fa1
	fabs.s	$fa4, $fa4
	fadd.s	$fa3, $fa3, $fa4
	fsub.s	$fa4, $fa5, $fa2
	fabs.s	$fa4, $fa4
	fadd.s	$fa3, $fa3, $fa4
	ori	$a2, $zero, 1
	ld.d	$a3, $sp, 56                    # 8-byte Folded Reload
	ld.d	$a4, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB87_101:                             # %.lr.ph689
                                        #   Parent Loop BB87_79 Depth=1
                                        #     Parent Loop BB87_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	fld.s	$fa4, $a4, -8
	fld.s	$fa5, $a4, -4
	fld.s	$fa6, $a4, 0
	fsub.s	$fa4, $fa4, $fa0
	fsub.s	$fa5, $fa5, $fa1
	fsub.s	$fa6, $fa6, $fa2
	fabs.s	$fa4, $fa4
	fabs.s	$fa5, $fa5
	fadd.s	$fa4, $fa4, $fa5
	fabs.s	$fa5, $fa6
	fadd.s	$fa4, $fa4, $fa5
	fcmp.clt.s	$fcc0, $fa4, $fa3
	fsel	$fa3, $fa3, $fa4, $fcc0
	movcf2gr	$a5, $fcc0
	masknez	$a1, $a1, $a5
	maskeqz	$a5, $a2, $a5
	or	$a1, $a5, $a1
	addi.w	$a2, $a2, 1
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 16
	bnez	$a3, .LBB87_101
.LBB87_102:                             # %._crit_edge690
                                        #   in Loop: Header=BB87_99 Depth=2
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a2, $a2, 1352
	slli.d	$a1, $a1, 3
	ldx.d	$fp, $a2, $a1
	ld.w	$a1, $fp, 4
	ld.w	$a2, $fp, 8
	bne	$a1, $a2, .LBB87_98
# %bb.103:                              #   in Loop: Header=BB87_99 Depth=2
	sltui	$a2, $a1, 1
	slli.w	$a3, $a1, 1
	masknez	$a3, $a3, $a2
	maskeqz	$a2, $s6, $a2
	or	$s0, $a2, $a3
	bge	$a1, $s0, .LBB87_98
# %bb.104:                              #   in Loop: Header=BB87_99 Depth=2
	beqz	$s0, .LBB87_115
# %bb.105:                              #   in Loop: Header=BB87_99 Depth=2
	slli.d	$a0, $s0, 3
.Ltmp259:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp260:                               # EH_LABEL
# %bb.106:                              # %.noexc284
                                        #   in Loop: Header=BB87_99 Depth=2
	move	$s2, $a0
	ld.w	$a1, $fp, 4
	ld.d	$a0, $fp, 16
	blez	$a1, .LBB87_116
.LBB87_107:                             # %.lr.ph.i.i.i275
                                        #   in Loop: Header=BB87_99 Depth=2
	move	$a2, $zero
	ori	$a3, $zero, 4
	bltu	$a1, $a3, .LBB87_112
# %bb.108:                              # %.lr.ph.i.i.i275
                                        #   in Loop: Header=BB87_99 Depth=2
	sub.d	$a3, $s2, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_112
# %bb.109:                              # %vector.ph1028
                                        #   in Loop: Header=BB87_99 Depth=2
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s2, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_110:                             # %vector.body1031
                                        #   Parent Loop BB87_79 Depth=1
                                        #     Parent Loop BB87_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_110
# %bb.111:                              # %middle.block1036
                                        #   in Loop: Header=BB87_99 Depth=2
	beq	$a2, $a1, .LBB87_114
.LBB87_112:                             # %scalar.ph1026.preheader
                                        #   in Loop: Header=BB87_99 Depth=2
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s2, 3
	.p2align	4, , 16
.LBB87_113:                             # %scalar.ph1026
                                        #   Parent Loop BB87_79 Depth=1
                                        #     Parent Loop BB87_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB87_113
.LBB87_114:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.thread.i.i280
                                        #   in Loop: Header=BB87_99 Depth=2
	ld.bu	$a2, $fp, 24
	bnez	$a2, .LBB87_95
	b	.LBB87_97
.LBB87_115:                             #   in Loop: Header=BB87_99 Depth=2
	move	$s2, $zero
	ld.d	$a0, $fp, 16
	bgtz	$a1, .LBB87_107
.LBB87_116:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i269
                                        #   in Loop: Header=BB87_99 Depth=2
	beqz	$a0, .LBB87_97
# %bb.117:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i269
                                        #   in Loop: Header=BB87_99 Depth=2
	ld.b	$a2, $fp, 24
	andi	$a2, $a2, 1
	bnez	$a2, .LBB87_95
	b	.LBB87_97
.LBB87_118:
	blez	$a0, .LBB87_121
# %bb.119:
	slli.d	$s2, $a0, 2
.Ltmp264:                               # EH_LABEL
	ori	$a1, $zero, 16
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp265:                               # EH_LABEL
	ld.d	$fp, $sp, 8                     # 8-byte Folded Reload
# %bb.120:                              # %.lr.ph.i287
	ori	$a1, $zero, 255
	st.d	$a0, $sp, 80                    # 8-byte Folded Spill
	move	$a2, $s2
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 1340
	bgtz	$a0, .LBB87_122
	b	.LBB87_128
.LBB87_121:
	st.d	$zero, $sp, 80                  # 8-byte Folded Spill
	ld.d	$fp, $sp, 8                     # 8-byte Folded Reload
	ld.w	$a0, $s1, 1340
	blez	$a0, .LBB87_128
.LBB87_122:                             # %.preheader633.lr.ph
	move	$a1, $zero
	ld.d	$a2, $s1, 1352
	ld.d	$a3, $s1, 832
	ori	$a4, $zero, 0
	lu32i.d	$a4, -69905
	lu52i.d	$a4, $a4, -274
	b	.LBB87_124
	.p2align	4, , 16
.LBB87_123:                             # %._crit_edge698
                                        #   in Loop: Header=BB87_124 Depth=1
	addi.d	$a1, $a1, 1
	bge	$a1, $a0, .LBB87_128
.LBB87_124:                             # %.preheader633
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_126 Depth 2
	slli.d	$a5, $a1, 3
	ldx.d	$a5, $a2, $a5
	ld.w	$a6, $a5, 4
	blez	$a6, .LBB87_123
# %bb.125:                              # %.lr.ph697
                                        #   in Loop: Header=BB87_124 Depth=1
	ld.d	$a0, $a5, 16
	move	$a6, $zero
	ld.d	$t0, $sp, 80                    # 8-byte Folded Reload
	.p2align	4, , 16
.LBB87_126:                             #   Parent Loop BB87_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a7, $a0, 0
	sub.d	$a7, $a7, $a3
	srli.d	$a7, $a7, 3
	mul.d	$a7, $a7, $a4
	srai.d	$a7, $a7, 30
	stx.w	$a1, $t0, $a7
	ld.w	$a7, $a5, 4
	addi.d	$a6, $a6, 1
	addi.d	$a0, $a0, 8
	blt	$a6, $a7, .LBB87_126
# %bb.127:                              # %._crit_edge698.loopexit
                                        #   in Loop: Header=BB87_124 Depth=1
	ld.w	$a0, $s1, 1340
	b	.LBB87_123
.LBB87_128:                             # %.preheader632
	ld.w	$a1, $s1, 884
	blez	$a1, .LBB87_163
# %bb.129:                              # %.lr.ph703
	move	$a2, $zero
	lu12i.w	$a0, -69906
	ori	$a0, $a0, 3823
	lu32i.d	$a0, -69906
	lu52i.d	$a0, $a0, -274
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	addi.d	$s5, $sp, 108
	lu12i.w	$a0, -349526
	ori	$s6, $a0, 2731
	lu32i.d	$s6, 0
	ori	$a5, $zero, 120
	b	.LBB87_131
	.p2align	4, , 16
.LBB87_130:                             #   in Loop: Header=BB87_131 Depth=1
	ld.w	$a0, $s1, 884
	ld.d	$a2, $sp, 56                    # 8-byte Folded Reload
	addi.d	$a2, $a2, 1
	bge	$a2, $a0, .LBB87_162
.LBB87_131:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_133 Depth 2
                                        #       Child Loop BB87_137 Depth 3
                                        #         Child Loop BB87_140 Depth 4
                                        #         Child Loop BB87_151 Depth 4
                                        #         Child Loop BB87_154 Depth 4
	ld.d	$a0, $s1, 896
	slli.d	$a1, $a2, 6
	st.d	$a2, $sp, 56                    # 8-byte Folded Spill
	alsl.d	$a1, $a2, $a1, 3
	add.d	$a0, $a0, $a1
	ld.d	$a1, $a0, 16
	ld.d	$a2, $s1, 832
	move	$s7, $zero
	sub.d	$a1, $a1, $a2
	ld.d	$a3, $a0, 24
	srli.d	$a1, $a1, 3
	ld.d	$a4, $sp, 48                    # 8-byte Folded Reload
	mul.d	$a1, $a1, $a4
	st.w	$a1, $sp, 108
	sub.d	$a1, $a3, $a2
	ld.d	$a0, $a0, 32
	srli.d	$a1, $a1, 3
	mul.d	$a1, $a1, $a4
	st.w	$a1, $sp, 112
	sub.d	$a0, $a0, $a2
	srli.d	$a0, $a0, 3
	mul.d	$a0, $a0, $a4
	st.w	$a0, $sp, 116
	b	.LBB87_133
	.p2align	4, , 16
.LBB87_132:                             #   in Loop: Header=BB87_133 Depth=2
	addi.d	$s7, $s7, 1
	ori	$a0, $zero, 3
	beq	$s7, $a0, .LBB87_130
.LBB87_133:                             #   Parent Loop BB87_131 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_137 Depth 3
                                        #         Child Loop BB87_140 Depth 4
                                        #         Child Loop BB87_151 Depth 4
                                        #         Child Loop BB87_154 Depth 4
	slli.d	$a0, $s7, 2
	ldx.w	$a0, $a0, $s5
	slli.d	$a0, $a0, 2
	ld.d	$a1, $sp, 80                    # 8-byte Folded Reload
	ldx.w	$s3, $a1, $a0
	move	$s0, $zero
	ori	$a0, $zero, 1
	slli.d	$fp, $s3, 3
	b	.LBB87_137
.LBB87_134:                             #   in Loop: Header=BB87_137 Depth=3
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
.LBB87_135:                             #   in Loop: Header=BB87_137 Depth=3
	ld.d	$a0, $s4, 16
	slli.d	$a2, $a1, 3
	stx.d	$s8, $a0, $a2
	addi.d	$a0, $a1, 1
	st.w	$a0, $s4, 4
.LBB87_136:                             #   in Loop: Header=BB87_137 Depth=3
	ori	$a0, $zero, 2
	andi	$a1, $s0, 1
	ori	$s0, $zero, 1
	bnez	$a1, .LBB87_132
.LBB87_137:                             #   Parent Loop BB87_131 Depth=1
                                        #     Parent Loop BB87_133 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_140 Depth 4
                                        #         Child Loop BB87_151 Depth 4
                                        #         Child Loop BB87_154 Depth 4
	add.d	$a0, $a0, $s7
	bstrpick.d	$a1, $a0, 31, 0
	mul.d	$a1, $a1, $s6
	srli.d	$a1, $a1, 33
	alsl.d	$a1, $a1, $a1, 1
	sub.w	$a0, $a0, $a1
	slli.d	$a0, $a0, 2
	ldx.w	$a0, $a0, $s5
	slli.d	$a1, $a0, 2
	ld.d	$a2, $sp, 80                    # 8-byte Folded Reload
	ldx.w	$a1, $a2, $a1
	beq	$a1, $s3, .LBB87_136
# %bb.138:                              #   in Loop: Header=BB87_137 Depth=3
	ld.d	$a1, $s1, 1352
	ldx.d	$s4, $a1, $fp
	ld.d	$a2, $s1, 832
	ld.w	$a1, $s4, 4
	mul.d	$a0, $a0, $a5
	add.d	$s8, $a2, $a0
	blez	$a1, .LBB87_143
# %bb.139:                              # %.lr.ph.i308
                                        #   in Loop: Header=BB87_137 Depth=3
	ld.d	$a0, $s4, 16
	move	$a3, $a1
	move	$a2, $a1
	.p2align	4, , 16
.LBB87_140:                             #   Parent Loop BB87_131 Depth=1
                                        #     Parent Loop BB87_133 Depth=2
                                        #       Parent Loop BB87_137 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	ld.d	$a4, $a0, 0
	beq	$a4, $s8, .LBB87_142
# %bb.141:                              #   in Loop: Header=BB87_140 Depth=4
	addi.w	$a2, $a2, -1
	addi.d	$a3, $a3, -1
	addi.d	$a0, $a0, 8
	bnez	$a3, .LBB87_140
	b	.LBB87_143
.LBB87_142:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE16findLinearSearchERKS2_.exit
                                        #   in Loop: Header=BB87_137 Depth=3
	bnez	$a2, .LBB87_136
	.p2align	4, , 16
.LBB87_143:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE16findLinearSearchERKS2_.exit.thread
                                        #   in Loop: Header=BB87_137 Depth=3
	ld.w	$a0, $s4, 8
	bne	$a1, $a0, .LBB87_135
# %bb.144:                              #   in Loop: Header=BB87_137 Depth=3
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s1, $a0, $a2
	bge	$a1, $s1, .LBB87_134
# %bb.145:                              #   in Loop: Header=BB87_137 Depth=3
	beqz	$s1, .LBB87_156
# %bb.146:                              #   in Loop: Header=BB87_137 Depth=3
	slli.d	$a0, $s1, 3
.Ltmp267:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp268:                               # EH_LABEL
# %bb.147:                              # %.noexc333
                                        #   in Loop: Header=BB87_137 Depth=3
	move	$s2, $a0
	ld.w	$a1, $s4, 4
	ld.d	$a0, $s4, 16
	blez	$a1, .LBB87_157
.LBB87_148:                             # %.lr.ph.i.i.i324
                                        #   in Loop: Header=BB87_137 Depth=3
	move	$a2, $zero
	ori	$a3, $zero, 4
	bltu	$a1, $a3, .LBB87_153
# %bb.149:                              # %.lr.ph.i.i.i324
                                        #   in Loop: Header=BB87_137 Depth=3
	sub.d	$a3, $s2, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_153
# %bb.150:                              # %vector.ph1044
                                        #   in Loop: Header=BB87_137 Depth=3
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s2, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_151:                             # %vector.body1047
                                        #   Parent Loop BB87_131 Depth=1
                                        #     Parent Loop BB87_133 Depth=2
                                        #       Parent Loop BB87_137 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_151
# %bb.152:                              # %middle.block1052
                                        #   in Loop: Header=BB87_137 Depth=3
	beq	$a2, $a1, .LBB87_155
.LBB87_153:                             # %scalar.ph1042.preheader
                                        #   in Loop: Header=BB87_137 Depth=3
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s2, 3
	.p2align	4, , 16
.LBB87_154:                             # %scalar.ph1042
                                        #   Parent Loop BB87_131 Depth=1
                                        #     Parent Loop BB87_133 Depth=2
                                        #       Parent Loop BB87_137 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB87_154
.LBB87_155:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.thread.i.i329
                                        #   in Loop: Header=BB87_137 Depth=3
	ld.bu	$a2, $s4, 24
	bnez	$a2, .LBB87_159
	b	.LBB87_161
.LBB87_156:                             #   in Loop: Header=BB87_137 Depth=3
	move	$s2, $zero
	ld.d	$a0, $s4, 16
	bgtz	$a1, .LBB87_148
.LBB87_157:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i318
                                        #   in Loop: Header=BB87_137 Depth=3
	beqz	$a0, .LBB87_161
# %bb.158:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i318
                                        #   in Loop: Header=BB87_137 Depth=3
	ld.b	$a2, $s4, 24
	andi	$a2, $a2, 1
	beqz	$a2, .LBB87_161
.LBB87_159:                             #   in Loop: Header=BB87_137 Depth=3
.Ltmp269:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp270:                               # EH_LABEL
# %bb.160:                              # %.noexc334
                                        #   in Loop: Header=BB87_137 Depth=3
	ld.w	$a1, $s4, 4
.LBB87_161:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE10deallocateEv.exit.i.i321
                                        #   in Loop: Header=BB87_137 Depth=3
	ori	$a0, $zero, 1
	st.b	$a0, $s4, 24
	st.d	$s2, $s4, 16
	st.w	$s1, $s4, 8
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
	ori	$a5, $zero, 120
	b	.LBB87_135
.LBB87_162:                             # %._crit_edge704.loopexit
	ld.w	$a0, $s1, 1340
	ld.d	$fp, $sp, 8                     # 8-byte Folded Reload
.LBB87_163:                             # %._crit_edge704
	ori	$a1, $zero, 2
	blt	$a0, $a1, .LBB87_281
# %bb.164:
.Ltmp272:                               # EH_LABEL
	ori	$a0, $zero, 424
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp273:                               # EH_LABEL
# %bb.165:
	move	$s2, $a0
	ori	$a0, $zero, 1
	st.b	$a0, $s2, 24
	st.d	$zero, $s2, 16
	st.d	$zero, $s2, 4
	st.d	$zero, $s2, 36
	st.d	$zero, $s2, 68
	st.d	$zero, $s2, 384
	vld	$vr0, $sp, 32                   # 16-byte Folded Reload
	vst	$vr0, $s2, 392
	st.d	$fp, $s2, 408
	st.h	$zero, $s2, 416
	ld.w	$s0, $s1, 820
	st.b	$a0, $s2, 56
	st.d	$zero, $s2, 48
	st.b	$a0, $s2, 88
	st.d	$zero, $s2, 80
	blez	$s0, .LBB87_202
# %bb.166:
	slli.d	$a0, $s0, 3
.Ltmp274:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp275:                               # EH_LABEL
# %bb.167:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE8allocateEi.exit.i
	move	$s3, $a0
	ld.w	$a1, $s2, 4
	ld.d	$a0, $s2, 16
	blez	$a1, .LBB87_178
# %bb.168:                              # %.lr.ph.i.i
	ori	$a3, $zero, 4
	move	$a2, $zero
	bltu	$a1, $a3, .LBB87_173
# %bb.169:                              # %.lr.ph.i.i
	sub.d	$a3, $s3, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_173
# %bb.170:                              # %vector.ph1059
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s3, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_171:                             # %vector.body1062
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_171
# %bb.172:                              # %middle.block1067
	beq	$a2, $a1, .LBB87_179
.LBB87_173:                             # %scalar.ph1057.preheader
	sub.d	$a1, $a1, $a2
	alsl.d	$a3, $a2, $a0, 3
	alsl.d	$a2, $a2, $s3, 3
	.p2align	4, , 16
.LBB87_174:                             # %scalar.ph1057
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a3, 0
	st.d	$a4, $a2, 0
	addi.d	$a1, $a1, -1
	addi.d	$a3, $a3, 8
	addi.d	$a2, $a2, 8
	bnez	$a1, .LBB87_174
	b	.LBB87_179
.LBB87_175:                             # %.preheader639.thread
	st.w	$fp, $s1, 1340
	bnez	$fp, .LBB87_300
.LBB87_176:
	move	$a0, $zero
	b	.LBB87_338
.LBB87_177:                             # %..lr.ph.i405_crit_edge
	move	$s5, $s1
	ld.d	$s1, $s1, 1352
	slli.d	$s0, $fp, 3
	b	.LBB87_219
.LBB87_178:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i
	beqz	$a0, .LBB87_182
.LBB87_179:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.thread.i
	ld.bu	$a1, $s2, 24
	beqz	$a1, .LBB87_181
# %bb.180:
.Ltmp276:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp277:                               # EH_LABEL
.LBB87_181:                             # %.noexc338
	st.d	$zero, $s2, 16
.LBB87_182:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE7reserveEi.exit
	ld.w	$a0, $s1, 820
	ori	$fp, $zero, 1
	st.b	$fp, $s2, 24
	st.d	$s3, $s2, 16
	st.w	$s0, $s2, 8
	blez	$a0, .LBB87_202
# %bb.183:                              # %.lr.ph706
	move	$s4, $zero
	ld.w	$a1, $s2, 4
	ori	$s5, $zero, 120
	ori	$s6, $zero, 4
	ori	$s7, $zero, 32
	b	.LBB87_188
.LBB87_184:                             #   in Loop: Header=BB87_188 Depth=1
.Ltmp280:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp281:                               # EH_LABEL
# %bb.185:                              # %.noexc382
                                        #   in Loop: Header=BB87_188 Depth=1
	ld.w	$a1, $s2, 4
.LBB87_186:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE10deallocateEv.exit.i.i369
                                        #   in Loop: Header=BB87_188 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 820
	st.b	$fp, $s2, 24
	st.d	$s3, $s2, 16
	st.w	$s1, $s2, 8
	move	$s0, $s1
.LBB87_187:                             #   in Loop: Header=BB87_188 Depth=1
	mul.d	$a2, $s4, $s5
	add.d	$a2, $s8, $a2
	slli.d	$a3, $a1, 3
	stx.d	$a2, $s3, $a3
	addi.w	$a1, $a1, 1
	addi.d	$s4, $s4, 1
	st.w	$a1, $s2, 4
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
	bge	$s4, $a0, .LBB87_202
.LBB87_188:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_195 Depth 2
                                        #     Child Loop BB87_198 Depth 2
	ld.d	$s8, $s1, 832
	bne	$a1, $s0, .LBB87_187
# %bb.189:                              #   in Loop: Header=BB87_188 Depth=1
	sltui	$a1, $s0, 1
	slli.w	$a2, $s0, 1
	masknez	$a2, $a2, $a1
	maskeqz	$a1, $fp, $a1
	or	$s1, $a1, $a2
	move	$a1, $s0
	bge	$s0, $s1, .LBB87_187
# %bb.190:                              #   in Loop: Header=BB87_188 Depth=1
	slli.d	$a0, $s1, 3
.Ltmp278:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp279:                               # EH_LABEL
# %bb.191:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE8allocateEi.exit.i.i364
                                        #   in Loop: Header=BB87_188 Depth=1
	move	$s3, $a0
	ld.w	$a1, $s2, 4
	ld.d	$a0, $s2, 16
	blez	$a1, .LBB87_200
# %bb.192:                              # %.lr.ph.i.i.i372
                                        #   in Loop: Header=BB87_188 Depth=1
	move	$a2, $zero
	bltu	$a1, $s6, .LBB87_197
# %bb.193:                              # %.lr.ph.i.i.i372
                                        #   in Loop: Header=BB87_188 Depth=1
	sub.d	$a3, $s3, $a0
	bltu	$a3, $s7, .LBB87_197
# %bb.194:                              # %vector.ph1075
                                        #   in Loop: Header=BB87_188 Depth=1
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s3, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_195:                             # %vector.body1078
                                        #   Parent Loop BB87_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_195
# %bb.196:                              # %middle.block1083
                                        #   in Loop: Header=BB87_188 Depth=1
	beq	$a2, $a1, .LBB87_199
.LBB87_197:                             # %scalar.ph1073.preheader
                                        #   in Loop: Header=BB87_188 Depth=1
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s3, 3
	.p2align	4, , 16
.LBB87_198:                             # %scalar.ph1073
                                        #   Parent Loop BB87_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB87_198
.LBB87_199:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.thread.i.i377
                                        #   in Loop: Header=BB87_188 Depth=1
	ld.bu	$a2, $s2, 24
	bnez	$a2, .LBB87_184
	b	.LBB87_186
.LBB87_200:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i366
                                        #   in Loop: Header=BB87_188 Depth=1
	beqz	$a0, .LBB87_186
# %bb.201:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i366
                                        #   in Loop: Header=BB87_188 Depth=1
	ld.b	$a2, $s2, 24
	andi	$a2, $a2, 1
	bnez	$a2, .LBB87_184
	b	.LBB87_186
.LBB87_202:                             # %._crit_edge707
	ld.w	$a1, $s1, 1340
	ld.w	$a0, $s1, 1344
	bne	$a1, $a0, .LBB87_280
# %bb.203:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$fp, $a0, $a2
	bge	$a1, $fp, .LBB87_280
# %bb.204:
	beqz	$fp, .LBB87_274
# %bb.205:
	slli.d	$a0, $fp, 3
.Ltmp283:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp284:                               # EH_LABEL
# %bb.206:                              # %.noexc359
	move	$s3, $a0
	ld.w	$a1, $s1, 1340
	ld.d	$a0, $s1, 1352
	blez	$a1, .LBB87_275
.LBB87_207:                             # %.lr.ph.i.i.i350
	ori	$a3, $zero, 4
	move	$a2, $zero
	bltu	$a1, $a3, .LBB87_212
# %bb.208:                              # %.lr.ph.i.i.i350
	sub.d	$a3, $s3, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_212
# %bb.209:                              # %vector.ph1091
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s3, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_210:                             # %vector.body1094
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_210
# %bb.211:                              # %middle.block1099
	beq	$a2, $a1, .LBB87_214
.LBB87_212:                             # %scalar.ph1089.preheader
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s3, 3
	.p2align	4, , 16
.LBB87_213:                             # %scalar.ph1089
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB87_213
.LBB87_214:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.thread.i.i355
	ld.bu	$a2, $s1, 1360
	bnez	$a2, .LBB87_277
	b	.LBB87_279
.LBB87_215:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.i.i415
	beqz	$a1, .LBB87_218
# %bb.216:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.i.i415
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.b	$a0, $a0, 1360
	andi	$a0, $a0, 1
	beqz	$a0, .LBB87_218
.LBB87_217:
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB87_218:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE10deallocateEv.exit.i.i418
	ori	$a0, $zero, 1
	ld.d	$s5, $sp, 72                    # 8-byte Folded Reload
	st.b	$a0, $s5, 1360
	st.d	$s1, $s5, 1352
	st.w	$fp, $s5, 1344
.LBB87_219:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE6resizeEiRKS2_.exit428
	slli.d	$a1, $s4, 3
	alsl.d	$a0, $s4, $s1, 3
	sub.d	$a2, $s0, $a1
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	st.w	$fp, $s5, 1340
	blez	$fp, .LBB87_222
# %bb.220:                              # %.lr.ph658
	move	$fp, $zero
	move	$s0, $zero
	ori	$s1, $zero, 1
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, 273536
	lu32i.d	$a0, 251658
	lu52i.d	$s2, $a0, 962
	ori	$s3, $zero, 256
	.p2align	4, , 16
.LBB87_221:                             # =>This Inner Loop Header: Depth=1
	ori	$a0, $zero, 424
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	st.b	$s1, $a0, 24
	st.d	$zero, $a0, 4
	st.d	$zero, $a0, 36
	st.d	$zero, $a0, 68
	st.d	$zero, $a0, 384
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vst	$vr0, $a0, 392
	st.d	$s2, $a0, 408
	st.h	$s3, $a0, 416
	ld.d	$a1, $s5, 1352
	st.d	$zero, $a0, 16
	st.b	$s1, $a0, 56
	st.d	$zero, $a0, 48
	stx.d	$a0, $a1, $fp
	ld.w	$a1, $s5, 1340
	st.b	$s1, $a0, 88
	st.d	$zero, $a0, 80
	addi.d	$s0, $s0, 1
	addi.d	$fp, $fp, 8
	blt	$s0, $a1, .LBB87_221
.LBB87_222:                             # %.preheader641
	ld.w	$a0, $s5, 916
	blez	$a0, .LBB87_299
# %bb.223:                              # %.preheader640.lr.ph
	move	$fp, $zero
	ori	$s1, $zero, 1
	ori	$s2, $zero, 4
	b	.LBB87_225
	.p2align	4, , 16
.LBB87_224:                             #   in Loop: Header=BB87_225 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 916
	addi.d	$fp, $fp, 1
	bge	$fp, $a0, .LBB87_299
.LBB87_225:                             # %.preheader640
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_229 Depth 2
                                        #       Child Loop BB87_236 Depth 3
                                        #       Child Loop BB87_239 Depth 3
	move	$s4, $zero
	slli.d	$s5, $fp, 3
	slli.d	$a0, $fp, 7
	alsl.d	$s6, $fp, $a0, 3
	b	.LBB87_229
.LBB87_226:                             #   in Loop: Header=BB87_229 Depth=2
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, 4
.LBB87_227:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE10deallocateEv.exit.i.i437
                                        #   in Loop: Header=BB87_229 Depth=2
	st.b	$s1, $s7, 24
	st.d	$s0, $s7, 16
	st.w	$s3, $s7, 8
.LBB87_228:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE9push_backERKS2_.exit449
                                        #   in Loop: Header=BB87_229 Depth=2
	add.d	$a0, $s8, $s6
	alsl.d	$a0, $s4, $a0, 3
	addi.d	$a0, $a0, 16
	ld.d	$a2, $s7, 16
	ld.d	$a0, $a0, 0
	slli.d	$a3, $a1, 3
	stx.d	$a0, $a2, $a3
	addi.d	$a0, $a1, 1
	addi.d	$s4, $s4, 1
	st.w	$a0, $s7, 4
	beq	$s4, $s2, .LBB87_224
.LBB87_229:                             #   Parent Loop BB87_225 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_236 Depth 3
                                        #       Child Loop BB87_239 Depth 3
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a0, $a2, 1352
	ldx.d	$s7, $a0, $s5
	ld.w	$a1, $s7, 4
	ld.w	$a0, $s7, 8
	ld.d	$s8, $a2, 928
	bne	$a1, $a0, .LBB87_228
# %bb.230:                              #   in Loop: Header=BB87_229 Depth=2
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	maskeqz	$a0, $s1, $a0
	or	$s3, $a0, $a2
	bge	$a1, $s3, .LBB87_228
# %bb.231:                              #   in Loop: Header=BB87_229 Depth=2
	beqz	$s3, .LBB87_241
# %bb.232:                              #   in Loop: Header=BB87_229 Depth=2
	slli.d	$a0, $s3, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s7, 4
	move	$s0, $a0
	ld.d	$a0, $s7, 16
	blez	$a1, .LBB87_242
.LBB87_233:                             # %.lr.ph.i.i.i440
                                        #   in Loop: Header=BB87_229 Depth=2
	move	$a2, $zero
	bltu	$a1, $s2, .LBB87_238
# %bb.234:                              # %.lr.ph.i.i.i440
                                        #   in Loop: Header=BB87_229 Depth=2
	sub.d	$a3, $s0, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_238
# %bb.235:                              # %vector.ph954
                                        #   in Loop: Header=BB87_229 Depth=2
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_236:                             # %vector.body957
                                        #   Parent Loop BB87_225 Depth=1
                                        #     Parent Loop BB87_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_236
# %bb.237:                              # %middle.block962
                                        #   in Loop: Header=BB87_229 Depth=2
	beq	$a2, $a1, .LBB87_240
.LBB87_238:                             # %scalar.ph952.preheader
                                        #   in Loop: Header=BB87_229 Depth=2
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s0, 3
	.p2align	4, , 16
.LBB87_239:                             # %scalar.ph952
                                        #   Parent Loop BB87_225 Depth=1
                                        #     Parent Loop BB87_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB87_239
.LBB87_240:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.thread.i.i445
                                        #   in Loop: Header=BB87_229 Depth=2
	ld.bu	$a2, $s7, 24
	bnez	$a2, .LBB87_226
	b	.LBB87_227
.LBB87_241:                             #   in Loop: Header=BB87_229 Depth=2
	move	$s0, $zero
	ld.d	$a0, $s7, 16
	bgtz	$a1, .LBB87_233
.LBB87_242:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i434
                                        #   in Loop: Header=BB87_229 Depth=2
	beqz	$a0, .LBB87_227
# %bb.243:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i434
                                        #   in Loop: Header=BB87_229 Depth=2
	ld.b	$a2, $s7, 24
	andi	$a2, $a2, 1
	bnez	$a2, .LBB87_226
	b	.LBB87_227
.LBB87_244:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE8allocateEi.exit.i.i458.thread
	ld.d	$a1, $s1, 1352
	move	$s0, $zero
.LBB87_245:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.i.i460
	beqz	$a1, .LBB87_248
# %bb.246:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.i.i460
	ld.b	$a0, $s1, 1360
	andi	$a0, $a0, 1
	beqz	$a0, .LBB87_248
.LBB87_247:
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB87_248:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE10deallocateEv.exit.i.i463
	ori	$a0, $zero, 1
	st.b	$a0, $s1, 1360
	st.d	$s0, $s1, 1352
	st.w	$fp, $s1, 1344
.LBB87_249:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE6resizeEiRKS2_.exit473
	ld.d	$a0, $s1, 1352
	alsl.d	$a0, $s4, $a0, 3
	sub.d	$a1, $fp, $s4
	slli.d	$a2, $a1, 3
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	st.w	$fp, $s1, 1340
	move	$s4, $s1
	blez	$fp, .LBB87_252
# %bb.250:                              # %.lr.ph662
	move	$fp, $zero
	move	$s0, $zero
	ori	$s1, $zero, 1
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 80                   # 16-byte Folded Spill
	lu12i.w	$a0, 273536
	lu32i.d	$a0, 251658
	lu52i.d	$s2, $a0, 962
	ori	$s3, $zero, 256
	.p2align	4, , 16
.LBB87_251:                             # =>This Inner Loop Header: Depth=1
	ori	$a0, $zero, 424
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	st.b	$s1, $a0, 24
	st.d	$zero, $a0, 4
	st.d	$zero, $a0, 36
	st.d	$zero, $a0, 68
	st.d	$zero, $a0, 384
	vld	$vr0, $sp, 80                   # 16-byte Folded Reload
	vst	$vr0, $a0, 392
	st.d	$s2, $a0, 408
	st.h	$s3, $a0, 416
	ld.d	$a1, $s4, 1352
	st.d	$zero, $a0, 16
	st.b	$s1, $a0, 56
	st.d	$zero, $a0, 48
	stx.d	$a0, $a1, $fp
	ld.w	$a1, $s4, 1340
	st.b	$s1, $a0, 88
	st.d	$zero, $a0, 80
	addi.d	$s0, $s0, 1
	addi.d	$fp, $fp, 8
	blt	$s0, $a1, .LBB87_251
.LBB87_252:                             # %.preheader639
	ld.w	$a0, $s4, 884
	blez	$a0, .LBB87_299
# %bb.253:                              # %.preheader638.lr.ph
	move	$fp, $zero
	ori	$s1, $zero, 1
	ori	$s4, $zero, 3
	b	.LBB87_255
	.p2align	4, , 16
.LBB87_254:                             #   in Loop: Header=BB87_255 Depth=1
	ld.d	$a0, $sp, 72                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 884
	addi.d	$fp, $fp, 1
	bge	$fp, $a0, .LBB87_299
.LBB87_255:                             # %.preheader638
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_259 Depth 2
                                        #       Child Loop BB87_266 Depth 3
                                        #       Child Loop BB87_269 Depth 3
	move	$s5, $zero
	slli.d	$s6, $fp, 3
	slli.d	$a0, $fp, 6
	alsl.d	$s7, $fp, $a0, 3
	b	.LBB87_259
.LBB87_256:                             #   in Loop: Header=BB87_259 Depth=2
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s8, 4
.LBB87_257:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE10deallocateEv.exit.i.i482
                                        #   in Loop: Header=BB87_259 Depth=2
	st.b	$s1, $s8, 24
	st.d	$s0, $s8, 16
	st.w	$s2, $s8, 8
.LBB87_258:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE9push_backERKS2_.exit494
                                        #   in Loop: Header=BB87_259 Depth=2
	add.d	$a0, $s3, $s7
	alsl.d	$a0, $s5, $a0, 3
	addi.d	$a0, $a0, 16
	ld.d	$a2, $s8, 16
	ld.d	$a0, $a0, 0
	slli.d	$a3, $a1, 3
	stx.d	$a0, $a2, $a3
	addi.d	$a0, $a1, 1
	addi.d	$s5, $s5, 1
	st.w	$a0, $s8, 4
	beq	$s5, $s4, .LBB87_254
.LBB87_259:                             #   Parent Loop BB87_255 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_266 Depth 3
                                        #       Child Loop BB87_269 Depth 3
	ld.d	$a2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$a0, $a2, 1352
	ldx.d	$s8, $a0, $s6
	ld.w	$a1, $s8, 4
	ld.w	$a0, $s8, 8
	ld.d	$s3, $a2, 896
	bne	$a1, $a0, .LBB87_258
# %bb.260:                              #   in Loop: Header=BB87_259 Depth=2
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	maskeqz	$a0, $s1, $a0
	or	$s2, $a0, $a2
	bge	$a1, $s2, .LBB87_258
# %bb.261:                              #   in Loop: Header=BB87_259 Depth=2
	beqz	$s2, .LBB87_271
# %bb.262:                              #   in Loop: Header=BB87_259 Depth=2
	slli.d	$a0, $s2, 3
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s8, 4
	move	$s0, $a0
	ld.d	$a0, $s8, 16
	blez	$a1, .LBB87_272
.LBB87_263:                             # %.lr.ph.i.i.i485
                                        #   in Loop: Header=BB87_259 Depth=2
	move	$a2, $zero
	ori	$a3, $zero, 4
	bltu	$a1, $a3, .LBB87_268
# %bb.264:                              # %.lr.ph.i.i.i485
                                        #   in Loop: Header=BB87_259 Depth=2
	sub.d	$a3, $s0, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB87_268
# %bb.265:                              # %vector.ph985
                                        #   in Loop: Header=BB87_259 Depth=2
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_266:                             # %vector.body988
                                        #   Parent Loop BB87_255 Depth=1
                                        #     Parent Loop BB87_259 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_266
# %bb.267:                              # %middle.block993
                                        #   in Loop: Header=BB87_259 Depth=2
	beq	$a2, $a1, .LBB87_270
.LBB87_268:                             # %scalar.ph983.preheader
                                        #   in Loop: Header=BB87_259 Depth=2
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s0, 3
	.p2align	4, , 16
.LBB87_269:                             # %scalar.ph983
                                        #   Parent Loop BB87_255 Depth=1
                                        #     Parent Loop BB87_259 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB87_269
.LBB87_270:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.thread.i.i490
                                        #   in Loop: Header=BB87_259 Depth=2
	ld.bu	$a2, $s8, 24
	bnez	$a2, .LBB87_256
	b	.LBB87_257
.LBB87_271:                             #   in Loop: Header=BB87_259 Depth=2
	move	$s0, $zero
	ld.d	$a0, $s8, 16
	bgtz	$a1, .LBB87_263
.LBB87_272:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i479
                                        #   in Loop: Header=BB87_259 Depth=2
	beqz	$a0, .LBB87_257
# %bb.273:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody4NodeEE4copyEiiPS2_.exit.i.i479
                                        #   in Loop: Header=BB87_259 Depth=2
	ld.b	$a2, $s8, 24
	andi	$a2, $a2, 1
	bnez	$a2, .LBB87_256
	b	.LBB87_257
.LBB87_274:
	move	$s3, $zero
	ld.d	$a0, $s1, 1352
	bgtz	$a1, .LBB87_207
.LBB87_275:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.i.i344
	beqz	$a0, .LBB87_279
# %bb.276:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE4copyEiiPS2_.exit.i.i344
	ld.b	$a2, $s1, 1360
	andi	$a2, $a2, 1
	beqz	$a2, .LBB87_279
.LBB87_277:
.Ltmp285:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp286:                               # EH_LABEL
# %bb.278:                              # %.noexc360
	ld.w	$a1, $s1, 1340
.LBB87_279:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody7ClusterEE10deallocateEv.exit.i.i347
	ori	$a0, $zero, 1
	st.b	$a0, $s1, 1360
	st.d	$s3, $s1, 1352
	st.w	$fp, $s1, 1344
.LBB87_280:
	ld.d	$a2, $s1, 1352
	slli.d	$a3, $a1, 3
	stx.d	$s2, $a2, $a3
	ld.d	$a4, $a2, 0
	addi.w	$a0, $a1, 1
	st.w	$a0, $s1, 1340
	st.d	$s2, $a2, 0
	stx.d	$a4, $a2, $a3
.LBB87_281:
	blez	$a0, .LBB87_295
# %bb.282:                              # %.lr.ph710
	move	$fp, $zero
	addi.d	$s2, $s1, 1272
	b	.LBB87_284
	.p2align	4, , 16
.LBB87_283:                             # %_ZN10btSoftBody14releaseClusterEi.exit
                                        #   in Loop: Header=BB87_284 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a0, .LBB87_295
.LBB87_284:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_291 Depth 2
	ld.d	$a1, $s1, 1352
	slli.d	$a2, $fp, 3
	ldx.d	$s3, $a1, $a2
	ld.w	$a1, $s3, 4
	bnez	$a1, .LBB87_283
# %bb.285:                              #   in Loop: Header=BB87_284 Depth=1
	ld.d	$a1, $s3, 384
	beqz	$a1, .LBB87_287
# %bb.286:                              #   in Loop: Header=BB87_284 Depth=1
.Ltmp288:                               # EH_LABEL
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_ZN6btDbvt6removeEP10btDbvtNode)
	jirl	$ra, $ra, 0
.Ltmp289:                               # EH_LABEL
.LBB87_287:                             # %.noexc389
                                        #   in Loop: Header=BB87_284 Depth=1
.Ltmp290:                               # EH_LABEL
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_ZN10btSoftBody7ClusterD2Ev)
	jirl	$ra, $ra, 0
.Ltmp291:                               # EH_LABEL
# %bb.288:                              # %.noexc390
                                        #   in Loop: Header=BB87_284 Depth=1
.Ltmp292:                               # EH_LABEL
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp293:                               # EH_LABEL
# %bb.289:                              # %.noexc391
                                        #   in Loop: Header=BB87_284 Depth=1
	ld.w	$a0, $s1, 1340
	addi.d	$fp, $fp, -1
	blez	$a0, .LBB87_283
# %bb.290:                              # %.lr.ph.i.i.i384
                                        #   in Loop: Header=BB87_284 Depth=1
	ld.d	$a1, $s1, 1352
	move	$a3, $zero
	move	$a4, $a0
	move	$a2, $a1
	.p2align	4, , 16
.LBB87_291:                             #   Parent Loop BB87_284 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a5, $a2, 0
	beq	$a5, $s3, .LBB87_293
# %bb.292:                              #   in Loop: Header=BB87_291 Depth=2
	addi.d	$a2, $a2, 8
	addi.d	$a4, $a4, -1
	addi.w	$a3, $a3, 1
	bnez	$a4, .LBB87_291
	b	.LBB87_283
.LBB87_293:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody7ClusterEE16findLinearSearchERKS2_.exit.i.i
                                        #   in Loop: Header=BB87_284 Depth=1
	bge	$a3, $a0, .LBB87_283
# %bb.294:                              #   in Loop: Header=BB87_284 Depth=1
	addi.w	$a0, $a0, -1
	slli.d	$a3, $a0, 3
	ldx.d	$a4, $a1, $a3
	ld.d	$a5, $a2, 0
	st.d	$a4, $a2, 0
	stx.d	$a5, $a1, $a3
	st.w	$a0, $s1, 1340
	b	.LBB87_283
.LBB87_295:                             # %._crit_edge711
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	beqz	$a0, .LBB87_297
# %bb.296:
.Ltmp297:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp298:                               # EH_LABEL
.LBB87_297:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	beqz	$a0, .LBB87_299
# %bb.298:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB87_299:                             # %_ZN20btAlignedObjectArrayI9btVector3ED2Ev.exitthread-pre-split
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
	ld.w	$fp, $s1, 1340
	beqz	$fp, .LBB87_176
.LBB87_300:
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN10btSoftBody18initializeClustersEv)
	jirl	$ra, $ra, 0
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN10btSoftBody14updateClustersEv)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s1, 1340
	ld.w	$fp, $s1, 1372
	mul.w	$s0, $a0, $a0
	bge	$fp, $s0, .LBB87_325
# %bb.301:
	ld.w	$a1, $s1, 1376
	bge	$a1, $s0, .LBB87_311
# %bb.302:
	beqz	$a0, .LBB87_312
# %bb.303:
	ori	$a1, $zero, 16
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s1, 1372
	move	$a2, $s1
	move	$s1, $a0
	ld.d	$a0, $a2, 1384
	blez	$a1, .LBB87_313
.LBB87_304:                             # %iter.check
	ori	$a3, $zero, 16
	move	$a2, $zero
	bltu	$a1, $a3, .LBB87_319
# %bb.305:                              # %iter.check
	sub.d	$a4, $s1, $a0
	ori	$a3, $zero, 32
	bltu	$a4, $a3, .LBB87_319
# %bb.306:                              # %vector.main.loop.iter.check
	bgeu	$a1, $a3, .LBB87_315
# %bb.307:
	move	$a2, $zero
.LBB87_308:                             # %vec.epilog.ph
	move	$a5, $a2
	bstrpick.d	$a2, $a1, 30, 4
	slli.d	$a2, $a2, 4
	sub.d	$a3, $a5, $a2
	add.d	$a4, $a0, $a5
	add.d	$a5, $s1, $a5
	.p2align	4, , 16
.LBB87_309:                             # %vec.epilog.vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a4, 0
	vst	$vr0, $a5, 0
	addi.d	$a3, $a3, 16
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a5, 16
	bnez	$a3, .LBB87_309
# %bb.310:                              # %vec.epilog.middle.block
	bne	$a2, $a1, .LBB87_319
	b	.LBB87_321
.LBB87_311:                             # %..lr.ph.i495_crit_edge
	move	$s2, $a0
	ld.d	$s1, $s1, 1384
	b	.LBB87_324
.LBB87_312:
	move	$a2, $s1
	move	$s1, $zero
	move	$a1, $fp
	ld.d	$a0, $a2, 1384
	bgtz	$a1, .LBB87_304
.LBB87_313:                             # %_ZNK20btAlignedObjectArrayIbE4copyEiiPb.exit.i.i
	beqz	$a0, .LBB87_323
# %bb.314:                              # %_ZNK20btAlignedObjectArrayIbE4copyEiiPb.exit.i.i
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	ld.b	$a1, $a1, 1392
	andi	$a1, $a1, 1
	bnez	$a1, .LBB87_322
	b	.LBB87_323
.LBB87_315:                             # %vector.ph1109
	bstrpick.d	$a2, $a1, 30, 5
	slli.d	$a2, $a2, 5
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s1, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB87_316:                             # %vector.body1112
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -32
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB87_316
# %bb.317:                              # %middle.block1117
	beq	$a2, $a1, .LBB87_321
# %bb.318:                              # %vec.epilog.iter.check
	andi	$a3, $a1, 16
	bnez	$a3, .LBB87_308
.LBB87_319:                             # %vec.epilog.scalar.ph.preheader
	sub.d	$a1, $a1, $a2
	add.d	$a3, $a0, $a2
	add.d	$a2, $s1, $a2
	.p2align	4, , 16
.LBB87_320:                             # %vec.epilog.scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.b	$a4, $a3, 0
	st.b	$a4, $a2, 0
	addi.d	$a1, $a1, -1
	addi.d	$a3, $a3, 1
	addi.d	$a2, $a2, 1
	bnez	$a1, .LBB87_320
.LBB87_321:                             # %_ZNK20btAlignedObjectArrayIbE4copyEiiPb.exit.thread.i.i
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	ld.bu	$a1, $a1, 1392
	beqz	$a1, .LBB87_323
.LBB87_322:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB87_323:                             # %_ZN20btAlignedObjectArrayIbE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.d	$a1, $sp, 72                    # 8-byte Folded Reload
	ld.w	$s2, $a1, 1340
	st.b	$a0, $a1, 1392
	st.d	$s1, $a1, 1384
	st.w	$s0, $a1, 1376
.LBB87_324:                             # %.lr.ph.i495
	add.d	$a0, $s1, $fp
	sub.d	$a2, $s0, $fp
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	move	$a0, $s2
	ld.d	$s1, $sp, 72                    # 8-byte Folded Reload
.LBB87_325:                             # %_ZN20btAlignedObjectArrayIbE6resizeEiRKb.exit
	st.w	$s0, $s1, 1372
	blez	$a0, .LBB87_338
# %bb.326:                              # %.lr.ph725
	ld.d	$a1, $s1, 1352
	ld.d	$a2, $s1, 1384
	move	$a3, $zero
	b	.LBB87_328
	.p2align	4, , 16
.LBB87_327:                             # %._crit_edge723
                                        #   in Loop: Header=BB87_328 Depth=1
	addi.d	$a3, $a3, 1
	beq	$a3, $a0, .LBB87_338
.LBB87_328:                             # %.lr.ph722
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_331 Depth 2
                                        #       Child Loop BB87_334 Depth 3
                                        #         Child Loop BB87_336 Depth 4
	slli.d	$a4, $a3, 3
	ldx.d	$a4, $a1, $a4
	ld.w	$a5, $a4, 4
	move	$a6, $zero
	st.w	$a3, $a4, 420
	srai.d	$a7, $a5, 63
	andn	$a7, $a5, $a7
	add.d	$t0, $a2, $a3
	b	.LBB87_331
	.p2align	4, , 16
.LBB87_329:                             #   in Loop: Header=BB87_331 Depth=2
	move	$t1, $zero
.LBB87_330:                             # %.critedge
                                        #   in Loop: Header=BB87_331 Depth=2
	slt	$t1, $t1, $a5
	mul.d	$t2, $a6, $a0
	addi.d	$a6, $a6, 1
	stx.b	$t1, $t0, $t2
	beq	$a6, $a0, .LBB87_327
.LBB87_331:                             #   Parent Loop BB87_328 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_334 Depth 3
                                        #         Child Loop BB87_336 Depth 4
	blez	$a5, .LBB87_329
# %bb.332:                              # %.preheader.preheader
                                        #   in Loop: Header=BB87_331 Depth=2
	slli.d	$t1, $a6, 3
	ldx.d	$t2, $a1, $t1
	ld.wu	$t3, $t2, 4
	move	$t1, $zero
	addi.w	$t4, $t3, 0
	b	.LBB87_334
	.p2align	4, , 16
.LBB87_333:                             # %._crit_edge714
                                        #   in Loop: Header=BB87_334 Depth=3
	addi.d	$t1, $t1, 1
	beq	$t1, $a7, .LBB87_330
.LBB87_334:                             # %.preheader
                                        #   Parent Loop BB87_328 Depth=1
                                        #     Parent Loop BB87_331 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_336 Depth 4
	blez	$t4, .LBB87_333
# %bb.335:                              # %.lr.ph713
                                        #   in Loop: Header=BB87_334 Depth=3
	ld.d	$t5, $a4, 16
	slli.d	$t6, $t1, 3
	ldx.d	$t5, $t5, $t6
	ld.d	$t6, $t2, 16
	move	$t7, $t3
	.p2align	4, , 16
.LBB87_336:                             #   Parent Loop BB87_328 Depth=1
                                        #     Parent Loop BB87_331 Depth=2
                                        #       Parent Loop BB87_334 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	ld.d	$t8, $t6, 0
	beq	$t5, $t8, .LBB87_330
# %bb.337:                              #   in Loop: Header=BB87_336 Depth=4
	addi.d	$t7, $t7, -1
	addi.d	$t6, $t6, 8
	bnez	$t7, .LBB87_336
	b	.LBB87_333
.LBB87_338:                             # %.loopexit
	fld.d	$fs7, $sp, 120                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 128                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 136                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 144                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 152                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 160                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 168                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 176                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 184                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 216                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 224                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 232                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 240                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 248                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 256                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 264                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 272
	ret
.LBB87_339:
.Ltmp299:                               # EH_LABEL
	move	$fp, $a0
	b	.LBB87_349
.LBB87_340:                             # %.thread
.Ltmp266:                               # EH_LABEL
	move	$fp, $a0
	b	.LBB87_349
.LBB87_341:
.Ltmp287:                               # EH_LABEL
	b	.LBB87_347
.LBB87_342:
.Ltmp282:                               # EH_LABEL
	b	.LBB87_347
.LBB87_343:
.Ltmp294:                               # EH_LABEL
	b	.LBB87_347
.LBB87_344:
.Ltmp258:                               # EH_LABEL
	move	$fp, $a0
	b	.LBB87_350
.LBB87_345:
.Ltmp263:                               # EH_LABEL
	move	$fp, $a0
	b	.LBB87_350
.LBB87_346:
.Ltmp271:                               # EH_LABEL
.LBB87_347:
	move	$fp, $a0
	ld.d	$a0, $sp, 80                    # 8-byte Folded Reload
	beqz	$a0, .LBB87_349
# %bb.348:
.Ltmp295:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp296:                               # EH_LABEL
.LBB87_349:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit400
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	beqz	$a0, .LBB87_351
.LBB87_350:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit400.thread624
.Ltmp300:                               # EH_LABEL
	ld.d	$a0, $sp, 64                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp301:                               # EH_LABEL
.LBB87_351:                             # %_ZN20btAlignedObjectArrayI9btVector3ED2Ev.exit404
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB87_352:
.Ltmp302:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end87:
	.size	_ZN10btSoftBody16generateClustersEii, .Lfunc_end87-_ZN10btSoftBody16generateClustersEii
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table87:
.Lexception9:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase7-.Lttbaseref7
.Lttbaseref7:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end9-.Lcst_begin9
.Lcst_begin9:
	.uleb128 .Lfunc_begin9-.Lfunc_begin9    # >> Call Site 1 <<
	.uleb128 .Ltmp256-.Lfunc_begin9         #   Call between .Lfunc_begin9 and .Ltmp256
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp256-.Lfunc_begin9         # >> Call Site 2 <<
	.uleb128 .Ltmp257-.Ltmp256              #   Call between .Ltmp256 and .Ltmp257
	.uleb128 .Ltmp258-.Lfunc_begin9         #     jumps to .Ltmp258
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp261-.Lfunc_begin9         # >> Call Site 3 <<
	.uleb128 .Ltmp260-.Ltmp261              #   Call between .Ltmp261 and .Ltmp260
	.uleb128 .Ltmp263-.Lfunc_begin9         #     jumps to .Ltmp263
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp264-.Lfunc_begin9         # >> Call Site 4 <<
	.uleb128 .Ltmp265-.Ltmp264              #   Call between .Ltmp264 and .Ltmp265
	.uleb128 .Ltmp266-.Lfunc_begin9         #     jumps to .Ltmp266
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp265-.Lfunc_begin9         # >> Call Site 5 <<
	.uleb128 .Ltmp267-.Ltmp265              #   Call between .Ltmp265 and .Ltmp267
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp267-.Lfunc_begin9         # >> Call Site 6 <<
	.uleb128 .Ltmp270-.Ltmp267              #   Call between .Ltmp267 and .Ltmp270
	.uleb128 .Ltmp271-.Lfunc_begin9         #     jumps to .Ltmp271
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp272-.Lfunc_begin9         # >> Call Site 7 <<
	.uleb128 .Ltmp277-.Ltmp272              #   Call between .Ltmp272 and .Ltmp277
	.uleb128 .Ltmp287-.Lfunc_begin9         #     jumps to .Ltmp287
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp280-.Lfunc_begin9         # >> Call Site 8 <<
	.uleb128 .Ltmp279-.Ltmp280              #   Call between .Ltmp280 and .Ltmp279
	.uleb128 .Ltmp282-.Lfunc_begin9         #     jumps to .Ltmp282
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp283-.Lfunc_begin9         # >> Call Site 9 <<
	.uleb128 .Ltmp284-.Ltmp283              #   Call between .Ltmp283 and .Ltmp284
	.uleb128 .Ltmp287-.Lfunc_begin9         #     jumps to .Ltmp287
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp284-.Lfunc_begin9         # >> Call Site 10 <<
	.uleb128 .Ltmp285-.Ltmp284              #   Call between .Ltmp284 and .Ltmp285
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp285-.Lfunc_begin9         # >> Call Site 11 <<
	.uleb128 .Ltmp286-.Ltmp285              #   Call between .Ltmp285 and .Ltmp286
	.uleb128 .Ltmp287-.Lfunc_begin9         #     jumps to .Ltmp287
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp288-.Lfunc_begin9         # >> Call Site 12 <<
	.uleb128 .Ltmp293-.Ltmp288              #   Call between .Ltmp288 and .Ltmp293
	.uleb128 .Ltmp294-.Lfunc_begin9         #     jumps to .Ltmp294
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp297-.Lfunc_begin9         # >> Call Site 13 <<
	.uleb128 .Ltmp298-.Ltmp297              #   Call between .Ltmp297 and .Ltmp298
	.uleb128 .Ltmp299-.Lfunc_begin9         #     jumps to .Ltmp299
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp298-.Lfunc_begin9         # >> Call Site 14 <<
	.uleb128 .Ltmp295-.Ltmp298              #   Call between .Ltmp298 and .Ltmp295
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp295-.Lfunc_begin9         # >> Call Site 15 <<
	.uleb128 .Ltmp301-.Ltmp295              #   Call between .Ltmp295 and .Ltmp301
	.uleb128 .Ltmp302-.Lfunc_begin9         #     jumps to .Ltmp302
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp301-.Lfunc_begin9         # >> Call Site 16 <<
	.uleb128 .Lfunc_end87-.Ltmp301          #   Call between .Ltmp301 and .Lfunc_end87
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end9:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase7:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayI9btVector3ED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayI9btVector3ED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayI9btVector3ED2Ev # -- Begin function _ZN20btAlignedObjectArrayI9btVector3ED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayI9btVector3ED2Ev,@function
_ZN20btAlignedObjectArrayI9btVector3ED2Ev: # @_ZN20btAlignedObjectArrayI9btVector3ED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB88_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB88_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB88_3:                               # %_ZN20btAlignedObjectArrayI9btVector3E5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end88:
	.size	_ZN20btAlignedObjectArrayI9btVector3ED2Ev, .Lfunc_end88-_ZN20btAlignedObjectArrayI9btVector3ED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody18initializeClustersEv
.LCPI89_0:
	.word	0x5d5e0b6b                      # float 9.99999984E+17
	.text
	.globl	_ZN10btSoftBody18initializeClustersEv
	.p2align	5
	.type	_ZN10btSoftBody18initializeClustersEv,@function
_ZN10btSoftBody18initializeClustersEv:  # @_ZN10btSoftBody18initializeClustersEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -128
	.cfi_def_cfa_offset 128
	st.d	$ra, $sp, 120                   # 8-byte Folded Spill
	st.d	$fp, $sp, 112                   # 8-byte Folded Spill
	st.d	$s0, $sp, 104                   # 8-byte Folded Spill
	st.d	$s1, $sp, 96                    # 8-byte Folded Spill
	st.d	$s2, $sp, 88                    # 8-byte Folded Spill
	st.d	$s3, $sp, 80                    # 8-byte Folded Spill
	st.d	$s4, $sp, 72                    # 8-byte Folded Spill
	st.d	$s5, $sp, 64                    # 8-byte Folded Spill
	st.d	$s6, $sp, 56                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	move	$fp, $a0
	ld.w	$a0, $a0, 1340
	blez	$a0, .LBB89_49
# %bb.1:                                # %.lr.ph180
	move	$s1, $zero
	ori	$s2, $zero, 8
	ori	$s4, $zero, 1
	movgr2fr.w	$fs0, $zero
	vrepli.b	$vr17, 0
	lu12i.w	$s5, 260096
	vst	$vr17, $sp, 16                  # 16-byte Folded Spill
	b	.LBB89_3
	.p2align	4, , 16
.LBB89_2:                               # %._crit_edge177
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.w	$a0, $fp, 1340
	addi.d	$s1, $s1, 1
	bge	$s1, $a0, .LBB89_49
.LBB89_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_10 Depth 2
                                        #     Child Loop BB89_13 Depth 2
                                        #     Child Loop BB89_26 Depth 2
                                        #     Child Loop BB89_29 Depth 2
                                        #     Child Loop BB89_33 Depth 2
                                        #     Child Loop BB89_41 Depth 2
                                        #     Child Loop BB89_48 Depth 2
	ld.d	$a0, $fp, 1352
	slli.d	$a1, $s1, 3
	ldx.d	$s6, $a0, $a1
	ld.w	$s8, $s6, 4
	ld.w	$s3, $s6, 36
	st.w	$zero, $s6, 164
	move	$s7, $s8
	bge	$s3, $s8, .LBB89_22
# %bb.4:                                #   in Loop: Header=BB89_3 Depth=1
	ld.w	$a0, $s6, 40
	bge	$a0, $s8, .LBB89_15
# %bb.5:                                #   in Loop: Header=BB89_3 Depth=1
	beqz	$s8, .LBB89_16
# %bb.6:                                #   in Loop: Header=BB89_3 Depth=1
	slli.d	$a0, $s8, 2
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s6, 36
	move	$s0, $a0
	ld.d	$a0, $s6, 48
	blez	$a1, .LBB89_17
.LBB89_7:                               # %.lr.ph.i.i.i
                                        #   in Loop: Header=BB89_3 Depth=1
	move	$a2, $zero
	bltu	$a1, $s2, .LBB89_12
# %bb.8:                                # %.lr.ph.i.i.i
                                        #   in Loop: Header=BB89_3 Depth=1
	sub.d	$a3, $s0, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB89_12
# %bb.9:                                # %vector.ph
                                        #   in Loop: Header=BB89_3 Depth=1
	bstrpick.d	$a2, $a1, 30, 3
	slli.d	$a2, $a2, 3
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s0, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB89_10:                              # %vector.body
                                        #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB89_10
# %bb.11:                               # %middle.block
                                        #   in Loop: Header=BB89_3 Depth=1
	beq	$a2, $a1, .LBB89_14
.LBB89_12:                              # %scalar.ph.preheader
                                        #   in Loop: Header=BB89_3 Depth=1
	sub.d	$a1, $a1, $a2
	alsl.d	$a3, $a2, $a0, 2
	alsl.d	$a2, $a2, $s0, 2
	.p2align	4, , 16
.LBB89_13:                              # %scalar.ph
                                        #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa0, $a3, 0
	fst.s	$fa0, $a2, 0
	addi.d	$a1, $a1, -1
	addi.d	$a3, $a3, 4
	addi.d	$a2, $a2, 4
	bnez	$a1, .LBB89_13
.LBB89_14:                              # %_ZNK20btAlignedObjectArrayIfE4copyEiiPf.exit.thread.i.i
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.bu	$a1, $s6, 56
	bnez	$a1, .LBB89_19
	b	.LBB89_20
	.p2align	4, , 16
.LBB89_15:                              # %..lr.ph.i_crit_edge
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.d	$s0, $s6, 48
	move	$s7, $s8
	b	.LBB89_21
.LBB89_16:                              #   in Loop: Header=BB89_3 Depth=1
	move	$s0, $zero
	move	$a1, $s3
	ld.d	$a0, $s6, 48
	bgtz	$a1, .LBB89_7
.LBB89_17:                              # %_ZNK20btAlignedObjectArrayIfE4copyEiiPf.exit.i.i
                                        #   in Loop: Header=BB89_3 Depth=1
	beqz	$a0, .LBB89_20
# %bb.18:                               # %_ZNK20btAlignedObjectArrayIfE4copyEiiPf.exit.i.i
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.b	$a1, $s6, 56
	andi	$a1, $a1, 1
	beqz	$a1, .LBB89_20
.LBB89_19:                              #   in Loop: Header=BB89_3 Depth=1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB89_20:                              # %_ZN20btAlignedObjectArrayIfE10deallocateEv.exit.i.i
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.w	$s7, $s6, 4
	st.b	$s4, $s6, 56
	st.d	$s0, $s6, 48
	st.w	$s8, $s6, 40
.LBB89_21:                              # %.lr.ph.i
                                        #   in Loop: Header=BB89_3 Depth=1
	alsl.d	$a0, $s3, $s0, 2
	sub.d	$a1, $s8, $s3
	slli.d	$a2, $a1, 2
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	vld	$vr17, $sp, 16                  # 16-byte Folded Reload
.LBB89_22:                              # %_ZN20btAlignedObjectArrayIfE6resizeEiRKf.exit
                                        #   in Loop: Header=BB89_3 Depth=1
	st.w	$s8, $s6, 36
	blez	$s7, .LBB89_30
# %bb.23:                               # %.lr.ph
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.d	$a0, $s6, 16
	ld.d	$a1, $s6, 48
	move	$a2, $s7
	b	.LBB89_26
	.p2align	4, , 16
.LBB89_24:                              #   in Loop: Header=BB89_26 Depth=2
	pcalau12i	$a3, %pc_hi20(.LCPI89_0)
	fld.s	$fa0, $a3, %pc_lo12(.LCPI89_0)
	st.b	$s4, $s6, 416
.LBB89_25:                              #   in Loop: Header=BB89_26 Depth=2
	fst.s	$fa0, $a1, 0
	fld.s	$fa1, $s6, 164
	fadd.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $s6, 164
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 8
	beqz	$a2, .LBB89_28
.LBB89_26:                              #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a0, 0
	fld.s	$fa0, $a3, 96
	fcmp.cune.s	$fcc0, $fa0, $fs0
	bceqz	$fcc0, .LBB89_24
# %bb.27:                               #   in Loop: Header=BB89_26 Depth=2
	frecip.s	$fa0, $fa0
	b	.LBB89_25
	.p2align	4, , 16
.LBB89_28:                              # %._crit_edge
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.d	$a0, $s6, 16
	ld.d	$a1, $s6, 48
	frecip.s	$fa0, $fa0
	fst.s	$fa0, $s6, 164
	move	$a2, $s7
	fmov.s	$fa2, $fs0
	fmov.s	$fa3, $fs0
	fmov.s	$fa1, $fs0
	.p2align	4, , 16
.LBB89_29:                              #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a0, 0
	fld.s	$fa4, $a3, 16
	fld.s	$fa5, $a1, 0
	fld.s	$fa6, $a3, 20
	fld.s	$fa7, $a3, 24
	fmul.s	$fa4, $fa4, $fa5
	fmul.s	$fa6, $fa5, $fa6
	fmul.s	$fa5, $fa5, $fa7
	fadd.s	$fa1, $fa1, $fa4
	fadd.s	$fa3, $fa3, $fa6
	fadd.s	$fa2, $fa2, $fa5
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 8
	bnez	$a2, .LBB89_29
	b	.LBB89_31
	.p2align	4, , 16
.LBB89_30:                              # %._crit_edge.thread
                                        #   in Loop: Header=BB89_3 Depth=1
	fld.s	$fa0, $s6, 164
	frecip.s	$fa0, $fa0
	movgr2fr.w	$fa1, $zero
	fst.s	$fa0, $s6, 164
	fmov.s	$fa3, $fa1
	fmov.s	$fa2, $fa1
.LBB89_31:                              # %_ZN10btSoftBody10clusterComEPKNS_7ClusterE.exit
                                        #   in Loop: Header=BB89_3 Depth=1
	fmul.s	$fa6, $fa0, $fa1
	fmul.s	$fa7, $fa0, $fa3
	fmul.s	$ft0, $fa0, $fa2
	movfr2gr.s	$a0, $fa6
	movfr2gr.s	$a1, $fa7
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $ft0
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $s6, 264
	st.d	$a1, $s6, 272
	st.d	$zero, $s6, 352
	vst	$vr17, $s6, 360
	vst	$vr17, $s6, 376
	vst	$vr17, $s6, 168
	vst	$vr17, $s6, 184
	vst	$vr17, $s6, 200
	blez	$s7, .LBB89_34
# %bb.32:                               # %.lr.ph169
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.d	$a0, $s6, 16
	ld.d	$a1, $s6, 48
	fld.s	$fa1, $s6, 188
	fld.s	$fa0, $s6, 172
	fld.s	$fa2, $s6, 176
	fld.s	$fa4, $s6, 192
	move	$a2, $s7
	fmov.s	$fa5, $fs0
	fmov.s	$fa3, $fs0
	.p2align	4, , 16
.LBB89_33:                              #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a0, 0
	fld.s	$ft1, $a3, 16
	fld.s	$ft2, $a3, 20
	fld.s	$ft3, $a3, 24
	fsub.s	$ft1, $ft1, $fa6
	fsub.s	$ft2, $ft2, $fa7
	fsub.s	$ft3, $ft3, $ft0
	fmul.s	$ft4, $ft1, $ft1
	fld.s	$ft5, $a1, 0
	fmul.s	$ft6, $ft2, $ft2
	fmul.s	$ft7, $ft3, $ft3
	fadd.s	$ft8, $ft6, $ft7
	fmadd.s	$fa3, $ft5, $ft8, $fa3
	fst.s	$fa3, $s6, 168
	fadd.s	$ft7, $ft4, $ft7
	fmadd.s	$fa1, $ft5, $ft7, $fa1
	fst.s	$fa1, $s6, 188
	fadd.s	$ft4, $ft4, $ft6
	fmadd.s	$fa5, $ft5, $ft4, $fa5
	fst.s	$fa5, $s6, 208
	fneg.s	$ft1, $ft1
	fmul.s	$ft1, $ft5, $ft1
	fmadd.s	$fa0, $ft1, $ft2, $fa0
	fst.s	$fa0, $s6, 172
	fmadd.s	$fa2, $ft1, $ft3, $fa2
	fst.s	$fa2, $s6, 176
	fneg.s	$ft1, $ft2
	fmul.s	$ft1, $ft5, $ft1
	fmadd.s	$fa4, $ft1, $ft3, $fa4
	fst.s	$fa4, $s6, 192
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 8
	bnez	$a2, .LBB89_33
	b	.LBB89_35
	.p2align	4, , 16
.LBB89_34:                              # %_ZN10btSoftBody10clusterComEPKNS_7ClusterE.exit.._crit_edge170_crit_edge
                                        #   in Loop: Header=BB89_3 Depth=1
	fld.s	$fa0, $s6, 172
	fld.s	$fa2, $s6, 176
	fld.s	$fa4, $s6, 192
	fld.s	$fa1, $s6, 188
	movgr2fr.w	$fa3, $zero
	fmov.s	$fa5, $fa3
.LBB89_35:                              # %._crit_edge170
                                        #   in Loop: Header=BB89_3 Depth=1
	addi.d	$a0, $s6, 264
	fneg.s	$fa6, $fa4
	fmul.s	$fa7, $fa4, $fa6
	fmadd.s	$fa7, $fa1, $fa5, $fa7
	fneg.s	$ft0, $fa5
	fmul.s	$ft0, $fa0, $ft0
	fmadd.s	$ft0, $fa4, $fa2, $ft0
	fneg.s	$ft1, $fa2
	fmul.s	$ft2, $fa1, $ft1
	fmadd.s	$ft2, $fa0, $fa4, $ft2
	fmul.s	$ft3, $fa0, $ft0
	fmadd.s	$ft3, $fa3, $fa7, $ft3
	fmadd.s	$ft3, $fa2, $ft2, $ft3
	frecip.s	$ft3, $ft3
	fmul.s	$fa7, $fa7, $ft3
	fmul.s	$ft0, $ft0, $ft3
	fneg.s	$ft4, $fa1
	fmul.s	$ft4, $fa2, $ft4
	fmadd.s	$fa4, $fa0, $fa4, $ft4
	fmul.s	$fa4, $fa4, $ft3
	fmul.s	$ft1, $fa2, $ft1
	fmadd.s	$fa5, $fa3, $fa5, $ft1
	fmul.s	$fa5, $fa5, $ft3
	fmul.s	$fa6, $fa3, $fa6
	fmadd.s	$fa2, $fa2, $fa0, $fa6
	fmul.s	$fa2, $fa2, $ft3
	fmul.s	$fa6, $ft2, $ft3
	fneg.s	$ft1, $fa0
	fmul.s	$fa0, $fa0, $ft1
	fmadd.s	$fa0, $fa3, $fa1, $fa0
	fmul.s	$fa0, $fa0, $ft3
	fst.s	$fa7, $s6, 168
	fst.s	$ft0, $s6, 172
	fst.s	$fa4, $s6, 176
	st.w	$zero, $s6, 180
	fst.s	$ft0, $s6, 184
	fst.s	$fa5, $s6, 188
	fst.s	$fa2, $s6, 192
	st.w	$zero, $s6, 196
	fst.s	$fa6, $s6, 200
	fst.s	$fa2, $s6, 204
	fst.s	$fa0, $s6, 208
	st.w	$zero, $s6, 212
	st.w	$s5, $s6, 96
	vst	$vr17, $s6, 100
	vld	$vr0, $a0, 0
	ld.w	$a0, $s6, 68
	st.w	$s5, $s6, 116
	vst	$vr17, $s6, 120
	st.d	$s5, $s6, 136
	vst	$vr0, $s6, 144
	bge	$a0, $s7, .LBB89_46
# %bb.36:                               #   in Loop: Header=BB89_3 Depth=1
	ld.w	$a1, $s6, 72
	bge	$a1, $s7, .LBB89_46
# %bb.37:                               #   in Loop: Header=BB89_3 Depth=1
	beqz	$s7, .LBB89_39
# %bb.38:                               #   in Loop: Header=BB89_3 Depth=1
	slli.d	$a0, $s7, 4
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.wu	$a1, $s6, 68
	move	$s0, $a0
	addi.w	$a0, $a1, 0
	bgtz	$a0, .LBB89_40
	b	.LBB89_42
.LBB89_39:                              #   in Loop: Header=BB89_3 Depth=1
	move	$s0, $zero
	bstrpick.d	$a1, $a0, 31, 0
	addi.w	$a0, $a1, 0
	blez	$a0, .LBB89_42
.LBB89_40:                              # %.lr.ph.i.i.i110
                                        #   in Loop: Header=BB89_3 Depth=1
	move	$a0, $zero
	slli.d	$a1, $a1, 4
	.p2align	4, , 16
.LBB89_41:                              #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a2, $s6, 80
	vldx	$vr0, $a2, $a0
	vstx	$vr0, $s0, $a0
	addi.d	$a0, $a0, 16
	bne	$a1, $a0, .LBB89_41
.LBB89_42:                              # %_ZNK20btAlignedObjectArrayI9btVector3E4copyEiiPS0_.exit.i.i
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.d	$a0, $s6, 80
	beqz	$a0, .LBB89_45
# %bb.43:                               # %_ZNK20btAlignedObjectArrayI9btVector3E4copyEiiPS0_.exit.i.i
                                        #   in Loop: Header=BB89_3 Depth=1
	ld.b	$a1, $s6, 88
	andi	$a1, $a1, 1
	beqz	$a1, .LBB89_45
# %bb.44:                               #   in Loop: Header=BB89_3 Depth=1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB89_45:                              # %_ZN20btAlignedObjectArrayI9btVector3E10deallocateEv.exit.i.i
                                        #   in Loop: Header=BB89_3 Depth=1
	st.b	$s4, $s6, 88
	st.d	$s0, $s6, 80
	st.w	$s7, $s6, 72
	vld	$vr17, $sp, 16                  # 16-byte Folded Reload
.LBB89_46:                              # %_ZN20btAlignedObjectArrayI9btVector3E6resizeEiRKS0_.exit
                                        #   in Loop: Header=BB89_3 Depth=1
	st.w	$s7, $s6, 68
	blez	$s7, .LBB89_2
# %bb.47:                               # %.lr.ph176
                                        #   in Loop: Header=BB89_3 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	.p2align	4, , 16
.LBB89_48:                              #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $s6, 16
	ldx.d	$a3, $a3, $a0
	fld.s	$fa0, $a3, 16
	fld.s	$fa1, $s6, 264
	fld.s	$fa2, $a3, 20
	fld.s	$fa3, $s6, 268
	fld.s	$fa4, $a3, 24
	fld.s	$fa5, $s6, 272
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fsub.s	$fa2, $fa4, $fa5
	movfr2gr.s	$a3, $fa0
	movfr2gr.s	$a4, $fa1
	ld.d	$a5, $s6, 80
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa2
	bstrpick.d	$a4, $a4, 31, 0
	add.d	$a6, $a5, $a1
	stx.d	$a3, $a5, $a1
	st.d	$a4, $a6, 8
	ld.w	$a3, $s6, 68
	addi.d	$a2, $a2, 1
	addi.d	$a1, $a1, 16
	addi.d	$a0, $a0, 8
	blt	$a2, $a3, .LBB89_48
	b	.LBB89_2
.LBB89_49:                              # %._crit_edge181
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 104                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 112                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 120                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 128
	ret
.Lfunc_end89:
	.size	_ZN10btSoftBody18initializeClustersEv, .Lfunc_end89-_ZN10btSoftBody18initializeClustersEv
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody14updateClustersEv
.LCPI90_0:
	.word	0x38d1b717                      # float 9.99999974E-5
.LCPI90_1:
	.word	0x3951b717                      # float 1.99999995E-4
.LCPI90_2:
	.word	0x399d4951                      # float 2.99999985E-4
	.text
	.globl	_ZN10btSoftBody14updateClustersEv
	.p2align	5
	.type	_ZN10btSoftBody14updateClustersEv,@function
_ZN10btSoftBody14updateClustersEv:      # @_ZN10btSoftBody14updateClustersEv
.Lfunc_begin10:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception10
# %bb.0:
	addi.d	$sp, $sp, -352
	.cfi_def_cfa_offset 352
	st.d	$ra, $sp, 344                   # 8-byte Folded Spill
	st.d	$fp, $sp, 336                   # 8-byte Folded Spill
	st.d	$s0, $sp, 328                   # 8-byte Folded Spill
	st.d	$s1, $sp, 320                   # 8-byte Folded Spill
	st.d	$s2, $sp, 312                   # 8-byte Folded Spill
	st.d	$s3, $sp, 304                   # 8-byte Folded Spill
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	st.d	$s5, $sp, 288                   # 8-byte Folded Spill
	st.d	$s6, $sp, 280                   # 8-byte Folded Spill
	st.d	$s7, $sp, 272                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 264                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 256                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 248                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 240                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 232                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 56, -88
	.cfi_offset 57, -96
	.cfi_offset 58, -104
	.cfi_offset 59, -112
	.cfi_offset 60, -120
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(.L.str)
	addi.d	$a0, $a0, %pc_lo12(.L.str)
	pcaddu18i	$ra, %call36(_ZN15CProfileManager13Start_ProfileEPKc)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 1340
	blez	$a0, .LBB90_29
# %bb.1:                                # %.lr.ph435
	move	$s2, $zero
	addi.d	$s3, $sp, 152
	addi.d	$s4, $sp, 168
	addi.d	$s0, $fp, 1272
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 16                   # 16-byte Folded Spill
	movgr2fr.w	$fs0, $zero
	pcalau12i	$a1, %pc_hi20(.LCPI90_0)
	fld.s	$fs1, $a1, %pc_lo12(.LCPI90_0)
	pcalau12i	$a1, %pc_hi20(.LCPI90_1)
	fld.s	$fs2, $a1, %pc_lo12(.LCPI90_1)
	pcalau12i	$a1, %pc_hi20(.LCPI90_2)
	fld.s	$fs3, $a1, %pc_lo12(.LCPI90_2)
	ori	$s5, $zero, 2
	b	.LBB90_5
.LBB90_2:                               #   in Loop: Header=BB90_5 Depth=1
	fld.s	$fa0, $s1, 352
	fld.s	$fa1, $fp, 512
	fld.s	$fa2, $s1, 356
	fld.s	$fa3, $s1, 360
	fmul.s	$fa0, $fa0, $fa1
	fmul.s	$fa2, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa3
	vldi	$vr3, -1272
	fmul.s	$fa0, $fa0, $fa3
	fmul.s	$fa2, $fa2, $fa3
	fmul.s	$fa1, $fa1, $fa3
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a2, $fa2
	bstrins.d	$a0, $a2, 63, 32
	movfr2gr.s	$a2, $fa1
	fld.s	$fa0, $fp, 524
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a0, $sp, 32
	st.d	$a2, $sp, 40
.Ltmp303:                               # EH_LABEL
	addi.d	$a2, $sp, 48
	addi.d	$a3, $sp, 32
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f)
	jirl	$ra, $ra, 0
.Ltmp304:                               # EH_LABEL
.LBB90_3:                               #   in Loop: Header=BB90_5 Depth=1
	ld.w	$a0, $fp, 1340
.LBB90_4:                               #   in Loop: Header=BB90_5 Depth=1
	addi.d	$s2, $s2, 1
	bge	$s2, $a0, .LBB90_29
.LBB90_5:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_8 Depth 2
                                        #     Child Loop BB90_11 Depth 2
                                        #     Child Loop BB90_16 Depth 2
                                        #     Child Loop BB90_20 Depth 2
                                        #     Child Loop BB90_24 Depth 2
	ld.d	$a1, $fp, 1352
	slli.d	$a2, $s2, 3
	ldx.d	$s1, $a1, $a2
	ld.w	$s6, $s1, 4
	beqz	$s6, .LBB90_4
# %bb.6:                                #   in Loop: Header=BB90_5 Depth=1
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
	vst	$vr0, $sp, 184
	vst	$vr0, $sp, 200
	vst	$vr0, $sp, 216
	fmov.s	$fa1, $fs0
	fmov.s	$fa2, $fs0
	fmov.s	$fa0, $fs0
	blez	$s6, .LBB90_9
# %bb.7:                                # %.lr.ph.i
                                        #   in Loop: Header=BB90_5 Depth=1
	ld.d	$a0, $s1, 16
	ld.d	$a1, $s1, 48
	move	$a2, $s6
	fmov.s	$fa0, $fs0
	fmov.s	$fa2, $fs0
	fmov.s	$fa1, $fs0
	.p2align	4, , 16
.LBB90_8:                               #   Parent Loop BB90_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a0, 0
	fld.s	$fa3, $a3, 16
	fld.s	$fa4, $a1, 0
	fld.s	$fa5, $a3, 20
	fld.s	$fa6, $a3, 24
	fmul.s	$fa3, $fa3, $fa4
	fmul.s	$fa5, $fa4, $fa5
	fmul.s	$fa4, $fa4, $fa6
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa2, $fa2, $fa5
	fadd.s	$fa0, $fa0, $fa4
	addi.d	$a2, $a2, -1
	addi.d	$a1, $a1, 4
	addi.d	$a0, $a0, 8
	bnez	$a2, .LBB90_8
.LBB90_9:                               # %.loopexit383
                                        #   in Loop: Header=BB90_5 Depth=1
	fld.s	$fa3, $s1, 164
	fmul.s	$fa1, $fa1, $fa3
	fmul.s	$fa2, $fa2, $fa3
	fmul.s	$fa3, $fa0, $fa3
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa3
	fld.s	$fa0, $sp, 200
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $s1, 264
	st.d	$a1, $s1, 272
	blez	$s6, .LBB90_13
# %bb.10:                               # %.lr.ph
                                        #   in Loop: Header=BB90_5 Depth=1
	ld.d	$a0, $s1, 16
	ld.d	$a1, $s1, 80
	fld.s	$ft3, $sp, 188
	fld.s	$ft2, $sp, 192
	fld.s	$ft1, $sp, 208
	addi.d	$a1, $a1, 8
	move	$a2, $s6
	fmov.s	$ft0, $fs1
	fmov.s	$fa7, $fs2
	fmov.s	$fa6, $fs0
	fmov.s	$fa5, $fs0
	fmov.s	$fa4, $fs3
	.p2align	4, , 16
.LBB90_11:                              #   Parent Loop BB90_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a0, 0
	fld.s	$ft4, $a3, 16
	fld.s	$ft5, $a3, 20
	fsub.s	$ft4, $ft4, $fa1
	fsub.s	$ft5, $ft5, $fa2
	fld.s	$ft6, $a3, 24
	fld.s	$ft7, $a1, -8
	fld.s	$ft8, $a1, -4
	fld.s	$ft9, $a1, 0
	fsub.s	$ft6, $ft6, $fa3
	fmul.s	$ft10, $ft4, $ft7
	fmul.s	$ft11, $ft4, $ft8
	fmul.s	$ft4, $ft4, $ft9
	fadd.s	$ft0, $ft10, $ft0
	fadd.s	$ft3, $ft11, $ft3
	fadd.s	$ft2, $ft4, $ft2
	fmul.s	$ft4, $ft5, $ft7
	fmul.s	$ft10, $ft5, $ft8
	fmul.s	$ft5, $ft5, $ft9
	fadd.s	$fa0, $ft4, $fa0
	fadd.s	$fa7, $ft10, $fa7
	fadd.s	$ft1, $ft5, $ft1
	fmul.s	$ft4, $ft6, $ft7
	fmul.s	$ft5, $ft6, $ft8
	fmul.s	$ft6, $ft6, $ft9
	fadd.s	$fa6, $ft4, $fa6
	fadd.s	$fa5, $ft5, $fa5
	fadd.s	$fa4, $ft6, $fa4
	addi.d	$a1, $a1, 16
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 8
	bnez	$a2, .LBB90_11
# %bb.12:                               # %._crit_edge
                                        #   in Loop: Header=BB90_5 Depth=1
	fst.s	$ft3, $sp, 188
	fst.s	$ft2, $sp, 192
	fst.s	$ft1, $sp, 208
	b	.LBB90_14
	.p2align	4, , 16
.LBB90_13:                              #   in Loop: Header=BB90_5 Depth=1
	fmov.s	$fa4, $fs3
	fmov.s	$fa5, $fs0
	fmov.s	$fa6, $fs0
	fmov.s	$fa7, $fs2
	fmov.s	$ft0, $fs1
.LBB90_14:                              #   in Loop: Header=BB90_5 Depth=1
	addi.d	$s7, $s1, 264
	fst.s	$ft0, $sp, 184
	fst.s	$fa0, $sp, 200
	fst.s	$fa7, $sp, 204
	fst.s	$fa6, $sp, 216
	fst.s	$fa5, $sp, 220
	fst.s	$fa4, $sp, 224
	addi.d	$a0, $sp, 184
	addi.d	$a1, $sp, 136
	addi.d	$a2, $sp, 88
	pcaddu18i	$ra, %call36(_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_)
	jirl	$ra, $ra, 0
	vld	$vr0, $s7, 0
	vld	$vr1, $sp, 136
	vld	$vr2, $s3, 0
	vld	$vr3, $s4, 0
	vst	$vr0, $s1, 144
	vst	$vr1, $s1, 96
	vst	$vr2, $s1, 112
	vst	$vr3, $s1, 128
	fld.s	$fa0, $s1, 168
	fld.s	$fa1, $s1, 184
	fld.s	$fa7, $s1, 100
	fld.s	$fa4, $s1, 96
	fld.s	$fa2, $s1, 200
	fld.s	$ft0, $s1, 104
	fmul.s	$fa3, $fa1, $fa7
	fld.s	$fa5, $s1, 188
	fmadd.s	$fa3, $fa0, $fa4, $fa3
	fmadd.s	$fa3, $fa2, $ft0, $fa3
	fld.s	$fa6, $s1, 172
	fmul.s	$ft1, $fa7, $fa5
	fld.s	$ft2, $s1, 204
	fld.s	$ft3, $s1, 192
	fld.s	$ft4, $s1, 176
	fmadd.s	$ft1, $fa6, $fa4, $ft1
	fmadd.s	$ft1, $ft2, $ft0, $ft1
	fmul.s	$ft5, $fa7, $ft3
	fmadd.s	$ft5, $ft4, $fa4, $ft5
	fld.s	$ft6, $s1, 208
	fld.s	$ft7, $s1, 116
	fld.s	$ft8, $s1, 112
	fld.s	$ft9, $s1, 120
	fmadd.s	$ft5, $ft6, $ft0, $ft5
	fmul.s	$ft10, $fa1, $ft7
	fmadd.s	$ft10, $fa0, $ft8, $ft10
	fmadd.s	$ft10, $fa2, $ft9, $ft10
	fmul.s	$ft11, $fa5, $ft7
	fld.s	$ft12, $s1, 132
	fld.s	$ft13, $s1, 128
	fmadd.s	$ft11, $fa6, $ft8, $ft11
	fmadd.s	$ft11, $ft2, $ft9, $ft11
	fmul.s	$fa1, $fa1, $ft12
	fmadd.s	$fa0, $fa0, $ft13, $fa1
	fld.s	$ft14, $s1, 136
	fmul.s	$fa1, $ft3, $ft7
	fmadd.s	$fa1, $ft4, $ft8, $fa1
	fmadd.s	$ft15, $ft6, $ft9, $fa1
	fmadd.s	$fs4, $fa2, $ft14, $fa0
	fmul.s	$fa0, $fa5, $ft12
	fmadd.s	$fa0, $fa6, $ft13, $fa0
	fmadd.s	$ft2, $ft2, $ft14, $fa0
	fmul.s	$fa0, $ft3, $ft12
	fmadd.s	$fa0, $ft4, $ft13, $fa0
	fmadd.s	$ft3, $ft6, $ft14, $fa0
	fmul.s	$fa0, $fa7, $ft1
	fmadd.s	$fa0, $fa4, $fa3, $fa0
	fmadd.s	$fa0, $ft0, $ft5, $fa0
	fmul.s	$fa1, $ft1, $ft7
	fmadd.s	$fa1, $ft8, $fa3, $fa1
	fmadd.s	$fa1, $ft9, $ft5, $fa1
	fmul.s	$fa2, $ft1, $ft12
	fmadd.s	$fa2, $ft13, $fa3, $fa2
	fmadd.s	$fa2, $ft14, $ft5, $fa2
	fmul.s	$fa3, $fa7, $ft11
	fmadd.s	$fa3, $fa4, $ft10, $fa3
	fmadd.s	$fa3, $ft0, $ft15, $fa3
	fmul.s	$fa5, $ft7, $ft11
	fmadd.s	$fa5, $ft8, $ft10, $fa5
	fmadd.s	$fa5, $ft9, $ft15, $fa5
	fmul.s	$fa6, $ft12, $ft11
	fmadd.s	$fa6, $ft13, $ft10, $fa6
	fmadd.s	$fa6, $ft14, $ft15, $fa6
	fmul.s	$fa7, $fa7, $ft2
	fmadd.s	$fa4, $fa4, $fs4, $fa7
	fmadd.s	$fa4, $ft0, $ft3, $fa4
	fmul.s	$fa7, $ft7, $ft2
	fmadd.s	$fa7, $ft8, $fs4, $fa7
	fmadd.s	$fa7, $ft9, $ft3, $fa7
	fmul.s	$ft0, $ft12, $ft2
	fmadd.s	$ft0, $ft13, $fs4, $ft0
	fmadd.s	$ft0, $ft14, $ft3, $ft0
	fst.s	$fa0, $s1, 216
	fst.s	$fa1, $s1, 220
	fst.s	$fa2, $s1, 224
	st.w	$zero, $s1, 228
	fst.s	$fa3, $s1, 232
	fst.s	$fa5, $s1, 236
	fst.s	$fa6, $s1, 240
	st.w	$zero, $s1, 244
	fst.s	$fa4, $s1, 248
	fst.s	$fa7, $s1, 252
	fst.s	$ft0, $s1, 256
	st.w	$zero, $s1, 260
	vld	$vr9, $sp, 16                   # 16-byte Folded Reload
	vst	$vr9, $s1, 352
	vst	$vr9, $s1, 368
	fmov.s	$ft1, $fs0
	fmov.s	$ft2, $fs0
	fmov.s	$ft3, $fs0
	fmov.s	$ft4, $fs0
	fmov.s	$ft5, $fs0
	fmov.s	$ft6, $fs0
	blez	$s6, .LBB90_17
# %bb.15:                               # %.lr.ph409
                                        #   in Loop: Header=BB90_5 Depth=1
	ld.d	$a0, $s1, 16
	ld.d	$a1, $s1, 48
	fld.s	$ft7, $s1, 264
	fld.s	$ft8, $s1, 268
	fld.s	$ft9, $s1, 272
	movgr2fr.w	$ft1, $zero
	move	$a2, $s6
	fmov.s	$ft2, $ft1
	fmov.s	$ft3, $ft1
	fmov.s	$ft4, $ft1
	fmov.s	$ft5, $ft1
	fmov.s	$ft6, $ft1
	.p2align	4, , 16
.LBB90_16:                              #   Parent Loop BB90_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a0, 0
	fld.s	$ft10, $a3, 48
	fld.s	$ft11, $a1, 0
	fld.s	$ft12, $a3, 52
	fld.s	$ft13, $a3, 56
	fmul.s	$ft10, $ft10, $ft11
	fmul.s	$ft12, $ft11, $ft12
	fmul.s	$ft11, $ft11, $ft13
	fadd.s	$ft6, $ft10, $ft6
	fst.s	$ft6, $s1, 352
	fadd.s	$ft5, $ft12, $ft5
	fst.s	$ft5, $s1, 356
	fadd.s	$ft4, $ft11, $ft4
	fst.s	$ft4, $s1, 360
	fld.s	$ft13, $a3, 16
	fld.s	$ft14, $a3, 20
	fld.s	$ft15, $a3, 24
	fsub.s	$ft13, $ft13, $ft7
	fsub.s	$ft14, $ft14, $ft8
	fsub.s	$ft15, $ft15, $ft9
	fneg.s	$fs4, $ft12
	fmul.s	$fs4, $ft15, $fs4
	fmadd.s	$fs4, $ft14, $ft11, $fs4
	fneg.s	$ft11, $ft11
	fmul.s	$ft11, $ft13, $ft11
	fmadd.s	$ft11, $ft15, $ft10, $ft11
	fneg.s	$ft10, $ft10
	fmul.s	$ft10, $ft14, $ft10
	fmadd.s	$ft10, $ft13, $ft12, $ft10
	fadd.s	$ft3, $ft3, $fs4
	fst.s	$ft3, $s1, 368
	fadd.s	$ft2, $ft11, $ft2
	fst.s	$ft2, $s1, 372
	fadd.s	$ft1, $ft10, $ft1
	fst.s	$ft1, $s1, 376
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 8
	bnez	$a2, .LBB90_16
.LBB90_17:                              # %._crit_edge410
                                        #   in Loop: Header=BB90_5 Depth=1
	fld.s	$ft7, $s1, 164
	fld.s	$ft8, $s1, 396
	fmul.s	$ft6, $ft6, $ft7
	fmul.s	$ft5, $ft7, $ft5
	fmul.s	$ft4, $ft7, $ft4
	vldi	$vr17, -1168
	fsub.s	$ft7, $ft9, $ft8
	fmul.s	$ft6, $ft6, $ft7
	fmul.s	$ft5, $ft5, $ft7
	fmul.s	$ft4, $ft4, $ft7
	movfr2gr.s	$a0, $ft6
	movfr2gr.s	$a1, $ft5
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $ft4
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $s1, 352
	st.d	$a1, $s1, 360
	fmul.s	$fa1, $fa1, $ft2
	fmadd.s	$fa0, $fa0, $ft3, $fa1
	fmadd.s	$fa0, $fa2, $ft1, $fa0
	fmul.s	$fa1, $ft2, $fa5
	fmadd.s	$fa1, $fa3, $ft3, $fa1
	fmadd.s	$fa1, $fa6, $ft1, $fa1
	fld.s	$fa2, $s1, 400
	fmul.s	$fa3, $ft2, $fa7
	fmadd.s	$fa3, $fa4, $ft3, $fa3
	fmadd.s	$fa3, $ft0, $ft1, $fa3
	fsub.s	$fa2, $ft9, $fa2
	fmul.s	$fa0, $fa0, $fa2
	fmul.s	$fa1, $fa1, $fa2
	fmul.s	$fa2, $fa2, $fa3
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa2
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $s1, 368
	st.d	$a1, $s1, 376
	addi.d	$a0, $s1, 280
	ori	$a2, $zero, 72
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	fld.s	$fa0, $s1, 404
	fcmp.cule.s	$fcc0, $fa0, $fs0
	bcnez	$fcc0, .LBB90_21
# %bb.18:                               # %.preheader
                                        #   in Loop: Header=BB90_5 Depth=1
	ld.w	$a0, $s1, 4
	blez	$a0, .LBB90_21
# %bb.19:                               # %.lr.ph414
                                        #   in Loop: Header=BB90_5 Depth=1
	move	$a0, $zero
	move	$a1, $zero
	move	$a2, $zero
	.p2align	4, , 16
.LBB90_20:                              #   Parent Loop BB90_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $s1, 80
	add.d	$a4, $a3, $a1
	fld.s	$fa0, $s1, 96
	fld.s	$fa1, $s1, 100
	fld.s	$fa2, $a4, 4
	fldx.s	$fa3, $a3, $a1
	fld.s	$fa4, $s1, 104
	fld.s	$fa5, $a4, 8
	fmul.s	$fa1, $fa1, $fa2
	fmadd.s	$fa0, $fa0, $fa3, $fa1
	fld.s	$fa1, $s1, 144
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fld.s	$fa4, $s1, 116
	fld.s	$fa6, $s1, 112
	fadd.s	$fa0, $fa0, $fa1
	fld.s	$fa1, $s1, 120
	fmul.s	$fa4, $fa2, $fa4
	fmadd.s	$fa4, $fa6, $fa3, $fa4
	fld.s	$fa6, $s1, 132
	fmadd.s	$fa1, $fa1, $fa5, $fa4
	fld.s	$fa4, $s1, 128
	ld.d	$a3, $s1, 16
	fmul.s	$fa2, $fa2, $fa6
	fld.s	$fa6, $s1, 148
	fmadd.s	$fa2, $fa4, $fa3, $fa2
	fld.s	$fa3, $s1, 136
	fld.s	$fa4, $s1, 152
	ldx.d	$a3, $a3, $a0
	fadd.s	$fa1, $fa6, $fa1
	fmadd.s	$fa2, $fa3, $fa5, $fa2
	fadd.s	$fa2, $fa4, $fa2
	fld.s	$fa3, $a3, 16
	fld.s	$fa4, $a3, 20
	fld.s	$fa5, $a3, 24
	fld.s	$fa6, $s1, 404
	fsub.s	$fa0, $fa0, $fa3
	fsub.s	$fa1, $fa1, $fa4
	fsub.s	$fa2, $fa2, $fa5
	fmul.s	$fa0, $fa6, $fa0
	fmul.s	$fa1, $fa6, $fa1
	fmul.s	$fa2, $fa6, $fa2
	fadd.s	$fa0, $fa3, $fa0
	fadd.s	$fa1, $fa4, $fa1
	fadd.s	$fa2, $fa5, $fa2
	movfr2gr.s	$a4, $fa0
	movfr2gr.s	$a5, $fa1
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $fa2
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a4, $a3, 16
	st.d	$a5, $a3, 24
	ld.w	$a3, $s1, 4
	addi.d	$a2, $a2, 1
	addi.d	$a1, $a1, 16
	addi.d	$a0, $a0, 8
	blt	$a2, $a3, .LBB90_20
.LBB90_21:                              # %.loopexit
                                        #   in Loop: Header=BB90_5 Depth=1
	ld.bu	$a0, $s1, 417
	beqz	$a0, .LBB90_3
# %bb.22:                               #   in Loop: Header=BB90_5 Depth=1
	ld.d	$a0, $s1, 16
	ld.d	$a1, $a0, 0
	vld	$vr0, $a1, 16
	blt	$s6, $s5, .LBB90_25
# %bb.23:                               # %_Z8btSetMinIfEvRT_RKS0_.exit.i.preheader
                                        #   in Loop: Header=BB90_5 Depth=1
	addi.d	$a0, $a0, 8
	addi.d	$a1, $s6, -1
	vori.b	$vr1, $vr0, 0
	.p2align	4, , 16
.LBB90_24:                              # %_Z8btSetMinIfEvRT_RKS0_.exit.i
                                        #   Parent Loop BB90_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a2, $a0, 0
	vld	$vr2, $a2, 16
	vfcmp.clt.s	$vr3, $vr2, $vr0
	vbitsel.v	$vr0, $vr0, $vr2, $vr3
	vfcmp.clt.s	$vr3, $vr1, $vr2
	vbitsel.v	$vr1, $vr1, $vr2, $vr3
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB90_24
	b	.LBB90_26
.LBB90_25:                              #   in Loop: Header=BB90_5 Depth=1
	vori.b	$vr1, $vr0, 0
.LBB90_26:                              # %._crit_edge424
                                        #   in Loop: Header=BB90_5 Depth=1
	ld.d	$a1, $s1, 384
	vst	$vr0, $sp, 48
	vst	$vr1, $sp, 64
	bnez	$a1, .LBB90_2
# %bb.27:                               #   in Loop: Header=BB90_5 Depth=1
.Ltmp306:                               # EH_LABEL
	addi.d	$a1, $sp, 48
	move	$a0, $s0
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt6insertERK12btDbvtAabbMmPv)
	jirl	$ra, $ra, 0
.Ltmp307:                               # EH_LABEL
# %bb.28:                               #   in Loop: Header=BB90_5 Depth=1
	st.d	$a0, $s1, 384
	b	.LBB90_3
.LBB90_29:                              # %._crit_edge436
	pcaddu18i	$ra, %call36(_ZN15CProfileManager12Stop_ProfileEv)
	jirl	$ra, $ra, 0
	fld.d	$fs4, $sp, 232                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 240                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 248                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 256                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 264                  # 8-byte Folded Reload
	ld.d	$s7, $sp, 272                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 280                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 288                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 296                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 304                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 312                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 320                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 328                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 336                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 344                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 352
	ret
.LBB90_30:
.Ltmp308:                               # EH_LABEL
	b	.LBB90_32
.LBB90_31:
.Ltmp305:                               # EH_LABEL
.LBB90_32:
	move	$fp, $a0
.Ltmp309:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN15CProfileManager12Stop_ProfileEv)
	jirl	$ra, $ra, 0
.Ltmp310:                               # EH_LABEL
# %bb.33:                               # %_ZN14CProfileSampleD2Ev.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB90_34:
.Ltmp311:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end90:
	.size	_ZN10btSoftBody14updateClustersEv, .Lfunc_end90-_ZN10btSoftBody14updateClustersEv
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table90:
.Lexception10:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase8-.Lttbaseref8
.Lttbaseref8:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end10-.Lcst_begin10
.Lcst_begin10:
	.uleb128 .Lfunc_begin10-.Lfunc_begin10  # >> Call Site 1 <<
	.uleb128 .Ltmp303-.Lfunc_begin10        #   Call between .Lfunc_begin10 and .Ltmp303
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp303-.Lfunc_begin10        # >> Call Site 2 <<
	.uleb128 .Ltmp304-.Ltmp303              #   Call between .Ltmp303 and .Ltmp304
	.uleb128 .Ltmp305-.Lfunc_begin10        #     jumps to .Ltmp305
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp304-.Lfunc_begin10        # >> Call Site 3 <<
	.uleb128 .Ltmp306-.Ltmp304              #   Call between .Ltmp304 and .Ltmp306
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp306-.Lfunc_begin10        # >> Call Site 4 <<
	.uleb128 .Ltmp307-.Ltmp306              #   Call between .Ltmp306 and .Ltmp307
	.uleb128 .Ltmp308-.Lfunc_begin10        #     jumps to .Ltmp308
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp307-.Lfunc_begin10        # >> Call Site 5 <<
	.uleb128 .Ltmp309-.Ltmp307              #   Call between .Ltmp307 and .Ltmp309
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp309-.Lfunc_begin10        # >> Call Site 6 <<
	.uleb128 .Ltmp310-.Ltmp309              #   Call between .Ltmp309 and .Ltmp310
	.uleb128 .Ltmp311-.Lfunc_begin10        #     jumps to .Ltmp311
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp310-.Lfunc_begin10        # >> Call Site 7 <<
	.uleb128 .Lfunc_end90-.Ltmp310          #   Call between .Ltmp310 and .Lfunc_end90
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end10:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase8:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody6refineEPNS_10ImplicitFnEfb # -- Begin function _ZN10btSoftBody6refineEPNS_10ImplicitFnEfb
	.p2align	5
	.type	_ZN10btSoftBody6refineEPNS_10ImplicitFnEfb,@function
_ZN10btSoftBody6refineEPNS_10ImplicitFnEfb: # @_ZN10btSoftBody6refineEPNS_10ImplicitFnEfb
.Lfunc_begin11:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception11
# %bb.0:
	addi.d	$sp, $sp, -352
	.cfi_def_cfa_offset 352
	st.d	$ra, $sp, 344                   # 8-byte Folded Spill
	st.d	$fp, $sp, 336                   # 8-byte Folded Spill
	st.d	$s0, $sp, 328                   # 8-byte Folded Spill
	st.d	$s1, $sp, 320                   # 8-byte Folded Spill
	st.d	$s2, $sp, 312                   # 8-byte Folded Spill
	st.d	$s3, $sp, 304                   # 8-byte Folded Spill
	st.d	$s4, $sp, 296                   # 8-byte Folded Spill
	st.d	$s5, $sp, 288                   # 8-byte Folded Spill
	st.d	$s6, $sp, 280                   # 8-byte Folded Spill
	st.d	$s7, $sp, 272                   # 8-byte Folded Spill
	st.d	$s8, $sp, 264                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 256                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 248                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 240                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 232                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 224                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 216                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 208                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 200                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	.cfi_offset 62, -144
	.cfi_offset 63, -152
	move	$s8, $a0
	ld.w	$s5, $a0, 820
	ld.d	$s6, $a0, 832
	addi.w	$a0, $s5, 1
	mul.d	$a0, $a0, $s5
	addi.w	$s0, $a0, 0
	ori	$a3, $zero, 2
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	fst.s	$fa0, $sp, 60                   # 4-byte Folded Spill
	move	$s1, $a1
	blt	$s0, $a3, .LBB91_3
# %bb.1:                                # %.lr.ph.i.i
	bstrpick.d	$fp, $a0, 31, 1
	slli.d	$a0, $a0, 1
	bstrpick.d	$a0, $a0, 31, 2
	slli.d	$a0, $a0, 2
	ori	$a1, $zero, 16
	ori	$s2, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	move	$s7, $a0
	bgeu	$s0, $s2, .LBB91_4
# %bb.2:
	move	$a0, $zero
	b	.LBB91_7
.LBB91_3:
	move	$s7, $zero
	b	.LBB91_9
.LBB91_4:                               # %vector.ph
	bstrpick.d	$a0, $fp, 29, 3
	slli.d	$a0, $a0, 3
	addi.d	$a1, $s7, 16
	vrepli.w	$vr0, -2
	move	$a2, $a0
	.p2align	4, , 16
.LBB91_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vst	$vr0, $a1, -16
	vst	$vr0, $a1, 0
	addi.d	$a2, $a2, -8
	addi.d	$a1, $a1, 32
	bnez	$a2, .LBB91_5
# %bb.6:                                # %middle.block
	beq	$a0, $fp, .LBB91_9
.LBB91_7:                               # %scalar.ph.preheader
	sub.d	$a1, $fp, $a0
	slli.d	$a0, $a0, 2
	addi.w	$a2, $zero, -2
	lu32i.d	$a2, 0
	.p2align	4, , 16
.LBB91_8:                               # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	stx.w	$a2, $s7, $a0
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 4
	bnez	$a1, .LBB91_8
.LBB91_9:                               # %_ZN11btSymMatrixIiEC2EiRKi.exit
	ld.w	$a0, $s8, 852
	blez	$a0, .LBB91_20
# %bb.10:                               # %.lr.ph
	move	$fp, $zero
	movgr2fr.w	$fs2, $zero
	ori	$s2, $zero, 72
	b	.LBB91_12
	.p2align	4, , 16
.LBB91_11:                              #   in Loop: Header=BB91_12 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a0, .LBB91_17
.LBB91_12:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $s8, 864
	slli.d	$a2, $fp, 6
	alsl.d	$a2, $fp, $a2, 3
	add.d	$s0, $a1, $a2
	ld.bu	$a1, $s0, 36
	andi	$a1, $a1, 1
	beqz	$a1, .LBB91_11
# %bb.13:                               #   in Loop: Header=BB91_12 Depth=1
	ld.d	$a0, $s1, 0
	ld.d	$a1, $s0, 16
	ld.d	$a2, $a0, 0
	addi.d	$a1, $a1, 16
.Ltmp312:                               # EH_LABEL
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp313:                               # EH_LABEL
# %bb.14:                               #   in Loop: Header=BB91_12 Depth=1
	fmov.s	$fs1, $fa0
	ld.d	$a0, $s1, 0
	ld.d	$a1, $s0, 24
	ld.d	$a2, $a0, 0
	addi.d	$a1, $a1, 16
.Ltmp315:                               # EH_LABEL
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp316:                               # EH_LABEL
# %bb.15:                               #   in Loop: Header=BB91_12 Depth=1
	ld.w	$a0, $s8, 852
	fmul.s	$fa0, $fs1, $fa0
	fcmp.clt.s	$fcc0, $fs2, $fa0
	bcnez	$fcc0, .LBB91_11
# %bb.16:                               #   in Loop: Header=BB91_12 Depth=1
	ld.d	$a1, $s8, 864
	mul.d	$a2, $fp, $s2
	add.d	$s3, $a1, $a2
	mul.d	$a0, $a0, $s2
	add.d	$a0, $a1, $a0
	addi.d	$s4, $a0, -72
	addi.d	$a0, $sp, 128
	ori	$a2, $zero, 72
	move	$a1, $s3
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ori	$a2, $zero, 68
	move	$a0, $s3
	move	$a1, $s4
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$a1, $sp, 128
	ori	$a2, $zero, 68
	move	$a0, $s4
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s8, 852
	addi.w	$a0, $a0, -1
	st.w	$a0, $s8, 852
	addi.d	$fp, $fp, -1
	b	.LBB91_11
.LBB91_17:                              # %.preheader533
	blez	$a0, .LBB91_20
# %bb.18:                               # %.lr.ph549
	ld.d	$a1, $s8, 864
	move	$a0, $zero
	addi.d	$a1, $a1, 24
	lu12i.w	$a2, -69906
	ori	$a2, $a2, 3823
	addi.w	$a3, $zero, -1
	lu32i.d	$a3, 0
	.p2align	4, , 16
.LBB91_19:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a1, -8
	ld.d	$a5, $a1, 0
	sub.d	$a4, $a4, $s6
	srli.d	$a4, $a4, 3
	mul.w	$a4, $a4, $a2
	sub.d	$a5, $a5, $s6
	srli.d	$a5, $a5, 3
	mul.w	$a5, $a5, $a2
	slt	$a6, $a4, $a5
	masknez	$a7, $a5, $a6
	maskeqz	$a6, $a4, $a6
	or	$a6, $a6, $a7
	slt	$a7, $a5, $a4
	masknez	$a5, $a5, $a7
	maskeqz	$a4, $a4, $a7
	or	$a4, $a4, $a5
	addi.w	$a5, $a4, 1
	mul.d	$a4, $a5, $a4
	bstrpick.d	$a5, $a4, 31, 31
	add.w	$a4, $a4, $a5
	srli.d	$a4, $a4, 1
	add.w	$a4, $a4, $a6
	slli.d	$a4, $a4, 2
	stx.w	$a3, $s7, $a4
	ld.w	$a4, $s8, 852
	addi.d	$a0, $a0, 1
	addi.d	$a1, $a1, 72
	blt	$a0, $a4, .LBB91_19
.LBB91_20:                              # %.preheader532
	ld.w	$a0, $s8, 884
	blez	$a0, .LBB91_23
# %bb.21:                               # %.lr.ph551
	move	$a0, $zero
	ld.d	$a2, $s8, 896
	vreplgr2vr.d	$vr0, $s6
	lu12i.w	$a1, -69906
	ori	$a1, $a1, 3823
	addi.d	$a2, $a2, 32
	move	$a3, $a1
	lu32i.d	$a3, -69906
	lu52i.d	$a3, $a3, -274
	vreplgr2vr.d	$vr1, $a3
	addi.w	$a3, $zero, -1
	lu32i.d	$a3, 0
	.p2align	4, , 16
.LBB91_22:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a2, -8
	ld.d	$a5, $a2, -16
	sub.d	$a4, $a4, $s6
	ld.d	$a6, $a2, 0
	srli.d	$a4, $a4, 3
	mul.d	$a4, $a4, $a1
	vinsgr2vr.d	$vr2, $a5, 0
	vinsgr2vr.d	$vr2, $a6, 1
	vsub.d	$vr2, $vr2, $vr0
	vsrli.d	$vr2, $vr2, 3
	vmul.d	$vr2, $vr2, $vr1
	vshuf4i.w	$vr3, $vr2, 8
	vinsgr2vr.w	$vr4, $a4, 0
	vinsgr2vr.w	$vr4, $a4, 1
	vmin.w	$vr5, $vr4, $vr3
	vmax.w	$vr3, $vr4, $vr3
	vaddi.wu	$vr4, $vr3, 1
	vmul.w	$vr6, $vr4, $vr3
	vsrli.w	$vr6, $vr6, 31
	vmadd.w	$vr6, $vr4, $vr3
	vsrai.w	$vr3, $vr6, 1
	vadd.w	$vr3, $vr3, $vr5
	vpickve2gr.w	$a4, $vr3, 0
	slli.d	$a4, $a4, 2
	stx.w	$a3, $s7, $a4
	vpickve2gr.w	$a4, $vr3, 1
	slli.d	$a4, $a4, 2
	stx.w	$a3, $s7, $a4
	vpickve2gr.w	$a4, $vr2, 0
	vpickve2gr.w	$a5, $vr2, 2
	slt	$a6, $a5, $a4
	masknez	$a7, $a4, $a6
	maskeqz	$a6, $a5, $a6
	or	$a6, $a6, $a7
	slt	$a7, $a4, $a5
	masknez	$a4, $a4, $a7
	maskeqz	$a5, $a5, $a7
	or	$a4, $a5, $a4
	addi.w	$a5, $a4, 1
	mul.d	$a4, $a5, $a4
	bstrpick.d	$a5, $a4, 31, 31
	add.w	$a4, $a4, $a5
	srli.d	$a4, $a4, 1
	add.w	$a4, $a4, $a6
	slli.d	$a4, $a4, 2
	stx.w	$a3, $s7, $a4
	ld.w	$a4, $s8, 884
	addi.d	$a0, $a0, 1
	addi.d	$a2, $a2, 72
	blt	$a0, $a4, .LBB91_22
.LBB91_23:                              # %.preheader531
	st.d	$s8, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 48                    # 8-byte Folded Spill
	blez	$s5, .LBB91_56
# %bb.24:                               # %.lr.ph558
	move	$a0, $zero
	fld.s	$fa0, $sp, 60                   # 4-byte Folded Reload
	fneg.s	$fa0, $fa0
	fst.s	$fa0, $sp, 36                   # 4-byte Folded Spill
	ori	$s7, $zero, 1
	addi.w	$s6, $zero, -1
	movgr2fr.w	$fs3, $zero
	b	.LBB91_26
	.p2align	4, , 16
.LBB91_25:                              # %.loopexit530
                                        #   in Loop: Header=BB91_26 Depth=1
	addi.d	$s7, $s7, 1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	beq	$a0, $s5, .LBB91_56
.LBB91_26:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_33 Depth 2
                                        #       Child Loop BB91_44 Depth 3
	addi.d	$a1, $a0, 1
	st.d	$a1, $sp, 16                    # 8-byte Folded Spill
	bgeu	$a1, $s5, .LBB91_25
# %bb.27:                               # %.lr.ph554
                                        #   in Loop: Header=BB91_26 Depth=1
	addi.w	$s8, $a0, 0
	ori	$a1, $zero, 120
	mul.d	$s2, $a0, $a1
	move	$s4, $s7
	b	.LBB91_33
.LBB91_28:                              #   in Loop: Header=BB91_33 Depth=2
	fadd.s	$fa0, $fa0, $fa0
	fst.s	$fa0, $s3, 96
.LBB91_29:                              #   in Loop: Header=BB91_33 Depth=2
	frecip.s	$fa0, $fa0
.LBB91_30:                              #   in Loop: Header=BB91_33 Depth=2
.Ltmp326:                               # EH_LABEL
	fld.s	$fs7, $fp, 48
	fld.s	$fs1, $s3, 48
	fld.s	$fs2, $fp, 52
	fld.s	$fs5, $s3, 52
	fld.s	$fs0, $fp, 56
	fld.s	$fs6, $s3, 56
	addi.d	$a1, $sp, 128
	ld.d	$fp, $sp, 40                    # 8-byte Folded Reload
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendNodeERK9btVector3f)
	jirl	$ra, $ra, 0
.Ltmp327:                               # EH_LABEL
# %bb.31:                               #   in Loop: Header=BB91_33 Depth=2
	fsub.s	$fa0, $fs7, $fs1
	fsub.s	$fa1, $fs2, $fs5
	fsub.s	$fa2, $fs0, $fs6
	fmul.s	$fa0, $fs4, $fa0
	fmul.s	$fa1, $fs4, $fa1
	fmul.s	$fa2, $fs4, $fa2
	fadd.s	$fa0, $fs1, $fa0
	fadd.s	$fa1, $fs5, $fa1
	fadd.s	$fa2, $fs6, $fa2
	ld.w	$a0, $fp, 820
	movfr2gr.s	$a1, $fa0
	movfr2gr.s	$a2, $fa1
	bstrins.d	$a1, $a2, 63, 32
	addi.w	$a0, $a0, -1
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	st.w	$a0, $a2, 0
	ld.d	$a2, $fp, 832
	movfr2gr.s	$a3, $fa2
	bstrpick.d	$a3, $a3, 31, 0
	ori	$a4, $zero, 120
	mul.d	$a0, $a0, $a4
	add.d	$a0, $a2, $a0
	st.d	$a1, $a0, 48
	st.d	$a3, $a0, 56
	.p2align	4, , 16
.LBB91_32:                              # %_ZL13ImplicitSolvePN10btSoftBody10ImplicitFnERK9btVector3S4_fi.exit.thread
                                        #   in Loop: Header=BB91_33 Depth=2
	addi.d	$s4, $s4, 1
	beq	$s4, $s5, .LBB91_25
.LBB91_33:                              #   Parent Loop BB91_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_44 Depth 3
	addi.w	$a0, $s4, 0
	slt	$a1, $s8, $a0
	masknez	$a2, $a0, $a1
	maskeqz	$a1, $s8, $a1
	or	$a1, $a1, $a2
	slt	$a2, $a0, $s8
	masknez	$a0, $a0, $a2
	maskeqz	$a2, $s8, $a2
	or	$a0, $a2, $a0
	addi.d	$a2, $a0, 1
	mul.d	$a0, $a2, $a0
	bstrpick.d	$a0, $a0, 31, 1
	add.w	$s0, $a0, $a1
	slli.d	$a0, $s0, 2
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	ldx.w	$a0, $a1, $a0
	bne	$a0, $s6, .LBB91_32
# %bb.34:                               #   in Loop: Header=BB91_33 Depth=2
	ld.d	$a0, $s1, 0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $a1, 832
	ld.d	$a2, $a0, 0
	add.d	$s3, $fp, $s2
	addi.d	$a1, $s3, 16
.Ltmp318:                               # EH_LABEL
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp319:                               # EH_LABEL
# %bb.35:                               # %.noexc
                                        #   in Loop: Header=BB91_33 Depth=2
	fmov.s	$fs1, $fa0
	ld.d	$a0, $s1, 0
	ld.d	$a2, $a0, 0
	ori	$a0, $zero, 120
	mul.d	$a0, $s4, $a0
	add.d	$fp, $fp, $a0
	addi.d	$a1, $fp, 16
.Ltmp320:                               # EH_LABEL
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp321:                               # EH_LABEL
# %bb.36:                               # %.noexc336
                                        #   in Loop: Header=BB91_33 Depth=2
	vldi	$vr1, -1168
	fcmp.cule.s	$fcc0, $fs1, $fa0
	bcnez	$fcc0, .LBB91_38
# %bb.37:                               #   in Loop: Header=BB91_33 Depth=2
	vst	$vr1, $sp, 64                   # 16-byte Folded Spill
	fmov.s	$fa1, $fs3
	vst	$vr1, $sp, 80                   # 16-byte Folded Spill
	fmov.s	$fs5, $fs1
	fmov.s	$fs1, $fa0
	b	.LBB91_39
.LBB91_38:                              #   in Loop: Header=BB91_33 Depth=2
	vst	$vr1, $sp, 80                   # 16-byte Folded Spill
	fmov.s	$fa1, $fs3
	vst	$vr1, $sp, 64                   # 16-byte Folded Spill
	fmov.s	$fs5, $fa0
.LBB91_39:                              #   in Loop: Header=BB91_33 Depth=2
	fld.s	$fa0, $sp, 60                   # 4-byte Folded Reload
	fcmp.clt.s	$fcc0, $fs5, $fa0
	bcnez	$fcc0, .LBB91_32
# %bb.40:                               #   in Loop: Header=BB91_33 Depth=2
	fld.s	$fa0, $sp, 36                   # 4-byte Folded Reload
	fcmp.clt.s	$fcc0, $fa0, $fs1
	bcnez	$fcc0, .LBB91_32
# %bb.41:                               # %.preheader.i
                                        #   in Loop: Header=BB91_33 Depth=2
	ld.d	$a0, $sp, 48                    # 8-byte Folded Reload
	alsl.d	$a0, $s0, $a0, 2
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	ori	$s0, $zero, 256
	b	.LBB91_44
	.p2align	4, , 16
.LBB91_42:                              #   in Loop: Header=BB91_44 Depth=3
	fmov.s	$fa1, $fs4
	vst	$vr1, $sp, 80                   # 16-byte Folded Spill
	fmov.s	$fs5, $fa0
.LBB91_43:                              #   in Loop: Header=BB91_44 Depth=3
	addi.w	$s0, $s0, -1
	beqz	$s0, .LBB91_32
.LBB91_44:                              #   Parent Loop BB91_26 Depth=1
                                        #     Parent Loop BB91_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	fsub.s	$fa0, $fs1, $fs5
	fdiv.s	$fa0, $fs1, $fa0
	vld	$vr1, $sp, 80                   # 16-byte Folded Reload
	vld	$vr8, $sp, 64                   # 16-byte Folded Reload
	fsub.s	$fa1, $fa1, $ft0
	fld.s	$fa2, $fp, 16
	fld.s	$fa3, $s3, 16
	fld.s	$fa4, $fp, 20
	fld.s	$fa5, $s3, 20
	fld.s	$fa6, $fp, 24
	fld.s	$fa7, $s3, 24
	fmadd.s	$fs4, $fa1, $fa0, $ft0
	fsub.s	$fa0, $fa2, $fa3
	fsub.s	$fa1, $fa4, $fa5
	fsub.s	$fa2, $fa6, $fa7
	fmul.s	$fa0, $fs4, $fa0
	fmul.s	$fa1, $fs4, $fa1
	fmul.s	$fa2, $fs4, $fa2
	fadd.s	$fa0, $fa3, $fa0
	fadd.s	$fa1, $fa5, $fa1
	fadd.s	$fa2, $fa7, $fa2
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	st.d	$a0, $sp, 128
	ld.d	$a0, $s1, 0
	movfr2gr.s	$a1, $fa2
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a1, $sp, 136
	ld.d	$a2, $a0, 0
.Ltmp323:                               # EH_LABEL
	addi.d	$a1, $sp, 128
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp324:                               # EH_LABEL
# %bb.45:                               # %.noexc337
                                        #   in Loop: Header=BB91_44 Depth=3
	fcmp.cle.s	$fcc0, $fs4, $fs3
	bcnez	$fcc0, .LBB91_32
# %bb.46:                               # %.noexc337
                                        #   in Loop: Header=BB91_44 Depth=3
	vldi	$vr1, -1168
	fcmp.cle.s	$fcc0, $fa1, $fs4
	bcnez	$fcc0, .LBB91_32
# %bb.47:                               #   in Loop: Header=BB91_44 Depth=3
	fabs.s	$fa1, $fa0
	fld.s	$fa2, $sp, 60                   # 4-byte Folded Reload
	fcmp.clt.s	$fcc0, $fa1, $fa2
	bcnez	$fcc0, .LBB91_50
# %bb.48:                               #   in Loop: Header=BB91_44 Depth=3
	movgr2fr.w	$fa1, $zero
	fcmp.clt.s	$fcc0, $fa0, $fa1
	bceqz	$fcc0, .LBB91_42
# %bb.49:                               #   in Loop: Header=BB91_44 Depth=3
	fmov.s	$fa1, $fs4
	vst	$vr1, $sp, 64                   # 16-byte Folded Spill
	fmov.s	$fs1, $fa0
	b	.LBB91_43
.LBB91_50:                              # %_ZL13ImplicitSolvePN10btSoftBody10ImplicitFnERK9btVector3S4_fi.exit
                                        #   in Loop: Header=BB91_33 Depth=2
	fcmp.cule.s	$fcc0, $fs4, $fs3
	bcnez	$fcc0, .LBB91_32
# %bb.51:                               #   in Loop: Header=BB91_33 Depth=2
	fld.s	$fa0, $fp, 16
	fld.s	$fa1, $s3, 16
	fld.s	$fa2, $fp, 20
	fld.s	$fa3, $s3, 20
	fld.s	$fa4, $fp, 24
	fld.s	$fa5, $s3, 24
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa2, $fa2, $fa3
	fsub.s	$fa4, $fa4, $fa5
	fmul.s	$fa0, $fs4, $fa0
	fmul.s	$fa2, $fs4, $fa2
	fmul.s	$fa4, $fs4, $fa4
	fadd.s	$fa0, $fa1, $fa0
	fadd.s	$fa1, $fa3, $fa2
	fadd.s	$fa2, $fa5, $fa4
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa2
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $sp, 128
	st.d	$a1, $sp, 136
	fld.s	$fa0, $s3, 96
	fld.s	$fa1, $fp, 96
	fcmp.cule.s	$fcc0, $fa0, $fs3
	bcnez	$fcc0, .LBB91_54
# %bb.52:                               #   in Loop: Header=BB91_33 Depth=2
	fcmp.cule.s	$fcc0, $fa1, $fs3
	bcnez	$fcc0, .LBB91_28
# %bb.53:                               #   in Loop: Header=BB91_33 Depth=2
	frecip.s	$fa0, $fa0
	frecip.s	$fa1, $fa1
	fsub.s	$fa2, $fa1, $fa0
	fmadd.s	$fa2, $fa2, $fs4, $fa0
	fadd.s	$fa3, $fa0, $fa1
	fadd.s	$fa4, $fa3, $fa2
	fdiv.s	$fa3, $fa3, $fa4
	fmul.s	$fa0, $fa0, $fa3
	frecip.s	$fa0, $fa0
	fst.s	$fa0, $s3, 96
	fmul.s	$fa0, $fa1, $fa3
	frecip.s	$fa0, $fa0
	fst.s	$fa0, $fp, 96
	fmul.s	$fa0, $fa2, $fa3
	b	.LBB91_30
.LBB91_54:                              #   in Loop: Header=BB91_33 Depth=2
	movgr2fr.w	$fa0, $zero
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB91_30
# %bb.55:                               #   in Loop: Header=BB91_33 Depth=2
	fadd.s	$fa0, $fa1, $fa1
	fst.s	$fa0, $fp, 96
	b	.LBB91_29
.LBB91_56:                              # %._crit_edge
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a1, $a0, 852
	ld.d	$s6, $a0, 832
	blez	$a1, .LBB91_64
# %bb.57:                               # %.lr.ph561
	move	$fp, $zero
	move	$s3, $zero
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a0, $a0, 864
	slli.d	$a2, $a1, 6
	alsl.d	$a1, $a1, $a2, 3
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	lu12i.w	$a1, -69906
	ori	$a1, $a1, 3823
	lu32i.d	$a1, -69906
	lu52i.d	$s0, $a1, -274
	b	.LBB91_59
	.p2align	4, , 16
.LBB91_58:                              #   in Loop: Header=BB91_59 Depth=1
	addi.d	$fp, $fp, 72
	addi.w	$s3, $s3, 1
	ld.d	$a1, $sp, 80                    # 8-byte Folded Reload
	beq	$a1, $fp, .LBB91_64
.LBB91_59:                              # =>This Inner Loop Header: Depth=1
	add.d	$a1, $a0, $fp
	ld.d	$a2, $a1, 16
	sub.d	$a2, $a2, $s6
	srai.d	$a2, $a2, 3
	mul.w	$s8, $a2, $s0
	bge	$s8, $s5, .LBB91_58
# %bb.60:                               #   in Loop: Header=BB91_59 Depth=1
	ld.d	$a1, $a1, 24
	sub.d	$a1, $a1, $s6
	srai.d	$a1, $a1, 3
	mul.w	$s7, $a1, $s0
	bge	$s7, $s5, .LBB91_58
# %bb.61:                               #   in Loop: Header=BB91_59 Depth=1
	slt	$a1, $s8, $s7
	masknez	$a2, $s7, $a1
	maskeqz	$a1, $s8, $a1
	or	$a1, $a1, $a2
	slt	$a2, $s7, $s8
	masknez	$a3, $s7, $a2
	maskeqz	$a2, $s8, $a2
	or	$a2, $a2, $a3
	addi.w	$a3, $a2, 1
	mul.d	$a2, $a3, $a2
	bstrpick.d	$a3, $a2, 31, 31
	add.w	$a2, $a2, $a3
	srli.d	$a2, $a2, 1
	add.w	$a1, $a2, $a1
	slli.d	$a1, $a1, 2
	ld.d	$a2, $sp, 48                    # 8-byte Folded Reload
	ldx.w	$s4, $a2, $a1
	blez	$s4, .LBB91_58
# %bb.62:                               #   in Loop: Header=BB91_59 Depth=1
.Ltmp329:                               # EH_LABEL
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	move	$a0, $s2
	move	$a1, $s3
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendLinkEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
.Ltmp330:                               # EH_LABEL
# %bb.63:                               #   in Loop: Header=BB91_59 Depth=1
	ld.d	$a1, $s2, 832
	ld.d	$a0, $s2, 864
	ld.w	$a2, $s2, 852
	ori	$a5, $zero, 120
	mul.d	$a3, $s8, $a5
	add.d	$a1, $a1, $a3
	add.d	$a3, $a0, $fp
	st.d	$a1, $a3, 16
	ld.d	$a1, $s2, 832
	mul.d	$a4, $s4, $a5
	add.d	$a1, $a1, $a4
	st.d	$a1, $a3, 24
	ld.d	$a1, $s2, 832
	slli.d	$a3, $a2, 6
	alsl.d	$a2, $a2, $a3, 3
	add.d	$a2, $a0, $a2
	add.d	$a1, $a1, $a4
	st.d	$a1, $a2, -56
	ld.d	$a1, $s2, 832
	mul.d	$a3, $s7, $a5
	add.d	$a1, $a1, $a3
	st.d	$a1, $a2, -48
	b	.LBB91_58
.LBB91_64:                              # %.preheader528
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 884
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	blez	$a0, .LBB91_82
# %bb.65:                               # %.lr.ph565
	move	$s3, $zero
	lu12i.w	$a1, -69906
	ori	$a1, $a1, 3823
	lu32i.d	$a1, -69906
	lu52i.d	$s2, $a1, -274
	addi.w	$a1, $zero, -1
	st.d	$a1, $sp, 80                    # 8-byte Folded Spill
	b	.LBB91_67
	.p2align	4, , 16
.LBB91_66:                              # %.thread.2
                                        #   in Loop: Header=BB91_67 Depth=1
	addi.w	$s3, $s3, 1
	bge	$s3, $a0, .LBB91_82
.LBB91_67:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a1, $a1, 896
	slli.d	$a2, $s3, 6
	alsl.d	$a2, $s3, $a2, 3
	add.d	$a1, $a1, $a2
	ld.d	$a2, $a1, 16
	sub.d	$a2, $a2, $s6
	srai.d	$a2, $a2, 3
	mul.w	$fp, $a2, $s2
	st.w	$fp, $sp, 128
	ld.d	$a2, $a1, 24
	sub.d	$a2, $a2, $s6
	ld.d	$a3, $a1, 32
	srai.d	$a1, $a2, 3
	mul.w	$a1, $a1, $s2
	st.w	$a1, $sp, 104
	sub.d	$a2, $a3, $s6
	srai.d	$a2, $a2, 3
	mul.w	$a2, $a2, $s2
	st.w	$a2, $sp, 124
	bge	$a2, $s5, .LBB91_71
# %bb.68:                               #   in Loop: Header=BB91_67 Depth=1
	bge	$fp, $s5, .LBB91_71
# %bb.69:                               #   in Loop: Header=BB91_67 Depth=1
	slt	$a3, $a2, $fp
	masknez	$a4, $fp, $a3
	maskeqz	$a3, $a2, $a3
	or	$a3, $a3, $a4
	slt	$a4, $fp, $a2
	masknez	$a5, $fp, $a4
	maskeqz	$a4, $a2, $a4
	or	$a4, $a4, $a5
	addi.w	$a5, $a4, 1
	mul.d	$a4, $a5, $a4
	bstrpick.d	$a5, $a4, 31, 31
	add.w	$a4, $a4, $a5
	srli.d	$a4, $a4, 1
	add.w	$a3, $a4, $a3
	slli.d	$a3, $a3, 2
	ldx.w	$a3, $s7, $a3
	blez	$a3, .LBB91_71
# %bb.70:                               #   in Loop: Header=BB91_67 Depth=1
	bstrpick.d	$s0, $a3, 31, 0
	addi.d	$s4, $sp, 104
	move	$s7, $a2
	b	.LBB91_79
	.p2align	4, , 16
.LBB91_71:                              # %.thread
                                        #   in Loop: Header=BB91_67 Depth=1
	bge	$fp, $s5, .LBB91_75
# %bb.72:                               # %.thread
                                        #   in Loop: Header=BB91_67 Depth=1
	bge	$a1, $s5, .LBB91_75
# %bb.73:                               #   in Loop: Header=BB91_67 Depth=1
	slt	$a3, $fp, $a1
	masknez	$a4, $a1, $a3
	maskeqz	$a3, $fp, $a3
	or	$a3, $a3, $a4
	slt	$a4, $a1, $fp
	masknez	$a5, $a1, $a4
	maskeqz	$a4, $fp, $a4
	or	$a4, $a4, $a5
	addi.w	$a5, $a4, 1
	mul.d	$a4, $a5, $a4
	bstrpick.d	$a5, $a4, 31, 31
	add.w	$a4, $a4, $a5
	srli.d	$a4, $a4, 1
	add.w	$a3, $a4, $a3
	slli.d	$a3, $a3, 2
	ldx.w	$a3, $s7, $a3
	blez	$a3, .LBB91_75
# %bb.74:                               #   in Loop: Header=BB91_67 Depth=1
	bstrpick.d	$s0, $a3, 31, 0
	addi.d	$s4, $sp, 124
	move	$s7, $fp
	move	$fp, $a1
	b	.LBB91_79
	.p2align	4, , 16
.LBB91_75:                              # %.thread.1
                                        #   in Loop: Header=BB91_67 Depth=1
	bge	$a1, $s5, .LBB91_66
# %bb.76:                               # %.thread.1
                                        #   in Loop: Header=BB91_67 Depth=1
	bge	$a2, $s5, .LBB91_66
# %bb.77:                               #   in Loop: Header=BB91_67 Depth=1
	slt	$a3, $a1, $a2
	masknez	$a4, $a2, $a3
	maskeqz	$a3, $a1, $a3
	or	$a3, $a3, $a4
	slt	$a4, $a2, $a1
	masknez	$a5, $a2, $a4
	maskeqz	$a4, $a1, $a4
	or	$a4, $a4, $a5
	addi.w	$a5, $a4, 1
	mul.d	$a4, $a5, $a4
	bstrpick.d	$a5, $a4, 31, 31
	add.w	$a4, $a4, $a5
	srli.d	$a4, $a4, 1
	add.w	$a3, $a4, $a3
	slli.d	$a3, $a3, 2
	ldx.w	$a3, $s7, $a3
	blez	$a3, .LBB91_66
# %bb.78:                               #   in Loop: Header=BB91_67 Depth=1
	bstrpick.d	$s0, $a3, 31, 0
	addi.d	$s4, $sp, 128
	move	$s7, $a1
	move	$fp, $a2
.LBB91_79:                              #   in Loop: Header=BB91_67 Depth=1
.Ltmp332:                               # EH_LABEL
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	move	$a0, $s8
	move	$a1, $s3
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendFaceEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
.Ltmp333:                               # EH_LABEL
# %bb.80:                               #   in Loop: Header=BB91_67 Depth=1
	ld.d	$a0, $s8, 896
	ori	$a5, $zero, 72
	mul.d	$a1, $s3, $a5
	ld.w	$a2, $s4, 0
	ld.d	$a3, $s8, 832
	add.d	$a1, $a0, $a1
	ld.w	$a4, $s8, 884
	ori	$a6, $zero, 120
	mul.d	$s4, $a2, $a6
	add.d	$a2, $a3, $s4
	st.d	$a2, $a1, 16
	ld.d	$a2, $s8, 832
	mul.d	$a3, $s7, $a6
	add.d	$a2, $a2, $a3
	st.d	$a2, $a1, 24
	ld.d	$a2, $s8, 832
	mul.d	$s0, $s0, $a6
	add.d	$a2, $a2, $s0
	st.d	$a2, $a1, 32
	ld.d	$a2, $s8, 832
	mul.d	$a3, $a4, $a5
	add.d	$a0, $a0, $a3
	add.d	$a2, $a2, $s0
	st.d	$a2, $a0, -56
	ld.d	$a2, $s8, 832
	mul.d	$a3, $fp, $a6
	add.d	$a2, $a2, $a3
	st.d	$a2, $a0, -48
	ld.d	$a2, $s8, 832
	add.d	$a2, $a2, $s4
	st.d	$a2, $a0, -40
	ld.d	$a2, $a1, 8
	ld.d	$fp, $s8, 832
.Ltmp335:                               # EH_LABEL
	move	$a0, $s8
	ld.d	$a1, $sp, 80                    # 8-byte Folded Reload
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendLinkEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
.Ltmp336:                               # EH_LABEL
# %bb.81:                               #   in Loop: Header=BB91_67 Depth=1
	ld.w	$a0, $s8, 852
	add.d	$a1, $fp, $s4
	ld.d	$a2, $s8, 864
	add.d	$a3, $fp, $s0
	slli.d	$a4, $a0, 6
	alsl.d	$a0, $a0, $a4, 3
	add.d	$a0, $a2, $a0
	st.d	$a3, $a0, -56
	st.d	$a1, $a0, -48
	fld.s	$fa0, $a3, 16
	fld.s	$fa1, $a1, 16
	fld.s	$fa2, $a3, 20
	fld.s	$fa3, $a1, 20
	fld.s	$fa4, $a3, 24
	fld.s	$fa5, $a1, 24
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fsub.s	$fa2, $fa4, $fa5
	fmul.s	$fa1, $fa1, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	fsqrt.s	$fa0, $fa0
	fst.s	$fa0, $a0, -40
	ld.w	$a0, $s8, 884
	ori	$a1, $zero, 1
	st.b	$a1, $s8, 1140
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	blt	$s3, $a0, .LBB91_67
.LBB91_82:                              # %._crit_edge566
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	beqz	$a0, .LBB91_147
# %bb.83:
	ld.w	$fp, $s8, 820
	blez	$fp, .LBB91_95
# %bb.84:
	slli.d	$s3, $fp, 2
.Ltmp338:                               # EH_LABEL
	ori	$a1, $zero, 16
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp339:                               # EH_LABEL
# %bb.85:                               # %.lr.ph568.preheader
	move	$s2, $a0
	bstrpick.d	$fp, $fp, 31, 0
	move	$a1, $zero
	move	$a2, $s3
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	move	$s0, $zero
	ori	$s3, $zero, 96
	movgr2fr.w	$fs1, $zero
	ori	$s4, $zero, 120
	move	$s6, $s2
	b	.LBB91_89
	.p2align	4, , 16
.LBB91_86:                              #   in Loop: Header=BB91_89 Depth=1
.Ltmp344:                               # EH_LABEL
	addi.d	$a1, $sp, 128
	move	$a0, $s8
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendNodeERK9btVector3f)
	jirl	$ra, $ra, 0
.Ltmp345:                               # EH_LABEL
# %bb.87:                               #   in Loop: Header=BB91_89 Depth=1
	ld.w	$a0, $s8, 820
	addi.w	$a0, $a0, -1
	st.w	$a0, $s6, 0
	ld.d	$a1, $s8, 832
	vld	$vr0, $sp, 104
	mul.d	$a0, $a0, $s4
	add.d	$a0, $a1, $a0
	vst	$vr0, $a0, 48
.LBB91_88:                              #   in Loop: Header=BB91_89 Depth=1
	addi.d	$s0, $s0, 1
	addi.d	$s6, $s6, 4
	addi.d	$s3, $s3, 120
	beq	$fp, $s0, .LBB91_96
.LBB91_89:                              # %.lr.ph568
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s8, 832
	add.d	$a1, $a0, $s3
	vld	$vr0, $a1, -80
	vst	$vr0, $sp, 128
	bge	$s0, $s5, .LBB91_93
# %bb.90:                               #   in Loop: Header=BB91_89 Depth=1
	ld.d	$a0, $s1, 0
	ld.d	$a2, $a0, 0
.Ltmp341:                               # EH_LABEL
	addi.d	$a1, $sp, 128
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp342:                               # EH_LABEL
# %bb.91:                               #   in Loop: Header=BB91_89 Depth=1
	fabs.s	$fa0, $fa0
	fld.s	$fa1, $sp, 60                   # 4-byte Folded Reload
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB91_88
# %bb.92:                               # %._crit_edge644
                                        #   in Loop: Header=BB91_89 Depth=1
	ld.d	$a0, $s8, 832
.LBB91_93:                              #   in Loop: Header=BB91_89 Depth=1
	fldx.s	$fa1, $a0, $s3
	add.d	$a1, $a0, $s3
	vld	$vr2, $a1, -48
	frecip.s	$fa0, $fa1
	fcmp.clt.s	$fcc0, $fs1, $fa1
	fsel	$fa0, $fs1, $fa0, $fcc0
	fcmp.cule.s	$fcc0, $fa0, $fs1
	vst	$vr2, $sp, 104
	bcnez	$fcc0, .LBB91_86
# %bb.94:                               #   in Loop: Header=BB91_89 Depth=1
	vldi	$vr2, -1184
	fmul.s	$fa0, $fa0, $fa2
	fadd.s	$fa1, $fa1, $fa1
	fstx.s	$fa1, $a0, $s3
	b	.LBB91_86
.LBB91_95:
	move	$s2, $zero
.LBB91_96:                              # %._crit_edge569
	ld.w	$a0, $s8, 852
	ld.d	$s4, $s8, 832
	blez	$a0, .LBB91_112
# %bb.97:                               # %.lr.ph574
	move	$fp, $zero
	move	$s3, $zero
	slli.d	$a1, $a0, 6
	alsl.d	$s5, $a0, $a1, 3
	lu12i.w	$a0, -69906
	ori	$a0, $a0, 3823
	lu32i.d	$a0, -69906
	lu52i.d	$s6, $a0, -274
	ori	$s7, $zero, 120
	ori	$a0, $zero, 0
	lu32i.d	$a0, -69905
	lu52i.d	$s8, $a0, -274
	b	.LBB91_99
	.p2align	4, , 16
.LBB91_98:                              # %.thread491
                                        #   in Loop: Header=BB91_99 Depth=1
	addi.d	$fp, $fp, 72
	addi.w	$s3, $s3, 1
	beq	$s5, $fp, .LBB91_112
.LBB91_99:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a0, $a0, 864
	add.d	$a1, $a0, $fp
	ld.d	$a0, $a1, 16
	sub.d	$a0, $a0, $s4
	srli.d	$a0, $a0, 3
	mul.w	$a0, $a0, $s6
	ld.d	$a1, $a1, 24
	slli.d	$a2, $a0, 2
	ldx.w	$a2, $s2, $a2
	sub.d	$a1, $a1, $s4
	srai.d	$a1, $a1, 3
	mul.w	$s0, $a1, $s6
	beqz	$a2, .LBB91_103
# %bb.100:                              #   in Loop: Header=BB91_99 Depth=1
	slli.d	$a1, $s0, 32
	srai.d	$a1, $a1, 30
	ldx.w	$a1, $s2, $a1
	beqz	$a1, .LBB91_103
# %bb.101:                              #   in Loop: Header=BB91_99 Depth=1
.Ltmp347:                               # EH_LABEL
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	move	$a1, $s3
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendLinkEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
.Ltmp348:                               # EH_LABEL
# %bb.102:                              #   in Loop: Header=BB91_99 Depth=1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a0, $a0, 852
	addi.w	$a0, $a0, -1
	b	.LBB91_107
	.p2align	4, , 16
.LBB91_103:                             #   in Loop: Header=BB91_99 Depth=1
	ld.d	$a1, $s1, 0
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a2, $a2, 832
	ld.d	$a3, $a1, 0
	mul.d	$a0, $a0, $s7
	add.d	$a0, $a2, $a0
	addi.d	$a1, $a0, 16
.Ltmp349:                               # EH_LABEL
	move	$a0, $s1
	jirl	$ra, $a3, 0
.Ltmp350:                               # EH_LABEL
# %bb.104:                              #   in Loop: Header=BB91_99 Depth=1
	fld.s	$fa1, $sp, 60                   # 4-byte Folded Reload
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB91_98
# %bb.105:                              #   in Loop: Header=BB91_99 Depth=1
	ld.d	$a0, $s1, 0
	ld.d	$a1, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a1, $a1, 832
	ld.d	$a2, $a0, 0
	mul.d	$a0, $s0, $s7
	add.d	$a0, $a1, $a0
	addi.d	$a1, $a0, 16
.Ltmp351:                               # EH_LABEL
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp352:                               # EH_LABEL
# %bb.106:                              #   in Loop: Header=BB91_99 Depth=1
	fld.s	$fa1, $sp, 60                   # 4-byte Folded Reload
	fcmp.cule.s	$fcc0, $fa1, $fa0
	move	$a0, $s3
	bcnez	$fcc0, .LBB91_98
.LBB91_107:                             #   in Loop: Header=BB91_99 Depth=1
	beqz	$a0, .LBB91_98
# %bb.108:                              #   in Loop: Header=BB91_99 Depth=1
	ld.d	$a3, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a1, $a3, 864
	slli.d	$a2, $a0, 6
	alsl.d	$a0, $a0, $a2, 3
	add.d	$a0, $a1, $a0
	ld.d	$a1, $a0, 16
	sub.d	$a1, $a1, $s4
	srli.d	$a1, $a1, 3
	mul.d	$a1, $a1, $s8
	srai.d	$a1, $a1, 30
	ldx.w	$a1, $s2, $a1
	beqz	$a1, .LBB91_110
# %bb.109:                              #   in Loop: Header=BB91_99 Depth=1
	ld.d	$a2, $a3, 832
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a2, $a1
	st.d	$a1, $a0, 16
.LBB91_110:                             #   in Loop: Header=BB91_99 Depth=1
	ld.d	$a1, $a0, 24
	sub.d	$a1, $a1, $s4
	srli.d	$a1, $a1, 3
	mul.d	$a1, $a1, $s8
	srai.d	$a1, $a1, 30
	ldx.w	$a1, $s2, $a1
	beqz	$a1, .LBB91_98
# %bb.111:                              #   in Loop: Header=BB91_99 Depth=1
	ld.d	$a2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$a2, $a2, 832
	mul.d	$a1, $a1, $s7
	add.d	$a1, $a2, $a1
	st.d	$a1, $a0, 24
	b	.LBB91_98
.LBB91_112:                             # %._crit_edge575
	ld.d	$s8, $sp, 40                    # 8-byte Folded Reload
	ld.w	$a0, $s8, 884
	blez	$a0, .LBB91_127
# %bb.113:                              # %.lr.ph579
	move	$fp, $zero
	slli.d	$a1, $a0, 6
	alsl.d	$s3, $a0, $a1, 3
	ori	$a0, $zero, 0
	lu32i.d	$a0, -69905
	lu52i.d	$s5, $a0, -274
	ori	$s6, $zero, 120
	b	.LBB91_115
	.p2align	4, , 16
.LBB91_114:                             # %.loopexit
                                        #   in Loop: Header=BB91_115 Depth=1
	addi.d	$fp, $fp, 72
	beq	$s3, $fp, .LBB91_127
.LBB91_115:                             # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s8, 896
	ld.d	$a1, $s1, 0
	add.d	$s0, $a0, $fp
	ld.d	$a0, $s0, 16
	ld.d	$a2, $a1, 0
	addi.d	$a1, $a0, 16
.Ltmp354:                               # EH_LABEL
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp355:                               # EH_LABEL
# %bb.116:                              #   in Loop: Header=BB91_115 Depth=1
	fld.s	$fa1, $sp, 60                   # 4-byte Folded Reload
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB91_114
# %bb.117:                              #   in Loop: Header=BB91_115 Depth=1
	ld.d	$a0, $s1, 0
	ld.d	$a1, $s0, 24
	ld.d	$a2, $a0, 0
	addi.d	$a1, $a1, 16
.Ltmp356:                               # EH_LABEL
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp357:                               # EH_LABEL
# %bb.118:                              #   in Loop: Header=BB91_115 Depth=1
	fld.s	$fa1, $sp, 60                   # 4-byte Folded Reload
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB91_114
# %bb.119:                              #   in Loop: Header=BB91_115 Depth=1
	ld.d	$a0, $s1, 0
	ld.d	$a1, $s0, 32
	ld.d	$a2, $a0, 0
	addi.d	$a1, $a1, 16
.Ltmp358:                               # EH_LABEL
	move	$a0, $s1
	jirl	$ra, $a2, 0
.Ltmp359:                               # EH_LABEL
# %bb.120:                              #   in Loop: Header=BB91_115 Depth=1
	fld.s	$fa1, $sp, 60                   # 4-byte Folded Reload
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB91_114
# %bb.121:                              # %.preheader526.preheader
                                        #   in Loop: Header=BB91_115 Depth=1
	ld.d	$a0, $s0, 16
	sub.d	$a0, $a0, $s4
	srli.d	$a0, $a0, 3
	mul.d	$a0, $a0, $s5
	srai.d	$a0, $a0, 30
	ldx.w	$a0, $s2, $a0
	beqz	$a0, .LBB91_123
# %bb.122:                              #   in Loop: Header=BB91_115 Depth=1
	ld.d	$a1, $s8, 832
	mul.d	$a0, $a0, $s6
	add.d	$a0, $a1, $a0
	st.d	$a0, $s0, 16
.LBB91_123:                             # %.preheader526.1
                                        #   in Loop: Header=BB91_115 Depth=1
	ld.d	$a0, $s0, 24
	sub.d	$a0, $a0, $s4
	srli.d	$a0, $a0, 3
	mul.d	$a0, $a0, $s5
	srai.d	$a0, $a0, 30
	ldx.w	$a0, $s2, $a0
	beqz	$a0, .LBB91_125
# %bb.124:                              #   in Loop: Header=BB91_115 Depth=1
	ld.d	$a1, $s8, 832
	mul.d	$a0, $a0, $s6
	add.d	$a0, $a1, $a0
	st.d	$a0, $s0, 24
.LBB91_125:                             # %.preheader526.2
                                        #   in Loop: Header=BB91_115 Depth=1
	ld.d	$a0, $s0, 32
	sub.d	$a0, $a0, $s4
	srli.d	$a0, $a0, 3
	mul.d	$a0, $a0, $s5
	srai.d	$a0, $a0, 30
	ldx.w	$a0, $s2, $a0
	beqz	$a0, .LBB91_114
# %bb.126:                              #   in Loop: Header=BB91_115 Depth=1
	ld.d	$a1, $s8, 832
	mul.d	$a0, $a0, $s6
	add.d	$a0, $a1, $a0
	st.d	$a0, $s0, 32
	b	.LBB91_114
.LBB91_127:                             # %._crit_edge580
	ld.w	$a0, $s8, 820
	blez	$a0, .LBB91_130
# %bb.128:
	slli.d	$s3, $a0, 2
.Ltmp361:                               # EH_LABEL
	ori	$a1, $zero, 16
	move	$a0, $s3
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp362:                               # EH_LABEL
# %bb.129:                              # %.lr.ph.i357
	move	$s1, $a0
	move	$a1, $zero
	move	$a2, $s3
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	b	.LBB91_131
.LBB91_130:
	move	$s1, $zero
.LBB91_131:                             # %_ZN20btAlignedObjectArrayIiE6resizeEiRKi.exit382
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	ld.w	$a0, $s8, 852
	vreplgr2vr.d	$vr2, $s4
	blez	$a0, .LBB91_134
# %bb.132:                              # %.preheader525.lr.ph
	ld.d	$a1, $s8, 864
	addi.d	$a1, $a1, 16
	ori	$a2, $zero, 0
	lu32i.d	$a2, -69905
	lu52i.d	$a2, $a2, -274
	vreplgr2vr.d	$vr0, $a2
	.p2align	4, , 16
.LBB91_133:                             # %.preheader525
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr1, $a1, 0
	vsub.d	$vr1, $vr1, $vr2
	vsrli.d	$vr1, $vr1, 3
	vmul.d	$vr1, $vr1, $vr0
	vsrai.d	$vr1, $vr1, 30
	vpickve2gr.d	$a2, $vr1, 0
	ldx.w	$a3, $s1, $a2
	addi.d	$a3, $a3, 1
	stx.w	$a3, $s1, $a2
	vpickve2gr.d	$a2, $vr1, 1
	ldx.w	$a3, $s1, $a2
	addi.d	$a3, $a3, 1
	stx.w	$a3, $s1, $a2
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 72
	bnez	$a0, .LBB91_133
.LBB91_134:                             # %._crit_edge583
	ld.w	$a0, $s8, 884
	blez	$a0, .LBB91_137
# %bb.135:                              # %.preheader524.lr.ph
	ld.d	$a1, $s8, 896
	addi.d	$a1, $a1, 32
	ori	$a2, $zero, 0
	lu32i.d	$a2, -69905
	lu52i.d	$a2, $a2, -274
	vreplgr2vr.d	$vr0, $a2
	.p2align	4, , 16
.LBB91_136:                             # %.preheader524
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr1, $a1, -16
	vsub.d	$vr1, $vr1, $vr2
	vsrli.d	$vr1, $vr1, 3
	vmul.d	$vr1, $vr1, $vr0
	vsrai.d	$vr1, $vr1, 30
	vpickve2gr.d	$a3, $vr1, 0
	ldx.w	$a4, $s1, $a3
	addi.d	$a4, $a4, 1
	stx.w	$a4, $s1, $a3
	vpickve2gr.d	$a3, $vr1, 1
	ldx.w	$a4, $s1, $a3
	addi.d	$a4, $a4, 1
	stx.w	$a4, $s1, $a3
	ld.d	$a3, $a1, 0
	sub.d	$a3, $a3, $s4
	srli.d	$a3, $a3, 3
	mul.d	$a3, $a3, $a2
	srai.d	$a3, $a3, 30
	ldx.w	$a4, $s1, $a3
	addi.d	$a4, $a4, 1
	stx.w	$a4, $s1, $a3
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 72
	bnez	$a0, .LBB91_136
.LBB91_137:                             # %.preheader
	ld.w	$a0, $s8, 852
	blez	$a0, .LBB91_143
# %bb.138:                              # %.lr.ph587
	move	$fp, $zero
	ori	$a1, $zero, 0
	lu32i.d	$a1, -69905
	lu52i.d	$a1, $a1, -274
	vreplgr2vr.d	$vr1, $a1
	ori	$s0, $zero, 1
	ori	$s5, $zero, 72
	vst	$vr2, $sp, 80                   # 16-byte Folded Spill
	vst	$vr1, $sp, 64                   # 16-byte Folded Spill
	b	.LBB91_141
	.p2align	4, , 16
.LBB91_139:                             #   in Loop: Header=BB91_141 Depth=1
	addi.d	$a0, $a4, -1
	stx.w	$a0, $s1, $a3
	ldx.w	$a0, $s1, $a2
	addi.d	$a0, $a0, -1
	stx.w	$a0, $s1, $a2
	ld.w	$a0, $s8, 852
	mul.d	$a0, $a0, $s5
	add.d	$a0, $a1, $a0
	addi.d	$s4, $a0, -72
	addi.d	$a0, $sp, 128
	ori	$a2, $zero, 72
	move	$a1, $s3
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	ori	$a2, $zero, 68
	move	$a0, $s3
	move	$a1, $s4
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	addi.d	$a1, $sp, 128
	ori	$a2, $zero, 68
	move	$a0, $s4
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	vld	$vr1, $sp, 64                   # 16-byte Folded Reload
	vld	$vr2, $sp, 80                   # 16-byte Folded Reload
	ld.w	$a0, $s8, 852
	addi.w	$a0, $a0, -1
	st.w	$a0, $s8, 852
	addi.d	$fp, $fp, -1
.LBB91_140:                             #   in Loop: Header=BB91_141 Depth=1
	addi.w	$fp, $fp, 1
	bge	$fp, $a0, .LBB91_144
.LBB91_141:                             # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $s8, 864
	slli.d	$a2, $fp, 6
	alsl.d	$a2, $fp, $a2, 3
	add.d	$s3, $a1, $a2
	vld	$vr0, $s3, 16
	vsub.d	$vr0, $vr0, $vr2
	vsrli.d	$vr0, $vr0, 3
	vmul.d	$vr0, $vr0, $vr1
	vsrai.d	$vr0, $vr0, 30
	vpickve2gr.d	$a3, $vr0, 0
	ldx.w	$a4, $s1, $a3
	vpickve2gr.d	$a2, $vr0, 1
	beq	$a4, $s0, .LBB91_139
# %bb.142:                              #   in Loop: Header=BB91_141 Depth=1
	ldx.w	$a5, $s1, $a2
	bne	$a5, $s0, .LBB91_140
	b	.LBB91_139
.LBB91_143:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit388
	beqz	$s1, .LBB91_145
.LBB91_144:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit388.thread
.Ltmp364:                               # EH_LABEL
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp365:                               # EH_LABEL
.LBB91_145:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit392
	beqz	$s2, .LBB91_147
# %bb.146:
.Ltmp369:                               # EH_LABEL
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp370:                               # EH_LABEL
.LBB91_147:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit396
	ori	$a0, $zero, 1
	st.b	$a0, $s8, 1140
	beqz	$s7, .LBB91_149
# %bb.148:
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB91_149:                             # %_ZN11btSymMatrixIiED2Ev.exit
	fld.d	$fs7, $sp, 200                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 208                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 216                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 224                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 232                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 240                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 248                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 256                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 264                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 272                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 280                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 288                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 296                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 304                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 312                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 320                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 328                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 336                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 344                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 352
	ret
.LBB91_150:
.Ltmp371:                               # EH_LABEL
	b	.LBB91_160
.LBB91_151:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit400
.Ltmp363:                               # EH_LABEL
	b	.LBB91_165
.LBB91_152:                             # %.thread506
.Ltmp340:                               # EH_LABEL
	b	.LBB91_160
.LBB91_153:
.Ltmp366:                               # EH_LABEL
	b	.LBB91_165
.LBB91_154:
.Ltmp343:                               # EH_LABEL
	b	.LBB91_165
.LBB91_155:
.Ltmp331:                               # EH_LABEL
	b	.LBB91_168
.LBB91_156:
.Ltmp346:                               # EH_LABEL
	b	.LBB91_165
.LBB91_157:
.Ltmp328:                               # EH_LABEL
	b	.LBB91_170
.LBB91_158:
.Ltmp314:                               # EH_LABEL
	b	.LBB91_160
.LBB91_159:
.Ltmp317:                               # EH_LABEL
.LBB91_160:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit404
	move	$s0, $a0
	b	.LBB91_171
.LBB91_161:                             # %.thread499
.Ltmp353:                               # EH_LABEL
	move	$s0, $a0
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	b	.LBB91_166
.LBB91_162:
.Ltmp334:                               # EH_LABEL
	b	.LBB91_168
.LBB91_163:
.Ltmp337:                               # EH_LABEL
	b	.LBB91_168
.LBB91_164:
.Ltmp360:                               # EH_LABEL
.LBB91_165:
	move	$s0, $a0
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	beqz	$s2, .LBB91_171
.LBB91_166:
.Ltmp367:                               # EH_LABEL
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp368:                               # EH_LABEL
	b	.LBB91_171
.LBB91_167:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit404.thread707
.Ltmp322:                               # EH_LABEL
.LBB91_168:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit404.thread
	move	$s0, $a0
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
	b	.LBB91_172
.LBB91_169:                             # %.loopexit529
.Ltmp325:                               # EH_LABEL
.LBB91_170:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit404
	move	$s0, $a0
	ld.d	$s7, $sp, 48                    # 8-byte Folded Reload
.LBB91_171:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit404
	beqz	$s7, .LBB91_173
.LBB91_172:                             # %_ZN20btAlignedObjectArrayIiED2Ev.exit404.thread
.Ltmp372:                               # EH_LABEL
	move	$a0, $s7
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp373:                               # EH_LABEL
.LBB91_173:                             # %common.resume
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB91_174:
.Ltmp374:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end91:
	.size	_ZN10btSoftBody6refineEPNS_10ImplicitFnEfb, .Lfunc_end91-_ZN10btSoftBody6refineEPNS_10ImplicitFnEfb
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table91:
.Lexception11:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase9-.Lttbaseref9
.Lttbaseref9:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end11-.Lcst_begin11
.Lcst_begin11:
	.uleb128 .Lfunc_begin11-.Lfunc_begin11  # >> Call Site 1 <<
	.uleb128 .Ltmp312-.Lfunc_begin11        #   Call between .Lfunc_begin11 and .Ltmp312
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp312-.Lfunc_begin11        # >> Call Site 2 <<
	.uleb128 .Ltmp313-.Ltmp312              #   Call between .Ltmp312 and .Ltmp313
	.uleb128 .Ltmp314-.Lfunc_begin11        #     jumps to .Ltmp314
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp315-.Lfunc_begin11        # >> Call Site 3 <<
	.uleb128 .Ltmp316-.Ltmp315              #   Call between .Ltmp315 and .Ltmp316
	.uleb128 .Ltmp317-.Lfunc_begin11        #     jumps to .Ltmp317
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp316-.Lfunc_begin11        # >> Call Site 4 <<
	.uleb128 .Ltmp326-.Ltmp316              #   Call between .Ltmp316 and .Ltmp326
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp326-.Lfunc_begin11        # >> Call Site 5 <<
	.uleb128 .Ltmp327-.Ltmp326              #   Call between .Ltmp326 and .Ltmp327
	.uleb128 .Ltmp328-.Lfunc_begin11        #     jumps to .Ltmp328
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp318-.Lfunc_begin11        # >> Call Site 6 <<
	.uleb128 .Ltmp321-.Ltmp318              #   Call between .Ltmp318 and .Ltmp321
	.uleb128 .Ltmp322-.Lfunc_begin11        #     jumps to .Ltmp322
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp323-.Lfunc_begin11        # >> Call Site 7 <<
	.uleb128 .Ltmp324-.Ltmp323              #   Call between .Ltmp323 and .Ltmp324
	.uleb128 .Ltmp325-.Lfunc_begin11        #     jumps to .Ltmp325
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp329-.Lfunc_begin11        # >> Call Site 8 <<
	.uleb128 .Ltmp330-.Ltmp329              #   Call between .Ltmp329 and .Ltmp330
	.uleb128 .Ltmp331-.Lfunc_begin11        #     jumps to .Ltmp331
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp332-.Lfunc_begin11        # >> Call Site 9 <<
	.uleb128 .Ltmp333-.Ltmp332              #   Call between .Ltmp332 and .Ltmp333
	.uleb128 .Ltmp334-.Lfunc_begin11        #     jumps to .Ltmp334
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp335-.Lfunc_begin11        # >> Call Site 10 <<
	.uleb128 .Ltmp336-.Ltmp335              #   Call between .Ltmp335 and .Ltmp336
	.uleb128 .Ltmp337-.Lfunc_begin11        #     jumps to .Ltmp337
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp338-.Lfunc_begin11        # >> Call Site 11 <<
	.uleb128 .Ltmp339-.Ltmp338              #   Call between .Ltmp338 and .Ltmp339
	.uleb128 .Ltmp340-.Lfunc_begin11        #     jumps to .Ltmp340
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp339-.Lfunc_begin11        # >> Call Site 12 <<
	.uleb128 .Ltmp344-.Ltmp339              #   Call between .Ltmp339 and .Ltmp344
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp344-.Lfunc_begin11        # >> Call Site 13 <<
	.uleb128 .Ltmp345-.Ltmp344              #   Call between .Ltmp344 and .Ltmp345
	.uleb128 .Ltmp346-.Lfunc_begin11        #     jumps to .Ltmp346
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp341-.Lfunc_begin11        # >> Call Site 14 <<
	.uleb128 .Ltmp342-.Ltmp341              #   Call between .Ltmp341 and .Ltmp342
	.uleb128 .Ltmp343-.Lfunc_begin11        #     jumps to .Ltmp343
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp347-.Lfunc_begin11        # >> Call Site 15 <<
	.uleb128 .Ltmp352-.Ltmp347              #   Call between .Ltmp347 and .Ltmp352
	.uleb128 .Ltmp353-.Lfunc_begin11        #     jumps to .Ltmp353
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp354-.Lfunc_begin11        # >> Call Site 16 <<
	.uleb128 .Ltmp359-.Ltmp354              #   Call between .Ltmp354 and .Ltmp359
	.uleb128 .Ltmp360-.Lfunc_begin11        #     jumps to .Ltmp360
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp361-.Lfunc_begin11        # >> Call Site 17 <<
	.uleb128 .Ltmp362-.Ltmp361              #   Call between .Ltmp361 and .Ltmp362
	.uleb128 .Ltmp363-.Lfunc_begin11        #     jumps to .Ltmp363
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp362-.Lfunc_begin11        # >> Call Site 18 <<
	.uleb128 .Ltmp364-.Ltmp362              #   Call between .Ltmp362 and .Ltmp364
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp364-.Lfunc_begin11        # >> Call Site 19 <<
	.uleb128 .Ltmp365-.Ltmp364              #   Call between .Ltmp364 and .Ltmp365
	.uleb128 .Ltmp366-.Lfunc_begin11        #     jumps to .Ltmp366
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp369-.Lfunc_begin11        # >> Call Site 20 <<
	.uleb128 .Ltmp370-.Ltmp369              #   Call between .Ltmp369 and .Ltmp370
	.uleb128 .Ltmp371-.Lfunc_begin11        #     jumps to .Ltmp371
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp370-.Lfunc_begin11        # >> Call Site 21 <<
	.uleb128 .Ltmp367-.Ltmp370              #   Call between .Ltmp370 and .Ltmp367
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp367-.Lfunc_begin11        # >> Call Site 22 <<
	.uleb128 .Ltmp373-.Ltmp367              #   Call between .Ltmp367 and .Ltmp373
	.uleb128 .Ltmp374-.Lfunc_begin11        #     jumps to .Ltmp374
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp373-.Lfunc_begin11        # >> Call Site 23 <<
	.uleb128 .Lfunc_end91-.Ltmp373          #   Call between .Ltmp373 and .Lfunc_end91
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end11:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase9:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody7cutLinkEPKNS_4NodeES2_f # -- Begin function _ZN10btSoftBody7cutLinkEPKNS_4NodeES2_f
	.p2align	5
	.type	_ZN10btSoftBody7cutLinkEPKNS_4NodeES2_f,@function
_ZN10btSoftBody7cutLinkEPKNS_4NodeES2_f: # @_ZN10btSoftBody7cutLinkEPKNS_4NodeES2_f
	.cfi_startproc
# %bb.0:
	ld.d	$a3, $a0, 832
	sub.d	$a1, $a1, $a3
	srli.d	$a1, $a1, 3
	lu12i.w	$a4, -69906
	ori	$a4, $a4, 3823
	lu32i.d	$a4, -69906
	lu52i.d	$a4, $a4, -274
	mul.w	$a1, $a1, $a4
	sub.d	$a2, $a2, $a3
	srli.d	$a2, $a2, 3
	mul.w	$a2, $a2, $a4
	pcaddu18i	$t8, %call36(_ZN10btSoftBody7cutLinkEiif)
	jr	$t8
.Lfunc_end92:
	.size	_ZN10btSoftBody7cutLinkEPKNS_4NodeES2_f, .Lfunc_end92-_ZN10btSoftBody7cutLinkEPKNS_4NodeES2_f
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody7cutLinkEiif     # -- Begin function _ZN10btSoftBody7cutLinkEiif
	.p2align	5
	.type	_ZN10btSoftBody7cutLinkEiif,@function
_ZN10btSoftBody7cutLinkEiif:            # @_ZN10btSoftBody7cutLinkEiif
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	move	$fp, $a0
	ld.d	$a0, $a0, 832
	ori	$s0, $zero, 120
	mul.d	$s1, $a1, $s0
	add.d	$a1, $a0, $s1
	mul.d	$s2, $a2, $s0
	add.d	$a0, $a0, $s2
	fld.s	$fa1, $a1, 16
	fld.s	$fa2, $a0, 16
	fld.s	$fa3, $a1, 20
	fld.s	$fa4, $a0, 20
	fld.s	$fa5, $a1, 24
	fld.s	$fa6, $a0, 24
	fsub.s	$fa2, $fa2, $fa1
	fsub.s	$fa4, $fa4, $fa3
	fsub.s	$fa6, $fa6, $fa5
	fmul.s	$fa2, $fa0, $fa2
	fmul.s	$fa4, $fa0, $fa4
	fmul.s	$fa6, $fa0, $fa6
	fadd.s	$fa1, $fa1, $fa2
	fadd.s	$fa2, $fa3, $fa4
	fadd.s	$fa3, $fa5, $fa6
	movfr2gr.s	$a2, $fa1
	movfr2gr.s	$a3, $fa2
	bstrins.d	$a2, $a3, 63, 32
	movfr2gr.s	$a3, $fa3
	bstrpick.d	$a3, $a3, 31, 0
	st.d	$a2, $sp, 88
	fld.s	$fa1, $a0, 48
	fld.s	$fa2, $a1, 48
	fld.s	$fa3, $a0, 52
	fld.s	$fa4, $a1, 52
	fld.s	$fa5, $a0, 56
	fld.s	$fa6, $a1, 56
	st.d	$a3, $sp, 96
	fsub.s	$fa1, $fa1, $fa2
	fsub.s	$fa3, $fa3, $fa4
	fsub.s	$fa5, $fa5, $fa6
	fmul.s	$fa1, $fa0, $fa1
	fmul.s	$fa3, $fa0, $fa3
	fmul.s	$fa0, $fa0, $fa5
	fadd.s	$fa1, $fa2, $fa1
	fadd.s	$fa2, $fa4, $fa3
	fadd.s	$fa0, $fa6, $fa0
	movfr2gr.s	$s3, $fa1
	movfr2gr.s	$a0, $fa2
	bstrins.d	$s3, $a0, 63, 32
	movfr2gr.s	$a0, $fa0
	bstrpick.d	$s4, $a0, 31, 0
	addi.d	$a1, $sp, 88
	vldi	$vr0, -1168
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendNodeERK9btVector3f)
	jirl	$ra, $ra, 0
	addi.d	$a1, $sp, 88
	vldi	$vr0, -1168
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendNodeERK9btVector3f)
	jirl	$ra, $ra, 0
	ld.d	$a0, $fp, 832
	ld.w	$a1, $fp, 820
	add.d	$a2, $a0, $s1
	st.d	$a2, $sp, 64                    # 8-byte Folded Spill
	add.d	$a2, $a0, $s2
	st.d	$a2, $sp, 56                    # 8-byte Folded Spill
	mul.d	$a1, $a1, $s0
	add.d	$a0, $a0, $a1
	st.d	$s3, $a0, -192
	st.d	$s4, $a0, -184
	st.d	$s3, $a0, -72
	st.d	$s4, $a0, -64
	ld.w	$a1, $fp, 852
	addi.d	$s4, $a0, -240
	st.d	$s4, $sp, 72
	st.d	$a0, $sp, 32                    # 8-byte Folded Spill
	addi.d	$s5, $a0, -120
	st.d	$s5, $sp, 80
	blez	$a1, .LBB93_5
# %bb.1:                                # %.lr.ph
	move	$s6, $zero
	move	$s0, $zero
	st.d	$zero, $sp, 8                   # 8-byte Folded Spill
	ld.d	$a0, $fp, 864
	slli.d	$a2, $a1, 6
	alsl.d	$s7, $a1, $a2, 3
	addi.w	$s8, $zero, -1
	addi.d	$s2, $sp, 72
	b	.LBB93_3
	.p2align	4, , 16
.LBB93_2:                               #   in Loop: Header=BB93_3 Depth=1
	addi.d	$s6, $s6, 72
	addi.w	$s0, $s0, 1
	beq	$s7, $s6, .LBB93_6
.LBB93_3:                               # =>This Inner Loop Header: Depth=1
	add.d	$a1, $a0, $s6
	ld.d	$a2, $a1, 16
	ld.d	$a1, $a1, 24
	ld.d	$a5, $sp, 64                    # 8-byte Folded Reload
	xor	$a3, $a2, $a5
	sltui	$a3, $a3, 1
	ld.d	$a6, $sp, 56                    # 8-byte Folded Reload
	xor	$a4, $a1, $a6
	sltui	$a4, $a4, 1
	xor	$a2, $a2, $a6
	sltu	$a2, $zero, $a2
	xor	$a1, $a1, $a5
	sltu	$a1, $zero, $a1
	or	$a1, $a2, $a1
	sub.d	$a1, $zero, $a1
	ori	$a1, $a1, 1
	masknez	$a2, $a1, $a3
	masknez	$a1, $a1, $a4
	maskeqz	$a1, $a1, $a3
	or	$s1, $a1, $a2
	beq	$s1, $s8, .LBB93_2
# %bb.4:                                #   in Loop: Header=BB93_3 Depth=1
	move	$a0, $fp
	move	$a1, $s0
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendLinkEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 852
	ld.d	$a0, $fp, 864
	slli.d	$a2, $a1, 6
	alsl.d	$a1, $a1, $a2, 3
	slli.d	$a2, $s1, 3
	ldx.d	$a2, $a2, $s2
	ori	$a4, $zero, 1
	ori	$a3, $zero, 1
	st.d	$a3, $sp, 8                     # 8-byte Folded Spill
	sub.d	$a3, $a4, $s1
	slli.d	$a3, $a3, 3
	ldx.d	$a3, $a3, $s2
	add.d	$a1, $a0, $a1
	add.d	$a4, $a0, $s6
	st.d	$a2, $a4, 24
	st.d	$a3, $a1, -56
	b	.LBB93_2
.LBB93_5:
	st.d	$zero, $sp, 8                   # 8-byte Folded Spill
.LBB93_6:                               # %._crit_edge
	ld.w	$a0, $fp, 884
	st.d	$a0, $sp, 16                    # 8-byte Folded Spill
	blez	$a0, .LBB93_28
# %bb.7:                                # %.preheader.lr.ph
	move	$s6, $zero
	addi.w	$a0, $zero, -1
	st.d	$a0, $sp, 40                    # 8-byte Folded Spill
	b	.LBB93_9
	.p2align	4, , 16
.LBB93_8:                               #   in Loop: Header=BB93_9 Depth=1
	addi.d	$s6, $s6, 1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	beq	$s6, $a0, .LBB93_28
.LBB93_9:                               # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_12 Depth 2
                                        #       Child Loop BB93_16 Depth 3
                                        #       Child Loop BB93_24 Depth 3
	move	$s0, $zero
	ori	$s7, $zero, 2
	slli.d	$a0, $s6, 6
	alsl.d	$a0, $s6, $a0, 3
	st.d	$a0, $sp, 48                    # 8-byte Folded Spill
	ori	$a0, $zero, 72
	mul.d	$a0, $s6, $a0
	st.d	$a0, $sp, 24                    # 8-byte Folded Spill
	b	.LBB93_12
	.p2align	4, , 16
.LBB93_10:                              # %_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_.exit.i80
                                        #   in Loop: Header=BB93_12 Depth=2
	addi.w	$a1, $zero, -1
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendLinkEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 852
	ld.d	$a1, $fp, 864
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	fld.s	$fa0, $a3, -104
	fld.s	$fa1, $s8, 16
	fld.s	$fa2, $a3, -100
	fld.s	$fa3, $s8, 20
	slli.d	$a2, $a0, 6
	alsl.d	$a0, $a0, $a2, 3
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fld.s	$fa2, $a3, -96
	fld.s	$fa3, $s8, 24
	add.d	$a0, $a1, $a0
	st.d	$s5, $a0, -56
	st.d	$s8, $a0, -48
	fsub.s	$fa2, $fa2, $fa3
	fmul.s	$fa1, $fa1, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	fsqrt.s	$fa0, $fa0
	fst.s	$fa0, $a0, -40
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1140
.LBB93_11:                              # %_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb.exit88
                                        #   in Loop: Header=BB93_12 Depth=2
	ori	$a0, $zero, 3
	beq	$s0, $a0, .LBB93_8
.LBB93_12:                              #   Parent Loop BB93_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_16 Depth 3
                                        #       Child Loop BB93_24 Depth 3
	ld.d	$a0, $fp, 896
	bstrpick.d	$s8, $s7, 31, 0
	move	$s7, $s0
	ld.d	$a1, $sp, 48                    # 8-byte Folded Reload
	add.d	$a0, $a0, $a1
	addi.d	$a0, $a0, 16
	slli.d	$a1, $s8, 3
	ldx.d	$a1, $a0, $a1
	slli.d	$s1, $s0, 3
	ldx.d	$a0, $a0, $s1
	ld.d	$a4, $sp, 64                    # 8-byte Folded Reload
	xor	$a2, $a1, $a4
	sltui	$a2, $a2, 1
	ld.d	$a5, $sp, 56                    # 8-byte Folded Reload
	xor	$a3, $a0, $a5
	sltui	$a3, $a3, 1
	xor	$a1, $a1, $a5
	sltu	$a1, $zero, $a1
	xor	$a0, $a0, $a4
	sltu	$a0, $zero, $a0
	or	$a0, $a1, $a0
	sub.d	$a0, $zero, $a0
	ori	$a0, $a0, 1
	masknez	$a1, $a0, $a2
	masknez	$a0, $a0, $a3
	maskeqz	$a0, $a0, $a2
	or	$s3, $a0, $a1
	addi.d	$s0, $s0, 1
	ld.d	$a0, $sp, 40                    # 8-byte Folded Reload
	beq	$s3, $a0, .LBB93_11
# %bb.13:                               #   in Loop: Header=BB93_12 Depth=2
	move	$a0, $fp
	move	$s2, $s6
	move	$a1, $s6
	move	$a2, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendFaceEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
	ld.d	$a0, $fp, 896
	ld.w	$a1, $fp, 884
	ld.d	$a2, $sp, 24                    # 8-byte Folded Reload
	add.d	$s6, $a0, $a2
	ori	$a2, $zero, 72
	mul.d	$a1, $a1, $a2
	add.d	$a0, $a0, $a1
	slli.d	$a1, $s3, 3
	addi.d	$a3, $sp, 72
	ldx.d	$a1, $a1, $a3
	ori	$a2, $zero, 1
	sub.d	$a2, $a2, $s3
	slli.d	$a2, $a2, 3
	ldx.d	$a2, $a2, $a3
	addi.d	$a3, $s6, 16
	stx.d	$a1, $a3, $s1
	alsl.d	$a0, $s8, $a0, 3
	st.d	$a2, $a0, -56
	addi.d	$a0, $s7, -2
	sltui	$a0, $a0, 1
	bstrpick.d	$a1, $s0, 31, 0
	masknez	$a4, $a1, $a0
	slli.d	$a0, $a4, 3
	ldx.d	$s8, $a3, $a0
	ld.w	$a0, $fp, 852
	ld.d	$a2, $s6, 8
	blez	$a0, .LBB93_20
# %bb.14:                               # %.lr.ph.i.i
                                        #   in Loop: Header=BB93_12 Depth=2
	ld.d	$a1, $fp, 864
	move	$a5, $zero
	slli.d	$a6, $a0, 6
	alsl.d	$a6, $a0, $a6, 3
	b	.LBB93_16
	.p2align	4, , 16
.LBB93_15:                              # %.critedge.i.i
                                        #   in Loop: Header=BB93_16 Depth=3
	addi.d	$a5, $a5, 72
	beq	$a6, $a5, .LBB93_20
.LBB93_16:                              #   Parent Loop BB93_9 Depth=1
                                        #     Parent Loop BB93_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	add.d	$a7, $a1, $a5
	ld.d	$t0, $a7, 16
	bne	$t0, $s4, .LBB93_18
# %bb.17:                               #   in Loop: Header=BB93_16 Depth=3
	ld.d	$t1, $a7, 24
	beq	$t1, $s8, .LBB93_21
.LBB93_18:                              #   in Loop: Header=BB93_16 Depth=3
	bne	$t0, $s8, .LBB93_15
# %bb.19:                               #   in Loop: Header=BB93_16 Depth=3
	ld.d	$a7, $a7, 24
	bne	$a7, $s4, .LBB93_15
	b	.LBB93_21
	.p2align	4, , 16
.LBB93_20:                              # %_ZNK10btSoftBody9checkLinkEPKNS_4NodeES2_.exit.i
                                        #   in Loop: Header=BB93_12 Depth=2
	alsl.d	$s1, $a4, $a3, 3
	addi.w	$a1, $zero, -1
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10appendLinkEiPNS_8MaterialE)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 852
	ld.d	$a1, $fp, 864
	ld.d	$a3, $sp, 32                    # 8-byte Folded Reload
	fld.s	$fa0, $a3, -224
	fld.s	$fa1, $s8, 16
	fld.s	$fa2, $a3, -220
	fld.s	$fa3, $s8, 20
	slli.d	$a2, $a0, 6
	alsl.d	$a2, $a0, $a2, 3
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fld.s	$fa2, $a3, -216
	fld.s	$fa3, $s8, 24
	add.d	$a3, $a1, $a2
	st.d	$s4, $a3, -56
	st.d	$s8, $a3, -48
	fsub.s	$fa2, $fa2, $fa3
	fmul.s	$fa1, $fa1, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	ld.d	$s8, $s1, 0
	ld.d	$a2, $s6, 8
	fsqrt.s	$fa0, $fa0
	fst.s	$fa0, $a3, -40
	ori	$a3, $zero, 1
	st.b	$a3, $fp, 1140
.LBB93_21:                              # %_ZN10btSoftBody10appendLinkEPNS_4NodeES1_PNS_8MaterialEb.exit
                                        #   in Loop: Header=BB93_12 Depth=2
	move	$s6, $s2
	blez	$a0, .LBB93_10
# %bb.22:                               # %.lr.ph.i.i82
                                        #   in Loop: Header=BB93_12 Depth=2
	addi.d	$a1, $a1, 24
	b	.LBB93_24
	.p2align	4, , 16
.LBB93_23:                              # %.critedge.i.i85
                                        #   in Loop: Header=BB93_24 Depth=3
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 72
	beqz	$a0, .LBB93_10
.LBB93_24:                              #   Parent Loop BB93_9 Depth=1
                                        #     Parent Loop BB93_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.d	$a3, $a1, -8
	bne	$a3, $s5, .LBB93_26
# %bb.25:                               #   in Loop: Header=BB93_24 Depth=3
	ld.d	$a4, $a1, 0
	beq	$a4, $s8, .LBB93_11
.LBB93_26:                              #   in Loop: Header=BB93_24 Depth=3
	bne	$a3, $s8, .LBB93_23
# %bb.27:                               #   in Loop: Header=BB93_24 Depth=3
	ld.d	$a3, $a1, 0
	bne	$a3, $s5, .LBB93_23
	b	.LBB93_11
.LBB93_28:                              # %._crit_edge94
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	andi	$s0, $a0, 1
	bnez	$s0, .LBB93_30
# %bb.29:
	ld.d	$s2, $sp, 32                    # 8-byte Folded Reload
	ld.d	$a1, $s2, -136
	addi.d	$s1, $fp, 1144
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt6removeEP10btDbvtNode)
	jirl	$ra, $ra, 0
	ld.d	$a1, $s2, -16
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt6removeEP10btDbvtNode)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 820
	addi.d	$a0, $a0, -2
	st.w	$a0, $fp, 820
.LBB93_30:
	move	$a0, $s0
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.Lfunc_end93:
	.size	_ZN10btSoftBody7cutLinkEiif, .Lfunc_end93-_ZN10btSoftBody7cutLinkEiif
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody7rayTestERK9btVector3S2_RNS_8sRayCastE # -- Begin function _ZN10btSoftBody7rayTestERK9btVector3S2_RNS_8sRayCastE
	.p2align	5
	.type	_ZN10btSoftBody7rayTestERK9btVector3S2_RNS_8sRayCastE,@function
_ZN10btSoftBody7rayTestERK9btVector3S2_RNS_8sRayCastE: # @_ZN10btSoftBody7rayTestERK9btVector3S2_RNS_8sRayCastE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	ld.w	$a4, $a0, 884
	move	$fp, $a3
	beqz	$a4, .LBB94_3
# %bb.1:
	ld.d	$a3, $a0, 1208
	bnez	$a3, .LBB94_3
# %bb.2:
	move	$s0, $a0
	move	$s1, $a2
	move	$s2, $a1
	pcaddu18i	$ra, %call36(_ZN10btSoftBody18initializeFaceTreeEv)
	jirl	$ra, $ra, 0
	move	$a1, $s2
	move	$a2, $s1
	move	$a0, $s0
.LBB94_3:
	st.d	$a0, $fp, 0
	addi.d	$a3, $fp, 16
	lu12i.w	$a4, 260096
	st.w	$a4, $fp, 16
	addi.d	$a4, $fp, 8
	ori	$a5, $zero, 0
	lu32i.d	$a5, -1
	st.d	$a5, $fp, 8
	addi.d	$a5, $fp, 12
	move	$a6, $zero
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib)
	jirl	$ra, $ra, 0
	sltu	$a0, $zero, $a0
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end94:
	.size	_ZN10btSoftBody7rayTestERK9btVector3S2_RNS_8sRayCastE, .Lfunc_end94-_ZN10btSoftBody7rayTestERK9btVector3S2_RNS_8sRayCastE
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody18initializeFaceTreeEv # -- Begin function _ZN10btSoftBody18initializeFaceTreeEv
	.p2align	5
	.type	_ZN10btSoftBody18initializeFaceTreeEv,@function
_ZN10btSoftBody18initializeFaceTreeEv:  # @_ZN10btSoftBody18initializeFaceTreeEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 56, -64
	move	$fp, $a0
	addi.d	$s0, $a0, 1208
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN6btDbvt5clearEv)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 884
	blez	$a0, .LBB95_3
# %bb.1:                                # %.lr.ph
	move	$s2, $zero
	move	$s3, $zero
	addi.d	$s4, $sp, 32
	movgr2fr.w	$fs0, $zero
	.p2align	4, , 16
.LBB95_2:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 896
	add.d	$s1, $a0, $s2
	ld.d	$a0, $s1, 16
	vld	$vr0, $a0, 16
	ld.d	$a1, $s1, 24
	ld.d	$a2, $s1, 32
	vst	$vr0, $s4, 0
	vld	$vr0, $a0, 16
	vst	$vr0, $sp, 16
	vld	$vr0, $sp, 16
	vld	$vr1, $a1, 16
	vld	$vr2, $a2, 16
	vfcmp.clt.s	$vr3, $vr1, $vr0
	vld	$vr4, $sp, 32
	vbitsel.v	$vr0, $vr0, $vr1, $vr3
	vfcmp.clt.s	$vr3, $vr2, $vr0
	vbitsel.v	$vr0, $vr0, $vr2, $vr3
	vfcmp.clt.s	$vr3, $vr4, $vr1
	vbitsel.v	$vr1, $vr4, $vr1, $vr3
	vfcmp.clt.s	$vr3, $vr1, $vr2
	vpickve2gr.w	$a0, $vr3, 0
	andi	$a0, $a0, 1
	vreplvei.w	$vr4, $vr1, 0
	vreplvei.w	$vr5, $vr2, 0
	movgr2cf	$fcc0, $a0
	fsel	$fa4, $fa4, $fa5, $fcc0
	vpickve2gr.w	$a0, $vr3, 1
	andi	$a0, $a0, 1
	vreplvei.w	$vr5, $vr1, 1
	vreplvei.w	$vr6, $vr2, 1
	movgr2cf	$fcc0, $a0
	fsel	$fa5, $fa5, $fa6, $fcc0
	vpickve2gr.w	$a0, $vr3, 2
	andi	$a0, $a0, 1
	vreplvei.w	$vr6, $vr1, 2
	vreplvei.w	$vr7, $vr2, 2
	movgr2cf	$fcc0, $a0
	fsel	$fa6, $fa6, $fa7, $fcc0
	vpickve2gr.w	$a0, $vr3, 3
	andi	$a0, $a0, 1
	vreplvei.w	$vr1, $vr1, 3
	vreplvei.w	$vr2, $vr2, 3
	movgr2cf	$fcc0, $a0
	fsel	$fa1, $fa1, $fa2, $fcc0
	fst.s	$fa1, $sp, 44
	vst	$vr0, $sp, 16
	fadd.s	$fa0, $fa4, $fs0
	fst.s	$fa0, $sp, 32
	fadd.s	$fa0, $fa5, $fs0
	fst.s	$fa0, $sp, 36
	fadd.s	$fa0, $fa6, $fs0
	fst.s	$fa0, $sp, 40
	addi.d	$a1, $sp, 16
	move	$a0, $s0
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt6insertERK12btDbvtAabbMmPv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 884
	st.d	$a0, $s1, 64
	addi.d	$s3, $s3, 1
	addi.d	$s2, $s2, 72
	blt	$s3, $a1, .LBB95_2
.LBB95_3:                               # %._crit_edge
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.Lfunc_end95:
	.size	_ZN10btSoftBody18initializeFaceTreeEv, .Lfunc_end95-_ZN10btSoftBody18initializeFaceTreeEv
	.cfi_endproc
                                        # -- End function
	.globl	_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib # -- Begin function _ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib
	.p2align	5
	.type	_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib,@function
_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib: # @_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	st.d	$s6, $sp, 120                   # 8-byte Folded Spill
	st.d	$s7, $sp, 112                   # 8-byte Folded Spill
	st.d	$s8, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	move	$s5, $a6
	st.d	$a5, $sp, 8                     # 8-byte Folded Spill
	move	$s0, $a4
	move	$s2, $a3
	move	$s3, $a2
	move	$s4, $a1
	move	$s1, $a0
	bnez	$a6, .LBB96_4
# %bb.1:
	ld.d	$a0, $s1, 1208
	beqz	$a0, .LBB96_4
# %bb.2:
	fld.s	$fa0, $s2, 0
	pcalau12i	$a1, %pc_hi20(_ZTVN10btSoftBody15RayFromToCasterE+16)
	addi.d	$a1, $a1, %pc_lo12(_ZTVN10btSoftBody15RayFromToCasterE+16)
	vld	$vr1, $s4, 0
	vst	$vr1, $sp, 24
	fld.s	$fa1, $s3, 0
	fld.s	$fa2, $s4, 0
	fld.s	$fa3, $s3, 4
	fld.s	$fa4, $s4, 4
	fld.s	$fa5, $s3, 8
	fld.s	$fa6, $s4, 8
	fsub.s	$fa1, $fa1, $fa2
	fsub.s	$fa2, $fa3, $fa4
	st.d	$a1, $sp, 16
	fsub.s	$fa3, $fa5, $fa6
	movfr2gr.s	$a1, $fa1
	movfr2gr.s	$a2, $fa2
	bstrins.d	$a1, $a2, 63, 32
	movfr2gr.s	$a2, $fa3
	vld	$vr1, $s3, 0
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a1, $sp, 56
	st.d	$a2, $sp, 64
	vst	$vr1, $sp, 40
	fst.s	$fa0, $sp, 72
	st.d	$zero, $sp, 80
	st.w	$zero, $sp, 88
	addi.d	$a3, $sp, 16
	move	$a1, $s4
	move	$a2, $s3
	pcaddu18i	$ra, %call36(_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE)
	jirl	$ra, $ra, 0
	ld.d	$a0, $sp, 80
	beqz	$a0, .LBB96_10
# %bb.3:
	fld.s	$fa0, $sp, 72
	fst.s	$fa0, $s2, 0
	ori	$a1, $zero, 3
	st.w	$a1, $s0, 0
	ld.d	$a1, $s1, 896
	sub.d	$a0, $a0, $a1
	srli.d	$a0, $a0, 3
	lu12i.w	$a1, 233016
	ori	$a1, $a1, 3641
	lu32i.d	$a1, -466034
	lu52i.d	$a1, $a1, -1821
	mul.d	$a0, $a0, $a1
	ld.d	$a1, $sp, 8                     # 8-byte Folded Reload
	st.w	$a0, $a1, 0
	ori	$s6, $zero, 1
	b	.LBB96_11
.LBB96_4:
	fld.s	$fa0, $s3, 0
	fld.s	$fa1, $s4, 0
	fld.s	$fa2, $s3, 4
	fld.s	$fa3, $s4, 4
	fld.s	$fa4, $s3, 8
	fld.s	$fa5, $s4, 8
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fsub.s	$fa2, $fa4, $fa5
	movfr2gr.s	$a0, $fa2
	bstrpick.d	$a0, $a0, 31, 0
	st.d	$a0, $sp, 24
	fmul.s	$fa3, $fa1, $fa1
	fmadd.s	$fa3, $fa0, $fa0, $fa3
	fmadd.s	$fa3, $fa2, $fa2, $fa3
	frsqrt.s	$fa3, $fa3
	fmul.s	$fa0, $fa0, $fa3
	fst.s	$fa0, $sp, 16
	ld.w	$a0, $s1, 884
	fmul.s	$fa0, $fa1, $fa3
	fst.s	$fa0, $sp, 20
	fmul.s	$fa0, $fa2, $fa3
	fst.s	$fa0, $sp, 24
	blez	$a0, .LBB96_10
# %bb.5:                                # %.lr.ph
	move	$s7, $zero
	move	$s8, $zero
	move	$s6, $zero
	slli.d	$a1, $a0, 6
	alsl.d	$fp, $a0, $a1, 3
	movgr2fr.w	$fs0, $zero
	b	.LBB96_7
	.p2align	4, , 16
.LBB96_6:                               #   in Loop: Header=BB96_7 Depth=1
	addi.d	$s7, $s7, 72
	addi.d	$s8, $s8, 1
	beq	$fp, $s7, .LBB96_11
.LBB96_7:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $s1, 896
	add.d	$a0, $a0, $s7
	ld.d	$a1, $a0, 16
	ld.d	$a2, $a0, 24
	ld.d	$a0, $a0, 32
	fld.s	$fa0, $s2, 0
	addi.d	$a3, $a1, 16
	addi.d	$a4, $a2, 16
	addi.d	$a5, $a0, 16
	addi.d	$a2, $sp, 16
	move	$a0, $s4
	move	$a1, $s3
	pcaddu18i	$ra, %call36(_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f)
	jirl	$ra, $ra, 0
	fcmp.cule.s	$fcc0, $fa0, $fs0
	bcnez	$fcc0, .LBB96_6
# %bb.8:                                #   in Loop: Header=BB96_7 Depth=1
	addi.w	$s6, $s6, 1
	bnez	$s5, .LBB96_6
# %bb.9:                                #   in Loop: Header=BB96_7 Depth=1
	ori	$a0, $zero, 3
	st.w	$a0, $s0, 0
	ld.d	$a0, $sp, 8                     # 8-byte Folded Reload
	st.w	$s8, $a0, 0
	fst.s	$fa0, $s2, 0
	b	.LBB96_6
.LBB96_10:
	move	$s6, $zero
.LBB96_11:
	move	$a0, $s6
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.Lfunc_end96:
	.size	_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib, .Lfunc_end96-_ZNK10btSoftBody7rayTestERK9btVector3S2_RfRNS_8eFeature1_ERib
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody13predictMotionEf
.LCPI97_0:
	.word	0x3eaaaaab                      # float 0.333333343
	.text
	.globl	_ZN10btSoftBody13predictMotionEf
	.p2align	5
	.type	_ZN10btSoftBody13predictMotionEf,@function
_ZN10btSoftBody13predictMotionEf:       # @_ZN10btSoftBody13predictMotionEf
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 56, -56
	.cfi_offset 57, -64
	move	$fp, $a0
	ld.bu	$a0, $a0, 1140
	fmov.s	$fs0, $fa0
	addi.d	$s0, $fp, 1208
	beqz	$a0, .LBB97_3
# %bb.1:
	st.b	$zero, $fp, 1140
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody15updateConstantsEv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN6btDbvt5clearEv)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $fp, 412
	andi	$a0, $a0, 16
	beqz	$a0, .LBB97_3
# %bb.2:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody18initializeFaceTreeEv)
	jirl	$ra, $ra, 0
.LBB97_3:
	fld.s	$fa0, $fp, 392
	fmul.s	$fa0, $fs0, $fa0
	fst.s	$fa0, $fp, 512
	frecip.s	$fa1, $fa0
	fst.s	$fa1, $fp, 516
	ld.d	$a0, $fp, 200
	vldi	$vr1, -1272
	fmul.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $fp, 520
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	jirl	$ra, $a1, 0
	fst.s	$fa0, $fp, 524
	ld.w	$a0, $fp, 820
	vldi	$vr1, -1200
	fmul.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $fp, 528
	movgr2fr.w	$fs0, $zero
	blez	$a0, .LBB97_8
# %bb.4:                                # %.lr.ph.i
	ld.d	$a1, $fp, 776
	fld.s	$fa0, $a1, 48
	fld.s	$fa2, $fp, 512
	fld.s	$fa1, $a1, 52
	fld.s	$fa3, $a1, 56
	ld.d	$a1, $fp, 832
	fmul.s	$fa0, $fa0, $fa2
	fmul.s	$fa1, $fa2, $fa1
	fmul.s	$fa2, $fa2, $fa3
	addi.d	$a1, $a1, 48
	b	.LBB97_6
	.p2align	4, , 16
.LBB97_5:                               # %_ZN10btSoftBody11addVelocityERK9btVector3i.exit.i
                                        #   in Loop: Header=BB97_6 Depth=1
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 120
	beqz	$a0, .LBB97_8
.LBB97_6:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa3, $a1, 48
	fcmp.cule.s	$fcc0, $fa3, $fs0
	bcnez	$fcc0, .LBB97_5
# %bb.7:                                #   in Loop: Header=BB97_6 Depth=1
	fld.s	$fa3, $a1, 0
	fld.s	$fa4, $a1, 4
	fadd.s	$fa3, $fa0, $fa3
	fld.s	$fa5, $a1, 8
	fst.s	$fa3, $a1, 0
	fadd.s	$fa3, $fa1, $fa4
	fst.s	$fa3, $a1, 4
	fadd.s	$fa3, $fa2, $fa5
	fst.s	$fa3, $a1, 8
	b	.LBB97_5
.LBB97_8:                               # %_ZN10btSoftBody11addVelocityERK9btVector3.exit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody11applyForcesEv)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 820
	vrepli.b	$vr5, 0
	blez	$a1, .LBB97_11
# %bb.9:                                # %.lr.ph
	move	$a0, $zero
	ori	$a2, $zero, 120
	mul.d	$a1, $a1, $a2
	.p2align	4, , 16
.LBB97_10:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $fp, 832
	add.d	$a2, $a2, $a0
	vld	$vr0, $a2, 16
	vst	$vr0, $a2, 32
	fld.s	$fa0, $a2, 64
	fld.s	$fa1, $a2, 96
	fld.s	$fa2, $a2, 68
	fld.s	$fa3, $a2, 72
	fld.s	$fa4, $fp, 512
	fmul.s	$fa0, $fa0, $fa1
	fmul.s	$fa2, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa3
	fmul.s	$fa0, $fa0, $fa4
	fld.s	$fa3, $a2, 48
	fmul.s	$fa2, $fa2, $fa4
	fmul.s	$fa1, $fa4, $fa1
	fld.s	$fa4, $a2, 52
	fadd.s	$fa0, $fa0, $fa3
	fld.s	$fa3, $a2, 56
	fst.s	$fa0, $a2, 48
	fadd.s	$fa2, $fa2, $fa4
	fst.s	$fa2, $a2, 52
	fadd.s	$fa1, $fa1, $fa3
	fst.s	$fa1, $a2, 56
	fld.s	$fa3, $fp, 512
	fmul.s	$fa0, $fa0, $fa3
	fld.s	$fa4, $a2, 16
	fmul.s	$fa2, $fa2, $fa3
	fmul.s	$fa1, $fa1, $fa3
	fld.s	$fa3, $a2, 20
	fadd.s	$fa0, $fa0, $fa4
	fld.s	$fa4, $a2, 24
	fst.s	$fa0, $a2, 16
	fadd.s	$fa0, $fa2, $fa3
	fst.s	$fa0, $a2, 20
	fadd.s	$fa0, $fa1, $fa4
	fst.s	$fa0, $a2, 24
	addi.d	$a0, $a0, 120
	vst	$vr5, $a2, 64
	bne	$a1, $a0, .LBB97_10
.LBB97_11:                              # %._crit_edge
	vst	$vr5, $sp, 16                   # 16-byte Folded Spill
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody14updateClustersEv)
	jirl	$ra, $ra, 0
	ld.d	$s1, $fp, 1144
	beqz	$s1, .LBB97_14
# %bb.12:
	ld.d	$a0, $fp, 200
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	jirl	$ra, $a1, 0
	fld.s	$fa1, $s1, 0
	fld.s	$fa2, $s1, 4
	fld.s	$fa3, $s1, 8
	fsub.s	$fa1, $fa1, $fa0
	fsub.s	$fa2, $fa2, $fa0
	fsub.s	$fa3, $fa3, $fa0
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa3
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 1108
	st.d	$a1, $fp, 1116
	fld.s	$fa1, $s1, 16
	fld.s	$fa2, $s1, 20
	fld.s	$fa3, $s1, 24
	fadd.s	$fa1, $fa0, $fa1
	fadd.s	$fa2, $fa0, $fa2
	fadd.s	$fa0, $fa0, $fa3
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	ld.d	$a1, $fp, 192
	movfr2gr.s	$a2, $fa0
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a0, $fp, 1124
	st.d	$a2, $fp, 1132
	beqz	$a1, .LBB97_15
# %bb.13:
	ld.d	$a2, $fp, 776
	ld.d	$a0, $a2, 32
	ld.d	$a3, $a0, 0
	ld.d	$a4, $a2, 40
	ld.d	$a5, $a3, 32
	addi.d	$a2, $fp, 1108
	addi.d	$a3, $fp, 1124
	jirl	$ra, $a5, 0
	b	.LBB97_15
.LBB97_14:
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
	vst	$vr0, $fp, 1124
	vst	$vr0, $fp, 1108
.LBB97_15:                              # %_ZN10btSoftBody12updateBoundsEv.exit
	ld.w	$a0, $fp, 820
	addi.d	$s1, $fp, 1144
	blez	$a0, .LBB97_18
# %bb.16:                               # %.lr.ph205
	move	$s2, $zero
	ori	$a1, $zero, 120
	mul.d	$s3, $a0, $a1
	.p2align	4, , 16
.LBB97_17:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 832
	add.d	$a0, $a0, $s2
	fld.s	$fa0, $fp, 524
	fld.s	$fa1, $a0, 16
	fld.s	$fa2, $a0, 20
	fld.s	$fa3, $a0, 24
	fsub.s	$fa4, $fa1, $fa0
	fsub.s	$fa5, $fa2, $fa0
	fsub.s	$fa6, $fa3, $fa0
	movfr2gr.s	$a1, $fa4
	movfr2gr.s	$a2, $fa5
	bstrins.d	$a1, $a2, 63, 32
	movfr2gr.s	$a2, $fa6
	bstrpick.d	$a2, $a2, 31, 0
	fadd.s	$fa1, $fa0, $fa1
	fadd.s	$fa2, $fa0, $fa2
	fadd.s	$fa0, $fa0, $fa3
	movfr2gr.s	$a3, $fa1
	movfr2gr.s	$a4, $fa2
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa0
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a1, $sp, 48
	st.d	$a2, $sp, 56
	st.d	$a3, $sp, 64
	st.d	$a4, $sp, 72
	fld.s	$fa0, $a0, 48
	fld.s	$fa1, $fp, 520
	fld.s	$fa2, $a0, 52
	fld.s	$fa3, $a0, 56
	ld.d	$a1, $a0, 104
	fmul.s	$fa0, $fa0, $fa1
	fmul.s	$fa2, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa3
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a2, $fa2
	bstrins.d	$a0, $a2, 63, 32
	movfr2gr.s	$a2, $fa1
	fld.s	$fa0, $fp, 528
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a0, $sp, 32
	st.d	$a2, $sp, 40
	addi.d	$a2, $sp, 48
	addi.d	$a3, $sp, 32
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f)
	jirl	$ra, $ra, 0
	addi.d	$s2, $s2, 120
	bne	$s3, $s2, .LBB97_17
.LBB97_18:                              # %._crit_edge206
	ld.d	$a0, $fp, 1208
	beqz	$a0, .LBB97_22
# %bb.19:                               # %.preheader
	ld.w	$a0, $fp, 884
	blez	$a0, .LBB97_22
# %bb.20:                               # %.lr.ph208
	pcalau12i	$a0, %pc_hi20(.LCPI97_0)
	fld.s	$fs1, $a0, %pc_lo12(.LCPI97_0)
	move	$s2, $zero
	move	$s3, $zero
	.p2align	4, , 16
.LBB97_21:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 896
	add.d	$a0, $a0, $s2
	ld.d	$a2, $a0, 16
	ld.d	$a3, $a0, 24
	fld.s	$fa0, $a2, 48
	fld.s	$fa1, $a3, 48
	fld.s	$fa2, $a2, 52
	fld.s	$fa3, $a3, 52
	fadd.s	$fa0, $fa0, $fa1
	ld.d	$a1, $a0, 32
	fadd.s	$fa1, $fa2, $fa3
	fld.s	$fa2, $a2, 56
	fld.s	$fa3, $a3, 56
	fld.s	$fa4, $a1, 48
	fld.s	$fa5, $a1, 52
	fld.s	$fa6, $a1, 56
	fadd.s	$fa2, $fa2, $fa3
	fadd.s	$fa0, $fa0, $fa4
	fadd.s	$fa1, $fa1, $fa5
	fadd.s	$fa2, $fa2, $fa6
	fmul.s	$fa0, $fa0, $fs1
	fmul.s	$fa1, $fa1, $fs1
	fmul.s	$fa2, $fa2, $fs1
	fld.s	$fa3, $fp, 524
	fld.s	$fa4, $a2, 16
	fld.s	$fa5, $a2, 20
	fld.s	$fa6, $a3, 16
	fld.s	$fa7, $a2, 24
	fld.s	$ft0, $a2, 28
	fld.s	$ft1, $a3, 20
	fcmp.clt.s	$fcc0, $fa6, $fa4
	fsel	$ft2, $fa4, $fa6, $fcc0
	fld.s	$ft3, $a3, 24
	fcmp.clt.s	$fcc0, $ft1, $fa5
	fld.s	$ft4, $a3, 28
	fsel	$ft5, $fa5, $ft1, $fcc0
	fcmp.clt.s	$fcc0, $ft3, $fa7
	fsel	$ft6, $fa7, $ft3, $fcc0
	fcmp.clt.s	$fcc0, $ft4, $ft0
	fsel	$ft7, $ft0, $ft4, $fcc0
	fcmp.clt.s	$fcc0, $fa4, $fa6
	fsel	$fa4, $fa4, $fa6, $fcc0
	fcmp.clt.s	$fcc0, $fa5, $ft1
	fsel	$fa5, $fa5, $ft1, $fcc0
	fcmp.clt.s	$fcc0, $fa7, $ft3
	fsel	$fa6, $fa7, $ft3, $fcc0
	fld.s	$fa7, $a1, 16
	fcmp.clt.s	$fcc0, $ft0, $ft4
	fsel	$ft0, $ft0, $ft4, $fcc0
	fld.s	$ft1, $a1, 20
	fcmp.clt.s	$fcc0, $fa7, $ft2
	fsel	$ft2, $ft2, $fa7, $fcc0
	fld.s	$ft3, $a1, 24
	fcmp.clt.s	$fcc0, $ft1, $ft5
	fld.s	$ft4, $a1, 28
	fsel	$ft5, $ft5, $ft1, $fcc0
	fcmp.clt.s	$fcc0, $ft3, $ft6
	fsel	$ft6, $ft6, $ft3, $fcc0
	fcmp.clt.s	$fcc0, $ft4, $ft7
	fsel	$ft7, $ft7, $ft4, $fcc0
	fcmp.clt.s	$fcc0, $fa4, $fa7
	fsel	$fa4, $fa4, $fa7, $fcc0
	fcmp.clt.s	$fcc0, $fa5, $ft1
	fsel	$fa5, $fa5, $ft1, $fcc0
	fcmp.clt.s	$fcc0, $fa6, $ft3
	fsel	$fa6, $fa6, $ft3, $fcc0
	fcmp.clt.s	$fcc0, $ft0, $ft4
	fsel	$fa7, $ft0, $ft4, $fcc0
	fsub.s	$ft0, $ft2, $fa3
	fsub.s	$ft1, $ft5, $fa3
	fsub.s	$ft2, $ft6, $fa3
	fadd.s	$fa4, $fa3, $fa4
	fadd.s	$fa5, $fa3, $fa5
	fadd.s	$fa3, $fa3, $fa6
	fst.s	$ft0, $sp, 48
	fst.s	$ft1, $sp, 52
	fst.s	$ft2, $sp, 56
	fst.s	$ft7, $sp, 60
	fst.s	$fa4, $sp, 64
	fst.s	$fa5, $sp, 68
	fld.s	$fa4, $fp, 520
	fst.s	$fa3, $sp, 72
	fst.s	$fa7, $sp, 76
	ld.d	$a1, $a0, 64
	fmul.s	$fa0, $fa0, $fa4
	fmul.s	$fa1, $fa1, $fa4
	fmul.s	$fa2, $fa2, $fa4
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a2, $fa1
	bstrins.d	$a0, $a2, 63, 32
	movfr2gr.s	$a2, $fa2
	fld.s	$fa0, $fp, 528
	bstrpick.d	$a2, $a2, 31, 0
	st.d	$a0, $sp, 32
	st.d	$a2, $sp, 40
	addi.d	$a2, $sp, 48
	addi.d	$a3, $sp, 32
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN6btDbvt6updateEP10btDbvtNodeR12btDbvtAabbMmRK9btVector3f)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 884
	addi.d	$s3, $s3, 1
	addi.d	$s2, $s2, 72
	blt	$s3, $a0, .LBB97_21
.LBB97_22:                              # %.loopexit202
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody10updatePoseEv)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $fp, 537
	beqz	$a0, .LBB97_29
# %bb.23:
	fld.s	$fa0, $fp, 344
	fcmp.cule.s	$fcc0, $fa0, $fs0
	bcnez	$fcc0, .LBB97_29
# %bb.24:
	ld.w	$a1, $fp, 820
	blez	$a1, .LBB97_29
# %bb.25:                               # %.lr.ph211
	move	$a0, $zero
	fld.s	$fa0, $fp, 624
	fld.s	$fa1, $fp, 628
	fld.s	$fa2, $fp, 632
	fld.s	$fa3, $fp, 640
	fld.s	$fa4, $fp, 644
	fld.s	$fa5, $fp, 648
	fld.s	$fa6, $fp, 656
	fld.s	$fa7, $fp, 660
	fld.s	$ft0, $fp, 664
	ori	$a2, $zero, 120
	mul.d	$a1, $a1, $a2
	ori	$a2, $zero, 4
	b	.LBB97_27
	.p2align	4, , 16
.LBB97_26:                              #   in Loop: Header=BB97_27 Depth=1
	addi.d	$a0, $a0, 120
	addi.d	$a2, $a2, 16
	beq	$a1, $a0, .LBB97_29
.LBB97_27:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $fp, 832
	add.d	$a3, $a3, $a0
	fld.s	$ft1, $a3, 96
	fcmp.cule.s	$fcc0, $ft1, $fs0
	bcnez	$fcc0, .LBB97_26
# %bb.28:                               #   in Loop: Header=BB97_27 Depth=1
	ld.d	$a4, $fp, 560
	add.d	$a5, $a4, $a2
	fldx.s	$ft1, $a4, $a2
	fld.s	$ft2, $a5, -4
	fld.s	$ft3, $a5, 4
	fmul.s	$ft4, $fa1, $ft1
	fmadd.s	$ft4, $fa0, $ft2, $ft4
	fmadd.s	$ft4, $fa2, $ft3, $ft4
	fmul.s	$ft5, $fa4, $ft1
	fmadd.s	$ft5, $fa3, $ft2, $ft5
	fmadd.s	$ft5, $fa5, $ft3, $ft5
	fmul.s	$ft1, $fa7, $ft1
	fmadd.s	$ft1, $fa6, $ft2, $ft1
	fld.s	$ft2, $fp, 608
	fld.s	$ft6, $fp, 612
	fld.s	$ft7, $fp, 616
	fmadd.s	$ft1, $ft0, $ft3, $ft1
	fadd.s	$ft2, $ft2, $ft4
	fadd.s	$ft3, $ft5, $ft6
	fadd.s	$ft1, $ft1, $ft7
	fld.s	$ft4, $a3, 16
	fld.s	$ft5, $a3, 20
	fld.s	$ft6, $a3, 24
	fld.s	$ft7, $fp, 344
	fsub.s	$ft2, $ft2, $ft4
	fsub.s	$ft3, $ft3, $ft5
	fsub.s	$ft1, $ft1, $ft6
	fmul.s	$ft2, $ft7, $ft2
	fmul.s	$ft3, $ft7, $ft3
	fmul.s	$ft1, $ft7, $ft1
	fadd.s	$ft2, $ft4, $ft2
	fadd.s	$ft3, $ft5, $ft3
	fadd.s	$ft1, $ft6, $ft1
	movfr2gr.s	$a4, $ft2
	movfr2gr.s	$a5, $ft3
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $ft1
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a4, $a3, 16
	st.d	$a5, $a3, 24
	b	.LBB97_26
.LBB97_29:                              # %.loopexit
	ld.w	$s2, $fp, 980
	bgez	$s2, .LBB97_37
# %bb.30:
	ld.w	$a0, $fp, 984
	bgez	$a0, .LBB97_35
# %bb.31:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8RContactEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $fp, 992
	beqz	$a0, .LBB97_34
# %bb.32:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8RContactEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $fp, 1000
	andi	$a1, $a1, 1
	beqz	$a1, .LBB97_34
# %bb.33:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB97_34:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1000
	st.d	$zero, $fp, 992
	st.w	$zero, $fp, 984
.LBB97_35:                              # %.lr.ph.i143
	ori	$a0, $zero, 120
	mul.d	$s3, $s2, $a0
	.p2align	4, , 16
.LBB97_36:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 992
	add.d	$a0, $a0, $s3
	addi.d	$s2, $s2, 1
	ori	$a2, $zero, 116
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	addi.d	$s3, $s3, 120
	bnez	$s2, .LBB97_36
.LBB97_37:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEE6resizeEiRKS1_.exit
	ld.w	$s2, $fp, 1012
	st.w	$zero, $fp, 980
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
	bgez	$s2, .LBB97_45
# %bb.38:
	ld.w	$a0, $fp, 1016
	bgez	$a0, .LBB97_43
# %bb.39:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8SContactEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $fp, 1024
	beqz	$a0, .LBB97_42
# %bb.40:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8SContactEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $fp, 1032
	andi	$a1, $a1, 1
	beqz	$a1, .LBB97_42
# %bb.41:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	vld	$vr0, $sp, 16                   # 16-byte Folded Reload
.LBB97_42:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 1032
	st.d	$zero, $fp, 1024
	st.w	$zero, $fp, 1016
.LBB97_43:                              # %.lr.ph.i147
	slli.d	$a0, $s2, 6
	.p2align	4, , 16
.LBB97_44:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 1024
	add.d	$a2, $a1, $a0
	vstx	$vr0, $a1, $a0
	vst	$vr0, $a2, 48
	vst	$vr0, $a2, 32
	vst	$vr0, $a2, 16
	addi.d	$s2, $s2, 1
	addi.d	$a0, $a0, 64
	bnez	$s2, .LBB97_44
.LBB97_45:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEE6resizeEiRKS1_.exit
	st.w	$zero, $fp, 1012
	ori	$a1, $zero, 1
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_ZN6btDbvt19optimizeIncrementalEi)
	jirl	$ra, $ra, 0
	ori	$a1, $zero, 1
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZN6btDbvt19optimizeIncrementalEi)
	jirl	$ra, $ra, 0
	addi.d	$a0, $fp, 1272
	ori	$a1, $zero, 1
	pcaddu18i	$ra, %call36(_ZN6btDbvt19optimizeIncrementalEi)
	jirl	$ra, $ra, 0
	fld.d	$fs1, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 88                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.Lfunc_end97:
	.size	_ZN10btSoftBody13predictMotionEf, .Lfunc_end97-_ZN10btSoftBody13predictMotionEf
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody11applyForcesEv
.LCPI98_0:
	.word	0x34000000                      # float 1.1920929E-7
.LCPI98_1:
	.word	0x3eaaaaab                      # float 0.333333343
	.text
	.globl	_ZN10btSoftBody11applyForcesEv
	.p2align	5
	.type	_ZN10btSoftBody11applyForcesEv,@function
_ZN10btSoftBody11applyForcesEv:         # @_ZN10btSoftBody11applyForcesEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.2)
	addi.d	$a0, $a0, %pc_lo12(.L.str.2)
	pcaddu18i	$ra, %call36(_ZN15CProfileManager13Start_ProfileEPKc)
	jirl	$ra, $ra, 0
	fld.s	$fa0, $fp, 328
	fld.s	$fa1, $fp, 324
	fld.s	$fa3, $fp, 332
	fmax.s	$fa7, $fa0, $fa1
	movgr2fr.w	$ft0, $zero
	fcmp.cule.s	$fcc0, $fa7, $ft0
	bcnez	$fcc0, .LBB98_2
# %bb.1:
	ld.w	$a0, $fp, 312
	slti	$a1, $a0, 3
	ori	$a2, $zero, 2
	slt	$a0, $a2, $a0
	b	.LBB98_3
.LBB98_2:
	move	$a1, $zero
	move	$a0, $zero
.LBB98_3:
	fld.s	$fa4, $fp, 336
	ld.w	$a2, $fp, 820
	fcmp.cune.s	$fcc0, $fa3, $ft0
	bcnez	$fcc0, .LBB98_5
# %bb.4:
	movgr2fr.w	$fa2, $zero
	fcmp.cule.s	$fcc0, $fa4, $fa2
	fmov.s	$fa6, $ft0
	fmov.s	$fa5, $ft0
	bcnez	$fcc0, .LBB98_13
.LBB98_5:
	blez	$a2, .LBB98_9
# %bb.6:
	ld.w	$a3, $fp, 884
	blez	$a3, .LBB98_10
# %bb.7:                                # %.lr.ph.i
	ld.d	$a4, $fp, 832
	fld.s	$fa2, $a4, 16
	ld.d	$a5, $fp, 896
	fld.s	$fa6, $a4, 20
	fld.s	$ft1, $a4, 24
	addi.d	$a4, $a5, 32
	movgr2fr.w	$fa5, $zero
	.p2align	4, , 16
.LBB98_8:                               # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a4, -16
	fld.s	$ft2, $a5, 16
	fld.s	$ft3, $a5, 20
	ld.d	$a6, $a4, -8
	fld.s	$ft4, $a5, 24
	fsub.s	$ft2, $ft2, $fa2
	fsub.s	$ft3, $ft3, $fa6
	fld.s	$ft5, $a6, 16
	fld.s	$ft6, $a6, 20
	fld.s	$ft7, $a6, 24
	ld.d	$a5, $a4, 0
	fsub.s	$ft4, $ft4, $ft1
	fsub.s	$ft5, $ft5, $fa2
	fsub.s	$ft6, $ft6, $fa6
	fld.s	$ft8, $a5, 16
	fld.s	$ft9, $a5, 20
	fld.s	$ft10, $a5, 24
	fsub.s	$ft7, $ft7, $ft1
	fsub.s	$ft8, $ft8, $fa2
	fsub.s	$ft9, $ft9, $fa6
	fsub.s	$ft10, $ft10, $ft1
	fneg.s	$ft11, $ft9
	fmul.s	$ft11, $ft7, $ft11
	fmadd.s	$ft11, $ft6, $ft10, $ft11
	fneg.s	$ft10, $ft10
	fmul.s	$ft10, $ft5, $ft10
	fmadd.s	$ft7, $ft7, $ft8, $ft10
	fneg.s	$ft8, $ft8
	fmul.s	$ft6, $ft6, $ft8
	fmadd.s	$ft5, $ft5, $ft9, $ft6
	fmul.s	$ft3, $ft3, $ft7
	fmadd.s	$ft2, $ft2, $ft11, $ft3
	fmadd.s	$ft2, $ft4, $ft5, $ft2
	fadd.s	$fa5, $fa5, $ft2
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 72
	bnez	$a3, .LBB98_8
	b	.LBB98_11
.LBB98_9:
	movgr2fr.w	$fa2, $zero
	b	.LBB98_12
.LBB98_10:
	movgr2fr.w	$fa5, $zero
.LBB98_11:                              # %._crit_edge.i
	vldi	$vr2, -1256
	fdiv.s	$fa2, $fa5, $fa2
.LBB98_12:                              # %_ZNK10btSoftBody9getVolumeEv.exit
	fld.s	$fa6, $fp, 540
	fabs.s	$fa5, $fa2
	frecip.s	$fa5, $fa5
	fmul.s	$fa5, $fa3, $fa5
	fsub.s	$fa2, $fa6, $fa2
	fmul.s	$fa6, $fa4, $fa2
.LBB98_13:                              # %._crit_edge452
	fld.s	$fa2, $fp, 512
	pcalau12i	$a5, %pc_hi20(.LCPI98_0)
	blez	$a2, .LBB98_38
# %bb.14:                               # %.lr.ph
	fcmp.clt.s	$fcc0, $ft0, $fa7
	ld.d	$a7, $fp, 832
	movcf2gr	$a3, $fcc0
	ld.d	$a4, $fp, 776
	ld.w	$a6, $fp, 312
	addi.d	$a7, $a7, 100
	movgr2fr.w	$fa7, $zero
	fld.s	$ft0, $a5, %pc_lo12(.LCPI98_0)
	ori	$t0, $zero, 1
	vldi	$vr9, -1040
	vldi	$vr10, -1168
	vldi	$vr11, -1056
	b	.LBB98_16
	.p2align	4, , 16
.LBB98_15:                              #   in Loop: Header=BB98_16 Depth=1
	addi.d	$a2, $a2, -1
	addi.d	$a7, $a7, 120
	beqz	$a2, .LBB98_38
.LBB98_16:                              # =>This Inner Loop Header: Depth=1
	fld.s	$ft4, $a7, -4
	fcmp.cule.s	$fcc0, $ft4, $fa7
	bcnez	$fcc0, .LBB98_15
# %bb.17:                               #   in Loop: Header=BB98_16 Depth=1
	beqz	$a3, .LBB98_34
# %bb.18:                               #   in Loop: Header=BB98_16 Depth=1
	fld.s	$ft5, $a4, 4
	fld.s	$ft8, $a4, 0
	fcmp.cule.s	$fcc0, $ft5, $fa7
	bcnez	$fcc0, .LBB98_21
# %bb.19:                               #   in Loop: Header=BB98_16 Depth=1
	fld.s	$ft6, $a7, -84
	fld.s	$ft7, $a4, 12
	fld.s	$ft9, $a7, -80
	fld.s	$ft10, $a4, 16
	fld.s	$ft11, $a7, -76
	fld.s	$ft12, $a4, 20
	fld.s	$ft13, $a4, 8
	fmul.s	$ft9, $ft9, $ft10
	fmadd.s	$ft6, $ft6, $ft7, $ft9
	fmadd.s	$ft6, $ft11, $ft12, $ft6
	fadd.s	$ft6, $ft6, $ft13
	fcmp.cule.s	$fcc0, $fa7, $ft6
	bcnez	$fcc0, .LBB98_21
# %bb.20:                               #   in Loop: Header=BB98_16 Depth=1
	fmov.s	$ft8, $ft5
.LBB98_21:                              # %_ZL14EvaluateMediumPK19btSoftBodyWorldInfoRK9btVector3RN10btSoftBody7sMediumE.exit
                                        #   in Loop: Header=BB98_16 Depth=1
	beqz	$a1, .LBB98_34
# %bb.22:                               #   in Loop: Header=BB98_16 Depth=1
	fld.s	$ft6, $a7, -48
	fld.s	$ft5, $a7, -52
	fld.s	$ft7, $a7, -44
	fmul.s	$ft9, $ft6, $ft6
	fmadd.s	$ft9, $ft5, $ft5, $ft9
	fmadd.s	$ft9, $ft7, $ft7, $ft9
	fcmp.cule.s	$fcc0, $ft9, $ft0
	bcnez	$fcc0, .LBB98_34
# %bb.23:                               #   in Loop: Header=BB98_16 Depth=1
	ld.w	$t1, $a7, -20
	ld.w	$t2, $a7, -16
	fld.s	$ft10, $a7, -12
	beq	$a6, $t0, .LBB98_27
# %bb.24:                               #   in Loop: Header=BB98_16 Depth=1
	bnez	$a6, .LBB98_29
# %bb.25:                               #   in Loop: Header=BB98_16 Depth=1
	fsqrt.s	$ft10, $ft9
	fcmp.cule.s	$fcc0, $ft10, $ft0
	bcnez	$fcc0, .LBB98_28
# %bb.26:                               #   in Loop: Header=BB98_16 Depth=1
	frecip.s	$ft10, $ft10
	fmul.s	$ft11, $ft5, $ft10
	fmul.s	$ft12, $ft6, $ft10
	fmul.s	$ft10, $ft7, $ft10
	movfr2gr.s	$t1, $ft11
	movfr2gr.s	$t2, $ft12
	bstrins.d	$t1, $t2, 63, 32
	srli.d	$t2, $t1, 32
	b	.LBB98_29
.LBB98_27:                              #   in Loop: Header=BB98_16 Depth=1
	movgr2fr.w	$ft11, $t1
	movgr2fr.w	$ft12, $t2
	fmul.s	$ft13, $ft6, $ft12
	fmadd.s	$ft13, $ft11, $ft5, $ft13
	fmadd.s	$ft13, $ft10, $ft7, $ft13
	fcmp.clt.s	$fcc0, $ft13, $fa7
	fsel	$ft13, $ft2, $ft1, $fcc0
	fmul.s	$ft11, $ft13, $ft11
	movfr2gr.s	$t1, $ft11
	fmul.s	$ft11, $ft13, $ft12
	movfr2gr.s	$t2, $ft11
	fmul.s	$ft10, $ft13, $ft10
	b	.LBB98_29
.LBB98_28:                              #   in Loop: Header=BB98_16 Depth=1
	move	$t1, $zero
	fmov.s	$ft10, $fa7
	srli.d	$t2, $zero, 32
.LBB98_29:                              #   in Loop: Header=BB98_16 Depth=1
	movgr2fr.w	$ft11, $t1
	movgr2fr.w	$ft12, $t2
	fmul.s	$ft13, $ft6, $ft12
	fmadd.s	$ft13, $ft5, $ft11, $ft13
	fmadd.s	$ft13, $ft7, $ft10, $ft13
	fcmp.cule.s	$fcc0, $ft13, $fa7
	bcnez	$fcc0, .LBB98_34
# %bb.30:                               #   in Loop: Header=BB98_16 Depth=1
	fld.s	$ft14, $a7, 0
	fmul.s	$ft13, $ft13, $ft14
	fmul.s	$ft13, $ft9, $ft13
	fmul.s	$ft13, $ft13, $ft3
	fmul.s	$ft8, $ft13, $ft8
	fmul.s	$ft13, $fa0, $ft8
	fmul.s	$ft11, $ft13, $ft11
	fmul.s	$ft12, $ft13, $ft12
	fmul.s	$ft10, $ft13, $ft10
	fadd.s	$ft11, $ft11, $fa7
	fadd.s	$ft12, $ft12, $fa7
	fadd.s	$ft13, $ft10, $fa7
	frsqrt.s	$ft10, $ft9
	fmul.s	$ft14, $ft5, $ft10
	fmul.s	$ft15, $ft6, $ft10
	fmul.s	$ft10, $ft7, $ft10
	fmul.s	$ft8, $fa1, $ft8
	fmul.s	$ft14, $ft14, $ft8
	fmul.s	$ft15, $ft15, $ft8
	fmul.s	$ft8, $ft10, $ft8
	fadd.s	$ft11, $ft14, $ft11
	fadd.s	$ft10, $ft15, $ft12
	fadd.s	$ft8, $ft8, $ft13
	fmul.s	$ft4, $fa2, $ft4
	fmul.s	$ft12, $ft4, $ft11
	fmul.s	$ft13, $ft4, $ft10
	fmul.s	$ft14, $ft4, $ft8
	fmul.s	$ft13, $ft13, $ft13
	fmadd.s	$ft12, $ft12, $ft12, $ft13
	fmadd.s	$ft12, $ft14, $ft14, $ft12
	fcmp.cule.s	$fcc0, $ft12, $ft9
	bcnez	$fcc0, .LBB98_32
# %bb.31:                               #   in Loop: Header=BB98_16 Depth=1
	fmul.s	$ft9, $ft10, $ft10
	fmadd.s	$ft9, $ft11, $ft11, $ft9
	fmadd.s	$ft9, $ft8, $ft8, $ft9
	frsqrt.s	$ft9, $ft9
	fmul.s	$ft11, $ft11, $ft9
	fmul.s	$ft10, $ft10, $ft9
	fmul.s	$ft8, $ft8, $ft9
	fmul.s	$ft6, $ft6, $ft10
	fmadd.s	$ft5, $ft5, $ft11, $ft6
	fmadd.s	$ft5, $ft7, $ft8, $ft5
	fmul.s	$ft6, $ft11, $ft5
	fmul.s	$ft7, $ft10, $ft5
	fmul.s	$ft5, $ft8, $ft5
	frecip.s	$ft4, $ft4
	fmul.s	$ft6, $ft4, $ft6
	fld.s	$ft8, $a7, -36
	fmul.s	$ft7, $ft4, $ft7
	fmul.s	$ft4, $ft4, $ft5
	fld.s	$ft5, $a7, -32
	fsub.s	$ft6, $ft8, $ft6
	fld.s	$ft8, $a7, -28
	fst.s	$ft6, $a7, -36
	fsub.s	$ft5, $ft5, $ft7
	fst.s	$ft5, $a7, -32
	fsub.s	$ft4, $ft8, $ft4
	b	.LBB98_33
.LBB98_32:                              #   in Loop: Header=BB98_16 Depth=1
	fld.s	$ft4, $a7, -36
	fld.s	$ft5, $a7, -32
	fadd.s	$ft4, $ft11, $ft4
	fld.s	$ft6, $a7, -28
	fst.s	$ft4, $a7, -36
	fadd.s	$ft4, $ft10, $ft5
	fst.s	$ft4, $a7, -32
	fadd.s	$ft4, $ft8, $ft6
.LBB98_33:                              # %_ZL17ApplyClampedForceRN10btSoftBody4NodeERK9btVector3f.exit
                                        #   in Loop: Header=BB98_16 Depth=1
	fst.s	$ft4, $a7, -28
	.p2align	4, , 16
.LBB98_34:                              # %_ZL17ApplyClampedForceRN10btSoftBody4NodeERK9btVector3f.exit
                                        #   in Loop: Header=BB98_16 Depth=1
	fcmp.ceq.s	$fcc0, $fa3, $fa7
	bcnez	$fcc0, .LBB98_36
# %bb.35:                               #   in Loop: Header=BB98_16 Depth=1
	fld.s	$ft4, $a7, 0
	fld.s	$ft5, $a7, -20
	fmul.s	$ft4, $fa5, $ft4
	fld.s	$ft6, $a7, -16
	fld.s	$ft7, $a7, -12
	fmul.s	$ft5, $ft5, $ft4
	fld.s	$ft8, $a7, -36
	fmul.s	$ft6, $ft4, $ft6
	fmul.s	$ft4, $ft4, $ft7
	fld.s	$ft7, $a7, -32
	fadd.s	$ft5, $ft5, $ft8
	fld.s	$ft8, $a7, -28
	fst.s	$ft5, $a7, -36
	fadd.s	$ft5, $ft6, $ft7
	fst.s	$ft5, $a7, -32
	fadd.s	$ft4, $ft4, $ft8
	fst.s	$ft4, $a7, -28
.LBB98_36:                              #   in Loop: Header=BB98_16 Depth=1
	fcmp.cule.s	$fcc0, $fa4, $fa7
	bcnez	$fcc0, .LBB98_15
# %bb.37:                               #   in Loop: Header=BB98_16 Depth=1
	fld.s	$ft4, $a7, 0
	fld.s	$ft5, $a7, -20
	fmul.s	$ft4, $fa6, $ft4
	fld.s	$ft6, $a7, -16
	fld.s	$ft7, $a7, -12
	fmul.s	$ft5, $ft5, $ft4
	fld.s	$ft8, $a7, -36
	fmul.s	$ft6, $ft4, $ft6
	fmul.s	$ft4, $ft4, $ft7
	fld.s	$ft7, $a7, -32
	fadd.s	$ft5, $ft5, $ft8
	fld.s	$ft8, $a7, -28
	fst.s	$ft5, $a7, -36
	fadd.s	$ft5, $ft6, $ft7
	fst.s	$ft5, $a7, -32
	fadd.s	$ft4, $ft4, $ft8
	fst.s	$ft4, $a7, -28
	b	.LBB98_15
.LBB98_38:                              # %._crit_edge
	ld.w	$a1, $fp, 884
	blez	$a1, .LBB98_59
# %bb.39:                               # %.lr.ph443
	ld.d	$a4, $fp, 896
	ld.d	$a2, $fp, 776
	ld.w	$a3, $fp, 312
	addi.d	$a4, $a4, 32
	pcalau12i	$a6, %pc_hi20(.LCPI98_1)
	fld.s	$fa3, $a6, %pc_lo12(.LCPI98_1)
	movgr2fr.w	$fa4, $zero
	fld.s	$fa5, $a5, %pc_lo12(.LCPI98_0)
	ori	$a5, $zero, 3
	vldi	$vr6, -1040
	vldi	$vr7, -1168
	b	.LBB98_43
.LBB98_40:                              #   in Loop: Header=BB98_43 Depth=1
	fmul.s	$ft0, $ft4, $ft8
	fmadd.s	$ft0, $ft7, $ft3, $ft0
	fmadd.s	$ft0, $ft9, $ft5, $ft0
	fmul.s	$ft1, $ft3, $ft0
	fmul.s	$ft2, $ft4, $ft0
	fmul.s	$ft0, $ft5, $ft0
	frecip.s	$ft3, $ft6
	fmul.s	$ft1, $ft3, $ft1
	fld.s	$ft4, $a6, 64
	fmul.s	$ft2, $ft3, $ft2
	fmul.s	$ft0, $ft3, $ft0
	fld.s	$ft3, $a6, 68
	fsub.s	$ft1, $ft4, $ft1
	fld.s	$ft4, $a6, 72
	fst.s	$ft1, $a6, 64
	fsub.s	$ft1, $ft3, $ft2
	fst.s	$ft1, $a6, 68
	fsub.s	$ft0, $ft4, $ft0
.LBB98_41:                              # %.loopexit
                                        #   in Loop: Header=BB98_43 Depth=1
	fst.s	$ft0, $a6, 72
	.p2align	4, , 16
.LBB98_42:                              # %.loopexit
                                        #   in Loop: Header=BB98_43 Depth=1
	addi.d	$a1, $a1, -1
	addi.d	$a4, $a4, 72
	beqz	$a1, .LBB98_59
.LBB98_43:                              # =>This Inner Loop Header: Depth=1
	beqz	$a0, .LBB98_42
# %bb.44:                               #   in Loop: Header=BB98_43 Depth=1
	ld.d	$t0, $a4, -16
	ld.d	$a7, $a4, -8
	fld.s	$ft1, $a2, 4
	ld.d	$a6, $a4, 0
	fld.s	$ft0, $a2, 0
	fcmp.cule.s	$fcc0, $ft1, $fa4
	bcnez	$fcc0, .LBB98_47
# %bb.45:                               #   in Loop: Header=BB98_43 Depth=1
	fld.s	$ft2, $t0, 16
	fld.s	$ft3, $a7, 16
	fld.s	$ft4, $a6, 16
	fld.s	$ft5, $t0, 20
	fld.s	$ft6, $a7, 20
	fadd.s	$ft2, $ft2, $ft3
	fadd.s	$ft2, $ft2, $ft4
	fadd.s	$ft3, $ft5, $ft6
	fld.s	$ft4, $a6, 20
	fld.s	$ft5, $t0, 24
	fld.s	$ft6, $a7, 24
	fmul.s	$ft2, $ft2, $fa3
	fadd.s	$ft3, $ft3, $ft4
	fld.s	$ft4, $a2, 16
	fadd.s	$ft5, $ft5, $ft6
	fld.s	$ft6, $a2, 12
	fmul.s	$ft3, $ft3, $fa3
	fmul.s	$ft3, $ft3, $ft4
	fld.s	$ft4, $a6, 24
	fmadd.s	$ft2, $ft2, $ft6, $ft3
	fld.s	$ft3, $a2, 20
	fld.s	$ft6, $a2, 8
	fadd.s	$ft4, $ft5, $ft4
	fmul.s	$ft4, $ft4, $fa3
	fmadd.s	$ft2, $ft4, $ft3, $ft2
	fadd.s	$ft2, $ft6, $ft2
	fcmp.cule.s	$fcc0, $fa4, $ft2
	bcnez	$fcc0, .LBB98_47
# %bb.46:                               #   in Loop: Header=BB98_43 Depth=1
	fmov.s	$ft0, $ft1
.LBB98_47:                              #   in Loop: Header=BB98_43 Depth=1
	fld.s	$ft6, $t0, 48
	fld.s	$ft1, $a7, 48
	fadd.s	$ft1, $ft6, $ft1
	fld.s	$ft7, $t0, 52
	fld.s	$ft2, $a7, 52
	fld.s	$ft3, $a6, 48
	fld.s	$ft8, $t0, 56
	fld.s	$ft4, $a7, 56
	fld.s	$ft5, $a6, 52
	fadd.s	$ft1, $ft1, $ft3
	fld.s	$ft3, $a6, 56
	fadd.s	$ft2, $ft7, $ft2
	fadd.s	$ft2, $ft2, $ft5
	fadd.s	$ft4, $ft8, $ft4
	fadd.s	$ft3, $ft4, $ft3
	fmul.s	$ft1, $ft1, $fa3
	fmul.s	$ft2, $ft2, $fa3
	fmul.s	$ft3, $ft3, $fa3
	fmul.s	$ft4, $ft2, $ft2
	fmadd.s	$ft4, $ft1, $ft1, $ft4
	fmadd.s	$ft4, $ft3, $ft3, $ft4
	fcmp.cule.s	$fcc0, $ft4, $fa5
	bcnez	$fcc0, .LBB98_42
# %bb.48:                               #   in Loop: Header=BB98_43 Depth=1
	fld.s	$ft5, $a4, 8
	fld.s	$ft9, $a4, 12
	fld.s	$ft10, $a4, 16
	bne	$a3, $a5, .LBB98_50
# %bb.49:                               #   in Loop: Header=BB98_43 Depth=1
	fmul.s	$ft11, $ft2, $ft9
	fmadd.s	$ft11, $ft5, $ft1, $ft11
	fmadd.s	$ft11, $ft10, $ft3, $ft11
	fcmp.clt.s	$fcc0, $ft11, $fa4
	fsel	$ft11, $fa7, $fa6, $fcc0
	fmul.s	$ft5, $ft5, $ft11
	fmul.s	$ft9, $ft9, $ft11
	fmul.s	$ft10, $ft10, $ft11
.LBB98_50:                              #   in Loop: Header=BB98_43 Depth=1
	fmul.s	$ft11, $ft2, $ft9
	fmadd.s	$ft11, $ft1, $ft5, $ft11
	fmadd.s	$ft11, $ft3, $ft10, $ft11
	fcmp.cule.s	$fcc0, $ft11, $fa4
	bcnez	$fcc0, .LBB98_42
# %bb.51:                               #   in Loop: Header=BB98_43 Depth=1
	fld.s	$ft12, $a4, 24
	fmul.s	$ft11, $ft11, $ft12
	fmul.s	$ft11, $ft4, $ft11
	fneg.s	$ft0, $ft0
	fmul.s	$ft0, $ft11, $ft0
	fmul.s	$ft11, $fa0, $ft0
	fmul.s	$ft5, $ft5, $ft11
	fmul.s	$ft9, $ft9, $ft11
	fmul.s	$ft10, $ft10, $ft11
	fadd.s	$ft5, $ft5, $fa4
	fadd.s	$ft9, $ft9, $fa4
	fadd.s	$ft10, $ft10, $fa4
	frsqrt.s	$ft4, $ft4
	fmul.s	$ft1, $ft1, $ft4
	fmul.s	$ft2, $ft2, $ft4
	fmul.s	$ft3, $ft3, $ft4
	fmul.s	$ft0, $fa1, $ft0
	fmul.s	$ft1, $ft1, $ft0
	fmul.s	$ft2, $ft2, $ft0
	fmul.s	$ft0, $ft3, $ft0
	fadd.s	$ft1, $ft1, $ft5
	fadd.s	$ft3, $ft2, $ft9
	fadd.s	$ft0, $ft0, $ft10
	fmul.s	$ft2, $ft1, $fa3
	fmul.s	$ft1, $ft3, $fa3
	fmul.s	$ft0, $ft0, $fa3
	fmul.s	$ft3, $ft1, $ft1
	fmadd.s	$ft3, $ft2, $ft2, $ft3
	fmadd.s	$ft3, $ft0, $ft0, $ft3
	fld.s	$ft5, $t0, 96
	frsqrt.s	$ft10, $ft3
	fmul.s	$ft3, $ft2, $ft10
	fmul.s	$ft4, $ft1, $ft10
	fmul.s	$ft9, $fa2, $ft5
	fmul.s	$ft5, $ft2, $ft9
	fmul.s	$ft11, $ft1, $ft9
	fmul.s	$ft12, $ft0, $ft9
	fmul.s	$ft11, $ft11, $ft11
	fmadd.s	$ft5, $ft5, $ft5, $ft11
	fmadd.s	$ft5, $ft12, $ft12, $ft5
	fmul.s	$ft11, $ft7, $ft7
	fmadd.s	$ft11, $ft6, $ft6, $ft11
	fmadd.s	$ft11, $ft8, $ft8, $ft11
	fcmp.cule.s	$fcc0, $ft5, $ft11
	fmul.s	$ft5, $ft0, $ft10
	bcnez	$fcc0, .LBB98_53
# %bb.52:                               #   in Loop: Header=BB98_43 Depth=1
	fmul.s	$ft7, $ft4, $ft7
	fmadd.s	$ft6, $ft6, $ft3, $ft7
	fmadd.s	$ft6, $ft8, $ft5, $ft6
	fmul.s	$ft7, $ft3, $ft6
	fmul.s	$ft8, $ft4, $ft6
	fmul.s	$ft6, $ft5, $ft6
	frecip.s	$ft9, $ft9
	fmul.s	$ft7, $ft9, $ft7
	fld.s	$ft10, $t0, 64
	fmul.s	$ft8, $ft9, $ft8
	fmul.s	$ft6, $ft9, $ft6
	fld.s	$ft9, $t0, 68
	fsub.s	$ft7, $ft10, $ft7
	fld.s	$ft10, $t0, 72
	fst.s	$ft7, $t0, 64
	fsub.s	$ft7, $ft9, $ft8
	fst.s	$ft7, $t0, 68
	fsub.s	$ft6, $ft10, $ft6
	b	.LBB98_54
.LBB98_53:                              #   in Loop: Header=BB98_43 Depth=1
	fld.s	$ft6, $t0, 64
	fld.s	$ft7, $t0, 68
	fadd.s	$ft6, $ft2, $ft6
	fld.s	$ft8, $t0, 72
	fst.s	$ft6, $t0, 64
	fadd.s	$ft6, $ft1, $ft7
	fst.s	$ft6, $t0, 68
	fadd.s	$ft6, $ft0, $ft8
.LBB98_54:                              # %_ZL17ApplyClampedForceRN10btSoftBody4NodeERK9btVector3f.exit284
                                        #   in Loop: Header=BB98_43 Depth=1
	fst.s	$ft6, $t0, 72
	fld.s	$ft6, $a7, 96
	fmul.s	$ft6, $fa2, $ft6
	fmul.s	$ft7, $ft2, $ft6
	fmul.s	$ft8, $ft1, $ft6
	fmul.s	$ft10, $ft0, $ft6
	fmul.s	$ft8, $ft8, $ft8
	fmadd.s	$ft11, $ft7, $ft7, $ft8
	fld.s	$ft8, $a7, 52
	fld.s	$ft7, $a7, 48
	fld.s	$ft9, $a7, 56
	fmadd.s	$ft10, $ft10, $ft10, $ft11
	fmul.s	$ft11, $ft8, $ft8
	fmadd.s	$ft11, $ft7, $ft7, $ft11
	fmadd.s	$ft11, $ft9, $ft9, $ft11
	fcmp.clt.s	$fcc0, $ft11, $ft10
	bceqz	$fcc0, .LBB98_56
# %bb.55:                               #   in Loop: Header=BB98_43 Depth=1
	fmul.s	$ft8, $ft4, $ft8
	fmadd.s	$ft7, $ft7, $ft3, $ft8
	fmadd.s	$ft7, $ft9, $ft5, $ft7
	fmul.s	$ft8, $ft3, $ft7
	fmul.s	$ft9, $ft4, $ft7
	fmul.s	$ft7, $ft5, $ft7
	frecip.s	$ft6, $ft6
	fmul.s	$ft8, $ft6, $ft8
	fld.s	$ft10, $a7, 64
	fmul.s	$ft9, $ft6, $ft9
	fmul.s	$ft6, $ft6, $ft7
	fld.s	$ft7, $a7, 68
	fsub.s	$ft8, $ft10, $ft8
	fld.s	$ft10, $a7, 72
	fst.s	$ft8, $a7, 64
	fsub.s	$ft7, $ft7, $ft9
	fst.s	$ft7, $a7, 68
	fsub.s	$ft6, $ft10, $ft6
	b	.LBB98_57
.LBB98_56:                              #   in Loop: Header=BB98_43 Depth=1
	fld.s	$ft6, $a7, 64
	fld.s	$ft7, $a7, 68
	fadd.s	$ft6, $ft2, $ft6
	fld.s	$ft8, $a7, 72
	fst.s	$ft6, $a7, 64
	fadd.s	$ft6, $ft1, $ft7
	fst.s	$ft6, $a7, 68
	fadd.s	$ft6, $ft0, $ft8
.LBB98_57:                              # %_ZL17ApplyClampedForceRN10btSoftBody4NodeERK9btVector3f.exit284.1
                                        #   in Loop: Header=BB98_43 Depth=1
	fst.s	$ft6, $a7, 72
	fld.s	$ft6, $a6, 96
	fmul.s	$ft6, $fa2, $ft6
	fmul.s	$ft7, $ft2, $ft6
	fmul.s	$ft8, $ft1, $ft6
	fmul.s	$ft10, $ft0, $ft6
	fmul.s	$ft8, $ft8, $ft8
	fmadd.s	$ft11, $ft7, $ft7, $ft8
	fld.s	$ft8, $a6, 52
	fld.s	$ft7, $a6, 48
	fld.s	$ft9, $a6, 56
	fmadd.s	$ft10, $ft10, $ft10, $ft11
	fmul.s	$ft11, $ft8, $ft8
	fmadd.s	$ft11, $ft7, $ft7, $ft11
	fmadd.s	$ft11, $ft9, $ft9, $ft11
	fcmp.clt.s	$fcc0, $ft11, $ft10
	bcnez	$fcc0, .LBB98_40
# %bb.58:                               #   in Loop: Header=BB98_43 Depth=1
	fld.s	$ft3, $a6, 64
	fld.s	$ft4, $a6, 68
	fadd.s	$ft2, $ft2, $ft3
	fld.s	$ft3, $a6, 72
	fst.s	$ft2, $a6, 64
	fadd.s	$ft1, $ft1, $ft4
	fst.s	$ft1, $a6, 68
	fadd.s	$ft0, $ft0, $ft3
	b	.LBB98_41
.LBB98_59:                              # %._crit_edge444
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	pcaddu18i	$t8, %call36(_ZN15CProfileManager12Stop_ProfileEv)
	jr	$t8
.Lfunc_end98:
	.size	_ZN10btSoftBody11applyForcesEv, .Lfunc_end98-_ZN10btSoftBody11applyForcesEv
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody10updatePoseEv
.LCPI99_0:
	.word	0x34000000                      # float 1.1920929E-7
.LCPI99_1:
	.word	0x34800000                      # float 2.38418579E-7
.LCPI99_2:
	.word	0x34c00000                      # float 3.57627869E-7
	.text
	.globl	_ZN10btSoftBody10updatePoseEv
	.p2align	5
	.type	_ZN10btSoftBody10updatePoseEv,@function
_ZN10btSoftBody10updatePoseEv:          # @_ZN10btSoftBody10updatePoseEv
# %bb.0:
	addi.d	$sp, $sp, -240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 216                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 208                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 200                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 192                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 184                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 176                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 168                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 160                  # 8-byte Folded Spill
	move	$fp, $a0
	ld.bu	$a0, $a0, 537
	beqz	$a0, .LBB99_13
# %bb.1:
	ld.w	$a0, $fp, 820
	blez	$a0, .LBB99_5
# %bb.2:                                # %.lr.ph.i
	ld.d	$a2, $fp, 832
	ld.d	$a1, $fp, 592
	movgr2fr.w	$fa0, $zero
	addi.d	$a2, $a2, 24
	move	$a3, $a0
	fmov.s	$fa1, $fa0
	fmov.s	$fa2, $fa0
	.p2align	4, , 16
.LBB99_3:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa3, $a2, -8
	fld.s	$fa4, $a1, 0
	fld.s	$fa5, $a2, -4
	fld.s	$fa6, $a2, 0
	fmul.s	$fa3, $fa3, $fa4
	fmul.s	$fa5, $fa4, $fa5
	fmul.s	$fa4, $fa4, $fa6
	fadd.s	$fa2, $fa2, $fa3
	fadd.s	$fa1, $fa1, $fa5
	fadd.s	$fa0, $fa0, $fa4
	addi.d	$a3, $a3, -1
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, 120
	bnez	$a3, .LBB99_3
# %bb.4:                                # %.loopexit.loopexit.i
	movfr2gr.s	$a2, $fa2
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a2, $a1, 63, 32
	b	.LBB99_6
.LBB99_5:
	move	$a2, $zero
	movgr2fr.w	$fa0, $zero
.LBB99_6:                               # %_ZNK10btSoftBody11evaluateComEv.exit
	st.d	$a2, $fp, 608
	fst.s	$fa0, $fp, 616
	st.w	$zero, $fp, 620
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 144
	vst	$vr1, $sp, 128
	vst	$vr1, $sp, 112
	blez	$a0, .LBB99_10
# %bb.7:                                # %.lr.ph
	srli.d	$a3, $a2, 32
	ld.d	$a1, $fp, 592
	ld.d	$a4, $fp, 832
	movgr2fr.w	$fa1, $a2
	movgr2fr.w	$fa2, $a3
	ld.d	$a2, $fp, 560
	fld.s	$fs1, $sp, 116
	fld.s	$ft3, $sp, 120
	fld.s	$fs2, $sp, 136
	pcalau12i	$a3, %pc_hi20(.LCPI99_2)
	fld.s	$fs3, $a3, %pc_lo12(.LCPI99_2)
	pcalau12i	$a3, %pc_hi20(.LCPI99_1)
	fld.s	$fs4, $a3, %pc_lo12(.LCPI99_1)
	pcalau12i	$a3, %pc_hi20(.LCPI99_0)
	fld.s	$fs5, $a3, %pc_lo12(.LCPI99_0)
	addi.d	$a2, $a2, 8
	movgr2fr.w	$fs7, $zero
	addi.d	$a3, $a4, 24
	fmov.s	$fs6, $fs7
	fmov.s	$fs0, $fs7
	.p2align	4, , 16
.LBB99_8:                               # =>This Inner Loop Header: Depth=1
	fld.s	$fa3, $a3, -8
	fld.s	$fa4, $a3, -4
	fld.s	$fa5, $a3, 0
	fld.s	$fa6, $a1, 0
	fsub.s	$fa3, $fa3, $fa1
	fsub.s	$fa4, $fa4, $fa2
	fsub.s	$fa5, $fa5, $fa0
	fmul.s	$fa3, $fa3, $fa6
	fmul.s	$fa4, $fa4, $fa6
	fld.s	$fa7, $a2, -8
	fld.s	$ft0, $a2, -4
	fld.s	$ft1, $a2, 0
	fmul.s	$fa5, $fa6, $fa5
	fmul.s	$fa6, $fa3, $fa7
	fmul.s	$ft2, $fa3, $ft0
	fmul.s	$fa3, $fa3, $ft1
	fadd.s	$fs5, $fa6, $fs5
	fadd.s	$fs1, $ft2, $fs1
	fadd.s	$ft3, $fa3, $ft3
	fmul.s	$fa3, $fa4, $fa7
	fmul.s	$fa6, $fa4, $ft0
	fmul.s	$fa4, $fa4, $ft1
	fadd.s	$fs7, $fa3, $fs7
	fadd.s	$fs4, $fa6, $fs4
	fadd.s	$fs2, $fa4, $fs2
	fmul.s	$fa3, $fa5, $fa7
	fmul.s	$fa4, $fa5, $ft0
	fmul.s	$fa5, $fa5, $ft1
	fadd.s	$fs6, $fa3, $fs6
	fadd.s	$fs0, $fa4, $fs0
	fadd.s	$fs3, $fa5, $fs3
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 4
	addi.d	$a2, $a2, 16
	addi.d	$a3, $a3, 120
	bnez	$a0, .LBB99_8
# %bb.9:                                # %._crit_edge
	fst.s	$fs1, $sp, 116
	fst.s	$ft3, $sp, 12                   # 4-byte Folded Spill
	fst.s	$ft3, $sp, 120
	fst.s	$fs2, $sp, 136
	b	.LBB99_11
.LBB99_10:                              # %_ZNK10btSoftBody11evaluateComEv.exit._crit_edge
	fld.s	$fs1, $sp, 116
	fld.s	$fa0, $sp, 120
	fst.s	$fa0, $sp, 12                   # 4-byte Folded Spill
	fld.s	$fs2, $sp, 136
	pcalau12i	$a0, %pc_hi20(.LCPI99_0)
	fld.s	$fs5, $a0, %pc_lo12(.LCPI99_0)
	pcalau12i	$a0, %pc_hi20(.LCPI99_1)
	fld.s	$fs4, $a0, %pc_lo12(.LCPI99_1)
	pcalau12i	$a0, %pc_hi20(.LCPI99_2)
	fld.s	$fs3, $a0, %pc_lo12(.LCPI99_2)
	movgr2fr.w	$fs0, $zero
	fmov.s	$fs6, $fs0
	fmov.s	$fs7, $fs0
.LBB99_11:
	fst.s	$fs5, $sp, 112
	fst.s	$fs7, $sp, 128
	fst.s	$fs4, $sp, 132
	fst.s	$fs6, $sp, 144
	fst.s	$fs0, $sp, 148
	fst.s	$fs3, $sp, 152
	addi.d	$a0, $sp, 112
	addi.d	$a1, $sp, 64
	addi.d	$a2, $sp, 16
	pcaddu18i	$ra, %call36(_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_)
	jirl	$ra, $ra, 0
	vld	$vr0, $sp, 64
	vld	$vr1, $sp, 80
	vld	$vr2, $sp, 96
	vst	$vr0, $fp, 624
	vst	$vr1, $fp, 640
	vst	$vr2, $fp, 656
	fld.s	$fa0, $sp, 64
	fld.s	$fa1, $sp, 80
	fld.s	$fa2, $sp, 96
	fld.s	$fa3, $sp, 68
	fld.s	$fa4, $sp, 84
	fld.s	$fa5, $sp, 100
	fld.s	$fa6, $sp, 72
	fld.s	$fa7, $sp, 88
	fld.s	$ft0, $fp, 724
	fld.s	$ft1, $fp, 720
	fld.s	$ft2, $fp, 728
	fld.s	$ft3, $sp, 104
	fmul.s	$ft4, $fa3, $ft0
	fmadd.s	$ft4, $fa0, $ft1, $ft4
	fmadd.s	$ft4, $fa6, $ft2, $ft4
	fmul.s	$ft5, $fa4, $ft0
	fmadd.s	$ft5, $fa1, $ft1, $ft5
	fmadd.s	$ft5, $fa7, $ft2, $ft5
	fmul.s	$ft0, $fa5, $ft0
	fmadd.s	$ft0, $fa2, $ft1, $ft0
	fld.s	$ft1, $fp, 740
	fld.s	$ft6, $fp, 736
	fld.s	$ft7, $fp, 744
	fmadd.s	$ft0, $ft3, $ft2, $ft0
	fmul.s	$ft2, $fa3, $ft1
	fmadd.s	$ft2, $fa0, $ft6, $ft2
	fmadd.s	$ft2, $fa6, $ft7, $ft2
	fmul.s	$ft8, $fa4, $ft1
	fmadd.s	$ft8, $fa1, $ft6, $ft8
	fmadd.s	$ft8, $fa7, $ft7, $ft8
	fmul.s	$ft1, $fa5, $ft1
	fmadd.s	$ft1, $fa2, $ft6, $ft1
	fld.s	$ft6, $fp, 756
	fld.s	$ft9, $fp, 752
	fld.s	$ft10, $fp, 760
	fmadd.s	$ft1, $ft3, $ft7, $ft1
	fmul.s	$fa3, $fa3, $ft6
	fmadd.s	$fa0, $fa0, $ft9, $fa3
	fmadd.s	$ft7, $fa6, $ft10, $fa0
	fmul.s	$fa0, $fa4, $ft6
	fmadd.s	$fa0, $fa1, $ft9, $fa0
	fmadd.s	$ft11, $fa7, $ft10, $fa0
	fmul.s	$fa0, $fa5, $ft6
	fmadd.s	$fa0, $fa2, $ft9, $fa0
	fmadd.s	$ft3, $ft3, $ft10, $fa0
	fmul.s	$fa0, $ft5, $fs7
	fmadd.s	$fa0, $fs5, $ft4, $fa0
	fmadd.s	$fa0, $fs6, $ft0, $fa0
	fmul.s	$fa1, $ft5, $fs4
	fmadd.s	$fa1, $fs1, $ft4, $fa1
	fmadd.s	$fa3, $fs0, $ft0, $fa1
	fmul.s	$fa1, $ft5, $fs2
	fld.s	$ft5, $sp, 12                   # 4-byte Folded Reload
	fmadd.s	$fa1, $ft5, $ft4, $fa1
	fmadd.s	$fa6, $fs3, $ft0, $fa1
	fmul.s	$fa1, $ft8, $fs7
	fmadd.s	$fa1, $fs5, $ft2, $fa1
	fmadd.s	$fa1, $fs6, $ft1, $fa1
	fmul.s	$fa2, $ft8, $fs4
	fmadd.s	$fa2, $fs1, $ft2, $fa2
	fmadd.s	$fa4, $fs0, $ft1, $fa2
	fmul.s	$fa2, $ft8, $fs2
	fmadd.s	$fa2, $ft5, $ft2, $fa2
	fmadd.s	$fa7, $fs3, $ft1, $fa2
	fmul.s	$fa2, $fs7, $ft11
	fmadd.s	$fa2, $fs5, $ft7, $fa2
	fmadd.s	$fa2, $fs6, $ft3, $fa2
	fmul.s	$fa5, $ft11, $fs4
	fmadd.s	$fa5, $fs1, $ft7, $fa5
	fmadd.s	$fa5, $fs0, $ft3, $fa5
	fmul.s	$ft0, $ft11, $fs2
	fmadd.s	$ft0, $ft5, $ft7, $ft0
	fmadd.s	$ft0, $fs3, $ft3, $ft0
	fst.s	$fa0, $fp, 672
	fst.s	$fa3, $fp, 676
	fst.s	$fa6, $fp, 680
	st.w	$zero, $fp, 684
	fst.s	$fa1, $fp, 688
	fst.s	$fa4, $fp, 692
	fst.s	$fa7, $fp, 696
	st.w	$zero, $fp, 700
	fst.s	$fa2, $fp, 704
	fld.s	$ft1, $fp, 388
	fst.s	$fa5, $fp, 708
	fst.s	$ft0, $fp, 712
	vldi	$vr10, -1168
	fcmp.clt.s	$fcc0, $ft2, $ft1
	st.w	$zero, $fp, 716
	bceqz	$fcc0, .LBB99_13
# %bb.12:
	fneg.s	$ft2, $fa5
	fmul.s	$ft2, $fa7, $ft2
	fmadd.s	$ft2, $fa4, $ft0, $ft2
	fneg.s	$ft3, $ft0
	fmul.s	$ft3, $fa1, $ft3
	fmadd.s	$ft3, $fa7, $fa2, $ft3
	fmul.s	$ft3, $fa3, $ft3
	fmadd.s	$ft2, $fa0, $ft2, $ft3
	fneg.s	$ft3, $fa2
	fmul.s	$ft3, $fa4, $ft3
	fmadd.s	$ft3, $fa1, $fa5, $ft3
	fmadd.s	$ft2, $fa6, $ft3, $ft2
	frecip.s	$ft2, $ft2
	fcmp.clt.s	$fcc0, $ft1, $ft2
	fsel	$ft1, $ft2, $ft1, $fcc0
	vldi	$vr11, -1168
	fcmp.clt.s	$fcc0, $ft2, $ft3
	fsel	$ft1, $ft1, $ft3, $fcc0
	fmul.s	$fa0, $fa0, $ft1
	fmul.s	$fa3, $fa3, $ft1
	fmul.s	$fa6, $fa6, $ft1
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa3
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa6
	bstrpick.d	$a1, $a1, 31, 0
	fmul.s	$fa0, $fa1, $ft1
	fmul.s	$fa1, $fa4, $ft1
	fmul.s	$fa3, $fa7, $ft1
	movfr2gr.s	$a2, $fa0
	movfr2gr.s	$a3, $fa1
	bstrins.d	$a2, $a3, 63, 32
	movfr2gr.s	$a3, $fa3
	bstrpick.d	$a3, $a3, 31, 0
	fmul.s	$fa0, $fa2, $ft1
	fmul.s	$fa1, $fa5, $ft1
	fmul.s	$fa2, $ft0, $ft1
	movfr2gr.s	$a4, $fa0
	movfr2gr.s	$a5, $fa1
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $fa2
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a0, $fp, 672
	st.d	$a1, $fp, 680
	st.d	$a2, $fp, 688
	st.d	$a3, $fp, 696
	st.d	$a4, $fp, 704
	st.d	$a5, $fp, 712
.LBB99_13:
	fld.d	$fs7, $sp, 160                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 168                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 176                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 184                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 192                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 200                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 208                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 216                  # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.Lfunc_end99:
	.size	_ZN10btSoftBody10updatePoseEv, .Lfunc_end99-_ZN10btSoftBody10updatePoseEv
                                        # -- End function
	.globl	_ZN10btSoftBody16solveConstraintsEv # -- Begin function _ZN10btSoftBody16solveConstraintsEv
	.p2align	5
	.type	_ZN10btSoftBody16solveConstraintsEv,@function
_ZN10btSoftBody16solveConstraintsEv:    # @_ZN10btSoftBody16solveConstraintsEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 80                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 56, -80
	.cfi_offset 57, -88
	.cfi_offset 58, -96
	move	$fp, $a0
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN10btSoftBody13applyClustersEb)
	jirl	$ra, $ra, 0
	ld.w	$a1, $fp, 852
	blez	$a1, .LBB100_3
# %bb.1:                                # %.lr.ph
	move	$a0, $zero
	slli.d	$a2, $a1, 6
	alsl.d	$a1, $a1, $a2, 3
	.p2align	4, , 16
.LBB100_2:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $fp, 864
	add.d	$a2, $a2, $a0
	ld.d	$a3, $a2, 24
	ld.d	$a4, $a2, 16
	fld.s	$fa0, $a3, 32
	fld.s	$fa1, $a4, 32
	fld.s	$fa2, $a3, 36
	fld.s	$fa3, $a4, 36
	fld.s	$fa4, $a3, 40
	fld.s	$fa5, $a4, 40
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fsub.s	$fa2, $fa4, $fa5
	movfr2gr.s	$a3, $fa0
	movfr2gr.s	$a4, $fa1
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa2
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a3, $a2, 52
	st.d	$a4, $a2, 60
	fld.s	$fa3, $a2, 40
	fmul.s	$fa1, $fa1, $fa1
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	fmul.s	$fa0, $fa3, $fa0
	frecip.s	$fa0, $fa0
	addi.d	$a0, $a0, 72
	fst.s	$fa0, $a2, 48
	bne	$a1, $a0, .LBB100_2
.LBB100_3:                              # %._crit_edge
	ld.w	$a0, $fp, 948
	blez	$a0, .LBB100_6
# %bb.4:                                # %.lr.ph182
	move	$s1, $zero
	addi.d	$s2, $sp, 32
	addi.d	$s3, $sp, 48
	ori	$a1, $zero, 104
	mul.d	$s4, $a0, $a1
	.p2align	4, , 16
.LBB100_5:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 960
	add.d	$s5, $a0, $s1
	ld.d	$s0, $s5, 24
	fld.s	$fa0, $s0, 12
	fld.s	$fa1, $s5, 12
	fld.s	$fa2, $s0, 8
	fld.s	$fa3, $s5, 8
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa4, $s0, 16
	fld.s	$fa5, $s5, 16
	fld.s	$fa6, $s0, 28
	fld.s	$fa7, $s0, 24
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fmul.s	$fa2, $fa1, $fa6
	fmadd.s	$fa2, $fa7, $fa3, $fa2
	fld.s	$fa4, $s0, 32
	fld.s	$fa6, $s0, 44
	fld.s	$fa7, $s0, 40
	fld.s	$ft0, $s0, 48
	fmadd.s	$fa2, $fa4, $fa5, $fa2
	fmul.s	$fa1, $fa1, $fa6
	fmadd.s	$fa1, $fa7, $fa3, $fa1
	fmadd.s	$fa1, $ft0, $fa5, $fa1
	movfr2gr.s	$a1, $fa0
	movfr2gr.s	$a2, $fa2
	bstrins.d	$a1, $a2, 63, 32
	ldx.d	$s6, $a0, $s1
	movfr2gr.s	$a0, $fa1
	bstrpick.d	$a0, $a0, 31, 0
	fld.s	$fa0, $fp, 512
	fld.s	$fa1, $s6, 96
	fld.s	$fa2, $s0, 360
	st.d	$a1, $sp, 64
	st.d	$a0, $sp, 72
	addi.d	$a1, $s0, 280
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 64
	pcaddu18i	$ra, %call36(_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3)
	jirl	$ra, $ra, 0
	vld	$vr0, $sp, 16
	vld	$vr1, $s2, 0
	vld	$vr2, $s3, 0
	vld	$vr3, $sp, 64
	vst	$vr0, $s5, 32
	vst	$vr1, $s5, 48
	vst	$vr2, $s5, 64
	vst	$vr3, $s5, 80
	fld.s	$fa0, $fp, 512
	fld.s	$fa1, $s6, 96
	fmul.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $s5, 96
	move	$a0, $s0
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN17btCollisionObject8activateEb)
	jirl	$ra, $ra, 0
	addi.d	$s1, $s1, 104
	bne	$s4, $s1, .LBB100_5
.LBB100_6:                              # %._crit_edge183
	ld.w	$a1, $fp, 396
	blez	$a1, .LBB100_16
# %bb.7:                                # %.preheader177.lr.ph
	ld.w	$a0, $fp, 420
	pcalau12i	$a2, %pc_hi20(_ZN10btSoftBody12VSolve_LinksEPS_f)
	addi.d	$s0, $a2, %pc_lo12(_ZN10btSoftBody12VSolve_LinksEPS_f)
	move	$s1, $zero
	b	.LBB100_9
	.p2align	4, , 16
.LBB100_8:                              # %._crit_edge186
                                        #   in Loop: Header=BB100_9 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a1, .LBB100_13
.LBB100_9:                              # %.preheader177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_11 Depth 2
	blez	$a0, .LBB100_8
# %bb.10:                               # %.lr.ph185.preheader
                                        #   in Loop: Header=BB100_9 Depth=1
	move	$s2, $zero
	move	$s3, $zero
	.p2align	4, , 16
.LBB100_11:                             # %.lr.ph185
                                        #   Parent Loop BB100_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a0, $fp, 432
	ldx.w	$a0, $a0, $s2
	sltui	$a0, $a0, 1
	maskeqz	$a1, $s0, $a0
	vldi	$vr0, -1168
	move	$a0, $fp
	jirl	$ra, $a1, 0
	ld.w	$a0, $fp, 420
	addi.d	$s3, $s3, 1
	addi.d	$s2, $s2, 4
	blt	$s3, $a0, .LBB100_11
# %bb.12:                               # %._crit_edge186.loopexit
                                        #   in Loop: Header=BB100_9 Depth=1
	ld.w	$a1, $fp, 396
	b	.LBB100_8
.LBB100_13:                             # %._crit_edge188
	ld.w	$a1, $fp, 820
	blez	$a1, .LBB100_16
# %bb.14:                               # %.lr.ph191
	move	$a0, $zero
	ori	$a2, $zero, 120
	mul.d	$a1, $a1, $a2
	.p2align	4, , 16
.LBB100_15:                             # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $fp, 832
	add.d	$a2, $a2, $a0
	fld.s	$fa0, $a2, 48
	fld.s	$fa1, $fp, 512
	fld.s	$fa2, $a2, 52
	fmul.s	$fa0, $fa0, $fa1
	fmul.s	$fa2, $fa1, $fa2
	fld.s	$fa3, $a2, 56
	fld.s	$fa4, $a2, 32
	fld.s	$fa5, $a2, 36
	fld.s	$fa6, $a2, 40
	fmul.s	$fa1, $fa1, $fa3
	fadd.s	$fa0, $fa0, $fa4
	fadd.s	$fa2, $fa2, $fa5
	fadd.s	$fa1, $fa1, $fa6
	movfr2gr.s	$a3, $fa0
	movfr2gr.s	$a4, $fa2
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa1
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a3, $a2, 16
	addi.d	$a0, $a0, 120
	st.d	$a4, $a2, 24
	bne	$a1, $a0, .LBB100_15
.LBB100_16:                             # %.loopexit176
	ld.w	$a0, $fp, 400
	pcalau12i	$a1, %pc_hi20(.Lswitch.table._ZN10btSoftBody11staticSolveEi)
	addi.d	$s0, $a1, %pc_lo12(.Lswitch.table._ZN10btSoftBody11staticSolveEi)
	blez	$a0, .LBB100_26
# %bb.17:                               # %.lr.ph197
	ld.w	$a1, $fp, 452
	move	$s1, $zero
	b	.LBB100_19
	.p2align	4, , 16
.LBB100_18:                             # %._crit_edge195
                                        #   in Loop: Header=BB100_19 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a0, .LBB100_23
.LBB100_19:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_21 Depth 2
	blez	$a1, .LBB100_18
# %bb.20:                               # %.lr.ph194.preheader
                                        #   in Loop: Header=BB100_19 Depth=1
	move	$s2, $zero
	move	$s3, $zero
	bstrpick.d	$a1, $s1, 31, 0
	movgr2fr.d	$fa0, $a1
	ffint.s.l	$fa0, $fa0
	movgr2fr.w	$fa1, $a0
	ffint.s.w	$fa1, $fa1
	fdiv.s	$fs0, $fa0, $fa1
	.p2align	4, , 16
.LBB100_21:                             # %.lr.ph194
                                        #   Parent Loop BB100_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a0, $fp, 464
	ldx.w	$a0, $a0, $s2
	slli.d	$a0, $a0, 3
	ldx.d	$a1, $s0, $a0
	vldi	$vr0, -1168
	move	$a0, $fp
	fmov.s	$fa1, $fs0
	jirl	$ra, $a1, 0
	ld.w	$a1, $fp, 452
	addi.d	$s3, $s3, 1
	addi.d	$s2, $s2, 4
	blt	$s3, $a1, .LBB100_21
# %bb.22:                               # %._crit_edge195.loopexit
                                        #   in Loop: Header=BB100_19 Depth=1
	ld.w	$a0, $fp, 400
	b	.LBB100_18
.LBB100_23:                             # %._crit_edge198
	ld.w	$a1, $fp, 820
	blez	$a1, .LBB100_26
# %bb.24:                               # %.lr.ph201
	fld.s	$fa0, $fp, 320
	fld.s	$fa1, $fp, 516
	move	$a0, $zero
	vldi	$vr2, -1168
	fsub.s	$fa0, $fa2, $fa0
	fmul.s	$fa0, $fa1, $fa0
	ori	$a2, $zero, 120
	mul.d	$a1, $a1, $a2
	vrepli.b	$vr1, 0
	.p2align	4, , 16
.LBB100_25:                             # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $fp, 832
	add.d	$a2, $a2, $a0
	fld.s	$fa2, $a2, 16
	fld.s	$fa3, $a2, 32
	fld.s	$fa4, $a2, 20
	fld.s	$fa5, $a2, 36
	fld.s	$fa6, $a2, 24
	fld.s	$fa7, $a2, 40
	fsub.s	$fa2, $fa2, $fa3
	fsub.s	$fa3, $fa4, $fa5
	fsub.s	$fa4, $fa6, $fa7
	fmul.s	$fa2, $fa0, $fa2
	fmul.s	$fa3, $fa0, $fa3
	fmul.s	$fa4, $fa0, $fa4
	movfr2gr.s	$a3, $fa2
	movfr2gr.s	$a4, $fa3
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa4
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a3, $a2, 48
	st.d	$a4, $a2, 56
	addi.d	$a0, $a0, 120
	vst	$vr1, $a2, 64
	bne	$a1, $a0, .LBB100_25
.LBB100_26:                             # %.loopexit174
	ld.w	$a0, $fp, 404
	blez	$a0, .LBB100_40
# %bb.27:
	fld.s	$fs1, $fp, 316
	ld.w	$a1, $fp, 820
	fld.s	$fs2, $fp, 516
	blez	$a1, .LBB100_31
# %bb.28:                               # %.lr.ph204
	move	$a0, $zero
	ori	$a2, $zero, 120
	mul.d	$a1, $a1, $a2
	.p2align	4, , 16
.LBB100_29:                             # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $fp, 832
	add.d	$a2, $a2, $a0
	vld	$vr0, $a2, 16
	addi.d	$a0, $a0, 120
	vst	$vr0, $a2, 32
	bne	$a1, $a0, .LBB100_29
# %bb.30:                               # %.preheader173
	ld.w	$a0, $fp, 404
	blez	$a0, .LBB100_37
.LBB100_31:                             # %.preheader.lr.ph
	ld.w	$a1, $fp, 484
	move	$s1, $zero
	movgr2fr.w	$fs0, $zero
	b	.LBB100_34
	.p2align	4, , 16
.LBB100_32:                             # %._crit_edge207.loopexit
                                        #   in Loop: Header=BB100_34 Depth=1
	ld.w	$a0, $fp, 404
.LBB100_33:                             # %._crit_edge207
                                        #   in Loop: Header=BB100_34 Depth=1
	addi.w	$s1, $s1, 1
	bge	$s1, $a0, .LBB100_37
.LBB100_34:                             # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_36 Depth 2
	blez	$a1, .LBB100_33
# %bb.35:                               # %.lr.ph206.preheader
                                        #   in Loop: Header=BB100_34 Depth=1
	move	$s2, $zero
	move	$s3, $zero
	.p2align	4, , 16
.LBB100_36:                             # %.lr.ph206
                                        #   Parent Loop BB100_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a0, $fp, 496
	ldx.w	$a0, $a0, $s2
	slli.d	$a0, $a0, 3
	ldx.d	$a1, $s0, $a0
	vldi	$vr0, -1168
	move	$a0, $fp
	fmov.s	$fa1, $fs0
	jirl	$ra, $a1, 0
	ld.w	$a1, $fp, 484
	addi.d	$s3, $s3, 1
	addi.d	$s2, $s2, 4
	blt	$s3, $a1, .LBB100_36
	b	.LBB100_32
.LBB100_37:                             # %._crit_edge209
	ld.w	$a0, $fp, 820
	blez	$a0, .LBB100_40
# %bb.38:                               # %.lr.ph212
	ld.d	$a1, $fp, 832
	fmul.s	$fa0, $fs1, $fs2
	addi.d	$a1, $a1, 56
	.p2align	4, , 16
.LBB100_39:                             # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a1, -40
	fld.s	$fa2, $a1, -24
	fld.s	$fa3, $a1, -36
	fld.s	$fa4, $a1, -20
	fld.s	$fa5, $a1, -32
	fld.s	$fa6, $a1, -16
	fsub.s	$fa1, $fa1, $fa2
	fsub.s	$fa2, $fa3, $fa4
	fld.s	$fa3, $a1, -8
	fsub.s	$fa4, $fa5, $fa6
	fmul.s	$fa1, $fa0, $fa1
	fmul.s	$fa2, $fa0, $fa2
	fadd.s	$fa1, $fa1, $fa3
	fld.s	$fa3, $a1, -4
	fst.s	$fa1, $a1, -8
	fld.s	$fa1, $a1, 0
	fmul.s	$fa4, $fa0, $fa4
	fadd.s	$fa2, $fa2, $fa3
	fst.s	$fa2, $a1, -4
	fadd.s	$fa1, $fa4, $fa1
	fst.s	$fa1, $a1, 0
	addi.d	$a0, $a0, -1
	addi.d	$a1, $a1, 120
	bnez	$a0, .LBB100_39
.LBB100_40:                             # %.loopexit
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN10btSoftBody12dampClustersEv)
	jirl	$ra, $ra, 0
	ori	$a1, $zero, 1
	move	$a0, $fp
	fld.d	$fs2, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 96                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	pcaddu18i	$t8, %call36(_ZN10btSoftBody13applyClustersEb)
	jr	$t8
.Lfunc_end100:
	.size	_ZN10btSoftBody16solveConstraintsEv, .Lfunc_end100-_ZN10btSoftBody16solveConstraintsEv
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody13applyClustersEb # -- Begin function _ZN10btSoftBody13applyClustersEb
	.p2align	5
	.type	_ZN10btSoftBody13applyClustersEb,@function
_ZN10btSoftBody13applyClustersEb:       # @_ZN10btSoftBody13applyClustersEb
.Lfunc_begin12:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception12
# %bb.0:
	addi.d	$sp, $sp, -64
	.cfi_def_cfa_offset 64
	st.d	$ra, $sp, 56                    # 8-byte Folded Spill
	st.d	$fp, $sp, 48                    # 8-byte Folded Spill
	st.d	$s0, $sp, 40                    # 8-byte Folded Spill
	st.d	$s1, $sp, 32                    # 8-byte Folded Spill
	st.d	$s2, $sp, 24                    # 8-byte Folded Spill
	st.d	$s3, $sp, 16                    # 8-byte Folded Spill
	st.d	$s4, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	move	$s1, $a1
	move	$s0, $a0
	pcalau12i	$a0, %pc_hi20(.L.str.1)
	addi.d	$a0, $a0, %pc_lo12(.L.str.1)
	pcaddu18i	$ra, %call36(_ZN15CProfileManager13Start_ProfileEPKc)
	jirl	$ra, $ra, 0
	ld.w	$s4, $s0, 820
	blez	$s4, .LBB101_5
# %bb.1:
	slli.d	$s2, $s4, 4
.Ltmp375:                               # EH_LABEL
	ori	$a1, $zero, 16
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp376:                               # EH_LABEL
# %bb.2:                                # %.lr.ph.i
	move	$fp, $a0
	move	$a1, $zero
	move	$a2, $s2
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	ld.w	$a0, $s0, 820
	blez	$a0, .LBB101_6
# %bb.3:
	slli.d	$s2, $a0, 2
.Ltmp378:                               # EH_LABEL
	ori	$a1, $zero, 16
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp379:                               # EH_LABEL
# %bb.4:                                # %.lr.ph.i87
	move	$s3, $a0
	move	$a1, $zero
	move	$a2, $s2
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	move	$a0, $s3
	ld.w	$a1, $s0, 1340
	bnez	$s1, .LBB101_7
	b	.LBB101_12
.LBB101_5:
	move	$fp, $zero
.LBB101_6:
	move	$a0, $zero
	ld.w	$a1, $s0, 1340
	beqz	$s1, .LBB101_12
.LBB101_7:                              # %.preheader226
	blez	$a1, .LBB101_19
# %bb.8:                                # %.lr.ph
	ld.d	$a2, $s0, 1352
	move	$a3, $a1
	b	.LBB101_10
	.p2align	4, , 16
.LBB101_9:                              #   in Loop: Header=BB101_10 Depth=1
	addi.d	$a3, $a3, -1
	addi.d	$a2, $a2, 8
	beqz	$a3, .LBB101_12
.LBB101_10:                             # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a2, 0
	ld.w	$a5, $a4, 348
	beqz	$a5, .LBB101_9
# %bb.11:                               #   in Loop: Header=BB101_10 Depth=1
	movgr2fr.w	$fa0, $a5
	fld.s	$fa1, $a4, 312
	ffint.s.w	$fa0, $fa0
	frecip.s	$fa0, $fa0
	fld.s	$fa2, $a4, 316
	fmul.s	$fa1, $fa0, $fa1
	fst.s	$fa1, $a4, 312
	fld.s	$fa1, $a4, 320
	fmul.s	$fa2, $fa0, $fa2
	fst.s	$fa2, $a4, 316
	fld.s	$fa2, $a4, 328
	fmul.s	$fa1, $fa0, $fa1
	fst.s	$fa1, $a4, 320
	fld.s	$fa1, $a4, 332
	fmul.s	$fa2, $fa0, $fa2
	fld.s	$fa3, $a4, 336
	fst.s	$fa2, $a4, 328
	fmul.s	$fa1, $fa0, $fa1
	fst.s	$fa1, $a4, 332
	fmul.s	$fa0, $fa0, $fa3
	fst.s	$fa0, $a4, 336
	b	.LBB101_9
.LBB101_12:                             # %.loopexit227
	blez	$a1, .LBB101_19
# %bb.13:                               # %.lr.ph232
	move	$a2, $zero
	ld.d	$a3, $s0, 1352
	ori	$a4, $zero, 344
	masknez	$a4, $a4, $s1
	ori	$a5, $zero, 348
	maskeqz	$a5, $a5, $s1
	or	$a4, $a5, $a4
	ori	$a5, $zero, 280
	masknez	$a5, $a5, $s1
	ori	$a6, $zero, 312
	maskeqz	$a6, $a6, $s1
	or	$a5, $a6, $a5
	ori	$a6, $zero, 296
	masknez	$a6, $a6, $s1
	ori	$a7, $zero, 328
	maskeqz	$a7, $a7, $s1
	or	$a6, $a7, $a6
	ld.d	$a7, $s0, 832
	lu12i.w	$t0, -69906
	ori	$t0, $t0, 3823
	lu32i.d	$t0, -69906
	lu52i.d	$t0, $t0, -274
	b	.LBB101_15
	.p2align	4, , 16
.LBB101_14:                             # %.loopexit
                                        #   in Loop: Header=BB101_15 Depth=1
	addi.d	$a2, $a2, 1
	beq	$a2, $a1, .LBB101_19
.LBB101_15:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_18 Depth 2
	slli.d	$t1, $a2, 3
	ldx.d	$t1, $a3, $t1
	ldx.w	$t2, $t1, $a4
	blez	$t2, .LBB101_14
# %bb.16:                               #   in Loop: Header=BB101_15 Depth=1
	ld.w	$t2, $t1, 4
	blez	$t2, .LBB101_14
# %bb.17:                               # %.lr.ph230
                                        #   in Loop: Header=BB101_15 Depth=1
	add.d	$t3, $t1, $a5
	fldx.s	$fa0, $t1, $a5
	fld.s	$fa5, $s0, 512
	fld.s	$fa1, $t3, 4
	fld.s	$fa2, $t3, 8
	fmul.s	$fa0, $fa0, $fa5
	fmul.s	$fa1, $fa5, $fa1
	fmul.s	$fa2, $fa5, $fa2
	add.d	$t3, $t1, $a6
	fldx.s	$fa3, $t1, $a6
	fld.s	$fa4, $t3, 4
	fld.s	$fa6, $t3, 8
	ld.d	$t3, $t1, 16
	ld.d	$t4, $t1, 48
	fmul.s	$fa3, $fa5, $fa3
	fmul.s	$fa4, $fa5, $fa4
	fmul.s	$fa5, $fa5, $fa6
	.p2align	4, , 16
.LBB101_18:                             #   Parent Loop BB101_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$t5, $t3, 0
	fld.s	$fa6, $t5, 16
	fld.s	$fa7, $t1, 264
	sub.d	$t6, $t5, $a7
	srli.d	$t6, $t6, 3
	fsub.s	$fa6, $fa6, $fa7
	fld.s	$fa7, $t5, 20
	fld.s	$ft0, $t1, 268
	fld.s	$ft1, $t5, 24
	fld.s	$ft2, $t1, 272
	mul.w	$t5, $t6, $t0
	fsub.s	$fa7, $fa7, $ft0
	fld.s	$ft0, $t4, 0
	fsub.s	$ft1, $ft1, $ft2
	fneg.s	$ft2, $fa7
	fmul.s	$ft2, $fa5, $ft2
	fmadd.s	$ft2, $fa4, $ft1, $ft2
	fneg.s	$ft1, $ft1
	fmul.s	$ft1, $fa3, $ft1
	fmadd.s	$ft1, $fa5, $fa6, $ft1
	fneg.s	$fa6, $fa6
	fmul.s	$fa6, $fa4, $fa6
	fmadd.s	$fa6, $fa3, $fa7, $fa6
	fadd.s	$fa7, $fa0, $ft2
	fadd.s	$ft1, $fa1, $ft1
	fadd.s	$fa6, $fa2, $fa6
	slli.d	$t6, $t5, 4
	fldx.s	$ft2, $fp, $t6
	fmul.s	$fa7, $ft0, $fa7
	fmul.s	$ft1, $ft0, $ft1
	alsl.d	$t7, $t5, $fp, 4
	fadd.s	$fa7, $ft2, $fa7
	fld.s	$ft2, $t7, 4
	fstx.s	$fa7, $fp, $t6
	fld.s	$fa7, $t7, 8
	fmul.s	$fa6, $ft0, $fa6
	fadd.s	$ft1, $ft2, $ft1
	fst.s	$ft1, $t7, 4
	fadd.s	$fa6, $fa6, $fa7
	fst.s	$fa6, $t7, 8
	slli.d	$t5, $t5, 2
	fldx.s	$fa6, $a0, $t5
	fadd.s	$fa6, $ft0, $fa6
	fstx.s	$fa6, $a0, $t5
	addi.d	$t4, $t4, 4
	addi.d	$t2, $t2, -1
	addi.d	$t3, $t3, 8
	bnez	$t2, .LBB101_18
	b	.LBB101_14
.LBB101_19:                             # %.preheader
	blez	$s4, .LBB101_24
# %bb.20:                               # %.lr.ph234
	ld.d	$a1, $s0, 832
	addi.d	$a1, $a1, 24
	addi.d	$a2, $fp, 4
	movgr2fr.w	$fa0, $zero
	move	$a3, $a0
	b	.LBB101_22
	.p2align	4, , 16
.LBB101_21:                             #   in Loop: Header=BB101_22 Depth=1
	addi.d	$s4, $s4, -1
	addi.d	$a3, $a3, 4
	addi.d	$a1, $a1, 120
	addi.d	$a2, $a2, 16
	beqz	$s4, .LBB101_25
.LBB101_22:                             # =>This Inner Loop Header: Depth=1
	fld.s	$fa1, $a3, 0
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB101_21
# %bb.23:                               #   in Loop: Header=BB101_22 Depth=1
	fld.s	$fa2, $a2, -4
	frecip.s	$fa1, $fa1
	fld.s	$fa3, $a2, 0
	fld.s	$fa4, $a2, 4
	fmul.s	$fa2, $fa1, $fa2
	fld.s	$fa5, $a1, -8
	fmul.s	$fa3, $fa1, $fa3
	fmul.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a1, -4
	fadd.s	$fa2, $fa2, $fa5
	fld.s	$fa5, $a1, 0
	fst.s	$fa2, $a1, -8
	fadd.s	$fa2, $fa3, $fa4
	fst.s	$fa2, $a1, -4
	fadd.s	$fa1, $fa1, $fa5
	fst.s	$fa1, $a1, 0
	b	.LBB101_21
.LBB101_24:                             # %._crit_edge
	beqz	$a0, .LBB101_26
.LBB101_25:                             # %._crit_edge.thread
.Ltmp381:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp382:                               # EH_LABEL
.LBB101_26:                             # %_ZN20btAlignedObjectArrayIfED2Ev.exit
	beqz	$fp, .LBB101_28
# %bb.27:
.Ltmp386:                               # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp387:                               # EH_LABEL
.LBB101_28:                             # %_ZN20btAlignedObjectArrayI9btVector3ED2Ev.exit
	ld.d	$s4, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s3, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 40                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 48                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 56                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 64
	pcaddu18i	$t8, %call36(_ZN15CProfileManager12Stop_ProfileEv)
	jr	$t8
.LBB101_29:                             # %_ZN20btAlignedObjectArrayIfED2Ev.exit147.thread
.Ltmp380:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB101_33
.LBB101_30:
.Ltmp388:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB101_34
.LBB101_31:                             # %_ZN20btAlignedObjectArrayIfED2Ev.exit147.thread218
.Ltmp377:                               # EH_LABEL
	move	$s0, $a0
	b	.LBB101_34
.LBB101_32:                             # %_ZN20btAlignedObjectArrayIfED2Ev.exit147
.Ltmp383:                               # EH_LABEL
	move	$s0, $a0
	beqz	$fp, .LBB101_34
.LBB101_33:                             # %_ZN20btAlignedObjectArrayIfED2Ev.exit147.thread222
.Ltmp384:                               # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp385:                               # EH_LABEL
.LBB101_34:                             # %_ZN20btAlignedObjectArrayI9btVector3ED2Ev.exit151
.Ltmp389:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN15CProfileManager12Stop_ProfileEv)
	jirl	$ra, $ra, 0
.Ltmp390:                               # EH_LABEL
# %bb.35:                               # %_ZN14CProfileSampleD2Ev.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB101_36:
.Ltmp391:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end101:
	.size	_ZN10btSoftBody13applyClustersEb, .Lfunc_end101-_ZN10btSoftBody13applyClustersEb
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table101:
.Lexception12:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase10-.Lttbaseref10
.Lttbaseref10:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end12-.Lcst_begin12
.Lcst_begin12:
	.uleb128 .Lfunc_begin12-.Lfunc_begin12  # >> Call Site 1 <<
	.uleb128 .Ltmp375-.Lfunc_begin12        #   Call between .Lfunc_begin12 and .Ltmp375
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp375-.Lfunc_begin12        # >> Call Site 2 <<
	.uleb128 .Ltmp376-.Ltmp375              #   Call between .Ltmp375 and .Ltmp376
	.uleb128 .Ltmp377-.Lfunc_begin12        #     jumps to .Ltmp377
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp376-.Lfunc_begin12        # >> Call Site 3 <<
	.uleb128 .Ltmp378-.Ltmp376              #   Call between .Ltmp376 and .Ltmp378
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp378-.Lfunc_begin12        # >> Call Site 4 <<
	.uleb128 .Ltmp379-.Ltmp378              #   Call between .Ltmp378 and .Ltmp379
	.uleb128 .Ltmp380-.Lfunc_begin12        #     jumps to .Ltmp380
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp379-.Lfunc_begin12        # >> Call Site 5 <<
	.uleb128 .Ltmp381-.Ltmp379              #   Call between .Ltmp379 and .Ltmp381
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp381-.Lfunc_begin12        # >> Call Site 6 <<
	.uleb128 .Ltmp382-.Ltmp381              #   Call between .Ltmp381 and .Ltmp382
	.uleb128 .Ltmp383-.Lfunc_begin12        #     jumps to .Ltmp383
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp386-.Lfunc_begin12        # >> Call Site 7 <<
	.uleb128 .Ltmp387-.Ltmp386              #   Call between .Ltmp386 and .Ltmp387
	.uleb128 .Ltmp388-.Lfunc_begin12        #     jumps to .Ltmp388
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp387-.Lfunc_begin12        # >> Call Site 8 <<
	.uleb128 .Ltmp384-.Ltmp387              #   Call between .Ltmp387 and .Ltmp384
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp384-.Lfunc_begin12        # >> Call Site 9 <<
	.uleb128 .Ltmp390-.Ltmp384              #   Call between .Ltmp384 and .Ltmp390
	.uleb128 .Ltmp391-.Lfunc_begin12        #     jumps to .Ltmp391
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp390-.Lfunc_begin12        # >> Call Site 10 <<
	.uleb128 .Lfunc_end101-.Ltmp390         #   Call between .Ltmp390 and .Lfunc_end101
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end12:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase10:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.p2align	5                               # -- Begin function _ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3
	.type	_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3,@function
_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3: # @_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3
# %bb.0:
	addi.d	$sp, $sp, -16
	fst.d	$fs0, $sp, 8                    # 8-byte Folded Spill
	fld.s	$fa6, $a2, 8
	frecip.s	$fa0, $fa0
	fld.s	$fa5, $a2, 0
	fld.s	$fa4, $a2, 4
	fneg.s	$fa7, $fa6
	fld.s	$ft1, $a1, 16
	fneg.s	$ft0, $fa5
	fneg.s	$ft2, $fa4
	fld.s	$ft3, $a1, 0
	fmul.s	$ft4, $ft1, $fa7
	movgr2fr.w	$fa3, $zero
	fld.s	$ft5, $a1, 32
	fld.s	$ft6, $a1, 20
	fld.s	$ft7, $a1, 4
	fmadd.s	$ft4, $ft3, $fa3, $ft4
	fmadd.s	$ft4, $ft5, $fa4, $ft4
	fmul.s	$ft8, $ft6, $fa7
	fmadd.s	$ft8, $ft7, $fa3, $ft8
	fld.s	$ft9, $a1, 36
	fld.s	$ft10, $a1, 24
	fld.s	$ft11, $a1, 8
	fld.s	$ft12, $a1, 40
	fmadd.s	$ft8, $ft9, $fa4, $ft8
	fmul.s	$ft13, $ft10, $fa7
	fmadd.s	$ft13, $ft11, $fa3, $ft13
	fmadd.s	$ft13, $ft12, $fa4, $ft13
	fmul.s	$ft14, $ft1, $fa3
	fmadd.s	$ft14, $ft3, $fa6, $ft14
	fmadd.s	$ft14, $ft5, $ft0, $ft14
	fmul.s	$ft15, $ft6, $fa3
	fmadd.s	$ft15, $ft7, $fa6, $ft15
	fmadd.s	$ft15, $ft9, $ft0, $ft15
	fmul.s	$fs0, $ft10, $fa3
	fmadd.s	$fs0, $ft11, $fa6, $fs0
	fmadd.s	$fs0, $ft12, $ft0, $fs0
	fmul.s	$ft1, $fa5, $ft1
	fmadd.s	$ft1, $ft3, $ft2, $ft1
	fmadd.s	$ft1, $ft5, $fa3, $ft1
	fmul.s	$ft3, $fa5, $ft6
	fmadd.s	$ft3, $ft7, $ft2, $ft3
	fmadd.s	$ft3, $ft9, $fa3, $ft3
	fmul.s	$ft5, $fa5, $ft10
	fmadd.s	$ft5, $ft11, $ft2, $ft5
	fmadd.s	$ft5, $ft12, $fa3, $ft5
	fmul.s	$ft6, $fa6, $ft8
	fmadd.s	$ft6, $ft4, $fa3, $ft6
	fmadd.s	$ft6, $ft2, $ft13, $ft6
	fmul.s	$ft7, $ft8, $fa3
	fmadd.s	$ft7, $fa7, $ft4, $ft7
	fmadd.s	$ft7, $fa5, $ft13, $ft7
	fmul.s	$ft8, $ft8, $ft0
	fmadd.s	$ft4, $fa4, $ft4, $ft8
	fmadd.s	$ft4, $ft13, $fa3, $ft4
	fmul.s	$ft8, $fa6, $ft15
	fmadd.s	$ft8, $ft14, $fa3, $ft8
	fmadd.s	$ft8, $ft2, $fs0, $ft8
	fmul.s	$ft9, $ft15, $fa3
	fmadd.s	$ft9, $fa7, $ft14, $ft9
	fmadd.s	$ft9, $fa5, $fs0, $ft9
	fmul.s	$ft10, $ft15, $ft0
	fmadd.s	$ft10, $fa4, $ft14, $ft10
	fmadd.s	$ft10, $fs0, $fa3, $ft10
	fmul.s	$fa6, $fa6, $ft3
	fmadd.s	$fa6, $ft1, $fa3, $fa6
	fmadd.s	$fa6, $ft2, $ft5, $fa6
	fmul.s	$ft2, $ft3, $fa3
	fmadd.s	$fa7, $fa7, $ft1, $ft2
	fmadd.s	$fa5, $fa5, $ft5, $fa7
	fmul.s	$fa7, $ft3, $ft0
	fmadd.s	$fa4, $fa4, $ft1, $fa7
	fmadd.s	$fa4, $ft5, $fa3, $fa4
	fsub.s	$fa7, $fa2, $ft6
	fsub.s	$ft0, $fa3, $ft7
	fsub.s	$ft1, $fa3, $ft4
	fsub.s	$ft2, $fa3, $ft8
	fsub.s	$ft3, $fa2, $ft9
	fsub.s	$ft4, $fa3, $ft10
	fsub.s	$fa6, $fa3, $fa6
	fsub.s	$fa5, $fa3, $fa5
	fsub.s	$fa2, $fa2, $fa4
	fadd.s	$fa4, $fa1, $fa7
	fadd.s	$fa7, $fa1, $ft3
	fadd.s	$fa1, $fa1, $fa2
	fneg.s	$fa2, $fa5
	fmul.s	$ft3, $ft4, $fa2
	fmadd.s	$ft3, $fa7, $fa1, $ft3
	fneg.s	$ft5, $fa1
	fmul.s	$ft6, $ft2, $ft5
	fmadd.s	$ft6, $ft4, $fa6, $ft6
	fneg.s	$ft7, $fa6
	fmul.s	$ft8, $fa7, $ft7
	fmadd.s	$ft8, $ft2, $fa5, $ft8
	fmul.s	$ft9, $ft0, $ft6
	fmadd.s	$ft9, $fa4, $ft3, $ft9
	fmadd.s	$ft9, $ft1, $ft8, $ft9
	frecip.s	$ft9, $ft9
	fmul.s	$ft3, $ft3, $ft9
	fmul.s	$ft5, $ft0, $ft5
	fmadd.s	$fa5, $ft1, $fa5, $ft5
	fmul.s	$fa5, $fa5, $ft9
	fneg.s	$ft5, $fa7
	fmul.s	$ft5, $ft1, $ft5
	fmadd.s	$ft5, $ft0, $ft4, $ft5
	fmul.s	$ft5, $ft5, $ft9
	fmul.s	$ft6, $ft6, $ft9
	fmul.s	$ft7, $ft1, $ft7
	fmadd.s	$fa1, $fa4, $fa1, $ft7
	fmul.s	$fa1, $fa1, $ft9
	fneg.s	$ft4, $ft4
	fmul.s	$ft4, $fa4, $ft4
	fmadd.s	$ft1, $ft1, $ft2, $ft4
	fmul.s	$ft1, $ft1, $ft9
	fmul.s	$ft4, $ft8, $ft9
	fmul.s	$fa2, $fa4, $fa2
	fmadd.s	$fa2, $ft0, $fa6, $fa2
	fmul.s	$fa2, $fa2, $ft9
	fneg.s	$fa6, $ft2
	fmul.s	$fa6, $ft0, $fa6
	fmadd.s	$fa4, $fa4, $fa7, $fa6
	fmul.s	$fa4, $fa4, $ft9
	fmul.s	$fa6, $ft6, $fa3
	fmadd.s	$fa7, $ft3, $fa0, $fa6
	fmadd.s	$fa7, $ft4, $fa3, $fa7
	fmul.s	$ft0, $fa1, $fa3
	fmadd.s	$ft2, $fa5, $fa0, $ft0
	fmadd.s	$ft2, $fa2, $fa3, $ft2
	fmul.s	$ft7, $ft1, $fa3
	fmadd.s	$ft8, $ft5, $fa0, $ft7
	fmadd.s	$ft8, $fa4, $fa3, $ft8
	fmul.s	$ft6, $fa0, $ft6
	fmadd.s	$ft6, $ft3, $fa3, $ft6
	fmadd.s	$ft6, $ft4, $fa3, $ft6
	fmul.s	$fa1, $fa0, $fa1
	fmadd.s	$fa1, $fa5, $fa3, $fa1
	fmadd.s	$fa1, $fa2, $fa3, $fa1
	fmul.s	$ft1, $fa0, $ft1
	fmadd.s	$ft1, $ft5, $fa3, $ft1
	fmadd.s	$ft1, $fa4, $fa3, $ft1
	fmadd.s	$fa6, $ft3, $fa3, $fa6
	fmadd.s	$fa6, $ft4, $fa0, $fa6
	fmadd.s	$fa5, $fa5, $fa3, $ft0
	fmadd.s	$fa2, $fa2, $fa0, $fa5
	fmadd.s	$fa3, $ft5, $fa3, $ft7
	fmadd.s	$fa0, $fa4, $fa0, $fa3
	fst.s	$fa7, $a0, 0
	fst.s	$ft2, $a0, 4
	fst.s	$ft8, $a0, 8
	st.w	$zero, $a0, 12
	fst.s	$ft6, $a0, 16
	fst.s	$fa1, $a0, 20
	fst.s	$ft1, $a0, 24
	st.w	$zero, $a0, 28
	fst.s	$fa6, $a0, 32
	fst.s	$fa2, $a0, 36
	fst.s	$fa0, $a0, 40
	st.w	$zero, $a0, 44
	fld.d	$fs0, $sp, 8                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end102:
	.size	_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3, .Lfunc_end102-_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3
                                        # -- End function
	.globl	_ZN10btSoftBody9getSolverENS_8eVSolver1_E # -- Begin function _ZN10btSoftBody9getSolverENS_8eVSolver1_E
	.p2align	5
	.type	_ZN10btSoftBody9getSolverENS_8eVSolver1_E,@function
_ZN10btSoftBody9getSolverENS_8eVSolver1_E: # @_ZN10btSoftBody9getSolverENS_8eVSolver1_E
# %bb.0:
	sltui	$a0, $a0, 1
	pcalau12i	$a1, %pc_hi20(_ZN10btSoftBody12VSolve_LinksEPS_f)
	addi.d	$a1, $a1, %pc_lo12(_ZN10btSoftBody12VSolve_LinksEPS_f)
	maskeqz	$a0, $a1, $a0
	ret
.Lfunc_end103:
	.size	_ZN10btSoftBody9getSolverENS_8eVSolver1_E, .Lfunc_end103-_ZN10btSoftBody9getSolverENS_8eVSolver1_E
                                        # -- End function
	.globl	_ZN10btSoftBody9getSolverENS_8ePSolver1_E # -- Begin function _ZN10btSoftBody9getSolverENS_8ePSolver1_E
	.p2align	5
	.type	_ZN10btSoftBody9getSolverENS_8ePSolver1_E,@function
_ZN10btSoftBody9getSolverENS_8ePSolver1_E: # @_ZN10btSoftBody9getSolverENS_8ePSolver1_E
# %bb.0:
	ori	$a1, $zero, 3
	bltu	$a1, $a0, .LBB104_2
# %bb.1:                                # %switch.lookup
	slli.d	$a0, $a0, 3
	pcalau12i	$a1, %pc_hi20(.Lswitch.table._ZN10btSoftBody11staticSolveEi)
	addi.d	$a1, $a1, %pc_lo12(.Lswitch.table._ZN10btSoftBody11staticSolveEi)
	ldx.d	$a0, $a1, $a0
	ret
.LBB104_2:
	move	$a0, $zero
	ret
.Lfunc_end104:
	.size	_ZN10btSoftBody9getSolverENS_8ePSolver1_E, .Lfunc_end104-_ZN10btSoftBody9getSolverENS_8ePSolver1_E
                                        # -- End function
	.globl	_ZN10btSoftBody12dampClustersEv # -- Begin function _ZN10btSoftBody12dampClustersEv
	.p2align	5
	.type	_ZN10btSoftBody12dampClustersEv,@function
_ZN10btSoftBody12dampClustersEv:        # @_ZN10btSoftBody12dampClustersEv
# %bb.0:
	ld.w	$a1, $a0, 1340
	blez	$a1, .LBB105_10
# %bb.1:                                # %.lr.ph76
	ld.d	$a0, $a0, 1352
	move	$a2, $zero
	movgr2fr.w	$fa0, $zero
	b	.LBB105_3
	.p2align	4, , 16
.LBB105_2:                              # %.loopexit
                                        #   in Loop: Header=BB105_3 Depth=1
	addi.d	$a2, $a2, 1
	beq	$a2, $a1, .LBB105_10
.LBB105_3:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_7 Depth 2
	slli.d	$a3, $a2, 3
	ldx.d	$a3, $a0, $a3
	fld.s	$fa1, $a3, 392
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB105_2
# %bb.4:                                # %.preheader
                                        #   in Loop: Header=BB105_3 Depth=1
	ld.w	$a4, $a3, 4
	blez	$a4, .LBB105_2
# %bb.5:                                # %.lr.ph
                                        #   in Loop: Header=BB105_3 Depth=1
	ld.d	$a5, $a3, 16
	b	.LBB105_7
	.p2align	4, , 16
.LBB105_6:                              #   in Loop: Header=BB105_7 Depth=2
	addi.d	$a4, $a4, -1
	addi.d	$a5, $a5, 8
	beqz	$a4, .LBB105_2
.LBB105_7:                              #   Parent Loop BB105_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a6, $a5, 0
	fld.s	$fa1, $a6, 96
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB105_6
# %bb.8:                                #   in Loop: Header=BB105_7 Depth=2
	fld.s	$fa1, $a6, 32
	fld.s	$fa2, $a3, 264
	fld.s	$fa3, $a6, 36
	fld.s	$fa4, $a3, 268
	fld.s	$fa5, $a6, 40
	fld.s	$fa6, $a3, 272
	fsub.s	$fa1, $fa1, $fa2
	fsub.s	$fa2, $fa3, $fa4
	fsub.s	$fa3, $fa5, $fa6
	fld.s	$fa4, $a3, 376
	fld.s	$fa5, $a3, 372
	fneg.s	$fa6, $fa2
	fld.s	$fa7, $a3, 368
	fmul.s	$fa6, $fa4, $fa6
	fmadd.s	$fa6, $fa5, $fa3, $fa6
	fneg.s	$fa3, $fa3
	fmul.s	$fa3, $fa7, $fa3
	fmadd.s	$fa3, $fa4, $fa1, $fa3
	fneg.s	$fa1, $fa1
	fmul.s	$fa1, $fa5, $fa1
	fld.s	$fa4, $a3, 352
	fld.s	$fa5, $a3, 356
	fld.s	$ft0, $a3, 360
	fmadd.s	$fa1, $fa7, $fa2, $fa1
	fadd.s	$fa2, $fa4, $fa6
	fadd.s	$fa3, $fa5, $fa3
	fadd.s	$fa4, $fa1, $ft0
	fmul.s	$fa1, $fa3, $fa3
	fmadd.s	$fa7, $fa2, $fa2, $fa1
	fld.s	$fa1, $a6, 52
	fld.s	$fa6, $a6, 48
	fld.s	$fa5, $a6, 56
	fmadd.s	$fa7, $fa4, $fa4, $fa7
	fmul.s	$ft0, $fa1, $fa1
	fmadd.s	$ft0, $fa6, $fa6, $ft0
	fmadd.s	$ft0, $fa5, $fa5, $ft0
	fcmp.cult.s	$fcc0, $ft0, $fa7
	bcnez	$fcc0, .LBB105_6
# %bb.9:                                #   in Loop: Header=BB105_7 Depth=2
	fld.s	$fa7, $a3, 392
	fsub.s	$fa2, $fa2, $fa6
	fsub.s	$fa3, $fa3, $fa1
	fsub.s	$fa4, $fa4, $fa5
	fmul.s	$fa2, $fa2, $fa7
	fmul.s	$fa3, $fa3, $fa7
	fmul.s	$fa4, $fa4, $fa7
	fadd.s	$fa2, $fa6, $fa2
	fst.s	$fa2, $a6, 48
	fadd.s	$fa1, $fa1, $fa3
	fst.s	$fa1, $a6, 52
	fadd.s	$fa1, $fa5, $fa4
	fst.s	$fa1, $a6, 56
	b	.LBB105_6
.LBB105_10:                             # %._crit_edge
	ret
.Lfunc_end105:
	.size	_ZN10btSoftBody12dampClustersEv, .Lfunc_end105-_ZN10btSoftBody12dampClustersEv
                                        # -- End function
	.globl	_ZN10btSoftBody11staticSolveEi  # -- Begin function _ZN10btSoftBody11staticSolveEi
	.p2align	5
	.type	_ZN10btSoftBody11staticSolveEi,@function
_ZN10btSoftBody11staticSolveEi:         # @_ZN10btSoftBody11staticSolveEi
	.cfi_startproc
# %bb.0:
	blez	$a1, .LBB106_7
# %bb.1:                                # %.preheader.lr.ph
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	st.d	$s3, $sp, 32                    # 8-byte Folded Spill
	st.d	$s4, $sp, 24                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 16                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 56, -64
	move	$fp, $a1
	move	$s0, $a0
	ld.w	$a0, $a0, 452
	pcalau12i	$a1, %pc_hi20(.Lswitch.table._ZN10btSoftBody11staticSolveEi)
	addi.d	$s1, $a1, %pc_lo12(.Lswitch.table._ZN10btSoftBody11staticSolveEi)
	move	$s2, $zero
	movgr2fr.w	$fs0, $zero
	b	.LBB106_3
	.p2align	4, , 16
.LBB106_2:                              # %._crit_edge
                                        #   in Loop: Header=BB106_3 Depth=1
	addi.w	$s2, $s2, 1
	beq	$s2, $fp, .LBB106_6
.LBB106_3:                              # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_5 Depth 2
	blez	$a0, .LBB106_2
# %bb.4:                                # %.lr.ph.preheader
                                        #   in Loop: Header=BB106_3 Depth=1
	move	$s3, $zero
	move	$s4, $zero
	.p2align	4, , 16
.LBB106_5:                              # %.lr.ph
                                        #   Parent Loop BB106_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a0, $s0, 464
	ldx.w	$a0, $a0, $s3
	slli.d	$a0, $a0, 3
	ldx.d	$a1, $s1, $a0
	vldi	$vr0, -1168
	move	$a0, $s0
	fmov.s	$fa1, $fs0
	jirl	$ra, $a1, 0
	ld.w	$a0, $s0, 452
	addi.d	$s4, $s4, 1
	addi.d	$s3, $s3, 4
	blt	$s4, $a0, .LBB106_5
	b	.LBB106_2
.LBB106_6:
	fld.d	$fs0, $sp, 16                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
.LBB106_7:                              # %._crit_edge9
	ret
.Lfunc_end106:
	.size	_ZN10btSoftBody11staticSolveEi, .Lfunc_end106-_ZN10btSoftBody11staticSolveEi
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody22solveCommonConstraintsEPPS_ii # -- Begin function _ZN10btSoftBody22solveCommonConstraintsEPPS_ii
	.p2align	5
	.type	_ZN10btSoftBody22solveCommonConstraintsEPPS_ii,@function
_ZN10btSoftBody22solveCommonConstraintsEPPS_ii: # @_ZN10btSoftBody22solveCommonConstraintsEPPS_ii
# %bb.0:
	ret
.Lfunc_end107:
	.size	_ZN10btSoftBody22solveCommonConstraintsEPPS_ii, .Lfunc_end107-_ZN10btSoftBody22solveCommonConstraintsEPPS_ii
                                        # -- End function
	.globl	_ZN10btSoftBody13solveClustersERK20btAlignedObjectArrayIPS_E # -- Begin function _ZN10btSoftBody13solveClustersERK20btAlignedObjectArrayIPS_E
	.p2align	5
	.type	_ZN10btSoftBody13solveClustersERK20btAlignedObjectArrayIPS_E,@function
_ZN10btSoftBody13solveClustersERK20btAlignedObjectArrayIPS_E: # @_ZN10btSoftBody13solveClustersERK20btAlignedObjectArrayIPS_E
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	st.d	$s2, $sp, 56                    # 8-byte Folded Spill
	st.d	$s3, $sp, 48                    # 8-byte Folded Spill
	st.d	$s4, $sp, 40                    # 8-byte Folded Spill
	st.d	$s5, $sp, 32                    # 8-byte Folded Spill
	st.d	$s6, $sp, 24                    # 8-byte Folded Spill
	st.d	$s7, $sp, 16                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	ld.w	$s1, $a0, 4
	blez	$s1, .LBB108_23
# %bb.1:                                # %.lr.ph
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	ori	$a1, $zero, 4
	bgeu	$s1, $a1, .LBB108_3
# %bb.2:
	move	$a1, $zero
	move	$s0, $zero
	b	.LBB108_6
.LBB108_3:                              # %vector.ph
	bstrpick.d	$a1, $s1, 30, 2
	slli.d	$a1, $a1, 2
	vrepli.b	$vr0, 0
	addi.d	$a2, $a0, 16
	move	$a3, $a1
	vori.b	$vr1, $vr0, 0
	.p2align	4, , 16
.LBB108_4:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a4, $a2, -16
	ld.d	$a5, $a2, -8
	ld.d	$a6, $a2, 0
	ld.d	$a7, $a2, 8
	ld.w	$a4, $a4, 408
	ld.w	$a5, $a5, 408
	ld.w	$a6, $a6, 408
	ld.w	$a7, $a7, 408
	vinsgr2vr.w	$vr2, $a4, 0
	vinsgr2vr.w	$vr2, $a5, 1
	vinsgr2vr.w	$vr3, $a6, 0
	vinsgr2vr.w	$vr3, $a7, 1
	vmax.w	$vr0, $vr0, $vr2
	vmax.w	$vr1, $vr1, $vr3
	addi.d	$a3, $a3, -4
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB108_4
# %bb.5:                                # %middle.block
	vmax.w	$vr0, $vr0, $vr1
	vbsrl.v	$vr1, $vr0, 4
	vmax.w	$vr0, $vr1, $vr0
	vpickve2gr.w	$s0, $vr0, 0
	beq	$a1, $s1, .LBB108_8
.LBB108_6:                              # %scalar.ph.preheader
	alsl.d	$a0, $a1, $a0, 3
	sub.d	$a1, $s1, $a1
	.p2align	4, , 16
.LBB108_7:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $a0, 0
	ld.w	$a2, $a2, 408
	slt	$a3, $a2, $s0
	masknez	$a2, $a2, $a3
	maskeqz	$a3, $s0, $a3
	or	$s0, $a3, $a2
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB108_7
.LBB108_8:                              # %.lr.ph39
	move	$s3, $zero
	bstrpick.d	$s2, $s1, 31, 0
	b	.LBB108_10
	.p2align	4, , 16
.LBB108_9:                              # %_ZN10btSoftBody15prepareClustersEi.exit
                                        #   in Loop: Header=BB108_10 Depth=1
	addi.d	$s3, $s3, 1
	beq	$s3, $s1, .LBB108_13
.LBB108_10:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_12 Depth 2
	ld.d	$a0, $fp, 16
	slli.d	$a1, $s3, 3
	ldx.d	$s4, $a0, $a1
	ld.w	$a0, $s4, 1044
	blez	$a0, .LBB108_9
# %bb.11:                               # %.lr.ph.i
                                        #   in Loop: Header=BB108_10 Depth=1
	move	$s5, $zero
	move	$s6, $zero
	.p2align	4, , 16
.LBB108_12:                             #   Parent Loop BB108_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a0, $s4, 1056
	ldx.d	$a0, $a0, $s5
	ld.d	$a1, $a0, 0
	fld.s	$fa0, $s4, 512
	ld.d	$a2, $a1, 16
	move	$a1, $s0
	jirl	$ra, $a2, 0
	ld.w	$a0, $s4, 1044
	addi.d	$s6, $s6, 1
	addi.d	$s5, $s5, 8
	blt	$s6, $a0, .LBB108_12
	b	.LBB108_9
.LBB108_13:                             # %.preheader34
	blez	$s0, .LBB108_21
# %bb.14:                               # %.preheader33.lr.ph
	move	$s3, $zero
	b	.LBB108_16
	.p2align	4, , 16
.LBB108_15:                             # %._crit_edge
                                        #   in Loop: Header=BB108_16 Depth=1
	addi.w	$s3, $s3, 1
	beq	$s3, $s0, .LBB108_21
.LBB108_16:                             # %.preheader33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_18 Depth 2
                                        #       Child Loop BB108_20 Depth 3
	move	$s4, $zero
	b	.LBB108_18
	.p2align	4, , 16
.LBB108_17:                             # %_ZN10btSoftBody13solveClustersEf.exit
                                        #   in Loop: Header=BB108_18 Depth=2
	addi.d	$s4, $s4, 1
	beq	$s4, $s1, .LBB108_15
.LBB108_18:                             # %.lr.ph41
                                        #   Parent Loop BB108_16 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_20 Depth 3
	ld.d	$a0, $fp, 16
	slli.d	$a1, $s4, 3
	ldx.d	$s5, $a0, $a1
	ld.w	$a0, $s5, 1044
	blez	$a0, .LBB108_17
# %bb.19:                               # %.lr.ph.i24
                                        #   in Loop: Header=BB108_18 Depth=2
	move	$s6, $zero
	slli.d	$s7, $a0, 3
	.p2align	4, , 16
.LBB108_20:                             #   Parent Loop BB108_16 Depth=1
                                        #     Parent Loop BB108_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	ld.d	$a0, $s5, 1056
	ldx.d	$a0, $a0, $s6
	ld.d	$a1, $a0, 0
	fld.s	$fa0, $s5, 512
	ld.d	$a1, $a1, 24
	vldi	$vr1, -1168
	jirl	$ra, $a1, 0
	addi.d	$s6, $s6, 8
	bne	$s7, $s6, .LBB108_20
	b	.LBB108_17
.LBB108_21:                             # %.lr.ph44
	move	$s0, $zero
	.p2align	4, , 16
.LBB108_22:                             # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 16
	ldx.d	$a0, $a0, $s0
	pcaddu18i	$ra, %call36(_ZN10btSoftBody15cleanupClustersEv)
	jirl	$ra, $ra, 0
	addi.d	$s2, $s2, -1
	addi.d	$s0, $s0, 8
	bnez	$s2, .LBB108_22
.LBB108_23:                             # %._crit_edge45
	ld.d	$s7, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.Lfunc_end108:
	.size	_ZN10btSoftBody13solveClustersERK20btAlignedObjectArrayIPS_E, .Lfunc_end108-_ZN10btSoftBody13solveClustersERK20btAlignedObjectArrayIPS_E
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody15prepareClustersEi # -- Begin function _ZN10btSoftBody15prepareClustersEi
	.p2align	5
	.type	_ZN10btSoftBody15prepareClustersEi,@function
_ZN10btSoftBody15prepareClustersEi:     # @_ZN10btSoftBody15prepareClustersEi
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	move	$fp, $a0
	ld.w	$a0, $a0, 1044
	blez	$a0, .LBB109_3
# %bb.1:                                # %.lr.ph
	move	$s0, $a1
	move	$s1, $zero
	move	$s2, $zero
	.p2align	4, , 16
.LBB109_2:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 1056
	ldx.d	$a0, $a0, $s1
	ld.d	$a1, $a0, 0
	fld.s	$fa0, $fp, 512
	ld.d	$a2, $a1, 16
	move	$a1, $s0
	jirl	$ra, $a2, 0
	ld.w	$a0, $fp, 1044
	addi.d	$s2, $s2, 1
	addi.d	$s1, $s1, 8
	blt	$s2, $a0, .LBB109_2
.LBB109_3:                              # %._crit_edge
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end109:
	.size	_ZN10btSoftBody15prepareClustersEi, .Lfunc_end109-_ZN10btSoftBody15prepareClustersEi
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody13solveClustersEf # -- Begin function _ZN10btSoftBody13solveClustersEf
	.p2align	5
	.type	_ZN10btSoftBody13solveClustersEf,@function
_ZN10btSoftBody13solveClustersEf:       # @_ZN10btSoftBody13solveClustersEf
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 56, -40
	move	$fp, $a0
	ld.w	$a0, $a0, 1044
	blez	$a0, .LBB110_3
# %bb.1:                                # %.lr.ph
	fmov.s	$fs0, $fa0
	move	$s0, $zero
	slli.d	$s1, $a0, 3
	.p2align	4, , 16
.LBB110_2:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a0, $fp, 1056
	ldx.d	$a0, $a0, $s0
	ld.d	$a1, $a0, 0
	fld.s	$fa0, $fp, 512
	ld.d	$a1, $a1, 24
	fmov.s	$fa1, $fs0
	jirl	$ra, $a1, 0
	addi.d	$s0, $s0, 8
	bne	$s1, $s0, .LBB110_2
.LBB110_3:                              # %._crit_edge
	fld.d	$fs0, $sp, 8                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end110:
	.size	_ZN10btSoftBody13solveClustersEf, .Lfunc_end110-_ZN10btSoftBody13solveClustersEf
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody15cleanupClustersEv # -- Begin function _ZN10btSoftBody15cleanupClustersEv
	.p2align	5
	.type	_ZN10btSoftBody15cleanupClustersEv,@function
_ZN10btSoftBody15cleanupClustersEv:     # @_ZN10btSoftBody15cleanupClustersEv
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$fp, $a0
	ld.w	$a0, $a0, 1044
	blez	$a0, .LBB111_11
# %bb.1:                                # %.lr.ph
	ld.d	$a1, $fp, 1056
	move	$s0, $zero
	b	.LBB111_4
	.p2align	4, , 16
.LBB111_2:                              # %._ZN20btAlignedObjectArrayIPN10btSoftBody5JointEE6removeERKS2_.exit_crit_edge
                                        #   in Loop: Header=BB111_4 Depth=1
	ld.w	$a0, $fp, 1044
	addi.w	$s0, $s0, 1
.LBB111_3:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEE6removeERKS2_.exit
                                        #   in Loop: Header=BB111_4 Depth=1
	bge	$s0, $a0, .LBB111_11
.LBB111_4:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_7 Depth 2
	slli.d	$s1, $s0, 3
	ldx.d	$a0, $a1, $s1
	ld.d	$a1, $a0, 0
	fld.s	$fa0, $fp, 512
	ld.d	$a1, $a1, 32
	jirl	$ra, $a1, 0
	ld.d	$a1, $fp, 1056
	ldx.d	$a0, $a1, $s1
	ld.bu	$a2, $a0, 180
	beqz	$a2, .LBB111_2
# %bb.5:                                #   in Loop: Header=BB111_4 Depth=1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	ld.w	$a0, $fp, 1044
	ld.d	$a1, $fp, 1056
	blez	$a0, .LBB111_3
# %bb.6:                                # %.lr.ph.i.i
                                        #   in Loop: Header=BB111_4 Depth=1
	ldx.d	$a3, $a1, $s1
	move	$a4, $zero
	move	$a2, $zero
	slli.d	$a5, $a0, 3
	.p2align	4, , 16
.LBB111_7:                              #   Parent Loop BB111_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ldx.d	$a6, $a1, $a2
	beq	$a6, $a3, .LBB111_9
# %bb.8:                                #   in Loop: Header=BB111_7 Depth=2
	addi.d	$a2, $a2, 8
	addi.w	$a4, $a4, 1
	bne	$a5, $a2, .LBB111_7
	b	.LBB111_3
.LBB111_9:                              # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE16findLinearSearchERKS2_.exit.i
                                        #   in Loop: Header=BB111_4 Depth=1
	bge	$a4, $a0, .LBB111_3
# %bb.10:                               #   in Loop: Header=BB111_4 Depth=1
	addi.w	$a0, $a0, -1
	slli.d	$a3, $a0, 3
	ldx.d	$a4, $a1, $a3
	ldx.d	$a5, $a1, $a2
	stx.d	$a4, $a1, $a2
	stx.d	$a5, $a1, $a3
	st.w	$a0, $fp, 1044
	b	.LBB111_3
.LBB111_11:                             # %._crit_edge
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end111:
	.size	_ZN10btSoftBody15cleanupClustersEv, .Lfunc_end111-_ZN10btSoftBody15cleanupClustersEv
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody15integrateMotionEv # -- Begin function _ZN10btSoftBody15integrateMotionEv
	.p2align	5
	.type	_ZN10btSoftBody15integrateMotionEv,@function
_ZN10btSoftBody15integrateMotionEv:     # @_ZN10btSoftBody15integrateMotionEv
# %bb.0:
	pcaddu18i	$t8, %call36(_ZN10btSoftBody13updateNormalsEv)
	jr	$t8
.Lfunc_end112:
	.size	_ZN10btSoftBody15integrateMotionEv, .Lfunc_end112-_ZN10btSoftBody15integrateMotionEv
                                        # -- End function
	.globl	_ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f # -- Begin function _ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f
	.p2align	5
	.type	_ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f,@function
_ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f: # @_ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f
	.cfi_startproc
# %bb.0:
	pcalau12i	$a3, %pc_hi20(_ZTVN10btSoftBody15RayFromToCasterE+16)
	addi.d	$a3, $a3, %pc_lo12(_ZTVN10btSoftBody15RayFromToCasterE+16)
	st.d	$a3, $a0, 0
	vld	$vr1, $a1, 0
	vst	$vr1, $a0, 8
	fld.s	$fa1, $a2, 0
	fld.s	$fa2, $a1, 0
	fld.s	$fa3, $a2, 4
	fld.s	$fa4, $a1, 4
	fld.s	$fa5, $a2, 8
	fld.s	$fa6, $a1, 8
	fsub.s	$fa1, $fa1, $fa2
	fsub.s	$fa2, $fa3, $fa4
	fsub.s	$fa3, $fa5, $fa6
	movfr2gr.s	$a1, $fa1
	movfr2gr.s	$a3, $fa2
	bstrins.d	$a1, $a3, 63, 32
	movfr2gr.s	$a3, $fa3
	bstrpick.d	$a3, $a3, 31, 0
	st.d	$a1, $a0, 40
	st.d	$a3, $a0, 48
	vld	$vr1, $a2, 0
	vst	$vr1, $a0, 24
	fst.s	$fa0, $a0, 56
	st.d	$zero, $a0, 64
	st.w	$zero, $a0, 72
	ret
.Lfunc_end113:
	.size	_ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f, .Lfunc_end113-_ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode # -- Begin function _ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode
	.p2align	5
	.type	_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode,@function
_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode: # @_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
	ld.d	$s0, $a1, 40
	addi.d	$a0, $a0, 8
	addi.d	$a1, $fp, 24
	addi.d	$a2, $fp, 40
	ld.d	$a3, $s0, 16
	ld.d	$a4, $s0, 24
	ld.d	$a5, $s0, 32
	fld.s	$fa0, $fp, 56
	addi.d	$a3, $a3, 16
	addi.d	$a4, $a4, 16
	addi.d	$a5, $a5, 16
	pcaddu18i	$ra, %call36(_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa1, $zero
	fcmp.cule.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB114_3
# %bb.1:
	fld.s	$fa1, $fp, 56
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB114_3
# %bb.2:
	fst.s	$fa0, $fp, 56
	st.d	$s0, $fp, 64
.LBB114_3:
	ld.w	$a0, $fp, 72
	addi.d	$a0, $a0, 1
	st.w	$a0, $fp, 72
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end114:
	.size	_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode, .Lfunc_end114-_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f
.LCPI115_0:
	.word	0x34000000                      # float 1.1920929E-7
.LCPI115_1:
	.word	0x35a00000                      # float 1.1920929E-6
.LCPI115_2:
	.word	0xb5a00000                      # float -1.1920929E-6
	.section	.text._ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f,"axG",@progbits,_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f,comdat
	.weak	_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f
	.p2align	5
	.type	_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f,@function
_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f: # @_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f
	.cfi_startproc
# %bb.0:
	fld.s	$ft0, $a4, 0
	fld.s	$ft2, $a3, 0
	fld.s	$ft1, $a4, 4
	fld.s	$ft3, $a3, 4
	fsub.s	$fa1, $ft0, $ft2
	fsub.s	$fa4, $ft1, $ft3
	fld.s	$ft4, $a4, 8
	fld.s	$ft5, $a3, 8
	fld.s	$fa5, $a5, 0
	fld.s	$fa6, $a5, 4
	fld.s	$fa7, $a5, 8
	fsub.s	$fa3, $ft4, $ft5
	fsub.s	$ft6, $fa5, $ft2
	fsub.s	$ft7, $fa6, $ft3
	fsub.s	$ft8, $fa7, $ft5
	fneg.s	$fa2, $ft7
	fmul.s	$fa2, $fa3, $fa2
	fmadd.s	$fa2, $fa4, $ft8, $fa2
	fneg.s	$ft8, $ft8
	fmul.s	$ft8, $fa1, $ft8
	fmadd.s	$fa3, $fa3, $ft6, $ft8
	fneg.s	$ft8, $ft6
	fld.s	$ft6, $a2, 4
	fmul.s	$fa4, $fa4, $ft8
	fmadd.s	$fa4, $fa1, $ft7, $fa4
	fld.s	$ft7, $a2, 0
	fmul.s	$fa1, $ft6, $fa3
	fld.s	$ft8, $a2, 8
	pcalau12i	$a1, %pc_hi20(.LCPI115_0)
	fld.s	$ft9, $a1, %pc_lo12(.LCPI115_0)
	fmadd.s	$fa1, $ft7, $fa2, $fa1
	fmadd.s	$ft10, $ft8, $fa4, $fa1
	fabs.s	$fa1, $ft10
	fcmp.clt.s	$fcc0, $fa1, $ft9
	bceqz	$fcc0, .LBB115_3
.LBB115_1:                              # %.critedge.thread
	vldi	$vr0, -1040
.LBB115_2:                              # %.critedge
                                        # kill: def $f0 killed $f0 killed $vr0
	ret
.LBB115_3:
	fmov.s	$fa1, $fa0
	fmul.s	$fa0, $ft3, $fa3
	fmadd.s	$fa0, $ft2, $fa2, $fa0
	fld.s	$ft9, $a0, 4
	fld.s	$ft11, $a0, 0
	fld.s	$ft12, $a0, 8
	fmadd.s	$fa0, $ft5, $fa4, $fa0
	fmul.s	$ft13, $fa3, $ft9
	fmadd.s	$ft13, $ft11, $fa2, $ft13
	fmadd.s	$ft13, $ft12, $fa4, $ft13
	pcalau12i	$a0, %pc_hi20(.LCPI115_1)
	fld.s	$ft14, $a0, %pc_lo12(.LCPI115_1)
	fsub.s	$fa0, $ft13, $fa0
	fneg.s	$fa0, $fa0
	fdiv.s	$fa0, $fa0, $ft10
	fcmp.cule.s	$fcc0, $fa0, $ft14
	bcnez	$fcc0, .LBB115_1
# %bb.4:
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB115_1
# %bb.5:
	fmul.s	$fa1, $ft7, $fa0
	fmul.s	$ft7, $ft6, $fa0
	fmul.s	$ft8, $ft8, $fa0
	fadd.s	$ft6, $ft11, $fa1
	fadd.s	$ft7, $ft9, $ft7
	fadd.s	$ft8, $ft12, $ft8
	fsub.s	$ft2, $ft2, $ft6
	fsub.s	$fa1, $ft3, $ft7
	fsub.s	$ft3, $ft5, $ft8
	fsub.s	$ft5, $ft0, $ft6
	fsub.s	$ft1, $ft1, $ft7
	fsub.s	$ft4, $ft4, $ft8
	fneg.s	$ft0, $ft1
	fmul.s	$ft0, $ft3, $ft0
	fmadd.s	$ft0, $fa1, $ft4, $ft0
	fneg.s	$ft9, $ft4
	fmul.s	$ft9, $ft2, $ft9
	fmadd.s	$ft9, $ft3, $ft5, $ft9
	fneg.s	$ft10, $ft5
	fmul.s	$ft9, $fa3, $ft9
	fmadd.s	$ft9, $fa2, $ft0, $ft9
	pcalau12i	$a0, %pc_hi20(.LCPI115_2)
	fld.s	$ft0, $a0, %pc_lo12(.LCPI115_2)
	fmul.s	$ft10, $fa1, $ft10
	fmadd.s	$ft10, $ft2, $ft1, $ft10
	fmadd.s	$ft9, $fa4, $ft10, $ft9
	fcmp.cule.s	$fcc0, $ft9, $ft0
	bcnez	$fcc0, .LBB115_1
# %bb.6:
	fsub.s	$fa5, $fa5, $ft6
	fsub.s	$fa6, $fa6, $ft7
	fsub.s	$fa7, $fa7, $ft8
	fneg.s	$ft6, $fa6
	fmul.s	$ft6, $ft4, $ft6
	fmadd.s	$ft6, $ft1, $fa7, $ft6
	fneg.s	$ft7, $fa7
	fmul.s	$ft7, $ft5, $ft7
	fmadd.s	$ft4, $ft4, $fa5, $ft7
	fneg.s	$ft7, $fa5
	fmul.s	$ft1, $ft1, $ft7
	fmadd.s	$ft1, $ft5, $fa6, $ft1
	fmul.s	$ft4, $fa3, $ft4
	fmadd.s	$ft4, $fa2, $ft6, $ft4
	fmadd.s	$ft1, $fa4, $ft1, $ft4
	fcmp.cule.s	$fcc0, $ft1, $ft0
	bcnez	$fcc0, .LBB115_1
# %bb.7:
	fneg.s	$ft1, $fa1
	fmul.s	$ft1, $fa7, $ft1
	fmadd.s	$ft1, $fa6, $ft3, $ft1
	fneg.s	$ft3, $ft3
	fmul.s	$ft3, $fa5, $ft3
	fmadd.s	$fa7, $fa7, $ft2, $ft3
	fneg.s	$ft2, $ft2
	fmul.s	$fa6, $fa6, $ft2
	fmadd.s	$fa1, $fa5, $fa1, $fa6
	fmul.s	$fa3, $fa3, $fa7
	fmadd.s	$fa2, $fa2, $ft1, $fa3
	fmadd.s	$fa1, $fa4, $fa1, $fa2
	fcmp.clt.s	$fcc0, $ft0, $fa1
	bceqz	$fcc0, .LBB115_1
	b	.LBB115_2
.Lfunc_end115:
	.size	_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f, .Lfunc_end115-_ZN10btSoftBody15RayFromToCaster17rayFromToTriangleERK9btVector3S3_S3_S3_S3_S3_f
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE
.LCPI116_0:
	.word	0x5d5e0b6b                      # float 9.99999984E+17
	.section	.text._ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE,"axG",@progbits,_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE,comdat
	.weak	_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE
	.p2align	5
	.type	_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE,@function
_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE: # @_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE
.Lfunc_begin13:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception13
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	st.d	$s4, $sp, 120                   # 8-byte Folded Spill
	st.d	$s5, $sp, 112                   # 8-byte Folded Spill
	st.d	$s6, $sp, 104                   # 8-byte Folded Spill
	st.d	$s7, $sp, 96                    # 8-byte Folded Spill
	st.d	$s8, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	beqz	$a0, .LBB116_2
# %bb.1:                                # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeE6resizeEiRKS2_.exit
	move	$fp, $a3
	move	$s0, $a1
	move	$s2, $a0
	fld.s	$fs0, $a2, 0
	fld.s	$fs1, $a1, 0
	fld.s	$fs2, $a2, 4
	fld.s	$fs3, $a1, 4
	fld.s	$fs4, $a2, 8
	fld.s	$fs5, $a1, 8
	ori	$a0, $zero, 1024
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	move	$s1, $a0
	addi.d	$a0, $a0, 8
	ori	$a2, $zero, 1016
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	st.d	$s2, $s1, 0
	fsub.s	$fa0, $fs0, $fs1
	fsub.s	$fa1, $fs2, $fs3
	fsub.s	$fa2, $fs4, $fs5
	fmul.s	$fa3, $fa1, $fa1
	fmadd.s	$fa3, $fa0, $fa0, $fa3
	fmadd.s	$fa3, $fa2, $fa2, $fa3
	frsqrt.s	$fa3, $fa3
	fmul.s	$fa4, $fa0, $fa3
	fmul.s	$fa5, $fa1, $fa3
	fmul.s	$fa3, $fa2, $fa3
	pcalau12i	$a0, %pc_hi20(.LCPI116_0)
	fld.s	$fa6, $a0, %pc_lo12(.LCPI116_0)
	frecip.s	$fa7, $fa4
	movgr2fr.w	$fs0, $zero
	fcmp.ceq.s	$fcc0, $fa4, $fs0
	fsel	$fs1, $fa7, $fa6, $fcc0
	frecip.s	$fa7, $fa5
	fcmp.ceq.s	$fcc0, $fa5, $fs0
	fsel	$fs2, $fa7, $fa6, $fcc0
	frecip.s	$fa7, $fa3
	fcmp.ceq.s	$fcc0, $fa3, $fs0
	fsel	$fs3, $fa7, $fa6, $fcc0
	fmul.s	$fa1, $fa1, $fa5
	fmadd.s	$fa0, $fa4, $fa0, $fa1
	fmadd.s	$fs4, $fa3, $fa2, $fa0
	ori	$s4, $zero, 1
	ori	$s3, $zero, 126
	ori	$s8, $zero, 128
	fcmp.cule.s	$fcc0, $fs0, $fs1
	movcf2gr	$a0, $fcc0
	st.d	$a0, $sp, 32
	fcmp.cule.s	$fcc0, $fs0, $fs2
	movcf2gr	$a0, $fcc0
	st.d	$a0, $sp, 24
	fcmp.cule.s	$fcc0, $fs0, $fs3
	movcf2gr	$a0, $fcc0
	st.d	$a0, $sp, 16
	ori	$s6, $zero, 128
	b	.LBB116_8
.LBB116_2:                              # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeED2Ev.exit
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB116_3:                              #   in Loop: Header=BB116_8 Depth=1
	move	$s3, $s1
.LBB116_4:                              # %.lr.ph.i47
                                        #   in Loop: Header=BB116_8 Depth=1
	alsl.d	$a0, $s6, $s3, 3
	sub.d	$a1, $s7, $s6
	slli.d	$a2, $a1, 3
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	move	$s1, $s3
.LBB116_5:                              # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeE6resizeEiRKS2_.exit68
                                        #   in Loop: Header=BB116_8 Depth=1
	addi.w	$s3, $s7, -2
	move	$s6, $s7
.LBB116_6:                              #   in Loop: Header=BB116_8 Depth=1
	ld.d	$a0, $s2, 40
	stx.d	$a0, $s1, $s5
	ld.d	$a0, $s2, 48
	addi.w	$s7, $s4, 1
	slli.d	$a1, $s4, 3
	stx.d	$a0, $s1, $a1
	.p2align	4, , 16
.LBB116_7:                              # %_Z10btRayAabb2RK9btVector3S1_PKjPS0_Rfff.exit.thread
                                        #   in Loop: Header=BB116_8 Depth=1
	move	$s4, $s7
	beqz	$s7, .LBB116_31
.LBB116_8:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_26 Depth 2
                                        #     Child Loop BB116_29 Depth 2
	addi.w	$s7, $s4, -1
	slli.d	$s5, $s7, 3
	ldx.d	$s2, $s1, $s5
	fld.s	$fa2, $s2, 0
	fld.s	$fa4, $s2, 16
	fld.s	$fa3, $s2, 4
	fld.s	$fa6, $s0, 0
	fld.s	$fa5, $s2, 20
	ld.d	$a0, $sp, 32
	movgr2cf	$fcc1, $a0
	fsel	$fa0, $fa4, $fa2, $fcc1
	fld.s	$fa7, $s0, 4
	fsub.s	$fa0, $fa0, $fa6
	fmul.s	$fa1, $fs1, $fa0
	ld.d	$a0, $sp, 24
	movgr2cf	$fcc2, $a0
	fsel	$fa0, $fa3, $fa5, $fcc2
	fsub.s	$fa0, $fa0, $fa7
	fmul.s	$fa0, $fs2, $fa0
	fcmp.clt.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB116_7
# %bb.9:                                #   in Loop: Header=BB116_8 Depth=1
	fsel	$fa2, $fa2, $fa4, $fcc1
	fsub.s	$fa2, $fa2, $fa6
	fmul.s	$fa2, $fs1, $fa2
	fsel	$fa3, $fa5, $fa3, $fcc2
	fsub.s	$fa3, $fa3, $fa7
	fmul.s	$fa3, $fs2, $fa3
	fcmp.clt.s	$fcc0, $fa2, $fa3
	bcnez	$fcc0, .LBB116_7
# %bb.10:                               #   in Loop: Header=BB116_8 Depth=1
	fld.s	$fa4, $s2, 24
	fld.s	$fa5, $s2, 8
	fld.s	$fa6, $s0, 8
	fcmp.clt.s	$fcc0, $fa1, $fa3
	fsel	$fa3, $fa1, $fa3, $fcc0
	ld.d	$a0, $sp, 16
	movgr2cf	$fcc1, $a0
	fsel	$fa1, $fa5, $fa4, $fcc1
	fsub.s	$fa1, $fa1, $fa6
	fmul.s	$fa1, $fs3, $fa1
	fcmp.clt.s	$fcc0, $fa1, $fa3
	bcnez	$fcc0, .LBB116_7
# %bb.11:                               #   in Loop: Header=BB116_8 Depth=1
	fcmp.clt.s	$fcc0, $fa0, $fa2
	fsel	$fa0, $fa2, $fa0, $fcc0
	fsel	$fa2, $fa4, $fa5, $fcc1
	fsub.s	$fa2, $fa2, $fa6
	fmul.s	$fa2, $fs3, $fa2
	fcmp.clt.s	$fcc0, $fa0, $fa2
	bcnez	$fcc0, .LBB116_7
# %bb.12:                               # %_Z10btRayAabb2RK9btVector3S1_PKjPS0_Rfff.exit
                                        #   in Loop: Header=BB116_8 Depth=1
	fcmp.clt.s	$fcc0, $fa3, $fa2
	fsel	$fa2, $fa3, $fa2, $fcc0
	fcmp.cule.s	$fcc0, $fs4, $fa2
	bcnez	$fcc0, .LBB116_7
# %bb.13:                               # %_Z10btRayAabb2RK9btVector3S1_PKjPS0_Rfff.exit
                                        #   in Loop: Header=BB116_8 Depth=1
	fcmp.clt.s	$fcc0, $fa1, $fa0
	fsel	$fa0, $fa0, $fa1, $fcc0
	fcmp.cule.s	$fcc0, $fa0, $fs0
	bcnez	$fcc0, .LBB116_7
# %bb.14:                               #   in Loop: Header=BB116_8 Depth=1
	ld.d	$a0, $s2, 48
	beqz	$a0, .LBB116_21
# %bb.15:                               #   in Loop: Header=BB116_8 Depth=1
	bge	$s3, $s7, .LBB116_6
# %bb.16:                               #   in Loop: Header=BB116_8 Depth=1
	slli.w	$s7, $s6, 1
	bge	$s6, $s7, .LBB116_5
# %bb.17:                               #   in Loop: Header=BB116_8 Depth=1
	bge	$s8, $s7, .LBB116_3
# %bb.18:                               #   in Loop: Header=BB116_8 Depth=1
	beqz	$s6, .LBB116_22
# %bb.19:                               #   in Loop: Header=BB116_8 Depth=1
	slli.d	$a0, $s7, 3
.Ltmp392:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp393:                               # EH_LABEL
# %bb.20:                               #   in Loop: Header=BB116_8 Depth=1
	move	$s3, $a0
	b	.LBB116_23
.LBB116_21:                             #   in Loop: Header=BB116_8 Depth=1
	ld.d	$a0, $fp, 0
	ld.d	$a2, $a0, 24
.Ltmp397:                               # EH_LABEL
	move	$a0, $fp
	move	$a1, $s2
	jirl	$ra, $a2, 0
.Ltmp398:                               # EH_LABEL
	b	.LBB116_7
.LBB116_22:                             #   in Loop: Header=BB116_8 Depth=1
	move	$s3, $zero
.LBB116_23:                             # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeE8allocateEi.exit.i.i
                                        #   in Loop: Header=BB116_8 Depth=1
	move	$a0, $zero
	bstrpick.d	$a1, $s6, 31, 0
	ori	$a2, $zero, 4
	bltu	$s6, $a2, .LBB116_28
# %bb.24:                               # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeE8allocateEi.exit.i.i
                                        #   in Loop: Header=BB116_8 Depth=1
	sub.d	$a2, $s3, $s1
	ori	$a3, $zero, 32
	bltu	$a2, $a3, .LBB116_28
# %bb.25:                               # %vector.ph
                                        #   in Loop: Header=BB116_8 Depth=1
	bstrpick.d	$a0, $a1, 30, 2
	slli.d	$a0, $a0, 2
	addi.d	$a2, $s1, 16
	addi.d	$a3, $s3, 16
	move	$a4, $a0
	.p2align	4, , 16
.LBB116_26:                             # %vector.body
                                        #   Parent Loop BB116_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a2, -16
	vld	$vr1, $a2, 0
	vst	$vr0, $a3, -16
	vst	$vr1, $a3, 0
	addi.d	$a4, $a4, -4
	addi.d	$a2, $a2, 32
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB116_26
# %bb.27:                               # %middle.block
                                        #   in Loop: Header=BB116_8 Depth=1
	beq	$a0, $a1, .LBB116_30
.LBB116_28:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB116_8 Depth=1
	sub.d	$a1, $a1, $a0
	alsl.d	$a2, $a0, $s1, 3
	alsl.d	$a0, $a0, $s3, 3
	.p2align	4, , 16
.LBB116_29:                             # %scalar.ph
                                        #   Parent Loop BB116_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	st.d	$a3, $a0, 0
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 8
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB116_29
.LBB116_30:                             # %_ZNK20btAlignedObjectArrayIPK10btDbvtNodeE4copyEiiPS2_.exit.i.i53.loopexit
                                        #   in Loop: Header=BB116_8 Depth=1
.Ltmp394:                               # EH_LABEL
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp395:                               # EH_LABEL
	move	$s8, $s7
	b	.LBB116_4
.LBB116_31:
	move	$a0, $s1
	fld.d	$fs5, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	pcaddu18i	$t8, %call36(_Z21btAlignedFreeInternalPv)
	jr	$t8
.LBB116_32:
.Ltmp396:                               # EH_LABEL
	b	.LBB116_34
.LBB116_33:
.Ltmp399:                               # EH_LABEL
.LBB116_34:
	move	$fp, $a0
.Ltmp400:                               # EH_LABEL
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp401:                               # EH_LABEL
# %bb.35:                               # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeED2Ev.exit73
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB116_36:
.Ltmp402:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end116:
	.size	_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE, .Lfunc_end116-_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE
	.cfi_endproc
	.section	.gcc_except_table._ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE,"aG",@progbits,_ZN6btDbvt7rayTestEPK10btDbvtNodeRK9btVector3S5_RNS_8ICollideE,comdat
	.p2align	2, 0x0
GCC_except_table116:
.Lexception13:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase11-.Lttbaseref11
.Lttbaseref11:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end13-.Lcst_begin13
.Lcst_begin13:
	.uleb128 .Lfunc_begin13-.Lfunc_begin13  # >> Call Site 1 <<
	.uleb128 .Ltmp392-.Lfunc_begin13        #   Call between .Lfunc_begin13 and .Ltmp392
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp392-.Lfunc_begin13        # >> Call Site 2 <<
	.uleb128 .Ltmp393-.Ltmp392              #   Call between .Ltmp392 and .Ltmp393
	.uleb128 .Ltmp396-.Lfunc_begin13        #     jumps to .Ltmp396
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp397-.Lfunc_begin13        # >> Call Site 3 <<
	.uleb128 .Ltmp398-.Ltmp397              #   Call between .Ltmp397 and .Ltmp398
	.uleb128 .Ltmp399-.Lfunc_begin13        #     jumps to .Ltmp399
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp394-.Lfunc_begin13        # >> Call Site 4 <<
	.uleb128 .Ltmp395-.Ltmp394              #   Call between .Ltmp394 and .Ltmp395
	.uleb128 .Ltmp396-.Lfunc_begin13        #     jumps to .Ltmp396
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp395-.Lfunc_begin13        # >> Call Site 5 <<
	.uleb128 .Ltmp400-.Ltmp395              #   Call between .Ltmp395 and .Ltmp400
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp400-.Lfunc_begin13        # >> Call Site 6 <<
	.uleb128 .Ltmp401-.Ltmp400              #   Call between .Ltmp400 and .Ltmp401
	.uleb128 .Ltmp402-.Lfunc_begin13        #     jumps to .Ltmp402
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp401-.Lfunc_begin13        # >> Call Site 7 <<
	.uleb128 .Lfunc_end116-.Ltmp401         #   Call between .Ltmp401 and .Lfunc_end116
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end13:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase11:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE # -- Begin function _ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE
	.p2align	5
	.type	_ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE,@function
_ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE: # @_ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	move	$s0, $a1
	ld.w	$a1, $a1, 256
	move	$fp, $a3
	move	$s1, $a2
	ld.d	$a2, $s0, 200
	addi.d	$a1, $a1, -2
	sltui	$a1, $a1, 1
	maskeqz	$a1, $s0, $a1
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 72
	addi.d	$a4, $s0, 8
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $a4, $a3
	or	$s2, $a3, $a1
	ld.d	$a0, $a0, 776
	fld.s	$fa1, $s1, 0
	fld.s	$fa2, $s2, 48
	fld.s	$fa3, $s1, 4
	fld.s	$fa4, $s2, 52
	fld.s	$fa5, $s1, 8
	fld.s	$fa6, $s2, 56
	addi.d	$a0, $a0, 64
	fsub.s	$fa1, $fa1, $fa2
	fsub.s	$fa2, $fa3, $fa4
	fsub.s	$fa3, $fa5, $fa6
	fld.s	$fa4, $s2, 0
	fld.s	$fa5, $s2, 16
	fld.s	$fa6, $s2, 32
	fld.s	$fa7, $s2, 4
	fld.s	$ft0, $s2, 20
	fld.s	$ft1, $s2, 36
	fld.s	$ft2, $s2, 8
	fld.s	$ft3, $s2, 24
	fld.s	$ft4, $s2, 40
	fmul.s	$fa5, $fa2, $fa5
	fmadd.s	$fa4, $fa4, $fa1, $fa5
	fmadd.s	$fa4, $fa6, $fa3, $fa4
	fmul.s	$fa5, $fa2, $ft0
	fmadd.s	$fa5, $fa7, $fa1, $fa5
	fmadd.s	$fa5, $ft1, $fa3, $fa5
	fmul.s	$fa2, $fa2, $ft3
	fmadd.s	$fa1, $ft2, $fa1, $fa2
	fmadd.s	$fa1, $ft4, $fa3, $fa1
	movfr2gr.s	$a1, $fa4
	movfr2gr.s	$a3, $fa5
	bstrins.d	$a1, $a3, 63, 32
	movfr2gr.s	$a3, $fa1
	bstrpick.d	$a3, $a3, 31, 0
	st.d	$a1, $sp, 8
	st.d	$a3, $sp, 16
	addi.d	$a1, $sp, 8
	addi.d	$a3, $sp, 24
	pcaddu18i	$ra, %call36(_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa1, $zero
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB117_2
# %bb.1:
	fld.s	$fa2, $s2, 0
	fld.s	$fa3, $s2, 4
	fld.s	$fa4, $sp, 28
	fld.s	$fa5, $sp, 24
	fld.s	$fa6, $s2, 8
	fld.s	$fa7, $sp, 32
	fmul.s	$fa3, $fa3, $fa4
	fmadd.s	$fa2, $fa2, $fa5, $fa3
	fld.s	$fa3, $s2, 20
	fmadd.s	$fa2, $fa6, $fa7, $fa2
	fld.s	$fa6, $s2, 16
	fld.s	$ft0, $s2, 24
	fmul.s	$fa3, $fa4, $fa3
	fld.s	$ft1, $s2, 36
	fmadd.s	$fa3, $fa6, $fa5, $fa3
	fmadd.s	$fa3, $ft0, $fa7, $fa3
	fld.s	$fa6, $s2, 32
	fmul.s	$fa4, $fa4, $ft1
	fld.s	$ft0, $s2, 40
	movfr2gr.s	$a0, $fa2
	movfr2gr.s	$a1, $fa3
	bstrins.d	$a0, $a1, 63, 32
	fmadd.s	$fa4, $fa6, $fa5, $fa4
	fmadd.s	$fa4, $ft0, $fa7, $fa4
	st.d	$a0, $fp, 8
	movfr2gr.s	$a0, $fa4
	bstrpick.d	$a0, $a0, 31, 0
	st.d	$a0, $fp, 16
	fld.s	$fa5, $s1, 0
	st.d	$s0, $fp, 0
	fmul.s	$fa6, $fa0, $fa2
	fld.s	$fa7, $s1, 4
	fsub.s	$fa5, $fa5, $fa6
	fld.s	$fa6, $s1, 8
	fmul.s	$ft0, $fa0, $fa3
	fsub.s	$fa7, $fa7, $ft0
	fmul.s	$ft0, $fa0, $fa4
	fsub.s	$fa6, $fa6, $ft0
	fmul.s	$fa3, $fa3, $fa7
	fmadd.s	$fa2, $fa2, $fa5, $fa3
	fnmadd.s	$fa2, $fa4, $fa6, $fa2
	fst.s	$fa2, $fp, 24
.LBB117_2:
	fcmp.clt.s	$fcc0, $fa0, $fa1
	movcf2gr	$a0, $fcc0
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.Lfunc_end117:
	.size	_ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE, .Lfunc_end117-_ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f,"axG",@progbits,_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f,comdat
	.weak	_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f # -- Begin function _ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f
	.p2align	5
	.type	_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f,@function
_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f: # @_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	st.d	$s2, $sp, 120                   # 8-byte Folded Spill
	st.d	$s3, $sp, 112                   # 8-byte Folded Spill
	st.d	$s4, $sp, 104                   # 8-byte Folded Spill
	st.d	$s5, $sp, 96                    # 8-byte Folded Spill
	st.d	$s6, $sp, 88                    # 8-byte Folded Spill
	st.d	$s7, $sp, 80                    # 8-byte Folded Spill
	st.d	$s8, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 40                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	fmov.s	$fs0, $fa0
	move	$t0, $a3
	move	$s7, $a2
	move	$s0, $a0
	fld.s	$fa0, $a0, 32
	fld.s	$fa1, $a1, 0
	fld.s	$fa2, $a1, 4
	fld.s	$fa3, $a1, 8
	frecip.s	$fa0, $fa0
	fmul.s	$fa1, $fa1, $fa0
	fmul.s	$fa2, $fa0, $fa2
	fmul.s	$fa0, $fa0, $fa3
	vldi	$vr3, -1272
	fdiv.s	$fa1, $fa1, $fa3
	movgr2fr.w	$fa4, $zero
	fcmp.clt.s	$fcc0, $fa1, $fa4
	vldi	$vr5, -1168
	fsub.s	$fa6, $fa5, $fa1
	ftintrz.w.s	$fa6, $fa6
	movfr2gr.s	$a0, $fa6
	movcf2gr	$a1, $fcc0
	maskeqz	$a0, $a0, $a1
	movgr2fr.w	$fa6, $a0
	ffint.s.w	$fa6, $fa6
	fadd.s	$fs1, $fa1, $fa6
	ftintrz.w.s	$fa1, $fs1
	movfr2gr.s	$a6, $fa1
	sub.d	$a1, $a6, $a0
	addi.w	$s5, $a1, 0
	fdiv.s	$fa1, $fa2, $fa3
	fcmp.clt.s	$fcc0, $fa1, $fa4
	fsub.s	$fa2, $fa5, $fa1
	ftintrz.w.s	$fa2, $fa2
	movfr2gr.s	$a0, $fa2
	movcf2gr	$a2, $fcc0
	maskeqz	$a0, $a0, $a2
	movgr2fr.w	$fa2, $a0
	ffint.s.w	$fa2, $fa2
	fadd.s	$fs2, $fa1, $fa2
	ftintrz.w.s	$fa1, $fs2
	movfr2gr.s	$t1, $fa1
	sub.d	$a2, $t1, $a0
	addi.w	$s1, $a2, 0
	fdiv.s	$fa0, $fa0, $fa3
	fcmp.clt.s	$fcc0, $fa0, $fa4
	fsub.s	$fa1, $fa5, $fa0
	ftintrz.w.s	$fa1, $fa1
	movfr2gr.s	$a0, $fa1
	movcf2gr	$a3, $fcc0
	maskeqz	$a0, $a0, $a3
	movgr2fr.w	$fa1, $a0
	ffint.s.w	$fa1, $fa1
	fadd.s	$fs3, $fa0, $fa1
	ftintrz.w.s	$fa0, $fs3
	movfr2gr.s	$s6, $fa0
	sub.d	$a0, $s6, $a0
	bstrpick.d	$a3, $a1, 15, 0
	addi.d	$a3, $a3, 24
	srli.d	$a1, $a1, 5
	lu12i.w	$a4, 32767
	ori	$a4, $a4, 2048
	and	$a1, $a1, $a4
	slli.d	$a5, $a3, 16
	xor	$a1, $a1, $a5
	xor	$a1, $a1, $a3
	bstrpick.d	$a3, $a1, 31, 11
	bstrpick.d	$a5, $a2, 15, 0
	add.d	$a1, $a1, $a5
	add.w	$a1, $a1, $a3
	srli.d	$a2, $a2, 5
	and	$a2, $a2, $a4
	slli.d	$a3, $a1, 16
	xor	$a2, $a2, $a3
	xor	$a1, $a2, $a1
	bstrpick.d	$a2, $a1, 31, 11
	bstrpick.d	$a3, $a0, 15, 0
	add.d	$a1, $a1, $a3
	add.w	$a1, $a1, $a2
	srli.d	$a2, $a0, 5
	and	$a2, $a2, $a4
	slli.d	$a3, $a1, 16
	xor	$a2, $a2, $a3
	xor	$a1, $a2, $a1
	bstrpick.d	$a2, $a1, 31, 11
	add.w	$a1, $a2, $a1
	slli.d	$a2, $a1, 16
	xor	$a1, $a2, $a1
	bstrpick.d	$a2, $a1, 31, 11
	bstrpick.d	$a3, $s7, 15, 0
	add.d	$a1, $a1, $a3
	add.w	$a1, $a1, $a2
	srli.d	$a2, $s7, 5
	and	$a2, $a2, $a4
	slli.d	$a3, $a1, 16
	xor	$a2, $a2, $a3
	xor	$a1, $a2, $a1
	bstrpick.d	$a2, $a1, 31, 11
	bstrpick.d	$a3, $s7, 47, 32
	add.d	$a1, $a1, $a3
	add.w	$a1, $a1, $a2
	srli.d	$a2, $s7, 37
	and	$a2, $a2, $a4
	slli.d	$a3, $a1, 16
	xor	$a2, $a2, $a3
	xor	$a1, $a2, $a1
	bstrpick.d	$a2, $a1, 31, 11
	add.w	$a1, $a2, $a1
	slli.d	$a2, $a1, 3
	xor	$a1, $a2, $a1
	bstrpick.d	$a2, $a1, 31, 5
	add.w	$a1, $a2, $a1
	slli.d	$a2, $a1, 4
	xor	$a1, $a2, $a1
	bstrpick.d	$a2, $a1, 31, 17
	add.w	$a1, $a2, $a1
	slli.d	$a2, $a1, 25
	xor	$a1, $a2, $a1
	ld.w	$a2, $s0, 4
	bstrpick.d	$a3, $a1, 31, 6
	add.w	$s8, $a3, $a1
	ld.d	$a1, $s0, 16
	mod.wu	$a2, $s8, $a2
	slli.d	$a3, $a2, 3
	ld.w	$a4, $s0, 48
	ldx.d	$s3, $a1, $a3
	ld.w	$a3, $s0, 44
	addi.w	$fp, $a0, 0
	addi.d	$a0, $a4, 1
	st.w	$a0, $s0, 48
	beqz	$s3, .LBB118_8
# %bb.1:                                # %.lr.ph.preheader
	move	$s2, $s3
	b	.LBB118_3
	.p2align	4, , 16
.LBB118_2:                              #   in Loop: Header=BB118_3 Depth=1
	ld.d	$s2, $s2, 288
	beqz	$s2, .LBB118_8
.LBB118_3:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a0, $s2, 272
	addi.d	$a3, $a3, 1
	st.w	$a3, $s0, 44
	bne	$a0, $s8, .LBB118_2
# %bb.4:                                #   in Loop: Header=BB118_3 Depth=1
	ld.w	$a0, $s2, 256
	bne	$a0, $s5, .LBB118_2
# %bb.5:                                #   in Loop: Header=BB118_3 Depth=1
	ld.w	$a0, $s2, 260
	bne	$a0, $s1, .LBB118_2
# %bb.6:                                #   in Loop: Header=BB118_3 Depth=1
	ld.w	$a0, $s2, 264
	bne	$a0, $fp, .LBB118_2
# %bb.7:                                #   in Loop: Header=BB118_3 Depth=1
	ld.d	$a0, $s2, 280
	bne	$a0, $s7, .LBB118_2
	b	.LBB118_9
.LBB118_8:                              # %.critedge
	ld.w	$a0, $s0, 40
	alsl.d	$s4, $a2, $a1, 3
	addi.d	$a1, $a3, 1
	st.w	$a1, $s0, 44
	addi.d	$a0, $a0, 1
	st.w	$a0, $s0, 40
	ori	$a0, $zero, 296
	st.d	$t0, $sp, 32                    # 8-byte Folded Spill
	st.d	$a6, $sp, 24                    # 8-byte Folded Spill
	st.d	$t1, $sp, 16                    # 8-byte Folded Spill
	pcaddu18i	$ra, %call36(_Znwm)
	jirl	$ra, $ra, 0
	move	$s2, $a0
	ori	$a2, $zero, 288
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	st.d	$s3, $s2, 288
	st.d	$s2, $s4, 0
	st.d	$s7, $s2, 280
	st.w	$s8, $s2, 272
	st.w	$s5, $s2, 256
	st.w	$s1, $s2, 260
	st.w	$fp, $s2, 264
	move	$a0, $s0
	move	$a1, $s2
	pcaddu18i	$ra, %call36(_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE)
	jirl	$ra, $ra, 0
	ld.d	$t1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a6, $sp, 24                    # 8-byte Folded Reload
	ld.d	$t0, $sp, 32                    # 8-byte Folded Reload
.LBB118_9:                              # %.loopexit
	movgr2fr.w	$fa0, $s6
	ffint.s.w	$fa0, $fa0
	fsub.s	$fa0, $fs3, $fa0
	vldi	$vr1, -1272
	fmul.s	$fa0, $fa0, $fa1
	ftintrz.w.s	$fa2, $fa0
	movfr2gr.s	$a0, $fa2
	slli.d	$a1, $a0, 32
	movgr2fr.w	$fa2, $t1
	ffint.s.w	$fa2, $fa2
	fsub.s	$fa2, $fs2, $fa2
	fmul.s	$fa2, $fa2, $fa1
	ftintrz.w.s	$fa3, $fa2
	movfr2gr.s	$a2, $fa3
	slli.d	$a3, $a2, 32
	movgr2fr.w	$fa3, $a6
	ffint.s.w	$fa3, $fa3
	fsub.s	$fa3, $fs1, $fa3
	fmul.s	$fa3, $fa3, $fa1
	ftintrz.w.s	$fa1, $fa3
	movfr2gr.s	$a4, $fa1
	slli.d	$a5, $a4, 32
	movgr2fr.w	$fa1, $a0
	ffint.s.w	$fa1, $fa1
	fsub.s	$fa0, $fa0, $fa1
	movgr2fr.w	$fa1, $a2
	ffint.s.w	$fa1, $fa1
	fsub.s	$fa1, $fa2, $fa1
	ld.w	$a6, $s0, 36
	movgr2fr.w	$fa2, $a4
	ffint.s.w	$fa2, $fa2
	fsub.s	$fa2, $fa3, $fa2
	st.w	$a6, $s2, 268
	slli.d	$a4, $a4, 6
	add.d	$a4, $s2, $a4
	alsl.d	$a6, $a2, $a4, 4
	slli.d	$a0, $a0, 2
	fldx.s	$fa3, $a6, $a0
	ori	$a7, $zero, 0
	lu32i.d	$a7, 1
	add.d	$a5, $a5, $a7
	srai.d	$a5, $a5, 26
	add.d	$a5, $s2, $a5
	alsl.d	$a2, $a2, $a5, 4
	fldx.s	$fa4, $a2, $a0
	add.d	$a3, $a3, $a7
	srai.d	$a3, $a3, 28
	add.d	$a5, $a5, $a3
	fldx.s	$fa5, $a5, $a0
	add.d	$a3, $a4, $a3
	fldx.s	$fa6, $a3, $a0
	add.d	$a0, $a1, $a7
	srai.d	$a0, $a0, 30
	fldx.s	$fa7, $a6, $a0
	fldx.s	$ft0, $a2, $a0
	fldx.s	$ft1, $a5, $a0
	fldx.s	$ft2, $a3, $a0
	fsub.s	$ft3, $fa4, $fa3
	fsub.s	$ft4, $fa5, $fa6
	fsub.s	$ft5, $ft0, $fa7
	fsub.s	$ft6, $ft1, $ft2
	fsub.s	$ft7, $fa6, $fa3
	fsub.s	$ft8, $fa5, $fa4
	fsub.s	$ft9, $ft2, $fa7
	fsub.s	$ft10, $ft1, $ft0
	fsub.s	$ft11, $fa7, $fa3
	fsub.s	$fa4, $ft0, $fa4
	fsub.s	$ft0, $ft2, $fa6
	fsub.s	$fa5, $ft1, $fa5
	fsub.s	$ft1, $ft4, $ft3
	fmadd.s	$ft1, $ft1, $fa1, $ft3
	fsub.s	$ft12, $ft6, $ft5
	fmadd.s	$ft12, $ft12, $fa1, $ft5
	fsub.s	$ft12, $ft12, $ft1
	fmadd.s	$ft1, $ft12, $fa0, $ft1
	fsub.s	$ft8, $ft8, $ft7
	fmadd.s	$ft7, $ft8, $fa2, $ft7
	fsub.s	$ft8, $ft10, $ft9
	fmadd.s	$ft8, $ft8, $fa2, $ft9
	fsub.s	$ft8, $ft8, $ft7
	fmadd.s	$ft7, $ft8, $fa0, $ft7
	fsub.s	$fa4, $fa4, $ft11
	fmadd.s	$fa4, $fa4, $fa2, $ft11
	fsub.s	$fa5, $fa5, $ft0
	fmadd.s	$fa5, $fa5, $fa2, $ft0
	fsub.s	$fa5, $fa5, $fa4
	fmadd.s	$fa4, $fa5, $fa1, $fa4
	fmul.s	$fa5, $ft7, $ft7
	fmadd.s	$fa5, $ft1, $ft1, $fa5
	fmadd.s	$fa5, $fa4, $fa4, $fa5
	frsqrt.s	$fa5, $fa5
	fmul.s	$ft0, $ft1, $fa5
	fmul.s	$ft1, $ft7, $fa5
	fmul.s	$fa4, $fa4, $fa5
	movfr2gr.s	$a0, $ft0
	movfr2gr.s	$a1, $ft1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa4
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $t0, 0
	fmadd.s	$fa3, $ft3, $fa2, $fa3
	fmadd.s	$fa4, $ft4, $fa2, $fa6
	fsub.s	$fa4, $fa4, $fa3
	fmadd.s	$fa3, $fa4, $fa1, $fa3
	fmadd.s	$fa4, $ft5, $fa2, $fa7
	fmadd.s	$fa2, $ft6, $fa2, $ft2
	fsub.s	$fa2, $fa2, $fa4
	fmadd.s	$fa1, $fa2, $fa1, $fa4
	fsub.s	$fa1, $fa1, $fa3
	fmadd.s	$fa0, $fa1, $fa0, $fa3
	fsub.s	$fa0, $fa0, $fs0
	st.d	$a1, $t0, 8
	fld.d	$fs3, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 120                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.Lfunc_end118:
	.size	_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f, .Lfunc_end118-_ZN11btSparseSdfILi3EE8EvaluateERK9btVector3P16btCollisionShapeRS1_f
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZL14PolarDecomposeRK11btMatrix3x3RS_S2_
.LCPI119_0:
	.word	0x34000000                      # float 1.1920929E-7
.LCPI119_1:
	.word	0x38d1b717                      # float 9.99999974E-5
	.text
	.p2align	5
	.type	_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_,@function
_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_: # @_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_
# %bb.0:
	fld.s	$fa4, $a0, 20
	fld.s	$fa0, $a0, 0
	fld.s	$ft0, $a0, 40
	fmul.s	$fa1, $fa4, $fa4
	fmadd.s	$fa1, $fa0, $fa0, $fa1
	fmadd.s	$fa1, $ft0, $ft0, $fa1
	frsqrt.s	$ft1, $fa1
	fld.s	$fa2, $a0, 4
	fld.s	$fa3, $a0, 8
	fld.s	$fa5, $a0, 16
	fmul.s	$fa1, $fa0, $ft1
	fmul.s	$fa0, $fa2, $ft1
	fmul.s	$fa2, $fa3, $ft1
	fmul.s	$fa3, $fa5, $ft1
	fld.s	$fa5, $a0, 24
	fld.s	$fa6, $a0, 32
	fld.s	$fa7, $a0, 36
	fmul.s	$fa4, $ft1, $fa4
	fmul.s	$fa5, $ft1, $fa5
	fmul.s	$fa6, $ft1, $fa6
	fmul.s	$fa7, $ft1, $fa7
	fmul.s	$ft0, $ft1, $ft0
	fneg.s	$ft1, $fa7
	fmul.s	$ft1, $fa5, $ft1
	fmadd.s	$ft1, $fa4, $ft0, $ft1
	fneg.s	$ft2, $ft0
	fmul.s	$ft2, $fa3, $ft2
	fmadd.s	$ft2, $fa5, $fa6, $ft2
	fmul.s	$ft2, $fa0, $ft2
	fmadd.s	$ft1, $fa1, $ft1, $ft2
	fneg.s	$ft2, $fa6
	fmul.s	$ft2, $fa4, $ft2
	pcalau12i	$a3, %pc_hi20(.LCPI119_0)
	fld.s	$ft3, $a3, %pc_lo12(.LCPI119_0)
	fmadd.s	$ft2, $fa3, $fa7, $ft2
	fmadd.s	$ft4, $fa2, $ft2, $ft1
	fabs.s	$ft1, $ft4
	fcmp.clt.s	$fcc0, $ft1, $ft3
	bceqz	$fcc0, .LBB119_2
# %bb.1:
	addi.d	$a0, $a1, 24
	lu12i.w	$a3, 260096
	st.w	$a3, $a1, 0
	vrepli.b	$vr0, 0
	vst	$vr0, $a1, 4
	st.w	$a3, $a1, 20
	vst	$vr0, $a0, 0
	st.d	$a3, $a1, 40
	st.w	$a3, $a2, 0
	vst	$vr0, $a2, 4
	st.w	$a3, $a2, 20
	vst	$vr0, $a2, 24
	st.w	$a3, $a2, 40
	st.w	$zero, $a2, 44
	ret
.LBB119_2:                              # %.preheader.preheader
	pcalau12i	$a3, %pc_hi20(.LCPI119_1)
	fld.s	$ft1, $a3, %pc_lo12(.LCPI119_1)
	ori	$a3, $zero, 15
	vldi	$vr10, -1184
	.p2align	4, , 16
.LBB119_3:                              # %.preheader
                                        # =>This Inner Loop Header: Depth=1
	fmov.s	$ft3, $ft4
	fneg.s	$ft4, $fa7
	fmul.s	$ft5, $fa5, $ft4
	fmadd.s	$ft5, $fa4, $ft0, $ft5
	fneg.s	$ft6, $ft0
	fmul.s	$ft7, $fa0, $ft6
	fmadd.s	$ft7, $fa2, $fa7, $ft7
	fneg.s	$ft8, $fa4
	fmul.s	$ft8, $fa2, $ft8
	fmadd.s	$ft8, $fa0, $fa5, $ft8
	fmul.s	$ft6, $fa3, $ft6
	fmadd.s	$ft6, $fa5, $fa6, $ft6
	fneg.s	$ft9, $fa6
	fmul.s	$ft10, $fa2, $ft9
	fmadd.s	$ft10, $fa1, $ft0, $ft10
	fneg.s	$ft11, $fa5
	fmul.s	$ft11, $fa1, $ft11
	fmadd.s	$ft11, $fa2, $fa3, $ft11
	fmul.s	$ft9, $fa4, $ft9
	fmadd.s	$ft9, $fa3, $fa7, $ft9
	fmul.s	$ft4, $fa1, $ft4
	fmadd.s	$ft4, $fa0, $fa6, $ft4
	fneg.s	$ft12, $fa3
	fmul.s	$ft12, $fa0, $ft12
	fmadd.s	$ft12, $fa1, $fa4, $ft12
	frecip.s	$ft13, $ft3
	fmul.s	$ft5, $ft13, $ft5
	fmul.s	$ft7, $ft13, $ft7
	fmul.s	$ft8, $ft13, $ft8
	fmul.s	$ft6, $ft13, $ft6
	fmul.s	$ft10, $ft13, $ft10
	fmul.s	$ft11, $ft13, $ft11
	fmul.s	$ft9, $ft13, $ft9
	fmul.s	$ft4, $ft13, $ft4
	fmul.s	$ft12, $ft13, $ft12
	fadd.s	$fa1, $ft5, $fa1
	fadd.s	$fa0, $fa0, $ft6
	fadd.s	$fa2, $fa2, $ft9
	fadd.s	$fa3, $fa3, $ft7
	fadd.s	$fa4, $fa4, $ft10
	fadd.s	$fa5, $fa5, $ft4
	fadd.s	$fa6, $fa6, $ft8
	fadd.s	$fa7, $fa7, $ft11
	fadd.s	$ft0, $ft0, $ft12
	fmul.s	$fa1, $fa1, $ft2
	fmul.s	$fa0, $fa0, $ft2
	fmul.s	$fa2, $fa2, $ft2
	fmul.s	$fa3, $fa3, $ft2
	fmul.s	$fa4, $fa4, $ft2
	fmul.s	$fa5, $fa5, $ft2
	fmul.s	$fa6, $fa6, $ft2
	fmul.s	$fa7, $fa7, $ft2
	fmul.s	$ft0, $ft0, $ft2
	fneg.s	$ft4, $fa7
	fmul.s	$ft4, $fa5, $ft4
	fmadd.s	$ft4, $fa4, $ft0, $ft4
	fneg.s	$ft5, $ft0
	fmul.s	$ft5, $fa3, $ft5
	fmadd.s	$ft5, $fa5, $fa6, $ft5
	fmul.s	$ft5, $fa0, $ft5
	fmadd.s	$ft4, $fa1, $ft4, $ft5
	fneg.s	$ft5, $fa6
	fmul.s	$ft5, $fa4, $ft5
	fmadd.s	$ft5, $fa3, $fa7, $ft5
	fmadd.s	$ft4, $fa2, $ft5, $ft4
	fsub.s	$ft3, $ft4, $ft3
	fmul.s	$ft3, $ft3, $ft3
	fcmp.cule.s	$fcc0, $ft3, $ft1
	bcnez	$fcc0, .LBB119_5
# %bb.4:                                # %.preheader
                                        #   in Loop: Header=BB119_3 Depth=1
	move	$a4, $a3
	addi.w	$a3, $a3, -1
	bnez	$a4, .LBB119_3
.LBB119_5:
	fneg.s	$fa6, $fa4
	fmul.s	$fa6, $fa2, $fa6
	fmadd.s	$fa6, $fa0, $fa5, $fa6
	fneg.s	$fa5, $fa5
	fmul.s	$fa5, $fa1, $fa5
	fmadd.s	$fa7, $fa2, $fa3, $fa5
	fneg.s	$fa3, $fa3
	fmul.s	$fa3, $fa0, $fa3
	fmadd.s	$fa3, $fa1, $fa4, $fa3
	fmul.s	$fa4, $fa7, $fa7
	fmadd.s	$fa4, $fa6, $fa6, $fa4
	fmadd.s	$fa4, $fa3, $fa3, $fa4
	frsqrt.s	$ft0, $fa4
	fmul.s	$fa5, $fa6, $ft0
	fmul.s	$fa4, $fa7, $ft0
	fmul.s	$fa3, $fa3, $ft0
	movfr2gr.s	$a3, $fa5
	movfr2gr.s	$a4, $fa4
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa3
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a3, $a1, 32
	st.d	$a4, $a1, 40
	fneg.s	$fa6, $fa0
	fmul.s	$fa6, $fa3, $fa6
	fmadd.s	$fa6, $fa4, $fa2, $fa6
	fneg.s	$fa2, $fa2
	fmul.s	$fa2, $fa5, $fa2
	fmadd.s	$fa2, $fa3, $fa1, $fa2
	fneg.s	$fa1, $fa1
	fmul.s	$fa1, $fa4, $fa1
	fmadd.s	$fa0, $fa5, $fa0, $fa1
	fmul.s	$fa1, $fa2, $fa2
	fmadd.s	$fa1, $fa6, $fa6, $fa1
	fmadd.s	$fa1, $fa0, $fa0, $fa1
	frsqrt.s	$fa7, $fa1
	fmul.s	$fa6, $fa6, $fa7
	fmul.s	$fa1, $fa2, $fa7
	fmul.s	$fa0, $fa0, $fa7
	movfr2gr.s	$a3, $fa6
	movfr2gr.s	$a4, $fa1
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa0
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a3, $a1, 16
	st.d	$a4, $a1, 24
	fneg.s	$fa2, $fa4
	fmul.s	$fa2, $fa0, $fa2
	fmadd.s	$fa2, $fa1, $fa3, $fa2
	fneg.s	$fa7, $fa3
	fmul.s	$fa7, $fa6, $fa7
	fmadd.s	$fa7, $fa0, $fa5, $fa7
	fneg.s	$ft0, $fa5
	fmul.s	$ft0, $fa1, $ft0
	fmadd.s	$ft0, $fa6, $fa4, $ft0
	fmul.s	$ft1, $fa7, $fa7
	fmadd.s	$ft1, $fa2, $fa2, $ft1
	fmadd.s	$ft1, $ft0, $ft0, $ft1
	frsqrt.s	$ft1, $ft1
	fmul.s	$fa2, $fa2, $ft1
	fmul.s	$fa7, $fa7, $ft1
	fmul.s	$ft0, $ft0, $ft1
	movfr2gr.s	$a3, $fa2
	movfr2gr.s	$a4, $fa7
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $ft0
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a3, $a1, 0
	st.d	$a4, $a1, 8
	fld.s	$ft1, $a0, 16
	fld.s	$ft2, $a0, 0
	fmul.s	$ft3, $fa6, $ft1
	fld.s	$ft4, $a0, 32
	fld.s	$ft5, $a0, 20
	fld.s	$ft6, $a0, 4
	fmadd.s	$ft3, $ft2, $fa2, $ft3
	fmadd.s	$ft3, $ft4, $fa5, $ft3
	fmul.s	$ft7, $fa6, $ft5
	fmadd.s	$ft7, $ft6, $fa2, $ft7
	fld.s	$ft8, $a0, 36
	fld.s	$ft9, $a0, 24
	fld.s	$ft10, $a0, 8
	fld.s	$ft11, $a0, 40
	fmadd.s	$ft7, $ft8, $fa5, $ft7
	fmul.s	$fa6, $fa6, $ft9
	fmadd.s	$fa2, $ft10, $fa2, $fa6
	fmadd.s	$fa2, $ft11, $fa5, $fa2
	fmul.s	$fa5, $fa1, $ft1
	fmadd.s	$fa5, $ft2, $fa7, $fa5
	fmadd.s	$fa5, $ft4, $fa4, $fa5
	fmul.s	$fa6, $fa1, $ft5
	fmadd.s	$fa6, $ft6, $fa7, $fa6
	fmadd.s	$fa6, $ft8, $fa4, $fa6
	fmul.s	$fa1, $fa1, $ft9
	fmadd.s	$fa1, $ft10, $fa7, $fa1
	fmadd.s	$fa1, $ft11, $fa4, $fa1
	fmul.s	$fa4, $fa0, $ft1
	fmadd.s	$fa4, $ft2, $ft0, $fa4
	fmadd.s	$fa4, $ft4, $fa3, $fa4
	fmul.s	$fa7, $fa0, $ft5
	fmadd.s	$fa7, $ft6, $ft0, $fa7
	fmadd.s	$fa7, $ft8, $fa3, $fa7
	fmul.s	$fa0, $fa0, $ft9
	fmadd.s	$fa0, $ft10, $ft0, $fa0
	fmadd.s	$fa0, $ft11, $fa3, $fa0
	fst.s	$ft3, $a2, 0
	fst.s	$ft7, $a2, 4
	fst.s	$fa2, $a2, 8
	st.w	$zero, $a2, 12
	fst.s	$fa5, $a2, 16
	fst.s	$fa6, $a2, 20
	fst.s	$fa1, $a2, 24
	st.w	$zero, $a2, 28
	fst.s	$fa4, $a2, 32
	fst.s	$fa7, $a2, 36
	fst.s	$fa0, $a2, 40
	st.w	$zero, $a2, 44
	ret
.Lfunc_end119:
	.size	_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_, .Lfunc_end119-_ZL14PolarDecomposeRK11btMatrix3x3RS_S2_
                                        # -- End function
	.globl	_ZN10btSoftBody5Joint7PrepareEfi # -- Begin function _ZN10btSoftBody5Joint7PrepareEfi
	.p2align	5
	.type	_ZN10btSoftBody5Joint7PrepareEfi,@function
_ZN10btSoftBody5Joint7PrepareEfi:       # @_ZN10btSoftBody5Joint7PrepareEfi
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB120_2
# %bb.1:
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN17btCollisionObject8activateEb)
	jirl	$ra, $ra, 0
.LBB120_2:                              # %_ZNK10btSoftBody4Body8activateEv.exit
	ld.d	$a0, $fp, 40
	beqz	$a0, .LBB120_4
# %bb.3:
	move	$a1, $zero
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	pcaddu18i	$t8, %call36(_ZN17btCollisionObject8activateEb)
	jr	$t8
.LBB120_4:                              # %_ZNK10btSoftBody4Body8activateEv.exit2
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end120:
	.size	_ZN10btSoftBody5Joint7PrepareEfi, .Lfunc_end120-_ZN10btSoftBody5Joint7PrepareEfi
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody6LJoint7PrepareEfi # -- Begin function _ZN10btSoftBody6LJoint7PrepareEfi
	.p2align	5
	.type	_ZN10btSoftBody6LJoint7PrepareEfi,@function
_ZN10btSoftBody6LJoint7PrepareEfi:      # @_ZN10btSoftBody6LJoint7PrepareEfi
.Lfunc_begin14:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception14
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 56, -64
	.cfi_offset 57, -72
	.cfi_offset 58, -80
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	move	$s0, $a1
	fmov.s	$fs0, $fa0
	beqz	$a0, .LBB121_2
# %bb.1:
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN17btCollisionObject8activateEb)
	jirl	$ra, $ra, 0
.LBB121_2:                              # %_ZNK10btSoftBody4Body8activateEv.exit.i
	ld.d	$a0, $fp, 40
	beqz	$a0, .LBB121_4
# %bb.3:
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN17btCollisionObject8activateEb)
	jirl	$ra, $ra, 0
.LBB121_4:                              # %_ZN10btSoftBody5Joint7PrepareEfi.exit
	pcalau12i	$s2, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	ld.b	$a0, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$s1, $a1, %pc_lo12(_ZZNK10btSoftBody4Body5xformEvE8identity)
	beqz	$a0, .LBB121_25
.LBB121_5:                              # %_ZNK10btSoftBody4Body5xformEv.exit
	ld.d	$a0, $fp, 24
	ld.d	$a1, $fp, 8
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s1, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 4
	fld.s	$fa1, $fp, 60
	fld.s	$fa2, $a0, 0
	fld.s	$fa3, $fp, 56
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa4, $a0, 8
	fld.s	$fa5, $fp, 64
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fld.s	$fa2, $a0, 48
	fld.s	$fa6, $a0, 20
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fld.s	$fa4, $a0, 16
	fadd.s	$fa0, $fa0, $fa2
	fmul.s	$fa2, $fa1, $fa6
	fld.s	$fa6, $a0, 36
	fmadd.s	$fa2, $fa4, $fa3, $fa2
	fld.s	$fa4, $a0, 32
	fld.s	$fa7, $a0, 24
	fmul.s	$fa1, $fa1, $fa6
	fld.s	$fa6, $a0, 52
	fmadd.s	$fa1, $fa4, $fa3, $fa1
	fld.s	$fa3, $a0, 40
	fld.s	$fa4, $a0, 56
	fmadd.s	$fa2, $fa7, $fa5, $fa2
	fadd.s	$fa2, $fa6, $fa2
	fmadd.s	$fa1, $fa3, $fa5, $fa1
	fadd.s	$fa1, $fa4, $fa1
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa1
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 184
	st.d	$a1, $fp, 192
	ld.b	$a0, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	beqz	$a0, .LBB121_28
.LBB121_6:                              # %_ZNK10btSoftBody4Body5xformEv.exit41
	ld.d	$a0, $fp, 48
	ld.d	$a1, $fp, 32
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s1, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 4
	fld.s	$fa1, $fp, 76
	fld.s	$fa2, $a0, 0
	fld.s	$fa3, $fp, 72
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa4, $a0, 8
	fld.s	$fa5, $fp, 80
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fld.s	$fa2, $a0, 48
	fld.s	$fa6, $a0, 20
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fld.s	$fa4, $a0, 16
	fadd.s	$fa0, $fa0, $fa2
	fmul.s	$fa2, $fa1, $fa6
	fld.s	$fa6, $a0, 36
	fmadd.s	$fa2, $fa4, $fa3, $fa2
	fld.s	$fa4, $a0, 32
	fld.s	$fa7, $a0, 24
	fmul.s	$fa1, $fa1, $fa6
	fld.s	$fa6, $a0, 52
	fmadd.s	$fa1, $fa4, $fa3, $fa1
	fld.s	$fa3, $a0, 40
	fld.s	$fa4, $a0, 56
	fmadd.s	$fa2, $fa7, $fa5, $fa2
	fadd.s	$fa2, $fa6, $fa2
	fmadd.s	$fa1, $fa3, $fa5, $fa1
	fadd.s	$fa3, $fa4, $fa1
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa3
	bstrpick.d	$a1, $a1, 31, 0
	fld.s	$fa1, $fp, 184
	fld.s	$fa4, $fp, 188
	fld.s	$fa5, $fp, 192
	st.d	$a0, $fp, 200
	fsub.s	$fa0, $fa1, $fa0
	fsub.s	$fa1, $fa4, $fa2
	fsub.s	$fa2, $fa5, $fa3
	fmul.s	$fa3, $fa1, $fa1
	fmadd.s	$fa3, $fa0, $fa0, $fa3
	fmadd.s	$fa3, $fa2, $fa2, $fa3
	vldi	$vr4, -1232
	fcmp.cule.s	$fcc0, $fa3, $fa4
	st.d	$a1, $fp, 208
	bcnez	$fcc0, .LBB121_8
# %bb.7:
	vldi	$vr4, -1264
	fmul.s	$fa0, $fa0, $fa4
	fmul.s	$fa1, $fa1, $fa4
	fmul.s	$fa2, $fa2, $fa4
	frsqrt.s	$fa3, $fa3
	fmul.s	$fa0, $fa0, $fa3
	fmul.s	$fa1, $fa1, $fa3
	fmul.s	$fa2, $fa2, $fa3
.LBB121_8:                              # %_ZL5ClampRK9btVector3f.exit
	fld.s	$fa3, $fp, 92
	fmul.s	$fa0, $fa3, $fa0
	fmul.s	$fa1, $fa3, $fa1
	fmul.s	$fa2, $fa2, $fa3
	frecip.s	$fa3, $fs0
	fmul.s	$fa0, $fa3, $fa0
	fmul.s	$fa1, $fa3, $fa1
	fmul.s	$fa2, $fa3, $fa2
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa2
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 100
	st.d	$a1, $fp, 108
	ld.b	$a0, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	beqz	$a0, .LBB121_31
.LBB121_9:                              # %_ZNK10btSoftBody4Body5xformEv.exit68
	ld.d	$a0, $fp, 24
	ld.d	$a1, $fp, 8
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s1, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 48
	fld.s	$fa1, $fp, 184
	fsub.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $fp, 184
	fld.s	$fa0, $a0, 52
	fld.s	$fa1, $fp, 188
	fsub.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $fp, 188
	fld.s	$fa0, $a0, 56
	fld.s	$fa1, $fp, 192
	fsub.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $fp, 192
	ld.b	$a0, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	beqz	$a0, .LBB121_34
.LBB121_10:                             # %_ZNK10btSoftBody4Body5xformEv.exit74
	ld.d	$a0, $fp, 48
	ld.d	$a1, $fp, 32
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s1, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 48
	fld.s	$fa1, $fp, 200
	fsub.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $fp, 200
	fld.s	$fa0, $a0, 52
	fld.s	$fa1, $fp, 204
	fsub.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $fp, 204
	fld.s	$fa0, $a0, 56
	fld.s	$fa1, $fp, 208
	ld.d	$a0, $fp, 16
	fsub.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $fp, 208
	beqz	$a0, .LBB121_12
# %bb.11:
	fld.s	$fa0, $a0, 360
	b	.LBB121_15
.LBB121_12:
	ld.d	$a0, $fp, 8
	beqz	$a0, .LBB121_14
# %bb.13:
	fld.s	$fa0, $a0, 164
	b	.LBB121_15
.LBB121_14:
	movgr2fr.w	$fa0, $zero
.LBB121_15:                             # %_ZNK10btSoftBody4Body7invMassEv.exit
	pcalau12i	$s2, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	ld.b	$a0, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$s1, $a1, %pc_lo12(_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	beqz	$a0, .LBB121_37
.LBB121_16:                             # %_ZNK10btSoftBody4Body15invWorldInertiaEv.exit
	ld.d	$a0, $fp, 16
	ld.d	$a1, $fp, 8
	movgr2fr.w	$fs0, $zero
	sltui	$a3, $a0, 1
	addi.d	$a4, $a0, 280
	sltui	$a0, $a1, 1
	addi.d	$a1, $a1, 216
	masknez	$a1, $a1, $a0
	ld.d	$a2, $fp, 40
	maskeqz	$a0, $s1, $a0
	or	$a0, $a0, $a1
	maskeqz	$a0, $a0, $a3
	masknez	$a1, $a4, $a3
	beqz	$a2, .LBB121_18
# %bb.17:
	fld.s	$fa1, $a2, 360
	b	.LBB121_20
.LBB121_18:
	ld.d	$a2, $fp, 32
	fmov.s	$fa1, $fs0
	beqz	$a2, .LBB121_20
# %bb.19:
	fld.s	$fa1, $a2, 164
.LBB121_20:                             # %_ZNK10btSoftBody4Body7invMassEv.exit85
	ld.b	$a3, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a2, $fp, 184
	addi.d	$a4, $fp, 200
	or	$a1, $a0, $a1
	dbar	20
	beqz	$a3, .LBB121_39
.LBB121_21:                             # %_ZNK10btSoftBody4Body15invWorldInertiaEv.exit91
	ld.d	$a0, $fp, 40
	ld.d	$a3, $fp, 32
	sltui	$a5, $a0, 1
	addi.d	$a0, $a0, 280
	sltui	$a6, $a3, 1
	addi.d	$a3, $a3, 216
	masknez	$a3, $a3, $a6
	maskeqz	$a6, $s1, $a6
	or	$a3, $a6, $a3
	maskeqz	$a3, $a3, $a5
	masknez	$a0, $a0, $a5
	or	$a3, $a3, $a0
	addi.d	$a0, $sp, 16
	pcaddu18i	$ra, %call36(_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_)
	jirl	$ra, $ra, 0
	vld	$vr0, $sp, 16
	vst	$vr0, $fp, 132
	vld	$vr2, $sp, 32
	fld.s	$fa1, $fp, 96
	vld	$vr3, $sp, 48
	fld.s	$fa0, $fp, 100
	vst	$vr2, $fp, 148
	fcmp.clt.s	$fcc0, $fs0, $fa1
	vst	$vr3, $fp, 164
	bceqz	$fcc0, .LBB121_23
# %bb.22:
	fld.s	$fa2, $fp, 104
	fld.s	$fa3, $fp, 108
	fmul.s	$fa4, $fa1, $fa0
	fld.s	$fa5, $fp, 136
	fmul.s	$fa6, $fa1, $fa2
	fmul.s	$fa7, $fa1, $fa3
	fld.s	$ft0, $fp, 132
	fmul.s	$fa5, $fa6, $fa5
	fld.s	$ft1, $fp, 140
	fld.s	$ft2, $fp, 152
	fld.s	$ft3, $fp, 148
	fmadd.s	$fa5, $ft0, $fa4, $fa5
	fmadd.s	$fa5, $ft1, $fa7, $fa5
	fmul.s	$ft0, $fa6, $ft2
	fmadd.s	$ft0, $ft3, $fa4, $ft0
	fld.s	$ft1, $fp, 156
	fld.s	$ft2, $fp, 168
	fld.s	$ft3, $fp, 164
	fld.s	$ft4, $fp, 172
	fmadd.s	$ft0, $ft1, $fa7, $ft0
	fmul.s	$fa6, $fa6, $ft2
	fmadd.s	$fa4, $ft3, $fa4, $fa6
	fmadd.s	$fa4, $ft4, $fa7, $fa4
	movfr2gr.s	$a0, $fa5
	movfr2gr.s	$a1, $ft0
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa4
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 116
	st.d	$a1, $fp, 124
	vldi	$vr4, -1168
	fsub.s	$fa4, $fa4, $fa1
	fmul.s	$fa0, $fa4, $fa0
	fst.s	$fa0, $fp, 100
	fmul.s	$fa1, $fa4, $fa2
	fst.s	$fa1, $fp, 104
	fmul.s	$fa2, $fa4, $fa3
	fst.s	$fa2, $fp, 108
	b	.LBB121_24
.LBB121_23:                             # %_ZNK10btSoftBody4Body15invWorldInertiaEv.exit91._crit_edge
	fld.s	$fa1, $fp, 104
	fld.s	$fa2, $fp, 108
.LBB121_24:
	movgr2fr.w	$fa3, $s0
	ffint.s.w	$fa3, $fa3
	frecip.s	$fa3, $fa3
	fmul.s	$fa0, $fa3, $fa0
	fst.s	$fa0, $fp, 100
	fmul.s	$fa0, $fa3, $fa1
	fst.s	$fa0, $fp, 104
	fmul.s	$fa0, $fa3, $fa2
	fst.s	$fa0, $fp, 108
	fld.d	$fs2, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 80                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB121_25:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB121_5
# %bb.26:
.Ltmp403:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp404:                               # EH_LABEL
# %bb.27:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s1, 0
	vst	$vr1, $s1, 16
	vst	$vr2, $s1, 32
	vst	$vr3, $s1, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB121_5
.LBB121_28:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB121_6
# %bb.29:
.Ltmp406:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp407:                               # EH_LABEL
# %bb.30:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s1, 0
	vst	$vr1, $s1, 16
	vst	$vr2, $s1, 32
	vst	$vr3, $s1, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB121_6
.LBB121_31:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB121_9
# %bb.32:
.Ltmp409:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp410:                               # EH_LABEL
# %bb.33:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s1, 0
	vst	$vr1, $s1, 16
	vst	$vr2, $s1, 32
	vst	$vr3, $s1, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB121_9
.LBB121_34:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB121_10
# %bb.35:
.Ltmp412:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp413:                               # EH_LABEL
# %bb.36:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s1, 0
	vst	$vr1, $s1, 16
	vst	$vr2, $s1, 32
	vst	$vr3, $s1, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB121_10
.LBB121_37:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	fmov.s	$fs0, $fa0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	fmov.s	$fa0, $fs0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB121_16
# %bb.38:
	vrepli.b	$vr0, 0
	vst	$vr0, $s1, 32
	vst	$vr0, $s1, 16
	vst	$vr0, $s1, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	fmov.s	$fa0, $fs0
	b	.LBB121_16
.LBB121_39:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	fmov.s	$fs1, $fa0
	fmov.s	$fs2, $fa1
	move	$s3, $a4
	move	$s4, $a2
	move	$s2, $a1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	move	$a1, $s2
	move	$a2, $s4
	move	$a4, $s3
	fmov.s	$fa1, $fs2
	fmov.s	$fa0, $fs1
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB121_21
# %bb.40:
	vrepli.b	$vr0, 0
	vst	$vr0, $s1, 32
	vst	$vr0, $s1, 16
	vst	$vr0, $s1, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	move	$a1, $s2
	move	$a2, $s4
	move	$a4, $s3
	fmov.s	$fa1, $fs2
	fmov.s	$fa0, $fs1
	b	.LBB121_21
.LBB121_41:
.Ltmp414:                               # EH_LABEL
	b	.LBB121_45
.LBB121_42:
.Ltmp411:                               # EH_LABEL
	b	.LBB121_45
.LBB121_43:
.Ltmp408:                               # EH_LABEL
	b	.LBB121_45
.LBB121_44:
.Ltmp405:                               # EH_LABEL
.LBB121_45:                             # %common.resume
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end121:
	.size	_ZN10btSoftBody6LJoint7PrepareEfi, .Lfunc_end121-_ZN10btSoftBody6LJoint7PrepareEfi
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table121:
.Lexception14:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end14-.Lcst_begin14
.Lcst_begin14:
	.uleb128 .Lfunc_begin14-.Lfunc_begin14  # >> Call Site 1 <<
	.uleb128 .Ltmp403-.Lfunc_begin14        #   Call between .Lfunc_begin14 and .Ltmp403
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp403-.Lfunc_begin14        # >> Call Site 2 <<
	.uleb128 .Ltmp404-.Ltmp403              #   Call between .Ltmp403 and .Ltmp404
	.uleb128 .Ltmp405-.Lfunc_begin14        #     jumps to .Ltmp405
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp404-.Lfunc_begin14        # >> Call Site 3 <<
	.uleb128 .Ltmp406-.Ltmp404              #   Call between .Ltmp404 and .Ltmp406
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp406-.Lfunc_begin14        # >> Call Site 4 <<
	.uleb128 .Ltmp407-.Ltmp406              #   Call between .Ltmp406 and .Ltmp407
	.uleb128 .Ltmp408-.Lfunc_begin14        #     jumps to .Ltmp408
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp407-.Lfunc_begin14        # >> Call Site 5 <<
	.uleb128 .Ltmp409-.Ltmp407              #   Call between .Ltmp407 and .Ltmp409
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp409-.Lfunc_begin14        # >> Call Site 6 <<
	.uleb128 .Ltmp410-.Ltmp409              #   Call between .Ltmp409 and .Ltmp410
	.uleb128 .Ltmp411-.Lfunc_begin14        #     jumps to .Ltmp411
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp410-.Lfunc_begin14        # >> Call Site 7 <<
	.uleb128 .Ltmp412-.Ltmp410              #   Call between .Ltmp410 and .Ltmp412
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp412-.Lfunc_begin14        # >> Call Site 8 <<
	.uleb128 .Ltmp413-.Ltmp412              #   Call between .Ltmp412 and .Ltmp413
	.uleb128 .Ltmp414-.Lfunc_begin14        #     jumps to .Ltmp414
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp413-.Lfunc_begin14        # >> Call Site 9 <<
	.uleb128 .Lfunc_end121-.Ltmp413         #   Call between .Ltmp413 and .Lfunc_end121
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end14:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.p2align	5                               # -- Begin function _ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_
	.type	_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_,@function
_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_: # @_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_
# %bb.0:
	addi.d	$sp, $sp, -80
	fst.d	$fs0, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 64                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 16                   # 8-byte Folded Spill
	fld.s	$fa3, $a2, 8
	fld.s	$fa5, $a2, 0
	fld.s	$fa4, $a2, 4
	fneg.s	$fa6, $fa3
	fld.s	$ft0, $a1, 16
	fneg.s	$fa7, $fa5
	fneg.s	$ft1, $fa4
	fld.s	$ft2, $a1, 0
	fmul.s	$ft3, $ft0, $fa6
	movgr2fr.w	$fa2, $zero
	fld.s	$ft4, $a1, 32
	fld.s	$ft5, $a1, 20
	fld.s	$ft6, $a1, 4
	fmadd.s	$ft3, $ft2, $fa2, $ft3
	fmadd.s	$ft3, $ft4, $fa4, $ft3
	fmul.s	$ft7, $ft5, $fa6
	fmadd.s	$ft7, $ft6, $fa2, $ft7
	fld.s	$ft8, $a1, 36
	fld.s	$ft9, $a1, 24
	fld.s	$ft10, $a1, 8
	fld.s	$ft11, $a1, 40
	fmadd.s	$ft7, $ft8, $fa4, $ft7
	fmul.s	$ft12, $ft9, $fa6
	fmadd.s	$ft12, $ft10, $fa2, $ft12
	fmadd.s	$ft12, $ft11, $fa4, $ft12
	fmul.s	$ft13, $ft0, $fa2
	fmadd.s	$ft13, $ft2, $fa3, $ft13
	fmadd.s	$ft13, $ft4, $fa7, $ft13
	fmul.s	$ft14, $ft5, $fa2
	fmadd.s	$ft14, $ft6, $fa3, $ft14
	fmadd.s	$ft14, $ft8, $fa7, $ft14
	fmul.s	$ft15, $ft9, $fa2
	fmadd.s	$ft15, $ft10, $fa3, $ft15
	fmadd.s	$ft15, $ft11, $fa7, $ft15
	fmul.s	$ft0, $fa5, $ft0
	fmadd.s	$ft0, $ft2, $ft1, $ft0
	fmadd.s	$ft0, $ft4, $fa2, $ft0
	fmul.s	$ft2, $fa5, $ft5
	fmadd.s	$ft2, $ft6, $ft1, $ft2
	fmadd.s	$ft2, $ft8, $fa2, $ft2
	fmul.s	$ft4, $fa5, $ft9
	fmadd.s	$ft4, $ft10, $ft1, $ft4
	fmadd.s	$ft4, $ft11, $fa2, $ft4
	fmul.s	$ft5, $fa3, $ft7
	fmadd.s	$ft5, $ft3, $fa2, $ft5
	fmadd.s	$ft5, $ft1, $ft12, $ft5
	fmul.s	$ft6, $ft7, $fa2
	fmadd.s	$ft6, $fa6, $ft3, $ft6
	fmadd.s	$ft6, $fa5, $ft12, $ft6
	fmul.s	$ft7, $ft7, $fa7
	fmadd.s	$ft3, $fa4, $ft3, $ft7
	fmadd.s	$ft3, $ft12, $fa2, $ft3
	fmul.s	$ft7, $fa3, $ft14
	fmadd.s	$ft7, $ft13, $fa2, $ft7
	fmadd.s	$ft7, $ft1, $ft15, $ft7
	fmul.s	$ft8, $ft14, $fa2
	fmadd.s	$ft8, $fa6, $ft13, $ft8
	fmadd.s	$ft8, $fa5, $ft15, $ft8
	fmul.s	$ft9, $ft14, $fa7
	fmadd.s	$ft9, $fa4, $ft13, $ft9
	fmadd.s	$ft9, $ft15, $fa2, $ft9
	fmul.s	$fa3, $fa3, $ft2
	fmadd.s	$fa3, $ft0, $fa2, $fa3
	fmadd.s	$ft1, $ft1, $ft4, $fa3
	fmul.s	$fa3, $ft2, $fa2
	fmadd.s	$fa3, $fa6, $ft0, $fa3
	fmadd.s	$ft10, $fa5, $ft4, $fa3
	fmul.s	$fa3, $ft2, $fa7
	fmadd.s	$fa3, $fa4, $ft0, $fa3
	fmadd.s	$ft4, $ft4, $fa2, $fa3
	fsub.s	$fa3, $fa0, $ft5
	fsub.s	$fa4, $fa2, $ft6
	fsub.s	$fa5, $fa2, $ft3
	fsub.s	$fa6, $fa2, $ft7
	fsub.s	$fa7, $fa0, $ft8
	fsub.s	$ft0, $fa2, $ft9
	fsub.s	$ft1, $fa2, $ft1
	fsub.s	$ft2, $fa2, $ft10
	fld.s	$ft5, $a4, 8
	fsub.s	$fa0, $fa0, $ft4
	fld.s	$ft4, $a4, 0
	fld.s	$ft3, $a4, 4
	fneg.s	$ft6, $ft5
	fld.s	$ft8, $a3, 16
	fneg.s	$ft7, $ft4
	fneg.s	$ft9, $ft3
	fld.s	$ft10, $a3, 0
	fmul.s	$ft11, $ft8, $ft6
	fld.s	$ft12, $a3, 32
	fld.s	$ft13, $a3, 20
	fld.s	$ft14, $a3, 4
	fmadd.s	$ft11, $ft10, $fa2, $ft11
	fmadd.s	$ft11, $ft12, $ft3, $ft11
	fmul.s	$ft15, $ft13, $ft6
	fmadd.s	$ft15, $ft14, $fa2, $ft15
	fld.s	$fs0, $a3, 36
	fld.s	$fs1, $a3, 24
	fld.s	$fs2, $a3, 8
	fld.s	$fs3, $a3, 40
	fmadd.s	$ft15, $fs0, $ft3, $ft15
	fmul.s	$fs4, $fs1, $ft6
	fmadd.s	$fs4, $fs2, $fa2, $fs4
	fmadd.s	$fs4, $fs3, $ft3, $fs4
	fmul.s	$fs5, $ft8, $fa2
	fmadd.s	$fs5, $ft10, $ft5, $fs5
	fmadd.s	$fs5, $ft12, $ft7, $fs5
	fmul.s	$fs6, $ft13, $fa2
	fmadd.s	$fs6, $ft14, $ft5, $fs6
	fmadd.s	$fs6, $fs0, $ft7, $fs6
	fmul.s	$fs7, $fs1, $fa2
	fmadd.s	$fs7, $fs2, $ft5, $fs7
	fmadd.s	$fs7, $fs3, $ft7, $fs7
	fmul.s	$ft8, $ft4, $ft8
	fmadd.s	$ft8, $ft10, $ft9, $ft8
	fmadd.s	$ft8, $ft12, $fa2, $ft8
	fmul.s	$ft10, $ft4, $ft13
	fmadd.s	$ft10, $ft14, $ft9, $ft10
	fmadd.s	$ft10, $fs0, $fa2, $ft10
	fmul.s	$ft12, $ft4, $fs1
	fmadd.s	$ft12, $fs2, $ft9, $ft12
	fmadd.s	$ft12, $fs3, $fa2, $ft12
	fmul.s	$ft13, $ft5, $ft15
	fmadd.s	$ft13, $ft11, $fa2, $ft13
	fmadd.s	$ft13, $ft9, $fs4, $ft13
	fmul.s	$ft14, $ft15, $fa2
	fmadd.s	$ft14, $ft6, $ft11, $ft14
	fmadd.s	$ft14, $ft4, $fs4, $ft14
	fmul.s	$ft15, $ft15, $ft7
	fmadd.s	$ft11, $ft3, $ft11, $ft15
	fmadd.s	$ft11, $fs4, $fa2, $ft11
	fmul.s	$ft15, $ft5, $fs6
	fmadd.s	$ft15, $fs5, $fa2, $ft15
	fmadd.s	$ft15, $ft9, $fs7, $ft15
	fmul.s	$fs0, $fs6, $fa2
	fmadd.s	$fs0, $ft6, $fs5, $fs0
	fmadd.s	$fs0, $ft4, $fs7, $fs0
	fmul.s	$fs1, $fs6, $ft7
	fmadd.s	$fs1, $ft3, $fs5, $fs1
	fmadd.s	$fs1, $fs7, $fa2, $fs1
	fmul.s	$ft5, $ft5, $ft10
	fmadd.s	$ft5, $ft8, $fa2, $ft5
	fmadd.s	$ft5, $ft9, $ft12, $ft5
	fmul.s	$ft9, $ft10, $fa2
	fmadd.s	$ft6, $ft6, $ft8, $ft9
	fmadd.s	$ft4, $ft4, $ft12, $ft6
	fmul.s	$ft6, $ft10, $ft7
	fmadd.s	$ft3, $ft3, $ft8, $ft6
	fmadd.s	$ft3, $ft12, $fa2, $ft3
	fsub.s	$ft6, $fa1, $ft13
	fsub.s	$ft7, $fa2, $ft14
	fsub.s	$ft8, $fa2, $ft11
	fsub.s	$ft9, $fa2, $ft15
	fsub.s	$ft10, $fa1, $fs0
	fsub.s	$ft11, $fa2, $fs1
	fsub.s	$ft5, $fa2, $ft5
	fsub.s	$fa2, $fa2, $ft4
	fsub.s	$fa1, $fa1, $ft3
	fadd.s	$fa3, $fa3, $ft6
	fadd.s	$fa4, $fa4, $ft7
	fadd.s	$fa5, $fa5, $ft8
	fadd.s	$fa6, $fa6, $ft9
	fadd.s	$fa7, $fa7, $ft10
	fadd.s	$ft0, $ft0, $ft11
	fadd.s	$ft1, $ft1, $ft5
	fadd.s	$fa2, $ft2, $fa2
	fadd.s	$fa0, $fa0, $fa1
	fneg.s	$fa1, $fa2
	fmul.s	$ft2, $ft0, $fa1
	fmadd.s	$ft2, $fa7, $fa0, $ft2
	fneg.s	$ft3, $fa0
	fmul.s	$ft4, $fa6, $ft3
	fmadd.s	$ft4, $ft0, $ft1, $ft4
	fneg.s	$ft5, $ft1
	fmul.s	$ft6, $fa7, $ft5
	fmadd.s	$ft6, $fa6, $fa2, $ft6
	fmul.s	$ft7, $fa4, $ft4
	fmadd.s	$ft7, $fa3, $ft2, $ft7
	fmadd.s	$ft7, $fa5, $ft6, $ft7
	frecip.s	$ft7, $ft7
	fmul.s	$ft2, $ft2, $ft7
	fmul.s	$ft3, $fa4, $ft3
	fmadd.s	$fa2, $fa5, $fa2, $ft3
	fmul.s	$fa2, $fa2, $ft7
	fneg.s	$ft3, $fa7
	fmul.s	$ft3, $fa5, $ft3
	fmadd.s	$ft3, $fa4, $ft0, $ft3
	fmul.s	$ft3, $ft3, $ft7
	fmul.s	$ft4, $ft4, $ft7
	fmul.s	$ft5, $fa5, $ft5
	fmadd.s	$fa0, $fa3, $fa0, $ft5
	fmul.s	$fa0, $fa0, $ft7
	fneg.s	$ft0, $ft0
	fmul.s	$ft0, $fa3, $ft0
	fmadd.s	$fa5, $fa5, $fa6, $ft0
	fmul.s	$fa5, $fa5, $ft7
	fmul.s	$ft0, $ft6, $ft7
	fmul.s	$fa1, $fa3, $fa1
	fmadd.s	$fa1, $fa4, $ft1, $fa1
	fmul.s	$fa1, $fa1, $ft7
	fneg.s	$fa6, $fa6
	fmul.s	$fa4, $fa4, $fa6
	fmadd.s	$fa3, $fa3, $fa7, $fa4
	fmul.s	$fa3, $fa3, $ft7
	fst.s	$ft2, $a0, 0
	fst.s	$fa2, $a0, 4
	fst.s	$ft3, $a0, 8
	st.w	$zero, $a0, 12
	fst.s	$ft4, $a0, 16
	fst.s	$fa0, $a0, 20
	fst.s	$fa5, $a0, 24
	st.w	$zero, $a0, 28
	fst.s	$ft0, $a0, 32
	fst.s	$fa1, $a0, 36
	fst.s	$fa3, $a0, 40
	st.w	$zero, $a0, 44
	fld.d	$fs7, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 56                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 72                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.Lfunc_end122:
	.size	_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_, .Lfunc_end122-_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_
                                        # -- End function
	.globl	_ZN10btSoftBody6LJoint5SolveEff # -- Begin function _ZN10btSoftBody6LJoint5SolveEff
	.p2align	5
	.type	_ZN10btSoftBody6LJoint5SolveEff,@function
_ZN10btSoftBody6LJoint5SolveEff:        # @_ZN10btSoftBody6LJoint5SolveEff
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 120                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 112                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 104                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 96                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 56, -56
	.cfi_offset 57, -64
	.cfi_offset 58, -72
	.cfi_offset 59, -80
	fmov.s	$fs0, $fa1
	move	$s3, $a0
	addi.d	$s2, $a0, 8
	addi.d	$s1, $a0, 184
	move	$a0, $s2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body8velocityERK9btVector3)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fs1, $a0
	srli.d	$a0, $a0, 32
	movgr2fr.w	$fs2, $a0
	movgr2fr.w	$fs3, $a1
	addi.d	$s0, $s3, 32
	addi.d	$fp, $s3, 200
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body8velocityERK9btVector3)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $a0
	srli.d	$a0, $a0, 32
	movgr2fr.w	$fa1, $a0
	movgr2fr.w	$fa2, $a1
	fsub.s	$fa0, $fs1, $fa0
	fsub.s	$fa1, $fs2, $fa1
	fld.s	$fa3, $s3, 88
	fsub.s	$fa2, $fs3, $fa2
	vrepli.b	$vr4, 0
	vst	$vr4, $sp, 72
	fmul.s	$fa0, $fa0, $fa3
	fld.s	$fa4, $s3, 100
	fmul.s	$fa1, $fa3, $fa1
	fld.s	$fa5, $s3, 104
	fmul.s	$fa2, $fa2, $fa3
	fadd.s	$fa0, $fa4, $fa0
	fld.s	$fa3, $s3, 108
	fadd.s	$fa1, $fa1, $fa5
	fld.s	$fa4, $s3, 136
	fld.s	$fa5, $s3, 132
	fadd.s	$fa2, $fa2, $fa3
	fld.s	$fa3, $s3, 140
	fmul.s	$fa4, $fa1, $fa4
	fmadd.s	$fa4, $fa5, $fa0, $fa4
	fld.s	$fa5, $s3, 152
	fmadd.s	$fa3, $fa3, $fa2, $fa4
	fld.s	$fa4, $s3, 148
	fld.s	$fa6, $s3, 156
	fmul.s	$fa5, $fa1, $fa5
	fld.s	$fa7, $s3, 168
	fmadd.s	$fa4, $fa4, $fa0, $fa5
	fmadd.s	$fa4, $fa6, $fa2, $fa4
	fld.s	$fa5, $s3, 164
	fmul.s	$fa1, $fa1, $fa7
	fld.s	$fa6, $s3, 172
	ori	$a0, $zero, 1
	st.b	$a0, $sp, 88
	fmadd.s	$fa0, $fa5, $fa0, $fa1
	fmadd.s	$fa0, $fa6, $fa2, $fa0
	fmul.s	$fa1, $fs0, $fa3
	fmul.s	$fa2, $fs0, $fa4
	fmul.s	$fa0, $fs0, $fa0
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	move	$a2, $a0
	movfr2gr.s	$a3, $fa0
	bstrpick.d	$a4, $a3, 31, 0
	st.d	$a4, $sp, 64
	ld.d	$a4, $sp, 72
	ld.w	$a5, $sp, 88
	bstrins.d	$a2, $a1, 63, 32
	st.d	$a2, $sp, 16
	st.d	$a4, $sp, 32
	st.w	$a5, $sp, 48
	ld.w	$a1, $sp, 20
	lu12i.w	$a5, -524288
	lu32i.d	$a5, 0
	xor	$a0, $a0, $a5
	st.d	$a2, $sp, 56
	ld.wu	$a2, $sp, 80
	xor	$a1, $a1, $a5
	bstrins.d	$a0, $a1, 63, 32
	xor	$a1, $a3, $a5
	bstrpick.d	$a1, $a1, 31, 0
	ld.w	$a3, $sp, 36
	st.d	$a0, $sp, 16
	st.d	$a1, $sp, 24
	xor	$a1, $a4, $a5
	xor	$a3, $a3, $a5
	ld.bu	$a0, $sp, 48
	bstrins.d	$a1, $a3, 63, 32
	xor	$a2, $a2, $a5
	st.d	$a1, $sp, 32
	andi	$a1, $a0, 1
	st.d	$a2, $sp, 40
	beqz	$a1, .LBB123_2
# %bb.1:
	addi.d	$a1, $sp, 16
	move	$a0, $s2
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $sp, 48
.LBB123_2:
	andi	$a0, $a0, 2
	beqz	$a0, .LBB123_4
# %bb.3:
	addi.d	$a1, $sp, 32
	move	$a0, $s2
	move	$a2, $s1
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
.LBB123_4:                              # %_ZNK10btSoftBody4Body12applyImpulseERKNS_7ImpulseERK9btVector3.exit
	ld.bu	$a0, $sp, 88
	andi	$a1, $a0, 1
	beqz	$a1, .LBB123_6
# %bb.5:
	addi.d	$a1, $sp, 56
	move	$a0, $s0
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $sp, 88
.LBB123_6:
	andi	$a0, $a0, 2
	beqz	$a0, .LBB123_8
# %bb.7:
	addi.d	$a1, $sp, 72
	move	$a0, $s0
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
.LBB123_8:                              # %_ZNK10btSoftBody4Body12applyImpulseERKNS_7ImpulseERK9btVector3.exit57
	fld.d	$fs3, $sp, 96                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 104                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 112                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 120                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.Lfunc_end123:
	.size	_ZN10btSoftBody6LJoint5SolveEff, .Lfunc_end123-_ZN10btSoftBody6LJoint5SolveEff
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK10btSoftBody4Body8velocityERK9btVector3,"axG",@progbits,_ZNK10btSoftBody4Body8velocityERK9btVector3,comdat
	.weak	_ZNK10btSoftBody4Body8velocityERK9btVector3 # -- Begin function _ZNK10btSoftBody4Body8velocityERK9btVector3
	.p2align	5
	.type	_ZNK10btSoftBody4Body8velocityERK9btVector3,@function
_ZNK10btSoftBody4Body8velocityERK9btVector3: # @_ZNK10btSoftBody4Body8velocityERK9btVector3
	.cfi_startproc
# %bb.0:
	ld.d	$a2, $a0, 8
	beqz	$a2, .LBB124_3
# %bb.1:
	fld.s	$fa1, $a2, 328
	fld.s	$fa0, $a2, 332
	fld.s	$fa2, $a2, 336
	fld.s	$fa5, $a1, 4
	fld.s	$fa4, $a2, 352
	fld.s	$fa6, $a2, 348
	fld.s	$fa7, $a1, 8
	fneg.s	$fa3, $fa5
	fmul.s	$fa3, $fa4, $fa3
	fld.s	$ft0, $a2, 344
.LBB124_2:                              # %_ZNK10btSoftBody4Body15angularVelocityERK9btVector3.exit
	fld.s	$ft1, $a1, 0
	fmadd.s	$fa3, $fa6, $fa7, $fa3
	fneg.s	$fa7, $fa7
	fmul.s	$fa7, $ft0, $fa7
	fmadd.s	$fa4, $fa4, $ft1, $fa7
	fneg.s	$fa7, $ft1
	fmul.s	$fa6, $fa6, $fa7
	fmadd.s	$fa5, $ft0, $fa5, $fa6
	b	.LBB124_8
.LBB124_3:
	ld.d	$a2, $a0, 0
	movgr2fr.w	$fa3, $zero
	beqz	$a2, .LBB124_6
# %bb.4:
	fld.s	$fa1, $a2, 352
	fld.s	$fa0, $a2, 356
	ld.d	$a0, $a0, 0
	fld.s	$fa2, $a2, 360
	beqz	$a0, .LBB124_7
# %bb.5:
	fld.s	$fa5, $a1, 4
	fld.s	$fa4, $a0, 376
	fld.s	$fa6, $a0, 372
	fld.s	$fa7, $a1, 8
	fneg.s	$fa3, $fa5
	fmul.s	$fa3, $fa4, $fa3
	fld.s	$ft0, $a0, 368
	b	.LBB124_2
.LBB124_6:
	fmov.s	$fa0, $fa3
	fmov.s	$fa1, $fa3
	fmov.s	$fa2, $fa3
.LBB124_7:
	fmov.s	$fa4, $fa3
	fmov.s	$fa5, $fa3
.LBB124_8:                              # %_ZNK10btSoftBody4Body15angularVelocityERK9btVector3.exit
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa0, $fa0, $fa4
	fadd.s	$fa2, $fa2, $fa5
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa0
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa2
	bstrpick.d	$a1, $a1, 31, 0
	ret
.Lfunc_end124:
	.size	_ZNK10btSoftBody4Body8velocityERK9btVector3, .Lfunc_end124-_ZNK10btSoftBody4Body8velocityERK9btVector3
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody6LJoint9TerminateEf # -- Begin function _ZN10btSoftBody6LJoint9TerminateEf
	.p2align	5
	.type	_ZN10btSoftBody6LJoint9TerminateEf,@function
_ZN10btSoftBody6LJoint9TerminateEf:     # @_ZN10btSoftBody6LJoint9TerminateEf
	.cfi_startproc
# %bb.0:
	fld.s	$fa0, $a0, 96
	movgr2fr.w	$fa1, $zero
	fcmp.cule.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB125_2
# %bb.1:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	addi.d	$a3, $a0, 8
	addi.d	$fp, $a0, 116
	ld.wu	$a1, $a0, 116
	ld.w	$a2, $a0, 120
	ld.wu	$a4, $a0, 124
	lu12i.w	$a5, -524288
	lu32i.d	$a5, 0
	xor	$a1, $a1, $a5
	xor	$a2, $a2, $a5
	slli.d	$a2, $a2, 32
	or	$a1, $a2, $a1
	xor	$a2, $a4, $a5
	st.d	$a1, $sp, 8
	st.d	$a2, $sp, 16
	addi.d	$a2, $a0, 184
	addi.d	$a1, $sp, 8
	move	$s0, $a0
	move	$a0, $a3
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	addi.d	$a0, $s0, 32
	addi.d	$a2, $s0, 200
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
.LBB125_2:
	ret
.Lfunc_end125:
	.size	_ZN10btSoftBody6LJoint9TerminateEf, .Lfunc_end125-_ZN10btSoftBody6LJoint9TerminateEf
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_,"axG",@progbits,_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_,comdat
	.weak	_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_ # -- Begin function _ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_
	.p2align	5
	.type	_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_,@function
_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_: # @_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$s1, $a0
	ld.d	$a0, $a0, 8
	move	$fp, $a2
	move	$s0, $a1
	beqz	$a0, .LBB126_2
# %bb.1:
	move	$a1, $s0
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_ZN11btRigidBody12applyImpulseERK9btVector3S2_)
	jirl	$ra, $ra, 0
.LBB126_2:
	ld.d	$a0, $s1, 0
	beqz	$a0, .LBB126_4
# %bb.3:
	fld.s	$fa0, $s0, 0
	fld.s	$fa1, $a0, 164
	fld.s	$fa2, $s0, 4
	fld.s	$fa3, $s0, 8
	fmul.s	$fa4, $fa0, $fa1
	fmul.s	$fa5, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa3
	fld.s	$fa6, $fp, 8
	fld.s	$fa7, $fp, 4
	fneg.s	$ft0, $fa2
	fld.s	$ft1, $fp, 0
	fmul.s	$ft0, $fa6, $ft0
	fmadd.s	$ft0, $fa7, $fa3, $ft0
	fneg.s	$fa3, $fa3
	fmul.s	$fa3, $ft1, $fa3
	fmadd.s	$fa3, $fa6, $fa0, $fa3
	fneg.s	$fa0, $fa0
	fld.s	$fa6, $a0, 220
	fmul.s	$fa0, $fa7, $fa0
	fld.s	$fa7, $a0, 216
	fmadd.s	$fa0, $ft1, $fa2, $fa0
	fmul.s	$fa2, $fa6, $fa3
	fld.s	$fa6, $a0, 236
	fmadd.s	$fa2, $fa7, $ft0, $fa2
	fld.s	$fa7, $a0, 232
	fld.s	$ft1, $a0, 252
	fmul.s	$fa6, $fa3, $fa6
	fld.s	$ft2, $a0, 248
	fmadd.s	$fa6, $fa7, $ft0, $fa6
	fmul.s	$fa3, $fa3, $ft1
	fld.s	$fa7, $a0, 224
	fmadd.s	$fa3, $ft2, $ft0, $fa3
	fld.s	$ft0, $a0, 240
	fld.s	$ft1, $a0, 256
	fmadd.s	$fa2, $fa7, $fa0, $fa2
	fld.s	$fa7, $a0, 312
	fmadd.s	$fa6, $ft0, $fa0, $fa6
	fmadd.s	$fa0, $ft1, $fa0, $fa3
	fld.s	$fa3, $a0, 316
	fadd.s	$fa4, $fa4, $fa7
	fst.s	$fa4, $a0, 312
	fld.s	$fa4, $a0, 320
	fadd.s	$fa3, $fa5, $fa3
	fst.s	$fa3, $a0, 316
	fld.s	$fa3, $a0, 328
	fadd.s	$fa1, $fa1, $fa4
	fst.s	$fa1, $a0, 320
	fld.s	$fa1, $a0, 332
	fadd.s	$fa2, $fa2, $fa3
	fst.s	$fa2, $a0, 328
	fld.s	$fa2, $a0, 336
	fadd.s	$fa1, $fa6, $fa1
	ld.w	$a1, $a0, 348
	fst.s	$fa1, $a0, 332
	fadd.s	$fa0, $fa0, $fa2
	fst.s	$fa0, $a0, 336
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 348
.LBB126_4:
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end126:
	.size	_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_, .Lfunc_end126-_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody6AJoint7PrepareEfi
.LCPI127_0:
	.word	0x34000000                      # float 1.1920929E-7
.LCPI127_1:
	.word	0x3e490fdb                      # float 0.196349546
	.text
	.globl	_ZN10btSoftBody6AJoint7PrepareEfi
	.p2align	5
	.type	_ZN10btSoftBody6AJoint7PrepareEfi,@function
_ZN10btSoftBody6AJoint7PrepareEfi:      # @_ZN10btSoftBody6AJoint7PrepareEfi
.Lfunc_begin15:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception15
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	fst.d	$fs0, $sp, 0                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 56, -48
	move	$fp, $a0
	ld.d	$a0, $a0, 216
	ld.d	$a2, $a0, 0
	ld.d	$a2, $a2, 0
	move	$s0, $a1
	fmov.s	$fs0, $fa0
	move	$a1, $fp
	jirl	$ra, $a2, 0
	ld.d	$a0, $fp, 16
	beqz	$a0, .LBB127_2
# %bb.1:
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN17btCollisionObject8activateEb)
	jirl	$ra, $ra, 0
.LBB127_2:                              # %_ZNK10btSoftBody4Body8activateEv.exit.i
	ld.d	$a0, $fp, 40
	beqz	$a0, .LBB127_4
# %bb.3:
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN17btCollisionObject8activateEb)
	jirl	$ra, $ra, 0
.LBB127_4:                              # %_ZN10btSoftBody5Joint7PrepareEfi.exit
	pcalau12i	$s2, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	ld.b	$a0, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$s1, $a1, %pc_lo12(_ZZNK10btSoftBody4Body5xformEvE8identity)
	beqz	$a0, .LBB127_14
.LBB127_5:                              # %_ZNK10btSoftBody4Body5xformEv.exit
	ld.d	$a0, $fp, 24
	ld.d	$a1, $fp, 8
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s1, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 4
	fld.s	$fa1, $fp, 60
	fld.s	$fa2, $a0, 0
	fld.s	$fa3, $fp, 56
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa4, $a0, 8
	fld.s	$fa5, $fp, 64
	fld.s	$fa6, $a0, 20
	fld.s	$fa7, $a0, 16
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fmul.s	$fa2, $fa1, $fa6
	fmadd.s	$fa2, $fa7, $fa3, $fa2
	fld.s	$fa4, $a0, 24
	fld.s	$fa6, $a0, 36
	fld.s	$fa7, $a0, 32
	fld.s	$ft0, $a0, 40
	fmadd.s	$fa2, $fa4, $fa5, $fa2
	fmul.s	$fa1, $fa1, $fa6
	fmadd.s	$fa1, $fa7, $fa3, $fa1
	fmadd.s	$fa1, $ft0, $fa5, $fa1
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa2
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa1
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 184
	st.d	$a1, $fp, 192
	ld.b	$a0, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	beqz	$a0, .LBB127_17
.LBB127_6:                              # %_ZNK10btSoftBody4Body5xformEv.exit35
	ld.d	$a0, $fp, 48
	ld.d	$a1, $fp, 32
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s1, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 4
	fld.s	$fa2, $fp, 76
	fld.s	$fa1, $a0, 0
	fld.s	$fa3, $fp, 72
	fmul.s	$fa0, $fa0, $fa2
	fld.s	$fa4, $a0, 8
	fld.s	$fa5, $fp, 80
	fld.s	$fa6, $a0, 20
	fld.s	$fa7, $a0, 16
	fmadd.s	$fa0, $fa1, $fa3, $fa0
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fmul.s	$fa1, $fa2, $fa6
	fmadd.s	$fa1, $fa7, $fa3, $fa1
	fld.s	$fa4, $a0, 24
	fld.s	$fa6, $a0, 36
	fld.s	$fa7, $a0, 32
	fld.s	$ft0, $a0, 40
	fmadd.s	$fa1, $fa4, $fa5, $fa1
	fmul.s	$fa2, $fa2, $fa6
	fmadd.s	$fa2, $fa7, $fa3, $fa2
	fmadd.s	$fa2, $ft0, $fa5, $fa2
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa2
	fld.s	$fa3, $fp, 188
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 200
	fld.s	$fa4, $fp, 192
	fneg.s	$fa5, $fa3
	fmul.s	$fa6, $fa2, $fa5
	fld.s	$fa5, $fp, 184
	fmadd.s	$fa6, $fa1, $fa4, $fa6
	fneg.s	$fa7, $fa4
	fmul.s	$fa7, $fa0, $fa7
	fmadd.s	$fa7, $fa2, $fa5, $fa7
	fneg.s	$ft0, $fa5
	fmul.s	$ft0, $fa1, $ft0
	fmadd.s	$ft0, $fa0, $fa3, $ft0
	fmul.s	$ft1, $fa7, $fa7
	pcalau12i	$a0, %pc_hi20(.LCPI127_0)
	fld.s	$ft2, $a0, %pc_lo12(.LCPI127_0)
	fmadd.s	$ft1, $fa6, $fa6, $ft1
	fmadd.s	$ft1, $ft0, $ft0, $ft1
	fsqrt.s	$ft1, $ft1
	fcmp.cule.s	$fcc0, $ft1, $ft2
	st.d	$a1, $fp, 208
	bcnez	$fcc0, .LBB127_8
# %bb.7:
	frecip.s	$ft1, $ft1
	fmul.s	$fa6, $fa6, $ft1
	fmul.s	$fa7, $fa7, $ft1
	fmul.s	$ft0, $ft0, $ft1
	movfr2gr.s	$s2, $fa6
	movfr2gr.s	$a0, $fa7
	bstrins.d	$s2, $a0, 63, 32
	movfr2gr.s	$a0, $ft0
	bstrpick.d	$s1, $a0, 31, 0
	b	.LBB127_9
.LBB127_8:
	move	$s1, $zero
	move	$s2, $zero
.LBB127_9:                              # %_ZL12NormalizeAnyRK9btVector3.exit
	st.d	$s1, $fp, 108
	fmul.s	$fa1, $fa1, $fa3
	fmadd.s	$fa0, $fa5, $fa0, $fa1
	fmadd.s	$fa0, $fa4, $fa2, $fa0
	vldi	$vr1, -1168
	fcmp.clt.s	$fcc0, $fa1, $fa0
	fsel	$fa1, $fa0, $fa1, $fcc0
	vldi	$vr2, -1040
	fcmp.clt.s	$fcc0, $fa0, $fa2
	fsel	$fa0, $fa1, $fa2, $fcc0
	pcaddu18i	$ra, %call36(acosf)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(.LCPI127_1)
	fld.s	$fa1, $a0, %pc_lo12(.LCPI127_1)
	fcmp.clt.s	$fcc0, $fa1, $fa0
	fsel	$fa0, $fa0, $fa1, $fcc0
	movgr2fr.w	$fa1, $s2
	fmul.s	$fa1, $fa0, $fa1
	srli.d	$a0, $s2, 32
	movgr2fr.w	$fa2, $a0
	fld.s	$fa3, $fp, 92
	fmul.s	$fa2, $fa0, $fa2
	movgr2fr.w	$fa4, $s1
	fmul.s	$fa0, $fa0, $fa4
	fdiv.s	$fa3, $fa3, $fs0
	fmul.s	$fa1, $fa1, $fa3
	fst.s	$fa1, $fp, 100
	fmul.s	$fa1, $fa2, $fa3
	fst.s	$fa1, $fp, 104
	fmul.s	$fa0, $fa0, $fa3
	fst.s	$fa0, $fp, 108
	pcalau12i	$s2, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	ld.b	$a0, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$s1, $a1, %pc_lo12(_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	beqz	$a0, .LBB127_20
.LBB127_10:                             # %_ZNK10btSoftBody4Body15invWorldInertiaEv.exit
	ld.d	$a0, $fp, 16
	ld.d	$a1, $fp, 8
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 280
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 216
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s1, $a3
	or	$a1, $a3, $a1
	ld.b	$a3, $s2, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$s2, $a1, $a0
	dbar	20
	beqz	$a3, .LBB127_22
.LBB127_11:                             # %_ZNK10btSoftBody4Body15invWorldInertiaEv.exit56
	ld.d	$a0, $fp, 40
	ld.d	$a1, $fp, 32
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 280
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 216
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s1, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $s2, 0
	fld.s	$fa1, $a0, 0
	fadd.s	$fa0, $fa0, $fa1
	fld.s	$fa1, $s2, 4
	fld.s	$fa2, $a0, 4
	fld.s	$fa3, $s2, 8
	fld.s	$fa4, $a0, 8
	fld.s	$fa5, $s2, 16
	fld.s	$fa6, $a0, 16
	fld.s	$fa7, $s2, 20
	fld.s	$ft0, $a0, 20
	fadd.s	$fa1, $fa1, $fa2
	fadd.s	$fa2, $fa3, $fa4
	fadd.s	$ft3, $fa5, $fa6
	fadd.s	$ft4, $fa7, $ft0
	fld.s	$fa3, $s2, 24
	fld.s	$fa4, $a0, 24
	fld.s	$fa5, $s2, 32
	fld.s	$fa6, $a0, 32
	fld.s	$fa7, $s2, 36
	fld.s	$ft0, $a0, 36
	fld.s	$ft1, $s2, 40
	fld.s	$ft2, $a0, 40
	fadd.s	$ft5, $fa3, $fa4
	fadd.s	$ft6, $fa5, $fa6
	fadd.s	$fa4, $fa7, $ft0
	fadd.s	$fa7, $ft1, $ft2
	fneg.s	$ft2, $fa4
	fmul.s	$fa3, $ft5, $ft2
	fmadd.s	$fa3, $ft4, $fa7, $fa3
	fneg.s	$fa5, $fa7
	fmul.s	$fa6, $ft3, $fa5
	fmadd.s	$ft0, $ft5, $ft6, $fa6
	fneg.s	$ft1, $ft6
	fmul.s	$fa6, $ft4, $ft1
	fmadd.s	$ft7, $ft3, $fa4, $fa6
	fmul.s	$fa6, $fa1, $ft0
	fmadd.s	$fa6, $fa0, $fa3, $fa6
	fmadd.s	$fa6, $fa2, $ft7, $fa6
	frecip.s	$ft8, $fa6
	fmul.s	$fa3, $fa3, $ft8
	fmul.s	$fa5, $fa1, $fa5
	fmadd.s	$fa4, $fa2, $fa4, $fa5
	fmul.s	$fa4, $fa4, $ft8
	fneg.s	$fa5, $ft4
	fmul.s	$fa5, $fa2, $fa5
	fmadd.s	$fa5, $fa1, $ft5, $fa5
	fmul.s	$fa6, $fa5, $ft8
	fmul.s	$fa5, $ft0, $ft8
	fmul.s	$ft0, $fa2, $ft1
	fmadd.s	$fa7, $fa0, $fa7, $ft0
	fmul.s	$fa7, $fa7, $ft8
	fneg.s	$ft0, $ft5
	fmul.s	$ft0, $fa0, $ft0
	fmadd.s	$fa2, $fa2, $ft3, $ft0
	fmul.s	$ft1, $fa2, $ft8
	fmul.s	$ft0, $ft7, $ft8
	fmul.s	$fa2, $fa0, $ft2
	fmadd.s	$fa2, $fa1, $ft6, $fa2
	fmul.s	$ft2, $fa2, $ft8
	fneg.s	$fa2, $ft3
	fmul.s	$fa1, $fa1, $fa2
	fmadd.s	$fa0, $fa0, $ft4, $fa1
	fmul.s	$ft3, $fa0, $ft8
	fst.s	$fa3, $fp, 132
	fst.s	$fa4, $fp, 136
	fst.s	$fa6, $fp, 140
	st.w	$zero, $fp, 144
	fst.s	$fa5, $fp, 148
	fst.s	$fa7, $fp, 152
	fst.s	$ft1, $fp, 156
	st.w	$zero, $fp, 160
	fst.s	$ft0, $fp, 164
	fst.s	$ft2, $fp, 168
	fst.s	$ft3, $fp, 172
	fld.s	$ft4, $fp, 96
	fld.s	$fa2, $fp, 100
	fld.s	$fa1, $fp, 104
	fld.s	$fa0, $fp, 108
	movgr2fr.w	$ft5, $zero
	fcmp.cule.s	$fcc0, $ft4, $ft5
	st.w	$zero, $fp, 176
	bcnez	$fcc0, .LBB127_13
# %bb.12:
	fmul.s	$ft5, $ft4, $fa2
	fmul.s	$ft6, $ft4, $fa1
	fmul.s	$ft7, $ft4, $fa0
	fmul.s	$fa4, $fa4, $ft6
	fmadd.s	$fa3, $fa3, $ft5, $fa4
	fmadd.s	$fa3, $fa6, $ft7, $fa3
	fmul.s	$fa4, $ft6, $fa7
	fmadd.s	$fa4, $fa5, $ft5, $fa4
	fmadd.s	$fa4, $ft1, $ft7, $fa4
	fmul.s	$fa5, $ft6, $ft2
	fmadd.s	$fa5, $ft0, $ft5, $fa5
	fmadd.s	$fa5, $ft3, $ft7, $fa5
	movfr2gr.s	$a0, $fa3
	movfr2gr.s	$a1, $fa4
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa5
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 116
	st.d	$a1, $fp, 124
	vldi	$vr3, -1168
	fsub.s	$fa3, $fa3, $ft4
	fmul.s	$fa2, $fa3, $fa2
	fst.s	$fa2, $fp, 100
	fmul.s	$fa1, $fa3, $fa1
	fst.s	$fa1, $fp, 104
	fmul.s	$fa0, $fa3, $fa0
	fst.s	$fa0, $fp, 108
.LBB127_13:
	movgr2fr.w	$fa3, $s0
	ffint.s.w	$fa3, $fa3
	frecip.s	$fa3, $fa3
	fmul.s	$fa2, $fa3, $fa2
	fst.s	$fa2, $fp, 100
	fmul.s	$fa1, $fa3, $fa1
	fst.s	$fa1, $fp, 104
	fmul.s	$fa0, $fa3, $fa0
	fst.s	$fa0, $fp, 108
	fld.d	$fs0, $sp, 0                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.LBB127_14:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB127_5
# %bb.15:
.Ltmp415:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp416:                               # EH_LABEL
# %bb.16:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s1, 0
	vst	$vr1, $s1, 16
	vst	$vr2, $s1, 32
	vst	$vr3, $s1, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB127_5
.LBB127_17:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB127_6
# %bb.18:
.Ltmp418:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp419:                               # EH_LABEL
# %bb.19:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s1, 0
	vst	$vr1, $s1, 16
	vst	$vr2, $s1, 32
	vst	$vr3, $s1, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB127_6
.LBB127_20:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB127_10
# %bb.21:
	vrepli.b	$vr0, 0
	vst	$vr0, $s1, 32
	vst	$vr0, $s1, 16
	vst	$vr0, $s1, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB127_10
.LBB127_22:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB127_11
# %bb.23:
	vrepli.b	$vr0, 0
	vst	$vr0, $s1, 32
	vst	$vr0, $s1, 16
	vst	$vr0, $s1, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB127_11
.LBB127_24:
.Ltmp420:                               # EH_LABEL
	b	.LBB127_26
.LBB127_25:
.Ltmp417:                               # EH_LABEL
.LBB127_26:                             # %common.resume
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end127:
	.size	_ZN10btSoftBody6AJoint7PrepareEfi, .Lfunc_end127-_ZN10btSoftBody6AJoint7PrepareEfi
	.cfi_endproc
	.section	.gcc_except_table,"a",@progbits
	.p2align	2, 0x0
GCC_except_table127:
.Lexception15:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end15-.Lcst_begin15
.Lcst_begin15:
	.uleb128 .Lfunc_begin15-.Lfunc_begin15  # >> Call Site 1 <<
	.uleb128 .Ltmp415-.Lfunc_begin15        #   Call between .Lfunc_begin15 and .Ltmp415
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp415-.Lfunc_begin15        # >> Call Site 2 <<
	.uleb128 .Ltmp416-.Ltmp415              #   Call between .Ltmp415 and .Ltmp416
	.uleb128 .Ltmp417-.Lfunc_begin15        #     jumps to .Ltmp417
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp416-.Lfunc_begin15        # >> Call Site 3 <<
	.uleb128 .Ltmp418-.Ltmp416              #   Call between .Ltmp416 and .Ltmp418
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp418-.Lfunc_begin15        # >> Call Site 4 <<
	.uleb128 .Ltmp419-.Ltmp418              #   Call between .Ltmp418 and .Ltmp419
	.uleb128 .Ltmp420-.Lfunc_begin15        #     jumps to .Ltmp420
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp419-.Lfunc_begin15        # >> Call Site 5 <<
	.uleb128 .Lfunc_end127-.Ltmp419         #   Call between .Ltmp419 and .Lfunc_end127
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end15:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody6AJoint5SolveEff # -- Begin function _ZN10btSoftBody6AJoint5SolveEff
	.p2align	5
	.type	_ZN10btSoftBody6AJoint5SolveEff,@function
_ZN10btSoftBody6AJoint5SolveEff:        # @_ZN10btSoftBody6AJoint5SolveEff
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	st.d	$ra, $sp, 152                   # 8-byte Folded Spill
	st.d	$fp, $sp, 144                   # 8-byte Folded Spill
	st.d	$s0, $sp, 136                   # 8-byte Folded Spill
	st.d	$s1, $sp, 128                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 120                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 112                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 104                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 96                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 56, -40
	.cfi_offset 57, -48
	.cfi_offset 58, -56
	.cfi_offset 59, -64
	move	$s1, $a0
	ld.d	$a0, $a0, 16
	fmov.s	$fs0, $fa1
	addi.d	$fp, $s1, 8
	beqz	$a0, .LBB128_2
# %bb.1:
	fld.s	$fa1, $a0, 344
	fld.s	$fa2, $a0, 348
	fld.s	$fa0, $a0, 352
	b	.LBB128_5
.LBB128_2:
	ld.d	$a0, $fp, 0
	beqz	$a0, .LBB128_4
# %bb.3:
	fld.s	$fa1, $a0, 368
	fld.s	$fa2, $a0, 372
	fld.s	$fa0, $a0, 376
	b	.LBB128_5
.LBB128_4:
	movgr2fr.w	$fa0, $zero
	fmov.s	$fa1, $fa0
	fmov.s	$fa2, $fa0
.LBB128_5:                              # %_ZNK10btSoftBody4Body15angularVelocityEv.exit
	ld.d	$a0, $s1, 40
	addi.d	$s0, $s1, 32
	beqz	$a0, .LBB128_7
# %bb.6:
	fld.s	$fa4, $a0, 344
	fld.s	$fa5, $a0, 348
	fld.s	$fa3, $a0, 352
	b	.LBB128_10
.LBB128_7:
	ld.d	$a0, $s0, 0
	beqz	$a0, .LBB128_9
# %bb.8:
	fld.s	$fa4, $a0, 368
	fld.s	$fa5, $a0, 372
	fld.s	$fa3, $a0, 376
	b	.LBB128_10
.LBB128_9:
	movgr2fr.w	$fa3, $zero
	fmov.s	$fa4, $fa3
	fmov.s	$fa5, $fa3
.LBB128_10:                             # %_ZNK10btSoftBody4Body15angularVelocityEv.exit64
	ld.d	$a0, $s1, 216
	fsub.s	$fs1, $fa1, $fa4
	fsub.s	$fs2, $fa2, $fa5
	fsub.s	$fs3, $fa0, $fa3
	ld.d	$a1, $a0, 0
	fld.s	$fa0, $s1, 188
	fld.s	$fa1, $s1, 184
	fld.s	$fa2, $s1, 192
	ld.d	$a2, $a1, 8
	fmul.s	$fa0, $fs2, $fa0
	fmadd.s	$fa0, $fs1, $fa1, $fa0
	fmadd.s	$fa0, $fs3, $fa2, $fa0
	move	$a1, $s1
	jirl	$ra, $a2, 0
	fld.s	$fa1, $s1, 184
	fld.s	$fa2, $s1, 188
	fld.s	$fa3, $s1, 192
	fmul.s	$fa1, $fa0, $fa1
	fmul.s	$fa2, $fa0, $fa2
	fmul.s	$fa0, $fa0, $fa3
	fsub.s	$fa1, $fs1, $fa1
	fsub.s	$fa2, $fs2, $fa2
	fld.s	$fa3, $s1, 88
	fsub.s	$fa0, $fs3, $fa0
	vrepli.b	$vr4, 0
	vst	$vr4, $sp, 72
	fmul.s	$fa1, $fa1, $fa3
	fld.s	$fa4, $s1, 100
	fmul.s	$fa2, $fa2, $fa3
	fld.s	$fa5, $s1, 104
	fmul.s	$fa0, $fa0, $fa3
	fadd.s	$fa1, $fa4, $fa1
	fld.s	$fa3, $s1, 108
	fadd.s	$fa2, $fa2, $fa5
	fld.s	$fa4, $s1, 136
	fld.s	$fa5, $s1, 132
	fadd.s	$fa0, $fa0, $fa3
	fld.s	$fa3, $s1, 140
	fmul.s	$fa4, $fa2, $fa4
	fmadd.s	$fa4, $fa5, $fa1, $fa4
	fld.s	$fa5, $s1, 152
	fmadd.s	$fa3, $fa3, $fa0, $fa4
	fld.s	$fa4, $s1, 148
	fld.s	$fa6, $s1, 156
	fmul.s	$fa5, $fa2, $fa5
	fld.s	$fa7, $s1, 168
	fmadd.s	$fa4, $fa4, $fa1, $fa5
	fmadd.s	$fa4, $fa6, $fa0, $fa4
	fld.s	$fa5, $s1, 164
	fmul.s	$fa2, $fa2, $fa7
	fld.s	$fa6, $s1, 172
	ori	$a0, $zero, 1
	st.b	$a0, $sp, 88
	fmadd.s	$fa1, $fa5, $fa1, $fa2
	fmadd.s	$fa0, $fa6, $fa0, $fa1
	fmul.s	$fa1, $fs0, $fa3
	fmul.s	$fa2, $fs0, $fa4
	fmul.s	$fa0, $fs0, $fa0
	movfr2gr.s	$a0, $fa1
	movfr2gr.s	$a1, $fa2
	move	$a2, $a0
	movfr2gr.s	$a3, $fa0
	bstrpick.d	$a4, $a3, 31, 0
	st.d	$a4, $sp, 64
	ld.d	$a4, $sp, 72
	ld.w	$a5, $sp, 88
	bstrins.d	$a2, $a1, 63, 32
	st.d	$a2, $sp, 16
	st.d	$a4, $sp, 32
	st.w	$a5, $sp, 48
	ld.w	$a1, $sp, 20
	lu12i.w	$a5, -524288
	lu32i.d	$a5, 0
	xor	$a0, $a0, $a5
	st.d	$a2, $sp, 56
	ld.wu	$a2, $sp, 80
	xor	$a1, $a1, $a5
	bstrins.d	$a0, $a1, 63, 32
	xor	$a1, $a3, $a5
	bstrpick.d	$a1, $a1, 31, 0
	ld.w	$a3, $sp, 36
	st.d	$a0, $sp, 16
	st.d	$a1, $sp, 24
	xor	$a1, $a4, $a5
	xor	$a3, $a3, $a5
	ld.bu	$a0, $sp, 48
	bstrins.d	$a1, $a3, 63, 32
	xor	$a2, $a2, $a5
	st.d	$a1, $sp, 32
	andi	$a1, $a0, 1
	st.d	$a2, $sp, 40
	beqz	$a1, .LBB128_12
# %bb.11:
	addi.d	$a1, $sp, 16
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $sp, 48
.LBB128_12:
	andi	$a0, $a0, 2
	beqz	$a0, .LBB128_14
# %bb.13:
	addi.d	$a1, $sp, 32
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3)
	jirl	$ra, $ra, 0
.LBB128_14:                             # %_ZNK10btSoftBody4Body13applyAImpulseERKNS_7ImpulseE.exit
	ld.bu	$a0, $sp, 88
	andi	$a1, $a0, 1
	beqz	$a1, .LBB128_16
# %bb.15:
	addi.d	$a1, $sp, 56
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $sp, 88
.LBB128_16:
	andi	$a0, $a0, 2
	beqz	$a0, .LBB128_18
# %bb.17:
	addi.d	$a1, $sp, 72
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3)
	jirl	$ra, $ra, 0
.LBB128_18:                             # %_ZNK10btSoftBody4Body13applyAImpulseERKNS_7ImpulseE.exit114
	fld.d	$fs3, $sp, 96                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 104                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 112                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 120                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 136                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 144                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 152                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.Lfunc_end128:
	.size	_ZN10btSoftBody6AJoint5SolveEff, .Lfunc_end128-_ZN10btSoftBody6AJoint5SolveEff
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody6AJoint9TerminateEf # -- Begin function _ZN10btSoftBody6AJoint9TerminateEf
	.p2align	5
	.type	_ZN10btSoftBody6AJoint9TerminateEf,@function
_ZN10btSoftBody6AJoint9TerminateEf:     # @_ZN10btSoftBody6AJoint9TerminateEf
	.cfi_startproc
# %bb.0:
	fld.s	$fa0, $a0, 96
	movgr2fr.w	$fa1, $zero
	fcmp.cule.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB129_2
# %bb.1:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	addi.d	$a2, $a0, 8
	addi.d	$fp, $a0, 116
	ld.wu	$a1, $a0, 116
	ld.w	$a3, $a0, 120
	ld.wu	$a4, $a0, 124
	lu12i.w	$a5, -524288
	lu32i.d	$a5, 0
	xor	$a1, $a1, $a5
	xor	$a3, $a3, $a5
	slli.d	$a3, $a3, 32
	or	$a1, $a3, $a1
	xor	$a3, $a4, $a5
	st.d	$a1, $sp, 8
	st.d	$a3, $sp, 16
	addi.d	$a1, $sp, 8
	move	$s0, $a0
	move	$a0, $a2
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3)
	jirl	$ra, $ra, 0
	addi.d	$a0, $s0, 32
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3)
	jirl	$ra, $ra, 0
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
.LBB129_2:
	ret
.Lfunc_end129:
	.size	_ZN10btSoftBody6AJoint9TerminateEf, .Lfunc_end129-_ZN10btSoftBody6AJoint9TerminateEf
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3,"axG",@progbits,_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3,comdat
	.weak	_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3 # -- Begin function _ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3
	.p2align	5
	.type	_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3,@function
_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3: # @_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3
	.cfi_startproc
# %bb.0:
	ld.d	$a2, $a0, 8
	beqz	$a2, .LBB130_2
# %bb.1:
	fld.s	$fa0, $a2, 284
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a2, 280
	fld.s	$fa3, $a1, 0
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa4, $a2, 288
	fld.s	$fa5, $a1, 8
	fld.s	$fa6, $a2, 300
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fld.s	$fa2, $a2, 296
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fmul.s	$fa4, $fa1, $fa6
	fld.s	$fa6, $a2, 304
	fmadd.s	$fa2, $fa2, $fa3, $fa4
	fld.s	$fa4, $a2, 316
	fld.s	$fa7, $a2, 312
	fmadd.s	$fa2, $fa6, $fa5, $fa2
	fld.s	$fa6, $a2, 320
	fmul.s	$fa1, $fa1, $fa4
	fmadd.s	$fa1, $fa7, $fa3, $fa1
	fld.s	$fa3, $a2, 364
	fmadd.s	$fa1, $fa6, $fa5, $fa1
	fld.s	$fa4, $a2, 368
	fld.s	$fa5, $a2, 372
	fmul.s	$fa0, $fa0, $fa3
	fld.s	$fa3, $a2, 344
	fmul.s	$fa2, $fa2, $fa4
	fmul.s	$fa1, $fa1, $fa5
	fld.s	$fa4, $a2, 348
	fadd.s	$fa0, $fa0, $fa3
	fld.s	$fa3, $a2, 352
	fst.s	$fa0, $a2, 344
	fadd.s	$fa0, $fa2, $fa4
	fst.s	$fa0, $a2, 348
	fadd.s	$fa0, $fa1, $fa3
	fst.s	$fa0, $a2, 352
.LBB130_2:
	ld.d	$a0, $a0, 0
	beqz	$a0, .LBB130_4
# %bb.3:
	fld.s	$fa0, $a0, 220
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a0, 216
	fld.s	$fa3, $a1, 0
	fld.s	$fa4, $a0, 236
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa5, $a0, 232
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fmul.s	$fa2, $fa1, $fa4
	fld.s	$fa4, $a0, 252
	fmadd.s	$fa2, $fa5, $fa3, $fa2
	fld.s	$fa5, $a0, 248
	fld.s	$fa6, $a0, 224
	fmul.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a1, 8
	fmadd.s	$fa1, $fa5, $fa3, $fa1
	fld.s	$fa3, $a0, 240
	fld.s	$fa5, $a0, 256
	fmadd.s	$fa0, $fa6, $fa4, $fa0
	fld.s	$fa6, $a0, 328
	fmadd.s	$fa2, $fa3, $fa4, $fa2
	fmadd.s	$fa1, $fa5, $fa4, $fa1
	fld.s	$fa3, $a0, 332
	fadd.s	$fa0, $fa0, $fa6
	fst.s	$fa0, $a0, 328
	fld.s	$fa0, $a0, 336
	fadd.s	$fa2, $fa2, $fa3
	ld.w	$a1, $a0, 348
	fst.s	$fa2, $a0, 332
	fadd.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $a0, 336
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 348
.LBB130_4:
	ret
.Lfunc_end130:
	.size	_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3, .Lfunc_end130-_ZNK10btSoftBody4Body14applyDAImpulseERK9btVector3
	.cfi_endproc
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody6CJoint7PrepareEfi # -- Begin function _ZN10btSoftBody6CJoint7PrepareEfi
	.p2align	5
	.type	_ZN10btSoftBody6CJoint7PrepareEfi,@function
_ZN10btSoftBody6CJoint7PrepareEfi:      # @_ZN10btSoftBody6CJoint7PrepareEfi
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	fst.d	$fs0, $sp, 0                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 56, -32
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	move	$s0, $a1
	fmov.s	$fs0, $fa0
	beqz	$a0, .LBB131_2
# %bb.1:
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN17btCollisionObject8activateEb)
	jirl	$ra, $ra, 0
.LBB131_2:                              # %_ZNK10btSoftBody4Body8activateEv.exit.i
	ld.d	$a0, $fp, 40
	beqz	$a0, .LBB131_4
# %bb.3:
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN17btCollisionObject8activateEb)
	jirl	$ra, $ra, 0
.LBB131_4:                              # %_ZN10btSoftBody5Joint7PrepareEfi.exit
	ld.w	$a0, $fp, 184
	ld.w	$a1, $fp, 188
	addi.d	$a2, $a0, 1
	st.w	$a2, $fp, 184
	slt	$a1, $a0, $a1
	xori	$a1, $a1, 1
	st.b	$a1, $fp, 180
	beqz	$a0, .LBB131_6
# %bb.5:
	addi.d	$a0, $fp, 100
	vrepli.b	$vr0, 0
	vst	$vr0, $a0, 16
	vst	$vr0, $a0, 0
	b	.LBB131_9
.LBB131_6:
	fld.s	$fa0, $fp, 100
	fld.s	$fa1, $fp, 92
	fld.s	$fa2, $fp, 104
	fld.s	$fa3, $fp, 108
	fmul.s	$fa0, $fa0, $fa1
	fmul.s	$fa4, $fa1, $fa2
	fmul.s	$fa3, $fa1, $fa3
	frecip.s	$fa5, $fs0
	fmul.s	$fa2, $fa5, $fa0
	fmul.s	$fa1, $fa5, $fa4
	fmul.s	$fa0, $fa5, $fa3
	fld.s	$fa3, $fp, 96
	movfr2gr.s	$a0, $fa0
	bstrpick.d	$a0, $a0, 31, 0
	movgr2fr.w	$fa4, $zero
	fcmp.cule.s	$fcc0, $fa3, $fa4
	st.d	$a0, $fp, 108
	bcnez	$fcc0, .LBB131_8
# %bb.7:
	fmul.s	$fa4, $fa3, $fa2
	fld.s	$fa5, $fp, 136
	fmul.s	$fa6, $fa3, $fa1
	fmul.s	$fa7, $fa3, $fa0
	fld.s	$ft0, $fp, 132
	fmul.s	$fa5, $fa6, $fa5
	fld.s	$ft1, $fp, 140
	fld.s	$ft2, $fp, 152
	fld.s	$ft3, $fp, 148
	fmadd.s	$fa5, $ft0, $fa4, $fa5
	fmadd.s	$fa5, $ft1, $fa7, $fa5
	fmul.s	$ft0, $fa6, $ft2
	fmadd.s	$ft0, $ft3, $fa4, $ft0
	fld.s	$ft1, $fp, 156
	fld.s	$ft2, $fp, 168
	fld.s	$ft3, $fp, 164
	fld.s	$ft4, $fp, 172
	fmadd.s	$ft0, $ft1, $fa7, $ft0
	fmul.s	$fa6, $fa6, $ft2
	fmadd.s	$fa4, $ft3, $fa4, $fa6
	fmadd.s	$fa4, $ft4, $fa7, $fa4
	movfr2gr.s	$a0, $fa5
	movfr2gr.s	$a1, $ft0
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa4
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 116
	st.d	$a1, $fp, 124
	vldi	$vr4, -1168
	fsub.s	$fa3, $fa4, $fa3
	fmul.s	$fa2, $fa3, $fa2
	fmul.s	$fa1, $fa3, $fa1
	fmul.s	$fa0, $fa3, $fa0
.LBB131_8:
	movgr2fr.w	$fa3, $s0
	ffint.s.w	$fa3, $fa3
	frecip.s	$fa3, $fa3
	fmul.s	$fa2, $fa3, $fa2
	fst.s	$fa2, $fp, 100
	fmul.s	$fa1, $fa3, $fa1
	fst.s	$fa1, $fp, 104
	fmul.s	$fa0, $fa3, $fa0
	fst.s	$fa0, $fp, 108
.LBB131_9:
	fld.d	$fs0, $sp, 0                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end131:
	.size	_ZN10btSoftBody6CJoint7PrepareEfi, .Lfunc_end131-_ZN10btSoftBody6CJoint7PrepareEfi
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody6CJoint5SolveEff # -- Begin function _ZN10btSoftBody6CJoint5SolveEff
	.p2align	5
	.type	_ZN10btSoftBody6CJoint5SolveEff,@function
_ZN10btSoftBody6CJoint5SolveEff:        # @_ZN10btSoftBody6CJoint5SolveEff
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -176
	.cfi_def_cfa_offset 176
	st.d	$ra, $sp, 168                   # 8-byte Folded Spill
	st.d	$fp, $sp, 160                   # 8-byte Folded Spill
	st.d	$s0, $sp, 152                   # 8-byte Folded Spill
	st.d	$s1, $sp, 144                   # 8-byte Folded Spill
	st.d	$s2, $sp, 136                   # 8-byte Folded Spill
	st.d	$s3, $sp, 128                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 120                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 112                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 104                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 96                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 56, -56
	.cfi_offset 57, -64
	.cfi_offset 58, -72
	.cfi_offset 59, -80
	fmov.s	$fs0, $fa1
	move	$s3, $a0
	addi.d	$s1, $a0, 8
	addi.d	$s2, $a0, 192
	move	$a0, $s1
	move	$a1, $s2
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body8velocityERK9btVector3)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fs1, $a0
	srli.d	$a0, $a0, 32
	movgr2fr.w	$fs2, $a0
	movgr2fr.w	$fs3, $a1
	addi.d	$s0, $s3, 32
	addi.d	$fp, $s3, 208
	move	$a0, $s0
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body8velocityERK9btVector3)
	jirl	$ra, $ra, 0
	movgr2fr.w	$fa0, $a0
	srli.d	$a0, $a0, 32
	movgr2fr.w	$fa1, $a0
	movgr2fr.w	$fa4, $a1
	fsub.s	$fa2, $fs1, $fa0
	fsub.s	$fa3, $fs2, $fa1
	fld.s	$fa5, $s3, 228
	fld.s	$fa6, $s3, 224
	fld.s	$fa7, $s3, 232
	fsub.s	$fa4, $fs3, $fa4
	fmul.s	$fa0, $fa5, $fa3
	fmadd.s	$fa0, $fa2, $fa6, $fa0
	fmadd.s	$ft0, $fa4, $fa7, $fa0
	vld	$vr0, $s3, 100
	ori	$a0, $zero, 1
	vrepli.b	$vr1, 0
	vst	$vr1, $sp, 72
	vst	$vr0, $sp, 56
	fld.s	$fa1, $sp, 56
	movgr2fr.w	$fa0, $zero
	fcmp.clt.s	$fcc0, $ft0, $fa0
	st.b	$a0, $sp, 88
	bceqz	$fcc0, .LBB132_2
# %bb.1:
	fmul.s	$fa6, $fa6, $ft0
	fmul.s	$fa5, $fa5, $ft0
	fmul.s	$fa7, $fa7, $ft0
	fld.s	$ft0, $s3, 240
	fsub.s	$fa2, $fa2, $fa6
	fsub.s	$fa3, $fa3, $fa5
	fsub.s	$fa4, $fa4, $fa7
	fmul.s	$fa2, $fa2, $ft0
	fmul.s	$fa3, $fa3, $ft0
	fmul.s	$fa4, $fa4, $ft0
	fadd.s	$fa2, $fa6, $fa2
	fadd.s	$fa3, $fa5, $fa3
	fld.s	$fa5, $sp, 60
	fld.s	$fa6, $sp, 64
	fadd.s	$fa4, $fa7, $fa4
	fadd.s	$fa1, $fa1, $fa2
	fadd.s	$fa3, $fa3, $fa5
	fadd.s	$fa2, $fa4, $fa6
	b	.LBB132_3
.LBB132_2:                              # %._crit_edge
	fld.s	$fa3, $sp, 60
	fld.s	$fa2, $sp, 64
.LBB132_3:
	fld.s	$fa4, $s3, 136
	fld.s	$fa5, $s3, 132
	fmul.s	$fa4, $fa4, $fa3
	fld.s	$fa6, $s3, 140
	fld.s	$fa7, $s3, 152
	fld.s	$ft0, $s3, 148
	fmadd.s	$fa4, $fa5, $fa1, $fa4
	fmadd.s	$fa4, $fa6, $fa2, $fa4
	fmul.s	$fa5, $fa3, $fa7
	fmadd.s	$fa5, $ft0, $fa1, $fa5
	fld.s	$fa6, $s3, 156
	fld.s	$fa7, $s3, 168
	fld.s	$ft0, $s3, 164
	fld.s	$ft1, $s3, 172
	fmadd.s	$fa5, $fa6, $fa2, $fa5
	fmul.s	$fa3, $fa3, $fa7
	fmadd.s	$fa1, $ft0, $fa1, $fa3
	fmadd.s	$fa3, $ft1, $fa2, $fa1
	fmul.s	$fa1, $fs0, $fa4
	fmul.s	$fa2, $fs0, $fa5
	fmul.s	$fa3, $fs0, $fa3
	movfr2gr.s	$a1, $fa1
	movfr2gr.s	$a0, $fa2
	bstrins.d	$a1, $a0, 63, 32
	ld.d	$a0, $s3, 8
	ld.d	$a2, $s3, 32
	st.d	$a1, $sp, 56
	movfr2gr.s	$a1, $fa3
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a1, $sp, 64
	beq	$a0, $a2, .LBB132_11
# %bb.4:
	ld.d	$a0, $sp, 56
	ld.d	$a1, $sp, 72
	ld.w	$a2, $sp, 88
	st.d	$a0, $sp, 16
	st.d	$a1, $sp, 32
	st.w	$a2, $sp, 48
	ld.wu	$a2, $sp, 80
	ld.wu	$a3, $sp, 64
	ld.w	$a4, $sp, 20
	lu12i.w	$a5, -524288
	lu32i.d	$a5, 0
	xor	$a0, $a0, $a5
	xor	$a4, $a4, $a5
	bstrins.d	$a0, $a4, 63, 32
	xor	$a3, $a3, $a5
	ld.w	$a4, $sp, 36
	st.d	$a0, $sp, 16
	st.d	$a3, $sp, 24
	xor	$a1, $a1, $a5
	xor	$a3, $a4, $a5
	ld.bu	$a0, $sp, 48
	bstrins.d	$a1, $a3, 63, 32
	xor	$a2, $a2, $a5
	st.d	$a1, $sp, 32
	andi	$a1, $a0, 1
	st.d	$a2, $sp, 40
	beqz	$a1, .LBB132_6
# %bb.5:
	addi.d	$a1, $sp, 16
	move	$a0, $s1
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $sp, 48
.LBB132_6:
	andi	$a0, $a0, 2
	beqz	$a0, .LBB132_8
# %bb.7:
	addi.d	$a1, $sp, 32
	move	$a0, $s1
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
.LBB132_8:
	addi.d	$a1, $sp, 56
	move	$a0, $s0
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $sp, 88
	andi	$a0, $a0, 2
	beqz	$a0, .LBB132_21
# %bb.9:
	addi.d	$a1, $sp, 72
.LBB132_10:                             # %_ZNK10btSoftBody4Body12applyImpulseERKNS_7ImpulseERK9btVector3.exit99
	move	$a0, $s0
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	b	.LBB132_21
.LBB132_11:
	fcmp.cun.s	$fcc0, $fa1, $fa2
	bcnez	$fcc0, .LBB132_21
# %bb.12:
	fcmp.cun.s	$fcc0, $fa3, $fa3
	bcnez	$fcc0, .LBB132_21
# %bb.13:
	fmul.s	$fa4, $fa2, $fa2
	fld.s	$fa5, $a0, 408
	fmadd.s	$fa4, $fa1, $fa1, $fa4
	fmadd.s	$fa4, $fa3, $fa3, $fa4
	fsqrt.s	$fa4, $fa4
	fcmp.clt.s	$fcc0, $fa4, $fa5
	bcnez	$fcc0, .LBB132_21
# %bb.14:
	ld.wu	$a1, $sp, 88
	fneg.s	$fa1, $fa1
	fneg.s	$fa2, $fa2
	fneg.s	$fa3, $fa3
	fld.s	$fa4, $a0, 412
	st.w	$zero, $sp, 28
	st.w	$zero, $sp, 44
	st.w	$a1, $sp, 48
	fmul.s	$fa1, $fa4, $fa1
	fst.s	$fa1, $sp, 16
	fmul.s	$fa1, $fa4, $fa2
	fst.s	$fa1, $sp, 20
	fmul.s	$fa1, $fa4, $fa3
	fst.s	$fa1, $sp, 24
	fneg.s	$fa0, $fa0
	fmul.s	$fa0, $fa4, $fa0
	fst.s	$fa0, $sp, 32
	fst.s	$fa0, $sp, 36
	andi	$a0, $a1, 1
	fst.s	$fa0, $sp, 40
	bnez	$a0, .LBB132_16
# %bb.15:
	andi	$a0, $a1, 255
	andi	$a0, $a0, 2
	bnez	$a0, .LBB132_17
	b	.LBB132_18
.LBB132_16:
	addi.d	$a1, $sp, 16
	move	$a0, $s1
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $sp, 48
	andi	$a0, $a0, 2
	beqz	$a0, .LBB132_18
.LBB132_17:
	addi.d	$a1, $sp, 32
	move	$a0, $s1
	move	$a2, $s2
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
.LBB132_18:                             # %_ZNK10btSoftBody4Body12applyImpulseERKNS_7ImpulseERK9btVector3.exit
	ld.d	$a0, $s1, 0
	vld	$vr0, $sp, 56
	fld.s	$fa1, $a0, 412
	vld	$vr2, $sp, 72
	ld.w	$a0, $sp, 88
	vst	$vr0, $sp, 16
	fld.s	$fa0, $sp, 16
	vst	$vr2, $sp, 32
	st.w	$a0, $sp, 48
	fld.s	$fa2, $sp, 20
	fmul.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $sp, 16
	fld.s	$fa0, $sp, 24
	fmul.s	$fa2, $fa1, $fa2
	fld.s	$fa3, $sp, 32
	fst.s	$fa2, $sp, 20
	fmul.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $sp, 24
	fmul.s	$fa0, $fa1, $fa3
	fld.s	$fa2, $sp, 36
	fst.s	$fa0, $sp, 32
	fld.s	$fa0, $sp, 40
	ld.bu	$a0, $sp, 48
	fmul.s	$fa2, $fa1, $fa2
	fst.s	$fa2, $sp, 36
	fmul.s	$fa0, $fa1, $fa0
	andi	$a1, $a0, 1
	fst.s	$fa0, $sp, 40
	beqz	$a1, .LBB132_20
# %bb.19:
	addi.d	$a1, $sp, 16
	move	$a0, $s0
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	ld.bu	$a0, $sp, 48
.LBB132_20:
	andi	$a0, $a0, 2
	bnez	$a0, .LBB132_22
.LBB132_21:                             # %_ZNK10btSoftBody4Body12applyImpulseERKNS_7ImpulseERK9btVector3.exit99
	fld.d	$fs3, $sp, 96                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 104                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 112                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 120                  # 8-byte Folded Reload
	ld.d	$s3, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 152                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 160                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 168                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 176
	ret
.LBB132_22:
	addi.d	$a1, $sp, 32
	b	.LBB132_10
.Lfunc_end132:
	.size	_ZN10btSoftBody6CJoint5SolveEff, .Lfunc_end132-_ZN10btSoftBody6CJoint5SolveEff
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody6CJoint9TerminateEf # -- Begin function _ZN10btSoftBody6CJoint9TerminateEf
	.p2align	5
	.type	_ZN10btSoftBody6CJoint9TerminateEf,@function
_ZN10btSoftBody6CJoint9TerminateEf:     # @_ZN10btSoftBody6CJoint9TerminateEf
	.cfi_startproc
# %bb.0:
	fld.s	$fa0, $a0, 96
	movgr2fr.w	$fa1, $zero
	fcmp.cule.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB133_2
# %bb.1:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	addi.d	$a3, $a0, 8
	addi.d	$fp, $a0, 116
	ld.wu	$a1, $a0, 116
	ld.w	$a2, $a0, 120
	ld.wu	$a4, $a0, 124
	lu12i.w	$a5, -524288
	lu32i.d	$a5, 0
	xor	$a1, $a1, $a5
	xor	$a2, $a2, $a5
	slli.d	$a2, $a2, 32
	or	$a1, $a2, $a1
	xor	$a2, $a4, $a5
	st.d	$a1, $sp, 8
	st.d	$a2, $sp, 16
	addi.d	$a2, $a0, 192
	addi.d	$a1, $sp, 8
	move	$s0, $a0
	move	$a0, $a3
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	addi.d	$a0, $s0, 32
	addi.d	$a2, $s0, 208
	move	$a1, $fp
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody4Body13applyDImpulseERK9btVector3S3_)
	jirl	$ra, $ra, 0
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
.LBB133_2:
	ret
.Lfunc_end133:
	.size	_ZN10btSoftBody6CJoint9TerminateEf, .Lfunc_end133-_ZN10btSoftBody6CJoint9TerminateEf
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody14PSolve_AnchorsEPS_ff # -- Begin function _ZN10btSoftBody14PSolve_AnchorsEPS_ff
	.p2align	5
	.type	_ZN10btSoftBody14PSolve_AnchorsEPS_ff,@function
_ZN10btSoftBody14PSolve_AnchorsEPS_ff:  # @_ZN10btSoftBody14PSolve_AnchorsEPS_ff
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -80
	.cfi_def_cfa_offset 80
	st.d	$ra, $sp, 72                    # 8-byte Folded Spill
	st.d	$fp, $sp, 64                    # 8-byte Folded Spill
	st.d	$s0, $sp, 56                    # 8-byte Folded Spill
	st.d	$s1, $sp, 48                    # 8-byte Folded Spill
	st.d	$s2, $sp, 40                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 56, -48
	.cfi_offset 57, -56
	move	$fp, $a0
	ld.w	$a0, $a0, 948
	blez	$a0, .LBB134_3
# %bb.1:                                # %.lr.ph
	fld.s	$fa1, $fp, 360
	move	$s0, $zero
	fmul.s	$fs0, $fa0, $fa1
	fld.s	$fs1, $fp, 512
	ori	$a1, $zero, 104
	mul.d	$s1, $a0, $a1
	lu12i.w	$s2, -524288
	lu32i.d	$s2, 0
	.p2align	4, , 16
.LBB134_2:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 960
	add.d	$a3, $a1, $s0
	ld.d	$a0, $a3, 24
	ldx.d	$a1, $a1, $s0
	fld.s	$fa0, $a0, 72
	fld.s	$fa1, $a3, 8
	fld.s	$fa2, $a0, 76
	fld.s	$fa3, $a3, 12
	fld.s	$fa4, $a0, 80
	fld.s	$fa5, $a3, 16
	fld.s	$fa6, $a0, 120
	fmul.s	$fa2, $fa2, $fa3
	fmadd.s	$fa0, $fa0, $fa1, $fa2
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fadd.s	$fa0, $fa0, $fa6
	fld.s	$fa2, $a0, 92
	fld.s	$fa4, $a0, 88
	fld.s	$fa6, $a0, 96
	fld.s	$fa7, $a0, 124
	fmul.s	$fa2, $fa3, $fa2
	fmadd.s	$fa2, $fa4, $fa1, $fa2
	fmadd.s	$fa2, $fa6, $fa5, $fa2
	fadd.s	$fa2, $fa7, $fa2
	fld.s	$fa4, $a0, 108
	fld.s	$fa6, $a0, 104
	fld.s	$fa7, $a0, 112
	fld.s	$ft0, $a0, 128
	fmul.s	$fa3, $fa3, $fa4
	fmadd.s	$fa1, $fa6, $fa1, $fa3
	fmadd.s	$fa1, $fa7, $fa5, $fa1
	fadd.s	$fa1, $ft0, $fa1
	addi.d	$a2, $a3, 80
	fld.s	$fa3, $a3, 84
	fld.s	$fa4, $a0, 352
	fld.s	$fa5, $a0, 348
	fld.s	$fa6, $a3, 88
	fneg.s	$fa7, $fa3
	fmul.s	$fa7, $fa4, $fa7
	fld.s	$ft0, $a0, 344
	fld.s	$ft1, $a3, 80
	fmadd.s	$fa7, $fa5, $fa6, $fa7
	fneg.s	$fa6, $fa6
	fmul.s	$fa6, $ft0, $fa6
	fmadd.s	$fa4, $fa4, $ft1, $fa6
	fneg.s	$fa6, $ft1
	fmul.s	$fa5, $fa5, $fa6
	fld.s	$fa6, $a0, 328
	fld.s	$ft1, $a0, 332
	fld.s	$ft2, $a0, 336
	fmadd.s	$fa3, $ft0, $fa3, $fa5
	fadd.s	$fa5, $fa7, $fa6
	fadd.s	$fa4, $ft1, $fa4
	fadd.s	$fa3, $fa3, $ft2
	fmul.s	$fa5, $fs1, $fa5
	fmul.s	$fa4, $fs1, $fa4
	fld.s	$fa6, $a1, 16
	fld.s	$fa7, $a1, 32
	fld.s	$ft0, $a1, 20
	fld.s	$ft1, $a1, 36
	fld.s	$ft2, $a1, 24
	fld.s	$ft3, $a1, 40
	fmul.s	$fa3, $fs1, $fa3
	fsub.s	$fa7, $fa6, $fa7
	fsub.s	$ft1, $ft0, $ft1
	fsub.s	$ft3, $ft2, $ft3
	fsub.s	$fa5, $fa5, $fa7
	fsub.s	$fa4, $fa4, $ft1
	fsub.s	$fa3, $fa3, $ft3
	fsub.s	$fa0, $fa0, $fa6
	fsub.s	$fa2, $fa2, $ft0
	fsub.s	$fa1, $fa1, $ft2
	fmul.s	$fa0, $fs0, $fa0
	fmul.s	$fa2, $fs0, $fa2
	fmul.s	$fa1, $fs0, $fa1
	fadd.s	$fa0, $fa0, $fa5
	fadd.s	$fa2, $fa2, $fa4
	fld.s	$fa4, $a3, 36
	fld.s	$fa5, $a3, 32
	fld.s	$fa7, $a3, 40
	fadd.s	$fa1, $fa1, $fa3
	fmul.s	$fa3, $fa2, $fa4
	fmadd.s	$fa3, $fa5, $fa0, $fa3
	fmadd.s	$fa3, $fa7, $fa1, $fa3
	fld.s	$fa4, $a3, 52
	fld.s	$fa5, $a3, 48
	fld.s	$fa7, $a3, 56
	movfr2gr.s	$a4, $fa3
	fmul.s	$fa4, $fa2, $fa4
	fmadd.s	$fa4, $fa5, $fa0, $fa4
	fmadd.s	$fa4, $fa7, $fa1, $fa4
	fld.s	$fa5, $a3, 68
	movfr2gr.s	$a5, $fa4
	fld.s	$fa7, $a3, 64
	fld.s	$ft1, $a3, 72
	fmul.s	$fa2, $fa2, $fa5
	fld.s	$fa5, $a3, 96
	fmadd.s	$fa0, $fa7, $fa0, $fa2
	fmadd.s	$fa0, $ft1, $fa1, $fa0
	movfr2gr.s	$a3, $fa0
	fmul.s	$fa1, $fa3, $fa5
	fmul.s	$fa2, $fa4, $fa5
	fmul.s	$fa0, $fa5, $fa0
	fadd.s	$fa1, $fa6, $fa1
	fst.s	$fa1, $a1, 16
	fadd.s	$fa1, $ft0, $fa2
	fst.s	$fa1, $a1, 20
	fadd.s	$fa0, $ft2, $fa0
	fst.s	$fa0, $a1, 24
	xor	$a1, $a4, $s2
	xor	$a4, $a5, $s2
	bstrins.d	$a1, $a4, 63, 32
	xor	$a3, $a3, $s2
	bstrpick.d	$a3, $a3, 31, 0
	st.d	$a1, $sp, 8
	st.d	$a3, $sp, 16
	addi.d	$a1, $sp, 8
	pcaddu18i	$ra, %call36(_ZN11btRigidBody12applyImpulseERK9btVector3S2_)
	jirl	$ra, $ra, 0
	addi.d	$s0, $s0, 104
	bne	$s1, $s0, .LBB134_2
.LBB134_3:                              # %._crit_edge
	fld.d	$fs1, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 32                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 56                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 64                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 72                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 80
	ret
.Lfunc_end134:
	.size	_ZN10btSoftBody14PSolve_AnchorsEPS_ff, .Lfunc_end134-_ZN10btSoftBody14PSolve_AnchorsEPS_ff
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN11btRigidBody12applyImpulseERK9btVector3S2_,"axG",@progbits,_ZN11btRigidBody12applyImpulseERK9btVector3S2_,comdat
	.weak	_ZN11btRigidBody12applyImpulseERK9btVector3S2_ # -- Begin function _ZN11btRigidBody12applyImpulseERK9btVector3S2_
	.p2align	5
	.type	_ZN11btRigidBody12applyImpulseERK9btVector3S2_,@function
_ZN11btRigidBody12applyImpulseERK9btVector3S2_: # @_ZN11btRigidBody12applyImpulseERK9btVector3S2_
	.cfi_startproc
# %bb.0:
	fld.s	$fa0, $a0, 360
	movgr2fr.w	$fa1, $zero
	fcmp.ceq.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB135_2
# %bb.1:
	fld.s	$fa1, $a1, 0
	fld.s	$fa2, $a0, 380
	fld.s	$fa3, $a1, 4
	fld.s	$fa4, $a0, 384
	fld.s	$fa5, $a1, 8
	fld.s	$fa6, $a0, 388
	fmul.s	$fa1, $fa1, $fa2
	fmul.s	$fa3, $fa3, $fa4
	fmul.s	$fa5, $fa5, $fa6
	fmul.s	$fa1, $fa0, $fa1
	fld.s	$fa7, $a0, 328
	fmul.s	$fa3, $fa0, $fa3
	fmul.s	$fa0, $fa0, $fa5
	fld.s	$fa5, $a0, 332
	fadd.s	$fa1, $fa1, $fa7
	fld.s	$fa7, $a0, 336
	fst.s	$fa1, $a0, 328
	fadd.s	$fa1, $fa3, $fa5
	fst.s	$fa1, $a0, 332
	fadd.s	$fa0, $fa0, $fa7
	fst.s	$fa0, $a0, 336
	fld.s	$fa0, $a1, 0
	fld.s	$fa1, $a1, 4
	fld.s	$fa3, $a1, 8
	fmul.s	$fa0, $fa2, $fa0
	fmul.s	$fa1, $fa1, $fa4
	fmul.s	$fa2, $fa3, $fa6
	fld.s	$fa3, $a2, 8
	fld.s	$fa4, $a2, 4
	fneg.s	$fa5, $fa1
	fld.s	$fa6, $a2, 0
	fmul.s	$fa5, $fa3, $fa5
	fmadd.s	$fa5, $fa4, $fa2, $fa5
	fneg.s	$fa2, $fa2
	fmul.s	$fa2, $fa6, $fa2
	fmadd.s	$fa2, $fa3, $fa0, $fa2
	fneg.s	$fa0, $fa0
	fld.s	$fa3, $a0, 284
	fmul.s	$fa0, $fa4, $fa0
	fmadd.s	$fa0, $fa6, $fa1, $fa0
	fld.s	$fa1, $a0, 280
	fmul.s	$fa3, $fa3, $fa2
	fld.s	$fa4, $a0, 288
	fld.s	$fa6, $a0, 300
	fmadd.s	$fa1, $fa1, $fa5, $fa3
	fld.s	$fa3, $a0, 296
	fmadd.s	$fa1, $fa4, $fa0, $fa1
	fmul.s	$fa4, $fa2, $fa6
	fld.s	$fa6, $a0, 304
	fmadd.s	$fa3, $fa3, $fa5, $fa4
	fld.s	$fa4, $a0, 316
	fld.s	$fa7, $a0, 312
	fmadd.s	$fa3, $fa6, $fa0, $fa3
	fld.s	$fa6, $a0, 320
	fmul.s	$fa2, $fa2, $fa4
	fmadd.s	$fa2, $fa7, $fa5, $fa2
	fld.s	$fa4, $a0, 364
	fmadd.s	$fa0, $fa6, $fa0, $fa2
	fld.s	$fa2, $a0, 368
	fld.s	$fa5, $a0, 372
	fmul.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a0, 344
	fmul.s	$fa2, $fa3, $fa2
	fmul.s	$fa0, $fa0, $fa5
	fld.s	$fa3, $a0, 348
	fadd.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a0, 352
	fst.s	$fa1, $a0, 344
	fadd.s	$fa1, $fa2, $fa3
	fst.s	$fa1, $a0, 348
	fadd.s	$fa0, $fa0, $fa4
	fst.s	$fa0, $a0, 352
.LBB135_2:
	ret
.Lfunc_end135:
	.size	_ZN11btRigidBody12applyImpulseERK9btVector3S2_, .Lfunc_end135-_ZN11btRigidBody12applyImpulseERK9btVector3S2_
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN10btSoftBody16PSolve_RContactsEPS_ff
.LCPI136_0:
	.word	0x34000000                      # float 1.1920929E-7
	.text
	.globl	_ZN10btSoftBody16PSolve_RContactsEPS_ff
	.p2align	5
	.type	_ZN10btSoftBody16PSolve_RContactsEPS_ff,@function
_ZN10btSoftBody16PSolve_RContactsEPS_ff: # @_ZN10btSoftBody16PSolve_RContactsEPS_ff
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	st.d	$s1, $sp, 64                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 56                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 24                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 56, -40
	.cfi_offset 57, -48
	.cfi_offset 58, -56
	.cfi_offset 59, -64
	.cfi_offset 60, -72
	move	$fp, $a0
	ld.d	$a0, $a0, 200
	ld.d	$a1, $a0, 0
	fld.s	$fs2, $fp, 512
	ld.d	$a1, $a1, 88
	fmov.s	$fs0, $fa0
	jirl	$ra, $a1, 0
	ld.w	$a0, $fp, 980
	blez	$a0, .LBB136_8
# %bb.1:                                # %.lr.ph
	fmov.s	$fs1, $fa0
	move	$s0, $zero
	pcalau12i	$a1, %pc_hi20(.LCPI136_0)
	fld.s	$fs3, $a1, %pc_lo12(.LCPI136_0)
	ori	$a1, $zero, 120
	mul.d	$s1, $a0, $a1
	movgr2fr.w	$fs4, $zero
	b	.LBB136_3
	.p2align	4, , 16
.LBB136_2:                              #   in Loop: Header=BB136_3 Depth=1
	addi.d	$s0, $s0, 120
	beq	$s1, $s0, .LBB136_8
.LBB136_3:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a1, $fp, 992
	ldx.d	$a0, $a1, $s0
	ld.w	$a2, $a0, 256
	addi.d	$a2, $a2, -2
	sltu	$a2, $zero, $a2
	sltui	$a3, $a0, 1
	or	$a2, $a3, $a2
	add.d	$a1, $a1, $s0
	fmov.s	$fa5, $fs4
	fmov.s	$fa0, $fs4
	fmov.s	$fa2, $fs4
	bnez	$a2, .LBB136_5
# %bb.4:                                #   in Loop: Header=BB136_3 Depth=1
	fld.s	$fa0, $a1, 92
	fld.s	$fa1, $a0, 352
	fld.s	$fa2, $a0, 348
	fld.s	$fa3, $a1, 96
	fneg.s	$fa4, $fa0
	fmul.s	$fa4, $fa1, $fa4
	fld.s	$fa5, $a0, 344
	fld.s	$fa6, $a1, 88
	fmadd.s	$fa4, $fa2, $fa3, $fa4
	fneg.s	$fa3, $fa3
	fmul.s	$fa3, $fa5, $fa3
	fmadd.s	$fa1, $fa1, $fa6, $fa3
	fneg.s	$fa3, $fa6
	fmul.s	$fa2, $fa2, $fa3
	fld.s	$fa3, $a0, 328
	fld.s	$fa6, $a0, 332
	fld.s	$fa7, $a0, 336
	fmadd.s	$fa0, $fa5, $fa0, $fa2
	fadd.s	$fa2, $fa4, $fa3
	fadd.s	$fa1, $fa6, $fa1
	fadd.s	$fa3, $fa0, $fa7
	fmul.s	$fa0, $fs2, $fa2
	fmul.s	$fa2, $fs2, $fa1
	fmul.s	$fa5, $fs2, $fa3
.LBB136_5:                              #   in Loop: Header=BB136_3 Depth=1
	ld.d	$a3, $a1, 32
	fld.s	$fa6, $a3, 16
	fld.s	$fa1, $a3, 32
	fld.s	$fa7, $a3, 20
	fld.s	$fa3, $a3, 36
	fld.s	$ft0, $a3, 24
	fld.s	$fa4, $a3, 40
	fsub.s	$fa1, $fa6, $fa1
	fsub.s	$fa3, $fa7, $fa3
	fsub.s	$ft1, $ft0, $fa4
	fsub.s	$fa1, $fa1, $fa0
	fsub.s	$fa2, $fa3, $fa2
	fld.s	$fa0, $a1, 12
	fld.s	$fa3, $a1, 8
	fld.s	$fa4, $a1, 16
	fsub.s	$fa5, $ft1, $fa5
	fmul.s	$ft1, $fa2, $fa0
	fmadd.s	$ft1, $fa1, $fa3, $ft1
	fmadd.s	$ft1, $fa5, $fa4, $ft1
	fcmp.cult.s	$fcc0, $fs3, $ft1
	bcnez	$fcc0, .LBB136_2
# %bb.6:                                #   in Loop: Header=BB136_3 Depth=1
	fld.s	$ft2, $a1, 24
	fmul.s	$fa7, $fa7, $fa0
	fmadd.s	$fa6, $fa6, $fa3, $fa7
	fmadd.s	$fa6, $ft0, $fa4, $fa6
	fadd.s	$fa6, $fa6, $ft2
	fcmp.clt.s	$fcc0, $fa6, $fs1
	fsel	$fa6, $fs1, $fa6, $fcc0
	fmul.s	$fa7, $fa3, $ft1
	fmul.s	$ft0, $fa0, $ft1
	fmul.s	$ft1, $fa4, $ft1
	fld.s	$ft2, $a1, 108
	fsub.s	$fa7, $fa1, $fa7
	fsub.s	$ft0, $fa2, $ft0
	fsub.s	$ft1, $fa5, $ft1
	fmul.s	$fa7, $fa7, $ft2
	fmul.s	$ft0, $ft0, $ft2
	fmul.s	$ft1, $ft1, $ft2
	fld.s	$ft2, $a1, 112
	fsub.s	$fa1, $fa1, $fa7
	fsub.s	$fa2, $fa2, $ft0
	fsub.s	$fa5, $fa5, $ft1
	fmul.s	$fa6, $fa6, $ft2
	fmul.s	$fa3, $fa3, $fa6
	fmul.s	$fa0, $fa6, $fa0
	fmul.s	$fa4, $fa6, $fa4
	fadd.s	$fa1, $fa1, $fa3
	fadd.s	$fa0, $fa2, $fa0
	fadd.s	$fa2, $fa5, $fa4
	fmul.s	$fa1, $fs0, $fa1
	fld.s	$fa3, $a1, 44
	fmul.s	$fa0, $fs0, $fa0
	fmul.s	$fa2, $fs0, $fa2
	fld.s	$fa4, $a1, 40
	fmul.s	$fa3, $fa3, $fa0
	fld.s	$fa5, $a1, 48
	fld.s	$fa6, $a1, 60
	fld.s	$fa7, $a1, 56
	fmadd.s	$fa3, $fa4, $fa1, $fa3
	fmadd.s	$fa3, $fa5, $fa2, $fa3
	fmul.s	$fa4, $fa0, $fa6
	fmadd.s	$fa4, $fa7, $fa1, $fa4
	fld.s	$fa5, $a1, 64
	fld.s	$fa6, $a1, 76
	fld.s	$fa7, $a1, 72
	fld.s	$ft0, $a1, 80
	fmadd.s	$fa4, $fa5, $fa2, $fa4
	fmul.s	$fa0, $fa0, $fa6
	fmadd.s	$fa0, $fa7, $fa1, $fa0
	fmadd.s	$fa0, $ft0, $fa2, $fa0
	movfr2gr.s	$a3, $fa3
	movfr2gr.s	$a4, $fa4
	bstrins.d	$a3, $a4, 63, 32
	movfr2gr.s	$a4, $fa0
	bstrpick.d	$a4, $a4, 31, 0
	st.d	$a3, $sp, 8
	st.d	$a4, $sp, 16
	fld.s	$fa1, $a1, 104
	ld.d	$a3, $a1, 32
	fmul.s	$fa2, $fa3, $fa1
	fld.s	$fa3, $a3, 16
	fmul.s	$fa4, $fa1, $fa4
	fmul.s	$fa0, $fa1, $fa0
	fld.s	$fa1, $a3, 20
	fsub.s	$fa2, $fa3, $fa2
	fld.s	$fa3, $a3, 24
	fst.s	$fa2, $a3, 16
	fsub.s	$fa1, $fa1, $fa4
	fst.s	$fa1, $a3, 20
	fsub.s	$fa0, $fa3, $fa0
	fst.s	$fa0, $a3, 24
	bnez	$a2, .LBB136_2
# %bb.7:                                #   in Loop: Header=BB136_3 Depth=1
	addi.d	$a2, $a1, 88
	addi.d	$a1, $sp, 8
	pcaddu18i	$ra, %call36(_ZN11btRigidBody12applyImpulseERK9btVector3S2_)
	jirl	$ra, $ra, 0
	b	.LBB136_2
.LBB136_8:                              # %._crit_edge
	fld.d	$fs4, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 48                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 56                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.Lfunc_end136:
	.size	_ZN10btSoftBody16PSolve_RContactsEPS_ff, .Lfunc_end136-_ZN10btSoftBody16PSolve_RContactsEPS_ff
	.cfi_endproc
                                        # -- End function
	.globl	_ZN10btSoftBody16PSolve_SContactsEPS_ff # -- Begin function _ZN10btSoftBody16PSolve_SContactsEPS_ff
	.p2align	5
	.type	_ZN10btSoftBody16PSolve_SContactsEPS_ff,@function
_ZN10btSoftBody16PSolve_SContactsEPS_ff: # @_ZN10btSoftBody16PSolve_SContactsEPS_ff
# %bb.0:
	ld.w	$a1, $a0, 1012
	blez	$a1, .LBB137_5
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $a0, 1024
	addi.d	$a0, $a0, 32
	movgr2fr.w	$fa0, $zero
	b	.LBB137_3
	.p2align	4, , 16
.LBB137_2:                              #   in Loop: Header=BB137_3 Depth=1
	fmul.s	$fa4, $ft3, $ft5
	fmul.s	$fa5, $ft2, $ft5
	fmul.s	$fa6, $ft4, $ft5
	fld.s	$ft2, $a0, 20
	fsub.s	$fa4, $fa7, $fa4
	fsub.s	$fa5, $ft0, $fa5
	fsub.s	$fa6, $ft1, $fa6
	fmul.s	$fa4, $fa4, $ft2
	fmul.s	$fa5, $fa5, $ft2
	fmul.s	$fa6, $fa6, $ft2
	fld.s	$fa7, $a0, 24
	fsub.s	$fa4, $ft6, $fa4
	fsub.s	$fa5, $ft7, $fa5
	fsub.s	$fa6, $ft8, $fa6
	fmul.s	$ft0, $fa7, $fa4
	fmul.s	$ft1, $fa7, $fa5
	fmul.s	$fa7, $fa7, $fa6
	fadd.s	$fa1, $fa1, $ft0
	fst.s	$fa1, $a5, 16
	fadd.s	$fa1, $fa2, $ft1
	fst.s	$fa1, $a5, 20
	fadd.s	$fa1, $fa3, $fa7
	fst.s	$fa1, $a5, 24
	fld.s	$fa1, $a0, 28
	fld.s	$fa2, $a0, -16
	fmul.s	$fa1, $fa1, $fa2
	fmul.s	$fa2, $fa4, $fa1
	fld.s	$fa3, $a4, 16
	fmul.s	$fa7, $fa5, $fa1
	fmul.s	$fa1, $fa6, $fa1
	fld.s	$ft0, $a4, 20
	fsub.s	$fa2, $fa3, $fa2
	fld.s	$fa3, $a4, 24
	fst.s	$fa2, $a4, 16
	fsub.s	$fa2, $ft0, $fa7
	fst.s	$fa2, $a4, 20
	fsub.s	$fa1, $fa3, $fa1
	fst.s	$fa1, $a4, 24
	fld.s	$fa1, $a0, 28
	fld.s	$fa2, $a0, -12
	fmul.s	$fa1, $fa1, $fa2
	fmul.s	$fa2, $fa4, $fa1
	fld.s	$fa3, $a3, 16
	fmul.s	$fa7, $fa5, $fa1
	fmul.s	$fa1, $fa6, $fa1
	fld.s	$ft0, $a3, 20
	fsub.s	$fa2, $fa3, $fa2
	fld.s	$fa3, $a3, 24
	fst.s	$fa2, $a3, 16
	fsub.s	$fa2, $ft0, $fa7
	fst.s	$fa2, $a3, 20
	fsub.s	$fa1, $fa3, $fa1
	fst.s	$fa1, $a3, 24
	fld.s	$fa1, $a0, 28
	fld.s	$fa2, $a0, -8
	fmul.s	$fa1, $fa1, $fa2
	fmul.s	$fa2, $fa4, $fa1
	fld.s	$fa3, $a2, 16
	fmul.s	$fa4, $fa5, $fa1
	fmul.s	$fa1, $fa6, $fa1
	fld.s	$fa5, $a2, 20
	fsub.s	$fa2, $fa3, $fa2
	fld.s	$fa3, $a2, 24
	fst.s	$fa2, $a2, 16
	fsub.s	$fa2, $fa5, $fa4
	fst.s	$fa2, $a2, 20
	fsub.s	$fa1, $fa3, $fa1
	fst.s	$fa1, $a2, 24
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 64
	beqz	$a1, .LBB137_5
.LBB137_3:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $a0, -24
	ld.d	$a4, $a2, 16
	ld.d	$a5, $a0, -32
	fld.s	$fa1, $a4, 16
	fld.s	$fa2, $a0, -16
	fld.s	$fa3, $a4, 20
	ld.d	$a3, $a2, 24
	ld.d	$a2, $a2, 32
	fmul.s	$fa1, $fa1, $fa2
	fmul.s	$fa3, $fa2, $fa3
	fld.s	$fa4, $a4, 24
	fld.s	$fa5, $a3, 16
	fld.s	$fa7, $a0, -12
	fld.s	$fa6, $a3, 20
	fld.s	$ft0, $a3, 24
	fmul.s	$fa4, $fa2, $fa4
	fmul.s	$fa5, $fa5, $fa7
	fmul.s	$fa6, $fa7, $fa6
	fmul.s	$ft0, $fa7, $ft0
	fadd.s	$fa1, $fa1, $fa5
	fadd.s	$fa3, $fa3, $fa6
	fld.s	$fa5, $a2, 16
	fld.s	$ft1, $a0, -8
	fld.s	$fa6, $a2, 20
	fld.s	$ft2, $a2, 24
	fadd.s	$ft0, $fa4, $ft0
	fmul.s	$fa4, $fa5, $ft1
	fmul.s	$fa5, $ft1, $fa6
	fmul.s	$ft2, $ft1, $ft2
	fadd.s	$fa4, $fa1, $fa4
	fld.s	$fa1, $a4, 32
	fld.s	$ft3, $a4, 36
	fadd.s	$fa6, $fa3, $fa5
	fadd.s	$fa5, $ft0, $ft2
	fmul.s	$fa1, $fa2, $fa1
	fmul.s	$fa3, $fa2, $ft3
	fld.s	$ft0, $a4, 40
	fld.s	$ft2, $a3, 32
	fld.s	$ft3, $a3, 36
	fld.s	$ft4, $a3, 40
	fmul.s	$fa2, $fa2, $ft0
	fmul.s	$ft0, $fa7, $ft2
	fmul.s	$ft2, $fa7, $ft3
	fmul.s	$fa7, $fa7, $ft4
	fadd.s	$fa1, $fa1, $ft0
	fadd.s	$fa3, $fa3, $ft2
	fld.s	$ft0, $a2, 32
	fld.s	$ft2, $a2, 36
	fld.s	$ft3, $a2, 40
	fadd.s	$fa7, $fa2, $fa7
	fmul.s	$fa2, $ft1, $ft0
	fmul.s	$ft0, $ft1, $ft2
	fmul.s	$ft1, $ft1, $ft3
	fadd.s	$ft2, $fa1, $fa2
	fadd.s	$ft0, $fa3, $ft0
	fld.s	$fa1, $a5, 16
	fld.s	$ft3, $a5, 32
	fld.s	$fa2, $a5, 20
	fld.s	$ft4, $a5, 36
	fld.s	$fa3, $a5, 24
	fld.s	$ft5, $a5, 40
	fadd.s	$fa7, $fa7, $ft1
	fsub.s	$ft1, $fa1, $ft3
	fsub.s	$ft3, $fa2, $ft4
	fsub.s	$ft5, $fa3, $ft5
	fsub.s	$ft2, $fa4, $ft2
	fsub.s	$ft0, $fa6, $ft0
	fsub.s	$ft6, $fa5, $fa7
	fsub.s	$fa7, $ft1, $ft2
	fsub.s	$ft0, $ft3, $ft0
	fld.s	$ft2, $a0, 4
	fld.s	$ft3, $a0, 0
	fld.s	$ft4, $a0, 8
	fsub.s	$ft1, $ft5, $ft6
	fmul.s	$ft5, $ft0, $ft2
	fmadd.s	$ft5, $fa7, $ft3, $ft5
	fmadd.s	$ft5, $ft1, $ft4, $ft5
	fcmp.cule.s	$fcc0, $fa0, $ft5
	fmov.s	$ft6, $fa0
	fmov.s	$ft7, $fa0
	fmov.s	$ft8, $fa0
	bcnez	$fcc0, .LBB137_2
# %bb.4:                                #   in Loop: Header=BB137_3 Depth=1
	fld.s	$ft6, $a0, 16
	fmul.s	$ft7, $fa2, $ft2
	fmadd.s	$ft7, $ft3, $fa1, $ft7
	fmadd.s	$ft7, $ft4, $fa3, $ft7
	fmul.s	$fa6, $fa6, $ft2
	fmadd.s	$fa4, $ft3, $fa4, $fa6
	fmadd.s	$fa4, $ft4, $fa5, $fa4
	fsub.s	$fa4, $ft7, $fa4
	fsub.s	$fa4, $ft6, $fa4
	fmul.s	$fa5, $ft3, $fa4
	fmul.s	$fa6, $ft2, $fa4
	fmul.s	$fa4, $ft4, $fa4
	fadd.s	$ft6, $fa5, $fa0
	fadd.s	$ft7, $fa6, $fa0
	fadd.s	$ft8, $fa4, $fa0
	b	.LBB137_2
.LBB137_5:                              # %._crit_edge
	ret
.Lfunc_end137:
	.size	_ZN10btSoftBody16PSolve_SContactsEPS_ff, .Lfunc_end137-_ZN10btSoftBody16PSolve_SContactsEPS_ff
                                        # -- End function
	.globl	_ZN10btSoftBody12PSolve_LinksEPS_ff # -- Begin function _ZN10btSoftBody12PSolve_LinksEPS_ff
	.p2align	5
	.type	_ZN10btSoftBody12PSolve_LinksEPS_ff,@function
_ZN10btSoftBody12PSolve_LinksEPS_ff:    # @_ZN10btSoftBody12PSolve_LinksEPS_ff
# %bb.0:
	ld.w	$a1, $a0, 852
	blez	$a1, .LBB138_5
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $a0, 864
	addi.d	$a0, $a0, 44
	movgr2fr.w	$fa1, $zero
	b	.LBB138_3
	.p2align	4, , 16
.LBB138_2:                              #   in Loop: Header=BB138_3 Depth=1
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 72
	beqz	$a1, .LBB138_5
.LBB138_3:                              # =>This Inner Loop Header: Depth=1
	fld.s	$fa2, $a0, -4
	fcmp.cule.s	$fcc0, $fa2, $fa1
	bcnez	$fcc0, .LBB138_2
# %bb.4:                                #   in Loop: Header=BB138_3 Depth=1
	ld.d	$a2, $a0, -20
	ld.d	$a3, $a0, -28
	fld.s	$fa3, $a2, 16
	fld.s	$fa4, $a3, 16
	fld.s	$fa5, $a2, 20
	fld.s	$fa6, $a3, 20
	fld.s	$fa7, $a2, 24
	fld.s	$ft0, $a3, 24
	fsub.s	$fa3, $fa3, $fa4
	fsub.s	$fa5, $fa5, $fa6
	fsub.s	$fa7, $fa7, $ft0
	fld.s	$ft1, $a0, 0
	fmul.s	$ft2, $fa5, $fa5
	fmadd.s	$ft2, $fa3, $fa3, $ft2
	fmadd.s	$ft2, $fa7, $fa7, $ft2
	fsub.s	$ft3, $ft1, $ft2
	fadd.s	$ft1, $ft1, $ft2
	fld.s	$ft2, $a3, 96
	fmul.s	$fa2, $fa2, $ft1
	fdiv.s	$fa2, $ft3, $fa2
	fmul.s	$fa2, $fa0, $fa2
	fmul.s	$ft1, $ft2, $fa2
	fmul.s	$ft2, $fa3, $ft1
	fmul.s	$ft3, $fa5, $ft1
	fmul.s	$ft1, $fa7, $ft1
	fsub.s	$fa4, $fa4, $ft2
	fst.s	$fa4, $a3, 16
	fsub.s	$fa4, $fa6, $ft3
	fst.s	$fa4, $a3, 20
	fsub.s	$fa4, $ft0, $ft1
	fst.s	$fa4, $a3, 24
	fld.s	$fa4, $a2, 96
	fmul.s	$fa2, $fa2, $fa4
	fmul.s	$fa3, $fa3, $fa2
	fld.s	$fa4, $a2, 16
	fmul.s	$fa5, $fa5, $fa2
	fmul.s	$fa2, $fa7, $fa2
	fld.s	$fa6, $a2, 20
	fadd.s	$fa3, $fa4, $fa3
	fld.s	$fa4, $a2, 24
	fst.s	$fa3, $a2, 16
	fadd.s	$fa3, $fa5, $fa6
	fst.s	$fa3, $a2, 20
	fadd.s	$fa2, $fa2, $fa4
	fst.s	$fa2, $a2, 24
	b	.LBB138_2
.LBB138_5:                              # %._crit_edge
	ret
.Lfunc_end138:
	.size	_ZN10btSoftBody12PSolve_LinksEPS_ff, .Lfunc_end138-_ZN10btSoftBody12PSolve_LinksEPS_ff
                                        # -- End function
	.globl	_ZN10btSoftBody12VSolve_LinksEPS_f # -- Begin function _ZN10btSoftBody12VSolve_LinksEPS_f
	.p2align	5
	.type	_ZN10btSoftBody12VSolve_LinksEPS_f,@function
_ZN10btSoftBody12VSolve_LinksEPS_f:     # @_ZN10btSoftBody12VSolve_LinksEPS_f
# %bb.0:
	ld.w	$a1, $a0, 852
	blez	$a1, .LBB139_3
# %bb.1:                                # %.lr.ph
	ld.d	$a0, $a0, 864
	addi.d	$a0, $a0, 60
	.p2align	4, , 16
.LBB139_2:                              # =>This Inner Loop Header: Depth=1
	ld.d	$a3, $a0, -44
	ld.d	$a2, $a0, -36
	fld.s	$fa1, $a3, 48
	fld.s	$fa2, $a2, 48
	fld.s	$fa3, $a3, 52
	fld.s	$fa4, $a2, 52
	fld.s	$fa5, $a3, 56
	fld.s	$fa6, $a2, 56
	fsub.s	$fa2, $fa1, $fa2
	fld.s	$fa7, $a0, -4
	fsub.s	$fa4, $fa3, $fa4
	fsub.s	$fa6, $fa5, $fa6
	fld.s	$ft0, $a0, -8
	fmul.s	$fa4, $fa4, $fa7
	fld.s	$ft1, $a0, 0
	fld.s	$ft2, $a0, -12
	fmadd.s	$fa2, $ft0, $fa2, $fa4
	fld.s	$fa4, $a3, 96
	fnmadd.s	$fa2, $ft1, $fa6, $fa2
	fmul.s	$fa2, $ft2, $fa2
	fmul.s	$fa2, $fa0, $fa2
	fmul.s	$fa4, $fa4, $fa2
	fmul.s	$fa6, $ft0, $fa4
	fmul.s	$fa7, $fa7, $fa4
	fmul.s	$fa4, $ft1, $fa4
	fadd.s	$fa1, $fa1, $fa6
	fst.s	$fa1, $a3, 48
	fadd.s	$fa1, $fa3, $fa7
	fst.s	$fa1, $a3, 52
	fadd.s	$fa1, $fa5, $fa4
	fst.s	$fa1, $a3, 56
	fld.s	$fa1, $a2, 96
	fld.s	$fa3, $a0, -8
	fmul.s	$fa1, $fa2, $fa1
	fld.s	$fa2, $a0, -4
	fld.s	$fa4, $a0, 0
	fmul.s	$fa3, $fa3, $fa1
	fld.s	$fa5, $a2, 48
	fmul.s	$fa2, $fa1, $fa2
	fmul.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a2, 52
	fsub.s	$fa3, $fa5, $fa3
	fld.s	$fa5, $a2, 56
	fst.s	$fa3, $a2, 48
	fsub.s	$fa2, $fa4, $fa2
	fst.s	$fa2, $a2, 52
	fsub.s	$fa1, $fa5, $fa1
	fst.s	$fa1, $a2, 56
	addi.d	$a1, $a1, -1
	addi.d	$a0, $a0, 72
	bnez	$a1, .LBB139_2
.LBB139_3:                              # %._crit_edge
	ret
.Lfunc_end139:
	.size	_ZN10btSoftBody12VSolve_LinksEPS_f, .Lfunc_end139-_ZN10btSoftBody12VSolve_LinksEPS_f
                                        # -- End function
	.globl	_ZN10btSoftBody23defaultCollisionHandlerEP17btCollisionObject # -- Begin function _ZN10btSoftBody23defaultCollisionHandlerEP17btCollisionObject
	.p2align	5
	.type	_ZN10btSoftBody23defaultCollisionHandlerEP17btCollisionObject,@function
_ZN10btSoftBody23defaultCollisionHandlerEP17btCollisionObject: # @_ZN10btSoftBody23defaultCollisionHandlerEP17btCollisionObject
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -240
	.cfi_def_cfa_offset 240
	st.d	$ra, $sp, 232                   # 8-byte Folded Spill
	st.d	$fp, $sp, 224                   # 8-byte Folded Spill
	st.d	$s0, $sp, 216                   # 8-byte Folded Spill
	st.d	$s1, $sp, 208                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 200                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 192                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 56, -40
	.cfi_offset 57, -48
	ld.wu	$a2, $a0, 412
	andi	$a2, $a2, 15
	ori	$a3, $zero, 2
	beq	$a2, $a3, .LBB140_3
# %bb.1:
	ori	$a3, $zero, 1
	bne	$a2, $a3, .LBB140_5
# %bb.2:
	pcalau12i	$a2, %pc_hi20(_ZTVN15btSoftColliders13CollideSDF_RSE+16)
	addi.d	$a2, $a2, %pc_lo12(_ZTVN15btSoftColliders13CollideSDF_RSE+16)
	ld.w	$a3, $a1, 256
	st.d	$a2, $sp, 16
	addi.d	$a2, $a3, -2
	sltui	$a2, $a2, 1
	maskeqz	$fp, $a1, $a2
	sltui	$a2, $fp, 1
	addi.d	$a3, $fp, 72
	addi.d	$a4, $a1, 8
	masknez	$a3, $a3, $a2
	maskeqz	$a2, $a4, $a2
	or	$a2, $a2, $a3
	fld.s	$fa0, $a2, 48
	fld.s	$fa1, $a2, 52
	fld.s	$fa2, $a2, 56
	fld.s	$fa3, $a1, 56
	ld.d	$a2, $a0, 200
	fld.s	$fa4, $a1, 60
	fld.s	$fa5, $a1, 64
	fsub.s	$fa0, $fa0, $fa3
	ld.d	$a3, $a2, 0
	fsub.s	$fa1, $fa1, $fa4
	fsub.s	$fa2, $fa2, $fa5
	fmul.s	$fa1, $fa1, $fa1
	ld.d	$a3, $a3, 88
	fmadd.s	$fa0, $fa0, $fa0, $fa1
	fmadd.s	$fa0, $fa2, $fa2, $fa0
	fsqrt.s	$fs1, $fa0
	move	$s0, $a0
	move	$a0, $a2
	move	$s1, $a1
	jirl	$ra, $a3, 0
	ld.d	$a0, $s1, 200
	ld.d	$a1, $a0, 0
	ld.d	$a4, $a1, 16
	fmov.s	$fs0, $fa0
	addi.d	$a1, $s1, 72
	addi.d	$a2, $sp, 176
	addi.d	$a3, $sp, 160
	jirl	$ra, $a4, 0
	vld	$vr0, $sp, 176
	vld	$vr1, $sp, 160
	vst	$vr0, $sp, 128
	fld.s	$fa0, $sp, 128
	vst	$vr1, $sp, 144
	fld.s	$fa1, $sp, 132
	fsub.s	$fa0, $fa0, $fs0
	fst.s	$fa0, $sp, 128
	fld.s	$fa0, $sp, 136
	fsub.s	$fa1, $fa1, $fs0
	fst.s	$fa1, $sp, 132
	fld.s	$fa1, $sp, 144
	fsub.s	$fa0, $fa0, $fs0
	fst.s	$fa0, $sp, 136
	fld.s	$fa0, $sp, 148
	fadd.s	$fa1, $fs0, $fa1
	fld.s	$fa2, $sp, 152
	fst.s	$fa1, $sp, 144
	fadd.s	$fa0, $fs0, $fa0
	fst.s	$fa0, $sp, 148
	fadd.s	$fa0, $fs0, $fa2
	fst.s	$fa0, $sp, 152
	st.d	$s0, $sp, 24
	st.d	$s1, $sp, 32
	st.d	$fp, $sp, 40
	fadd.s	$fa0, $fs0, $fs1
	ld.d	$a1, $s0, 1144
	fst.s	$fa0, $sp, 48
	fst.s	$fs0, $sp, 52
	addi.d	$a0, $s0, 1144
	b	.LBB140_4
.LBB140_3:                              # %.noexc
	lu12i.w	$a2, 260096
	st.w	$a2, $sp, 24
	st.w	$zero, $sp, 40
	pcalau12i	$a2, %pc_hi20(_ZTVN15btSoftColliders12CollideCL_RSE+16)
	addi.d	$a2, $a2, %pc_lo12(_ZTVN15btSoftColliders12CollideCL_RSE+16)
	st.d	$a2, $sp, 16
	fld.s	$fa0, $a0, 516
	ld.d	$a2, $a1, 200
	st.d	$a0, $sp, 48
	st.d	$a1, $sp, 56
	fst.s	$fa0, $sp, 28
	ld.d	$a3, $a2, 0
	ld.d	$a3, $a3, 88
	move	$fp, $a0
	move	$a0, $a2
	move	$s0, $a1
	jirl	$ra, $a3, 0
	ld.d	$a0, $fp, 200
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	fmov.s	$fs0, $fa0
	jirl	$ra, $a1, 0
	fld.s	$fa1, $s0, 236
	fld.s	$fa2, $fp, 340
	fadd.s	$fs0, $fs0, $fa0
	fst.s	$fs0, $sp, 32
	ld.d	$a0, $s0, 200
	fcmp.clt.s	$fcc0, $fa2, $fa1
	fsel	$fa0, $fa1, $fa2, $fcc0
	fst.s	$fa0, $sp, 36
	ld.d	$a1, $a0, 0
	ld.d	$a4, $a1, 16
	addi.d	$a1, $s0, 72
	addi.d	$a2, $sp, 176
	addi.d	$a3, $sp, 160
	jirl	$ra, $a4, 0
	vld	$vr0, $sp, 176
	vld	$vr1, $sp, 160
	vst	$vr0, $sp, 128
	fld.s	$fa0, $sp, 128
	vst	$vr1, $sp, 144
	fld.s	$fa1, $sp, 132
	fsub.s	$fa0, $fa0, $fs0
	fst.s	$fa0, $sp, 128
	fld.s	$fa0, $sp, 136
	fsub.s	$fa1, $fa1, $fs0
	fst.s	$fa1, $sp, 132
	fld.s	$fa1, $sp, 144
	fsub.s	$fa0, $fa0, $fs0
	fst.s	$fa0, $sp, 136
	fld.s	$fa0, $sp, 148
	fadd.s	$fa1, $fs0, $fa1
	fst.s	$fa1, $sp, 144
	fld.s	$fa1, $sp, 152
	fadd.s	$fa0, $fs0, $fa0
	fst.s	$fa0, $sp, 148
	ld.d	$a1, $fp, 1272
	fadd.s	$fa0, $fs0, $fa1
	fst.s	$fa0, $sp, 152
	addi.d	$a0, $fp, 1272
.LBB140_4:
	addi.d	$a2, $sp, 128
	addi.d	$a3, $sp, 16
	pcaddu18i	$ra, %call36(_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE)
	jirl	$ra, $ra, 0
.LBB140_5:
	fld.d	$fs1, $sp, 192                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 200                  # 8-byte Folded Reload
	ld.d	$s1, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 216                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 224                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 232                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 240
	ret
.Lfunc_end140:
	.size	_ZN10btSoftBody23defaultCollisionHandlerEP17btCollisionObject, .Lfunc_end140-_ZN10btSoftBody23defaultCollisionHandlerEP17btCollisionObject
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE,"axG",@progbits,_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE,comdat
	.weak	_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE # -- Begin function _ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE
	.p2align	5
	.type	_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE,@function
_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE: # @_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE
.Lfunc_begin16:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception16
# %bb.0:
	addi.d	$sp, $sp, -144
	.cfi_def_cfa_offset 144
	st.d	$ra, $sp, 136                   # 8-byte Folded Spill
	st.d	$fp, $sp, 128                   # 8-byte Folded Spill
	st.d	$s0, $sp, 120                   # 8-byte Folded Spill
	st.d	$s1, $sp, 112                   # 8-byte Folded Spill
	st.d	$s2, $sp, 104                   # 8-byte Folded Spill
	st.d	$s3, $sp, 96                    # 8-byte Folded Spill
	st.d	$s4, $sp, 88                    # 8-byte Folded Spill
	st.d	$s5, $sp, 80                    # 8-byte Folded Spill
	st.d	$s6, $sp, 72                    # 8-byte Folded Spill
	st.d	$s7, $sp, 64                    # 8-byte Folded Spill
	st.d	$s8, $sp, 56                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 48                   # 8-byte Folded Spill
	fst.d	$fs1, $sp, 40                   # 8-byte Folded Spill
	fst.d	$fs2, $sp, 32                   # 8-byte Folded Spill
	fst.d	$fs3, $sp, 24                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 16                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 8                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	beqz	$a1, .LBB141_2
# %bb.1:                                # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeE9push_backERKS2_.exit
	move	$fp, $a3
	move	$s0, $a1
	fld.s	$fs0, $a2, 0
	fld.s	$fs1, $a2, 4
	fld.s	$fs2, $a2, 8
	fld.s	$fs3, $a2, 16
	fld.s	$fs4, $a2, 20
	fld.s	$fs5, $a2, 24
	ori	$a0, $zero, 512
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	move	$s1, $a0
	st.d	$s0, $a0, 0
	ori	$s8, $zero, 64
	ori	$s6, $zero, 1
	b	.LBB141_5
.LBB141_2:
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	ret
.LBB141_3:                              #   in Loop: Header=BB141_5 Depth=1
	ld.d	$a0, $fp, 0
	ld.d	$a2, $a0, 24
.Ltmp429:                               # EH_LABEL
	move	$a0, $fp
	move	$a1, $s0
	jirl	$ra, $a2, 0
.Ltmp430:                               # EH_LABEL
	.p2align	4, , 16
.LBB141_4:                              # %_Z9IntersectRK12btDbvtAabbMmS1_.exit.thread
                                        #   in Loop: Header=BB141_5 Depth=1
	move	$s6, $s7
	blez	$s7, .LBB141_37
.LBB141_5:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_20 Depth 2
                                        #     Child Loop BB141_23 Depth 2
                                        #     Child Loop BB141_30 Depth 2
                                        #     Child Loop BB141_33 Depth 2
	addi.w	$s7, $s6, -1
	slli.d	$s3, $s7, 3
	ldx.d	$s0, $s1, $s3
	fld.s	$fa0, $s0, 0
	fcmp.cult.s	$fcc0, $fs3, $fa0
	bcnez	$fcc0, .LBB141_4
# %bb.6:                                #   in Loop: Header=BB141_5 Depth=1
	fld.s	$fa0, $s0, 16
	fcmp.cult.s	$fcc0, $fa0, $fs0
	bcnez	$fcc0, .LBB141_4
# %bb.7:                                #   in Loop: Header=BB141_5 Depth=1
	fld.s	$fa0, $s0, 4
	fcmp.cult.s	$fcc0, $fs4, $fa0
	bcnez	$fcc0, .LBB141_4
# %bb.8:                                #   in Loop: Header=BB141_5 Depth=1
	fld.s	$fa0, $s0, 20
	fcmp.cult.s	$fcc0, $fa0, $fs1
	bcnez	$fcc0, .LBB141_4
# %bb.9:                                #   in Loop: Header=BB141_5 Depth=1
	fld.s	$fa0, $s0, 8
	fcmp.cult.s	$fcc0, $fs5, $fa0
	bcnez	$fcc0, .LBB141_4
# %bb.10:                               # %_Z9IntersectRK12btDbvtAabbMmS1_.exit
                                        #   in Loop: Header=BB141_5 Depth=1
	fld.s	$fa0, $s0, 24
	fcmp.cult.s	$fcc0, $fa0, $fs2
	bcnez	$fcc0, .LBB141_4
# %bb.11:                               #   in Loop: Header=BB141_5 Depth=1
	ld.d	$a0, $s0, 48
	beqz	$a0, .LBB141_3
# %bb.12:                               #   in Loop: Header=BB141_5 Depth=1
	addi.w	$s5, $s8, 0
	bne	$s7, $s5, .LBB141_14
# %bb.13:                               #   in Loop: Header=BB141_5 Depth=1
	sltui	$a0, $s5, 1
	slli.d	$a1, $s8, 1
	masknez	$a1, $a1, $a0
	ori	$a2, $zero, 1
	maskeqz	$a0, $a2, $a0
	or	$s4, $a0, $a1
	addi.w	$a0, $s4, 0
	bgeu	$a0, $s6, .LBB141_15
.LBB141_14:                             #   in Loop: Header=BB141_5 Depth=1
	move	$s2, $s1
	move	$s4, $s8
	b	.LBB141_25
.LBB141_15:                             #   in Loop: Header=BB141_5 Depth=1
	slli.d	$a0, $a0, 3
.Ltmp421:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp422:                               # EH_LABEL
# %bb.16:                               # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeE8allocateEi.exit.i.i28
                                        #   in Loop: Header=BB141_5 Depth=1
	move	$s2, $a0
	beqz	$s5, .LBB141_24
# %bb.17:                               # %.lr.ph.i.i.i36
                                        #   in Loop: Header=BB141_5 Depth=1
	move	$a0, $zero
	bstrpick.d	$a1, $s8, 31, 0
	ori	$a2, $zero, 4
	bltu	$s5, $a2, .LBB141_22
# %bb.18:                               # %.lr.ph.i.i.i36
                                        #   in Loop: Header=BB141_5 Depth=1
	sub.d	$a2, $s2, $s1
	ori	$a3, $zero, 32
	bltu	$a2, $a3, .LBB141_22
# %bb.19:                               # %vector.ph131
                                        #   in Loop: Header=BB141_5 Depth=1
	bstrpick.d	$a0, $a1, 30, 2
	slli.d	$a0, $a0, 2
	addi.d	$a2, $s1, 16
	addi.d	$a3, $s2, 16
	move	$a4, $a0
	.p2align	4, , 16
.LBB141_20:                             # %vector.body134
                                        #   Parent Loop BB141_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a2, -16
	vld	$vr1, $a2, 0
	vst	$vr0, $a3, -16
	vst	$vr1, $a3, 0
	addi.d	$a4, $a4, -4
	addi.d	$a2, $a2, 32
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB141_20
# %bb.21:                               # %middle.block139
                                        #   in Loop: Header=BB141_5 Depth=1
	beq	$a0, $a1, .LBB141_24
.LBB141_22:                             # %scalar.ph129.preheader
                                        #   in Loop: Header=BB141_5 Depth=1
	sub.d	$a1, $a1, $a0
	alsl.d	$a2, $a0, $s1, 3
	alsl.d	$a0, $a0, $s2, 3
	.p2align	4, , 16
.LBB141_23:                             # %scalar.ph129
                                        #   Parent Loop BB141_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	st.d	$a3, $a0, 0
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 8
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB141_23
.LBB141_24:                             # %_ZNK20btAlignedObjectArrayIPK10btDbvtNodeE4copyEiiPS2_.exit.i.i30
                                        #   in Loop: Header=BB141_5 Depth=1
.Ltmp423:                               # EH_LABEL
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp424:                               # EH_LABEL
.LBB141_25:                             # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeE10deallocateEv.exit.i.i33
                                        #   in Loop: Header=BB141_5 Depth=1
	ld.d	$a0, $s0, 40
	addi.w	$a1, $s4, 0
	stx.d	$a0, $s2, $s3
	bne	$s6, $a1, .LBB141_35
# %bb.26:                               #   in Loop: Header=BB141_5 Depth=1
	slli.d	$s4, $s6, 1
	addi.w	$a0, $s4, 0
	slli.d	$a0, $a0, 3
.Ltmp425:                               # EH_LABEL
	ori	$a1, $zero, 16
	move	$s1, $s2
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp426:                               # EH_LABEL
# %bb.27:                               # %.lr.ph.i.i.i59
                                        #   in Loop: Header=BB141_5 Depth=1
	move	$s3, $a0
	move	$a0, $zero
	bstrpick.d	$s7, $s6, 31, 0
	ori	$a1, $zero, 4
	bltu	$s6, $a1, .LBB141_32
# %bb.28:                               # %.lr.ph.i.i.i59
                                        #   in Loop: Header=BB141_5 Depth=1
	sub.d	$a1, $s3, $s2
	ori	$a2, $zero, 32
	bltu	$a1, $a2, .LBB141_32
# %bb.29:                               # %vector.ph
                                        #   in Loop: Header=BB141_5 Depth=1
	bstrpick.d	$a0, $s7, 30, 2
	slli.d	$a0, $a0, 2
	addi.d	$a1, $s2, 16
	addi.d	$a2, $s3, 16
	move	$a3, $a0
	.p2align	4, , 16
.LBB141_30:                             # %vector.body
                                        #   Parent Loop BB141_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vld	$vr0, $a1, -16
	vld	$vr1, $a1, 0
	vst	$vr0, $a2, -16
	vst	$vr1, $a2, 0
	addi.d	$a3, $a3, -4
	addi.d	$a1, $a1, 32
	addi.d	$a2, $a2, 32
	bnez	$a3, .LBB141_30
# %bb.31:                               # %middle.block
                                        #   in Loop: Header=BB141_5 Depth=1
	beq	$a0, $s7, .LBB141_34
.LBB141_32:                             # %scalar.ph.preheader
                                        #   in Loop: Header=BB141_5 Depth=1
	sub.d	$a1, $s7, $a0
	alsl.d	$a2, $a0, $s2, 3
	alsl.d	$a0, $a0, $s3, 3
	.p2align	4, , 16
.LBB141_33:                             # %scalar.ph
                                        #   Parent Loop BB141_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	ld.d	$a3, $a2, 0
	st.d	$a3, $a0, 0
	addi.d	$a1, $a1, -1
	addi.d	$a2, $a2, 8
	addi.d	$a0, $a0, 8
	bnez	$a1, .LBB141_33
.LBB141_34:                             # %_ZNK20btAlignedObjectArrayIPK10btDbvtNodeE4copyEiiPS2_.exit.thread.i.i64
                                        #   in Loop: Header=BB141_5 Depth=1
.Ltmp427:                               # EH_LABEL
	move	$s1, $s2
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp428:                               # EH_LABEL
	move	$s2, $s3
	b	.LBB141_36
.LBB141_35:                             # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeE10deallocateEv.exit.i.i33._ZN20btAlignedObjectArrayIPK10btDbvtNodeE9push_backERKS2_.exit70_crit_edge
                                        #   in Loop: Header=BB141_5 Depth=1
	move	$s7, $s6
.LBB141_36:                             # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeE9push_backERKS2_.exit70
                                        #   in Loop: Header=BB141_5 Depth=1
	ld.d	$a0, $s0, 48
	slli.d	$a1, $s7, 3
	stx.d	$a0, $s2, $a1
	addi.w	$s7, $s6, 1
	move	$s1, $s2
	move	$s8, $s4
	b	.LBB141_4
.LBB141_37:                             # %_ZN20btAlignedObjectArrayIPK10btDbvtNodeED2Ev.exit
	move	$a0, $s1
	fld.d	$fs5, $sp, 8                    # 8-byte Folded Reload
	fld.d	$fs4, $sp, 16                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 24                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 32                   # 8-byte Folded Reload
	fld.d	$fs1, $sp, 40                   # 8-byte Folded Reload
	fld.d	$fs0, $sp, 48                   # 8-byte Folded Reload
	ld.d	$s8, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 88                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 96                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 104                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 112                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 120                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 128                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 136                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 144
	pcaddu18i	$t8, %call36(_Z21btAlignedFreeInternalPv)
	jr	$t8
.LBB141_38:
.Ltmp431:                               # EH_LABEL
	move	$fp, $a0
.Ltmp432:                               # EH_LABEL
	move	$a0, $s1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp433:                               # EH_LABEL
# %bb.39:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB141_40:
.Ltmp434:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end141:
	.size	_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE, .Lfunc_end141-_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE
	.cfi_endproc
	.section	.gcc_except_table._ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE,"aG",@progbits,_ZN6btDbvt9collideTVEPK10btDbvtNodeRK12btDbvtAabbMmRNS_8ICollideE,comdat
	.p2align	2, 0x0
GCC_except_table141:
.Lexception16:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase12-.Lttbaseref12
.Lttbaseref12:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end16-.Lcst_begin16
.Lcst_begin16:
	.uleb128 .Lfunc_begin16-.Lfunc_begin16  # >> Call Site 1 <<
	.uleb128 .Ltmp429-.Lfunc_begin16        #   Call between .Lfunc_begin16 and .Ltmp429
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp429-.Lfunc_begin16        # >> Call Site 2 <<
	.uleb128 .Ltmp428-.Ltmp429              #   Call between .Ltmp429 and .Ltmp428
	.uleb128 .Ltmp431-.Lfunc_begin16        #     jumps to .Ltmp431
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp428-.Lfunc_begin16        # >> Call Site 3 <<
	.uleb128 .Ltmp432-.Ltmp428              #   Call between .Ltmp428 and .Ltmp432
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp432-.Lfunc_begin16        # >> Call Site 4 <<
	.uleb128 .Ltmp433-.Ltmp432              #   Call between .Ltmp432 and .Ltmp433
	.uleb128 .Ltmp434-.Lfunc_begin16        #     jumps to .Ltmp434
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp433-.Lfunc_begin16        # >> Call Site 5 <<
	.uleb128 .Lfunc_end141-.Ltmp433         #   Call between .Ltmp433 and .Lfunc_end141
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end16:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase12:
	.p2align	2, 0x0
                                        # -- End function
	.text
	.globl	_ZN10btSoftBody23defaultCollisionHandlerEPS_ # -- Begin function _ZN10btSoftBody23defaultCollisionHandlerEPS_
	.p2align	5
	.type	_ZN10btSoftBody23defaultCollisionHandlerEPS_,@function
_ZN10btSoftBody23defaultCollisionHandlerEPS_: # @_ZN10btSoftBody23defaultCollisionHandlerEPS_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -96
	.cfi_def_cfa_offset 96
	st.d	$ra, $sp, 88                    # 8-byte Folded Spill
	st.d	$fp, $sp, 80                    # 8-byte Folded Spill
	st.d	$s0, $sp, 72                    # 8-byte Folded Spill
	fst.d	$fs0, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 56, -32
	move	$fp, $a1
	ld.w	$a2, $a0, 412
	ld.w	$a1, $a1, 412
	and	$a2, $a2, $a1
	andi	$a2, $a2, 48
	ori	$a3, $zero, 16
	beq	$a2, $a3, .LBB142_5
# %bb.1:
	ori	$a3, $zero, 32
	bne	$a2, $a3, .LBB142_8
# %bb.2:
	bne	$a0, $fp, .LBB142_4
# %bb.3:
	andi	$a1, $a1, 64
	beqz	$a1, .LBB142_8
.LBB142_4:                              # %.noexc
	lu12i.w	$a1, 260096
	st.w	$a1, $sp, 24
	st.w	$zero, $sp, 40
	pcalau12i	$a1, %pc_hi20(_ZTVN15btSoftColliders12CollideCL_SSE+16)
	addi.d	$a2, $a1, %pc_lo12(_ZTVN15btSoftColliders12CollideCL_SSE+16)
	fld.s	$fa0, $a0, 516
	ld.d	$a1, $a0, 200
	st.d	$a2, $sp, 16
	fst.s	$fa0, $sp, 28
	ld.d	$a2, $a1, 0
	ld.d	$a2, $a2, 88
	move	$s0, $a0
	move	$a0, $a1
	jirl	$ra, $a2, 0
	ld.d	$a0, $fp, 200
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	fmov.s	$fs0, $fa0
	jirl	$ra, $a1, 0
	fld.s	$fa1, $s0, 340
	fld.s	$fa2, $fp, 340
	fadd.s	$fa0, $fs0, $fa0
	fst.s	$fa0, $sp, 32
	fcmp.clt.s	$fcc0, $fa1, $fa2
	fsel	$fa0, $fa2, $fa1, $fcc0
	fst.s	$fa0, $sp, 36
	ld.d	$a1, $s0, 1272
	ld.d	$a2, $fp, 1272
	st.d	$s0, $sp, 48
	st.d	$fp, $sp, 56
	addi.d	$a0, $s0, 1272
	b	.LBB142_7
.LBB142_5:
	beq	$a0, $fp, .LBB142_8
# %bb.6:
	pcalau12i	$a1, %pc_hi20(_ZTVN15btSoftColliders12CollideVF_SSE+16)
	addi.d	$a2, $a1, %pc_lo12(_ZTVN15btSoftColliders12CollideVF_SSE+16)
	ld.d	$a1, $a0, 200
	st.d	$a2, $sp, 16
	ld.d	$a2, $a1, 0
	ld.d	$a2, $a2, 88
	move	$s0, $a0
	move	$a0, $a1
	jirl	$ra, $a2, 0
	ld.d	$a0, $fp, 200
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	fmov.s	$fs0, $fa0
	jirl	$ra, $a1, 0
	fadd.s	$fa0, $fs0, $fa0
	fst.s	$fa0, $sp, 40
	ld.d	$a1, $s0, 1144
	ld.d	$a2, $fp, 1208
	st.d	$s0, $sp, 24
	st.d	$fp, $sp, 32
	addi.d	$a0, $s0, 1144
	addi.d	$a3, $sp, 16
	pcaddu18i	$ra, %call36(_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE)
	jirl	$ra, $ra, 0
	ld.d	$a1, $fp, 1144
	ld.d	$a2, $s0, 1208
	st.d	$fp, $sp, 24
	st.d	$s0, $sp, 32
	addi.d	$a0, $fp, 1144
.LBB142_7:
	addi.d	$a3, $sp, 16
	pcaddu18i	$ra, %call36(_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE)
	jirl	$ra, $ra, 0
.LBB142_8:
	fld.d	$fs0, $sp, 64                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 72                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 80                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 88                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 96
	ret
.Lfunc_end142:
	.size	_ZN10btSoftBody23defaultCollisionHandlerEPS_, .Lfunc_end142-_ZN10btSoftBody23defaultCollisionHandlerEPS_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE,"axG",@progbits,_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE,comdat
	.weak	_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE # -- Begin function _ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE
	.p2align	5
	.type	_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE,@function
_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE: # @_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE
.Lfunc_begin17:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception17
# %bb.0:
	addi.d	$sp, $sp, -112
	.cfi_def_cfa_offset 112
	st.d	$ra, $sp, 104                   # 8-byte Folded Spill
	st.d	$fp, $sp, 96                    # 8-byte Folded Spill
	st.d	$s0, $sp, 88                    # 8-byte Folded Spill
	st.d	$s1, $sp, 80                    # 8-byte Folded Spill
	st.d	$s2, $sp, 72                    # 8-byte Folded Spill
	st.d	$s3, $sp, 64                    # 8-byte Folded Spill
	st.d	$s4, $sp, 56                    # 8-byte Folded Spill
	st.d	$s5, $sp, 48                    # 8-byte Folded Spill
	st.d	$s6, $sp, 40                    # 8-byte Folded Spill
	st.d	$s7, $sp, 32                    # 8-byte Folded Spill
	st.d	$s8, $sp, 24                    # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	beqz	$a1, .LBB143_3
# %bb.1:
	move	$s1, $a2
	beqz	$a2, .LBB143_3
# %bb.2:                                # %_ZN20btAlignedObjectArrayIN6btDbvt6sStkNNEE6resizeEiRKS1_.exit
	move	$s2, $a1
	st.d	$a3, $sp, 16                    # 8-byte Folded Spill
	ori	$a0, $zero, 2048
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	move	$s0, $a0
	st.d	$s2, $a0, 0
	st.d	$s1, $a0, 8
	ori	$s7, $zero, 1
	ori	$s8, $zero, 124
	ori	$s4, $zero, 128
	ori	$a4, $zero, 128
	b	.LBB143_6
.LBB143_3:                              # %_ZN20btAlignedObjectArrayIN6btDbvt6sStkNNEED2Ev.exit
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	ret
.LBB143_4:                              #   in Loop: Header=BB143_6 Depth=1
	ld.d	$a1, $s2, 40
	stx.d	$a2, $s0, $fp
	st.d	$a1, $a0, 8
	ld.d	$a0, $s1, 48
	ld.d	$a1, $s2, 40
	alsl.d	$a2, $s7, $s0, 4
	slli.d	$a3, $s7, 4
	stx.d	$a0, $s0, $a3
	st.d	$a1, $a2, 8
	ld.d	$a0, $s1, 40
	ld.d	$a1, $s2, 48
	st.d	$a0, $a2, 16
	st.d	$a1, $a2, 24
	ld.d	$a0, $s1, 48
	ld.d	$a1, $s2, 48
	addi.w	$s6, $s7, 3
	st.d	$a0, $a2, 32
	st.d	$a1, $a2, 40
	.p2align	4, , 16
.LBB143_5:                              # %_Z9IntersectRK12btDbvtAabbMmS1_.exit.thread
                                        #   in Loop: Header=BB143_6 Depth=1
	move	$s7, $s6
	beqz	$s6, .LBB143_33
.LBB143_6:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_15 Depth 2
	addi.w	$s6, $s7, -1
	alsl.d	$a0, $s6, $s0, 4
	slli.d	$fp, $s6, 4
	ldx.d	$s1, $s0, $fp
	ld.d	$s2, $a0, 8
	bge	$s8, $s6, .LBB143_18
# %bb.7:                                #   in Loop: Header=BB143_6 Depth=1
	slli.w	$s5, $s4, 1
	bge	$s4, $s5, .LBB143_12
# %bb.8:                                #   in Loop: Header=BB143_6 Depth=1
	bge	$a4, $s5, .LBB143_12
# %bb.9:                                #   in Loop: Header=BB143_6 Depth=1
	beqz	$s4, .LBB143_13
# %bb.10:                               #   in Loop: Header=BB143_6 Depth=1
	slli.d	$a0, $s5, 4
.Ltmp435:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp436:                               # EH_LABEL
# %bb.11:                               #   in Loop: Header=BB143_6 Depth=1
	move	$s3, $a0
	b	.LBB143_14
	.p2align	4, , 16
.LBB143_12:                             #   in Loop: Header=BB143_6 Depth=1
	move	$s3, $s0
	b	.LBB143_17
.LBB143_13:                             #   in Loop: Header=BB143_6 Depth=1
	move	$s3, $zero
.LBB143_14:                             # %_ZN20btAlignedObjectArrayIN6btDbvt6sStkNNEE8allocateEi.exit.i.i
                                        #   in Loop: Header=BB143_6 Depth=1
	move	$a0, $zero
	.p2align	4, , 16
.LBB143_15:                             #   Parent Loop BB143_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vldx	$vr0, $s0, $a0
	vstx	$vr0, $s3, $a0
	addi.d	$s4, $s4, -1
	addi.d	$a0, $a0, 16
	bnez	$s4, .LBB143_15
# %bb.16:                               # %_ZNK20btAlignedObjectArrayIN6btDbvt6sStkNNEE4copyEiiPS1_.exit.i.i69.loopexit
                                        #   in Loop: Header=BB143_6 Depth=1
.Ltmp437:                               # EH_LABEL
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp438:                               # EH_LABEL
	move	$a4, $s5
.LBB143_17:                             # %_ZN20btAlignedObjectArrayIN6btDbvt6sStkNNEE6resizeEiRKS1_.exit80
                                        #   in Loop: Header=BB143_6 Depth=1
	addi.w	$s8, $s5, -4
	move	$s0, $s3
	move	$s4, $s5
.LBB143_18:                             #   in Loop: Header=BB143_6 Depth=1
	beq	$s1, $s2, .LBB143_28
# %bb.19:                               #   in Loop: Header=BB143_6 Depth=1
	fld.s	$fa0, $s1, 0
	fld.s	$fa1, $s2, 16
	fcmp.cult.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB143_5
# %bb.20:                               #   in Loop: Header=BB143_6 Depth=1
	fld.s	$fa0, $s1, 16
	fld.s	$fa1, $s2, 0
	fcmp.cult.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB143_5
# %bb.21:                               #   in Loop: Header=BB143_6 Depth=1
	fld.s	$fa0, $s1, 4
	fld.s	$fa1, $s2, 20
	fcmp.cult.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB143_5
# %bb.22:                               #   in Loop: Header=BB143_6 Depth=1
	fld.s	$fa0, $s1, 20
	fld.s	$fa1, $s2, 4
	fcmp.cult.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB143_5
# %bb.23:                               #   in Loop: Header=BB143_6 Depth=1
	fld.s	$fa0, $s1, 8
	fld.s	$fa1, $s2, 24
	fcmp.cult.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB143_5
# %bb.24:                               # %_Z9IntersectRK12btDbvtAabbMmS1_.exit
                                        #   in Loop: Header=BB143_6 Depth=1
	fld.s	$fa0, $s1, 24
	fld.s	$fa1, $s2, 8
	fcmp.cult.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB143_5
# %bb.25:                               #   in Loop: Header=BB143_6 Depth=1
	ld.d	$a0, $s1, 48
	ld.d	$a1, $s2, 48
	beqz	$a0, .LBB143_30
# %bb.26:                               #   in Loop: Header=BB143_6 Depth=1
	ld.d	$a2, $s1, 40
	alsl.d	$a0, $s6, $s0, 4
	bnez	$a1, .LBB143_4
# %bb.27:                               #   in Loop: Header=BB143_6 Depth=1
	stx.d	$a2, $s0, $fp
	st.d	$s2, $a0, 8
	ld.d	$a0, $s1, 48
	addi.w	$s6, $s7, 1
	alsl.d	$a1, $s7, $s0, 4
	slli.d	$a2, $s7, 4
	stx.d	$a0, $s0, $a2
	st.d	$s2, $a1, 8
	b	.LBB143_5
	.p2align	4, , 16
.LBB143_28:                             #   in Loop: Header=BB143_6 Depth=1
	ld.d	$a0, $s1, 48
	beqz	$a0, .LBB143_5
# %bb.29:                               #   in Loop: Header=BB143_6 Depth=1
	ld.d	$a0, $s1, 40
	alsl.d	$a1, $s6, $s0, 4
	stx.d	$a0, $s0, $fp
	st.d	$a0, $a1, 8
	ld.d	$a0, $s1, 48
	alsl.d	$a1, $s7, $s0, 4
	slli.d	$a2, $s7, 4
	stx.d	$a0, $s0, $a2
	st.d	$a0, $a1, 8
	vld	$vr0, $s1, 40
	addi.w	$s6, $s7, 2
	vst	$vr0, $a1, 16
	b	.LBB143_5
.LBB143_30:                             #   in Loop: Header=BB143_6 Depth=1
	beqz	$a1, .LBB143_32
# %bb.31:                               #   in Loop: Header=BB143_6 Depth=1
	ld.d	$a0, $s2, 40
	alsl.d	$a1, $s6, $s0, 4
	stx.d	$s1, $s0, $fp
	st.d	$a0, $a1, 8
	ld.d	$a0, $s2, 48
	addi.w	$s6, $s7, 1
	alsl.d	$a1, $s7, $s0, 4
	slli.d	$a2, $s7, 4
	stx.d	$s1, $s0, $a2
	st.d	$a0, $a1, 8
	b	.LBB143_5
.LBB143_32:                             #   in Loop: Header=BB143_6 Depth=1
	ld.d	$a0, $sp, 16                    # 8-byte Folded Reload
	ld.d	$a1, $a0, 0
	ld.d	$a3, $a1, 16
.Ltmp440:                               # EH_LABEL
	move	$a1, $s1
	move	$a2, $s2
	move	$fp, $a4
	jirl	$ra, $a3, 0
	move	$a4, $fp
.Ltmp441:                               # EH_LABEL
	b	.LBB143_5
.LBB143_33:
	move	$a0, $s0
	ld.d	$s8, $sp, 24                    # 8-byte Folded Reload
	ld.d	$s7, $sp, 32                    # 8-byte Folded Reload
	ld.d	$s6, $sp, 40                    # 8-byte Folded Reload
	ld.d	$s5, $sp, 48                    # 8-byte Folded Reload
	ld.d	$s4, $sp, 56                    # 8-byte Folded Reload
	ld.d	$s3, $sp, 64                    # 8-byte Folded Reload
	ld.d	$s2, $sp, 72                    # 8-byte Folded Reload
	ld.d	$s1, $sp, 80                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 88                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 96                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 104                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 112
	pcaddu18i	$t8, %call36(_Z21btAlignedFreeInternalPv)
	jr	$t8
.LBB143_34:
.Ltmp442:                               # EH_LABEL
	b	.LBB143_36
.LBB143_35:
.Ltmp439:                               # EH_LABEL
.LBB143_36:
	move	$fp, $a0
.Ltmp443:                               # EH_LABEL
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp444:                               # EH_LABEL
# %bb.37:                               # %_ZN20btAlignedObjectArrayIN6btDbvt6sStkNNEED2Ev.exit86
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB143_38:
.Ltmp445:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end143:
	.size	_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE, .Lfunc_end143-_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE
	.cfi_endproc
	.section	.gcc_except_table._ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE,"aG",@progbits,_ZN6btDbvt9collideTTEPK10btDbvtNodeS2_RNS_8ICollideE,comdat
	.p2align	2, 0x0
GCC_except_table143:
.Lexception17:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase13-.Lttbaseref13
.Lttbaseref13:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end17-.Lcst_begin17
.Lcst_begin17:
	.uleb128 .Lfunc_begin17-.Lfunc_begin17  # >> Call Site 1 <<
	.uleb128 .Ltmp435-.Lfunc_begin17        #   Call between .Lfunc_begin17 and .Ltmp435
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp435-.Lfunc_begin17        # >> Call Site 2 <<
	.uleb128 .Ltmp438-.Ltmp435              #   Call between .Ltmp435 and .Ltmp438
	.uleb128 .Ltmp439-.Lfunc_begin17        #     jumps to .Ltmp439
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp440-.Lfunc_begin17        # >> Call Site 3 <<
	.uleb128 .Ltmp441-.Ltmp440              #   Call between .Ltmp440 and .Ltmp441
	.uleb128 .Ltmp442-.Lfunc_begin17        #     jumps to .Ltmp442
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp441-.Lfunc_begin17        # >> Call Site 4 <<
	.uleb128 .Ltmp443-.Ltmp441              #   Call between .Ltmp441 and .Ltmp443
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp443-.Lfunc_begin17        # >> Call Site 5 <<
	.uleb128 .Ltmp444-.Ltmp443              #   Call between .Ltmp443 and .Ltmp444
	.uleb128 .Ltmp445-.Lfunc_begin17        #     jumps to .Ltmp445
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp444-.Lfunc_begin17        # >> Call Site 6 <<
	.uleb128 .Lfunc_end143-.Ltmp444         #   Call between .Ltmp444 and .Lfunc_end143
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end17:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase13:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN6btDbvt8ICollideD2Ev,"axG",@progbits,_ZN6btDbvt8ICollideD2Ev,comdat
	.weak	_ZN6btDbvt8ICollideD2Ev         # -- Begin function _ZN6btDbvt8ICollideD2Ev
	.p2align	5
	.type	_ZN6btDbvt8ICollideD2Ev,@function
_ZN6btDbvt8ICollideD2Ev:                # @_ZN6btDbvt8ICollideD2Ev
# %bb.0:
	ret
.Lfunc_end144:
	.size	_ZN6btDbvt8ICollideD2Ev, .Lfunc_end144-_ZN6btDbvt8ICollideD2Ev
                                        # -- End function
	.section	.text._ZN10btSoftBody5JointD0Ev,"axG",@progbits,_ZN10btSoftBody5JointD0Ev,comdat
	.weak	_ZN10btSoftBody5JointD0Ev       # -- Begin function _ZN10btSoftBody5JointD0Ev
	.p2align	5
	.type	_ZN10btSoftBody5JointD0Ev,@function
_ZN10btSoftBody5JointD0Ev:              # @_ZN10btSoftBody5JointD0Ev
# %bb.0:
	amswap.w	$zero, $ra, $zero
.Lfunc_end145:
	.size	_ZN10btSoftBody5JointD0Ev, .Lfunc_end145-_ZN10btSoftBody5JointD0Ev
                                        # -- End function
	.section	.text._ZN10btSoftBody6CJointD0Ev,"axG",@progbits,_ZN10btSoftBody6CJointD0Ev,comdat
	.weak	_ZN10btSoftBody6CJointD0Ev      # -- Begin function _ZN10btSoftBody6CJointD0Ev
	.p2align	5
	.type	_ZN10btSoftBody6CJointD0Ev,@function
_ZN10btSoftBody6CJointD0Ev:             # @_ZN10btSoftBody6CJointD0Ev
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.Lfunc_end146:
	.size	_ZN10btSoftBody6CJointD0Ev, .Lfunc_end146-_ZN10btSoftBody6CJointD0Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK10btSoftBody6CJoint4TypeEv,"axG",@progbits,_ZNK10btSoftBody6CJoint4TypeEv,comdat
	.weak	_ZNK10btSoftBody6CJoint4TypeEv  # -- Begin function _ZNK10btSoftBody6CJoint4TypeEv
	.p2align	5
	.type	_ZNK10btSoftBody6CJoint4TypeEv,@function
_ZNK10btSoftBody6CJoint4TypeEv:         # @_ZNK10btSoftBody6CJoint4TypeEv
# %bb.0:
	ori	$a0, $zero, 2
	ret
.Lfunc_end147:
	.size	_ZNK10btSoftBody6CJoint4TypeEv, .Lfunc_end147-_ZNK10btSoftBody6CJoint4TypeEv
                                        # -- End function
	.section	.text._ZN17btCollisionObject24checkCollideWithOverrideEPS_,"axG",@progbits,_ZN17btCollisionObject24checkCollideWithOverrideEPS_,comdat
	.weak	_ZN17btCollisionObject24checkCollideWithOverrideEPS_ # -- Begin function _ZN17btCollisionObject24checkCollideWithOverrideEPS_
	.p2align	5
	.type	_ZN17btCollisionObject24checkCollideWithOverrideEPS_,@function
_ZN17btCollisionObject24checkCollideWithOverrideEPS_: # @_ZN17btCollisionObject24checkCollideWithOverrideEPS_
# %bb.0:
	ori	$a0, $zero, 1
	ret
.Lfunc_end148:
	.size	_ZN17btCollisionObject24checkCollideWithOverrideEPS_, .Lfunc_end148-_ZN17btCollisionObject24checkCollideWithOverrideEPS_
                                        # -- End function
	.section	.text._ZN10btSoftBody17setCollisionShapeEP16btCollisionShape,"axG",@progbits,_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape,comdat
	.weak	_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape # -- Begin function _ZN10btSoftBody17setCollisionShapeEP16btCollisionShape
	.p2align	5
	.type	_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape,@function
_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape: # @_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape
# %bb.0:
	ret
.Lfunc_end149:
	.size	_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape, .Lfunc_end149-_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape
                                        # -- End function
	.section	.text._ZNK10btSoftBody7getAabbER9btVector3S1_,"axG",@progbits,_ZNK10btSoftBody7getAabbER9btVector3S1_,comdat
	.weak	_ZNK10btSoftBody7getAabbER9btVector3S1_ # -- Begin function _ZNK10btSoftBody7getAabbER9btVector3S1_
	.p2align	5
	.type	_ZNK10btSoftBody7getAabbER9btVector3S1_,@function
_ZNK10btSoftBody7getAabbER9btVector3S1_: # @_ZNK10btSoftBody7getAabbER9btVector3S1_
# %bb.0:
	vld	$vr0, $a0, 1108
	vst	$vr0, $a1, 0
	vld	$vr0, $a0, 1124
	vst	$vr0, $a2, 0
	ret
.Lfunc_end150:
	.size	_ZNK10btSoftBody7getAabbER9btVector3S1_, .Lfunc_end150-_ZNK10btSoftBody7getAabbER9btVector3S1_
                                        # -- End function
	.section	.text._ZN10btSoftBody6LJointD0Ev,"axG",@progbits,_ZN10btSoftBody6LJointD0Ev,comdat
	.weak	_ZN10btSoftBody6LJointD0Ev      # -- Begin function _ZN10btSoftBody6LJointD0Ev
	.p2align	5
	.type	_ZN10btSoftBody6LJointD0Ev,@function
_ZN10btSoftBody6LJointD0Ev:             # @_ZN10btSoftBody6LJointD0Ev
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.Lfunc_end151:
	.size	_ZN10btSoftBody6LJointD0Ev, .Lfunc_end151-_ZN10btSoftBody6LJointD0Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK10btSoftBody6LJoint4TypeEv,"axG",@progbits,_ZNK10btSoftBody6LJoint4TypeEv,comdat
	.weak	_ZNK10btSoftBody6LJoint4TypeEv  # -- Begin function _ZNK10btSoftBody6LJoint4TypeEv
	.p2align	5
	.type	_ZNK10btSoftBody6LJoint4TypeEv,@function
_ZNK10btSoftBody6LJoint4TypeEv:         # @_ZNK10btSoftBody6LJoint4TypeEv
# %bb.0:
	move	$a0, $zero
	ret
.Lfunc_end152:
	.size	_ZNK10btSoftBody6LJoint4TypeEv, .Lfunc_end152-_ZNK10btSoftBody6LJoint4TypeEv
                                        # -- End function
	.section	.text._ZN10btSoftBody5JointD2Ev,"axG",@progbits,_ZN10btSoftBody5JointD2Ev,comdat
	.weak	_ZN10btSoftBody5JointD2Ev       # -- Begin function _ZN10btSoftBody5JointD2Ev
	.p2align	5
	.type	_ZN10btSoftBody5JointD2Ev,@function
_ZN10btSoftBody5JointD2Ev:              # @_ZN10btSoftBody5JointD2Ev
# %bb.0:
	ret
.Lfunc_end153:
	.size	_ZN10btSoftBody5JointD2Ev, .Lfunc_end153-_ZN10btSoftBody5JointD2Ev
                                        # -- End function
	.section	.text._ZN10btSoftBody6AJointD0Ev,"axG",@progbits,_ZN10btSoftBody6AJointD0Ev,comdat
	.weak	_ZN10btSoftBody6AJointD0Ev      # -- Begin function _ZN10btSoftBody6AJointD0Ev
	.p2align	5
	.type	_ZN10btSoftBody6AJointD0Ev,@function
_ZN10btSoftBody6AJointD0Ev:             # @_ZN10btSoftBody6AJointD0Ev
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.Lfunc_end154:
	.size	_ZN10btSoftBody6AJointD0Ev, .Lfunc_end154-_ZN10btSoftBody6AJointD0Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK10btSoftBody6AJoint4TypeEv,"axG",@progbits,_ZNK10btSoftBody6AJoint4TypeEv,comdat
	.weak	_ZNK10btSoftBody6AJoint4TypeEv  # -- Begin function _ZNK10btSoftBody6AJoint4TypeEv
	.p2align	5
	.type	_ZNK10btSoftBody6AJoint4TypeEv,@function
_ZNK10btSoftBody6AJoint4TypeEv:         # @_ZNK10btSoftBody6AJoint4TypeEv
# %bb.0:
	ori	$a0, $zero, 1
	ret
.Lfunc_end155:
	.size	_ZNK10btSoftBody6AJoint4TypeEv, .Lfunc_end155-_ZNK10btSoftBody6AJoint4TypeEv
                                        # -- End function
	.section	.text._ZN10btSoftBody15RayFromToCasterD0Ev,"axG",@progbits,_ZN10btSoftBody15RayFromToCasterD0Ev,comdat
	.weak	_ZN10btSoftBody15RayFromToCasterD0Ev # -- Begin function _ZN10btSoftBody15RayFromToCasterD0Ev
	.p2align	5
	.type	_ZN10btSoftBody15RayFromToCasterD0Ev,@function
_ZN10btSoftBody15RayFromToCasterD0Ev:   # @_ZN10btSoftBody15RayFromToCasterD0Ev
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.Lfunc_end156:
	.size	_ZN10btSoftBody15RayFromToCasterD0Ev, .Lfunc_end156-_ZN10btSoftBody15RayFromToCasterD0Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_,"axG",@progbits,_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_,comdat
	.weak	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_ # -- Begin function _ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_
	.p2align	5
	.type	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_,@function
_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_: # @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_
# %bb.0:
	ret
.Lfunc_end157:
	.size	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_, .Lfunc_end157-_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_
                                        # -- End function
	.section	.text._ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef,"axG",@progbits,_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef,comdat
	.weak	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef # -- Begin function _ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef
	.p2align	5
	.type	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef,@function
_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef: # @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef
	.cfi_startproc
# %bb.0:
	ld.d	$a2, $a0, 0
	ld.d	$a2, $a2, 24
	jr	$a2
.Lfunc_end158:
	.size	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef, .Lfunc_end158-_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN6btDbvt8ICollide7DescentEPK10btDbvtNode,"axG",@progbits,_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode,comdat
	.weak	_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode # -- Begin function _ZN6btDbvt8ICollide7DescentEPK10btDbvtNode
	.p2align	5
	.type	_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode,@function
_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode: # @_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode
# %bb.0:
	ori	$a0, $zero, 1
	ret
.Lfunc_end159:
	.size	_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode, .Lfunc_end159-_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode
                                        # -- End function
	.section	.text._ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode,"axG",@progbits,_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode,comdat
	.weak	_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode # -- Begin function _ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode
	.p2align	5
	.type	_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode,@function
_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode: # @_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode
# %bb.0:
	ori	$a0, $zero, 1
	ret
.Lfunc_end160:
	.size	_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode, .Lfunc_end160-_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB161_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB161_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB161_3:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end161:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev, .Lfunc_end161-_ZN20btAlignedObjectArrayIN10btSoftBody8ePSolver1_EED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev # -- Begin function _ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev,@function
_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev: # @_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB162_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB162_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB162_3:                              # %_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end162:
	.size	_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev, .Lfunc_end162-_ZN20btAlignedObjectArrayIN10btSoftBody8eVSolver1_EED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN24btSoftBodyCollisionShapeD0Ev,"axG",@progbits,_ZN24btSoftBodyCollisionShapeD0Ev,comdat
	.weak	_ZN24btSoftBodyCollisionShapeD0Ev # -- Begin function _ZN24btSoftBodyCollisionShapeD0Ev
	.p2align	5
	.type	_ZN24btSoftBodyCollisionShapeD0Ev,@function
_ZN24btSoftBodyCollisionShapeD0Ev:      # @_ZN24btSoftBodyCollisionShapeD0Ev
.Lfunc_begin18:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception18
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
.Ltmp446:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN14btConcaveShapeD2Ev)
	jirl	$ra, $ra, 0
.Ltmp447:                               # EH_LABEL
# %bb.1:
	move	$a0, $fp
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.LBB163_2:
.Ltmp448:                               # EH_LABEL
	move	$s0, $a0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZdlPv)
	jirl	$ra, $ra, 0
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end163:
	.size	_ZN24btSoftBodyCollisionShapeD0Ev, .Lfunc_end163-_ZN24btSoftBodyCollisionShapeD0Ev
	.cfi_endproc
	.section	.gcc_except_table._ZN24btSoftBodyCollisionShapeD0Ev,"aG",@progbits,_ZN24btSoftBodyCollisionShapeD0Ev,comdat
	.p2align	2, 0x0
GCC_except_table163:
.Lexception18:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end18-.Lcst_begin18
.Lcst_begin18:
	.uleb128 .Ltmp446-.Lfunc_begin18        # >> Call Site 1 <<
	.uleb128 .Ltmp447-.Ltmp446              #   Call between .Ltmp446 and .Ltmp447
	.uleb128 .Ltmp448-.Lfunc_begin18        #     jumps to .Ltmp448
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp447-.Lfunc_begin18        # >> Call Site 2 <<
	.uleb128 .Lfunc_end163-.Ltmp447         #   Call between .Ltmp447 and .Lfunc_end163
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end18:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_,"axG",@progbits,_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_,comdat
	.weak	_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_ # -- Begin function _ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_
	.p2align	5
	.type	_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_,@function
_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_: # @_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -160
	.cfi_def_cfa_offset 160
	fst.d	$fs0, $sp, 152                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 144                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 136                  # 8-byte Folded Spill
	.cfi_offset 56, -8
	.cfi_offset 57, -16
	.cfi_offset 58, -24
	ld.d	$a4, $a0, 32
	move	$a0, $zero
	fld.s	$ft0, $a4, 1108
	fld.s	$fa7, $a4, 1112
	fld.s	$ft1, $a4, 1116
	fld.s	$ft4, $a4, 1124
	fld.s	$ft5, $a4, 1128
	fld.s	$fa0, $a4, 1132
	fld.s	$ft6, $a1, 4
	fld.s	$ft7, $a1, 0
	fld.s	$fa1, $a1, 8
	fld.s	$fa2, $a1, 48
	fmul.s	$ft8, $fa7, $ft6
	fmadd.s	$ft2, $ft7, $ft0, $ft8
	fmadd.s	$fa3, $fa1, $ft1, $ft2
	fadd.s	$ft9, $fa2, $fa3
	fld.s	$ft10, $a1, 20
	fld.s	$ft11, $a1, 16
	fld.s	$fa5, $a1, 24
	fld.s	$fa6, $a1, 52
	fmul.s	$ft12, $fa7, $ft10
	fmadd.s	$ft3, $ft11, $ft0, $ft12
	fmadd.s	$fa3, $fa5, $ft1, $ft3
	fadd.s	$ft13, $fa6, $fa3
	fld.s	$ft14, $a1, 36
	fld.s	$ft15, $a1, 32
	fld.s	$fa3, $a1, 40
	fld.s	$fa4, $a1, 56
	fmul.s	$fs0, $fa7, $ft14
	fmadd.s	$fs1, $ft15, $ft0, $fs0
	fmadd.s	$fa7, $fa3, $ft1, $fs1
	fadd.s	$fa7, $fa4, $fa7
	movfr2gr.s	$a1, $ft9
	movfr2gr.s	$a4, $ft13
	bstrins.d	$a1, $a4, 63, 32
	fmadd.s	$ft8, $ft7, $ft4, $ft8
	fmadd.s	$ft9, $fa1, $ft1, $ft8
	fadd.s	$ft9, $fa2, $ft9
	fmadd.s	$ft12, $ft11, $ft4, $ft12
	fmadd.s	$ft13, $fa5, $ft1, $ft12
	fadd.s	$ft13, $fa6, $ft13
	fmadd.s	$fs0, $ft15, $ft4, $fs0
	fmadd.s	$fs2, $fa3, $ft1, $fs0
	fadd.s	$fs2, $fa4, $fs2
	movfr2gr.s	$a4, $ft9
	movfr2gr.s	$a5, $ft13
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $fs2
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a4, $sp, 24
	st.d	$a5, $sp, 32
	fmul.s	$ft6, $ft5, $ft6
	fmadd.s	$ft9, $ft7, $ft4, $ft6
	fmadd.s	$ft13, $fa1, $ft1, $ft9
	fadd.s	$ft13, $fa2, $ft13
	fmul.s	$ft10, $ft5, $ft10
	fmadd.s	$fs2, $ft11, $ft4, $ft10
	fmul.s	$ft5, $ft5, $ft14
	fmadd.s	$ft14, $fa5, $ft1, $fs2
	fadd.s	$ft14, $fa6, $ft14
	fmadd.s	$ft4, $ft15, $ft4, $ft5
	movfr2gr.s	$a4, $ft13
	fmadd.s	$ft13, $fa3, $ft1, $ft4
	fadd.s	$ft13, $fa4, $ft13
	movfr2gr.s	$a5, $ft14
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $ft13
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a4, $sp, 40
	st.d	$a5, $sp, 48
	fmadd.s	$ft6, $ft7, $ft0, $ft6
	fmadd.s	$ft7, $fa1, $ft1, $ft6
	fadd.s	$ft7, $fa2, $ft7
	fmadd.s	$ft10, $ft11, $ft0, $ft10
	fmadd.s	$ft11, $fa5, $ft1, $ft10
	fadd.s	$ft11, $fa6, $ft11
	fmadd.s	$ft0, $ft15, $ft0, $ft5
	fmadd.s	$ft1, $fa3, $ft1, $ft0
	fadd.s	$ft1, $fa4, $ft1
	movfr2gr.s	$a4, $ft7
	movfr2gr.s	$a5, $ft11
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $ft1
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a4, $sp, 56
	st.d	$a5, $sp, 64
	fmadd.s	$ft1, $fa1, $fa0, $ft2
	fadd.s	$ft1, $fa2, $ft1
	fmadd.s	$ft2, $fa5, $fa0, $ft3
	fadd.s	$ft2, $fa6, $ft2
	fmadd.s	$ft3, $fa3, $fa0, $fs1
	fadd.s	$ft3, $fa4, $ft3
	movfr2gr.s	$a4, $ft1
	movfr2gr.s	$a5, $ft2
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $ft3
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a4, $sp, 72
	st.d	$a5, $sp, 80
	fmadd.s	$ft1, $fa1, $fa0, $ft8
	fadd.s	$ft1, $fa2, $ft1
	fmadd.s	$ft2, $fa5, $fa0, $ft12
	fadd.s	$ft2, $fa6, $ft2
	fmadd.s	$ft3, $fa3, $fa0, $fs0
	fadd.s	$ft3, $fa4, $ft3
	movfr2gr.s	$a4, $ft1
	movfr2gr.s	$a5, $ft2
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $ft3
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a4, $sp, 88
	st.d	$a5, $sp, 96
	fmadd.s	$ft1, $fa1, $fa0, $ft9
	fadd.s	$ft1, $fa2, $ft1
	fmadd.s	$ft2, $fa5, $fa0, $fs2
	fadd.s	$ft2, $fa6, $ft2
	fmadd.s	$ft3, $fa3, $fa0, $ft4
	fadd.s	$ft3, $fa4, $ft3
	movfr2gr.s	$a4, $ft1
	movfr2gr.s	$a5, $ft2
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $ft3
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a4, $sp, 104
	st.d	$a5, $sp, 112
	fmadd.s	$fa1, $fa1, $fa0, $ft6
	fadd.s	$fa1, $fa2, $fa1
	fmadd.s	$fa2, $fa5, $fa0, $ft10
	fadd.s	$fa2, $fa6, $fa2
	movfr2gr.s	$a4, $fa1
	movfr2gr.s	$a5, $fa2
	bstrins.d	$a4, $a5, 63, 32
	movfr2gr.s	$a5, $fa7
	bstrpick.d	$a5, $a5, 31, 0
	st.d	$a1, $sp, 8
	st.d	$a5, $sp, 16
	fmadd.s	$fa0, $fa3, $fa0, $ft0
	fadd.s	$fa0, $fa4, $fa0
	st.d	$a4, $sp, 120
	movfr2gr.s	$a4, $fa0
	bstrpick.d	$a4, $a4, 31, 0
	vld	$vr0, $sp, 8
	st.d	$a4, $sp, 128
	st.d	$a1, $a3, 0
	st.d	$a5, $a3, 8
	vst	$vr0, $a2, 0
	addi.d	$a1, $sp, 8
	ori	$a4, $zero, 112
	b	.LBB164_2
	.p2align	4, , 16
.LBB164_1:                              # %_ZN9btVector36setMaxERKS_.exit
                                        #   in Loop: Header=BB164_2 Depth=1
	addi.d	$a0, $a0, 16
	beq	$a0, $a4, .LBB164_18
.LBB164_2:                              # =>This Inner Loop Header: Depth=1
	add.d	$a5, $a1, $a0
	fld.s	$fa0, $a5, 16
	fld.s	$fa1, $a2, 0
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB164_4
# %bb.3:                                #   in Loop: Header=BB164_2 Depth=1
	fst.s	$fa0, $a2, 0
.LBB164_4:                              # %_Z8btSetMinIfEvRT_RKS0_.exit.i
                                        #   in Loop: Header=BB164_2 Depth=1
	fld.s	$fa1, $a5, 20
	fld.s	$fa2, $a2, 4
	fcmp.cule.s	$fcc0, $fa2, $fa1
	bcnez	$fcc0, .LBB164_6
# %bb.5:                                #   in Loop: Header=BB164_2 Depth=1
	fst.s	$fa1, $a2, 4
.LBB164_6:                              # %_Z8btSetMinIfEvRT_RKS0_.exit5.i
                                        #   in Loop: Header=BB164_2 Depth=1
	fld.s	$fa2, $a5, 24
	fld.s	$fa3, $a2, 8
	fcmp.cule.s	$fcc0, $fa3, $fa2
	bcnez	$fcc0, .LBB164_8
# %bb.7:                                #   in Loop: Header=BB164_2 Depth=1
	fst.s	$fa2, $a2, 8
.LBB164_8:                              # %_Z8btSetMinIfEvRT_RKS0_.exit6.i
                                        #   in Loop: Header=BB164_2 Depth=1
	fld.s	$fa3, $a5, 28
	fld.s	$fa4, $a2, 12
	fcmp.cule.s	$fcc0, $fa4, $fa3
	bcnez	$fcc0, .LBB164_10
# %bb.9:                                #   in Loop: Header=BB164_2 Depth=1
	fst.s	$fa3, $a2, 12
.LBB164_10:                             # %_ZN9btVector36setMinERKS_.exit
                                        #   in Loop: Header=BB164_2 Depth=1
	fld.s	$fa4, $a3, 0
	fcmp.cule.s	$fcc0, $fa0, $fa4
	bcnez	$fcc0, .LBB164_12
# %bb.11:                               #   in Loop: Header=BB164_2 Depth=1
	fst.s	$fa0, $a3, 0
.LBB164_12:                             # %_Z8btSetMaxIfEvRT_RKS0_.exit.i
                                        #   in Loop: Header=BB164_2 Depth=1
	fld.s	$fa0, $a3, 4
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB164_14
# %bb.13:                               #   in Loop: Header=BB164_2 Depth=1
	fst.s	$fa1, $a3, 4
.LBB164_14:                             # %_Z8btSetMaxIfEvRT_RKS0_.exit5.i
                                        #   in Loop: Header=BB164_2 Depth=1
	fld.s	$fa0, $a3, 8
	fcmp.cule.s	$fcc0, $fa2, $fa0
	bcnez	$fcc0, .LBB164_16
# %bb.15:                               #   in Loop: Header=BB164_2 Depth=1
	fst.s	$fa2, $a3, 8
.LBB164_16:                             # %_Z8btSetMaxIfEvRT_RKS0_.exit6.i
                                        #   in Loop: Header=BB164_2 Depth=1
	fld.s	$fa0, $a3, 12
	fcmp.cule.s	$fcc0, $fa3, $fa0
	bcnez	$fcc0, .LBB164_1
# %bb.17:                               #   in Loop: Header=BB164_2 Depth=1
	fst.s	$fa3, $a3, 12
	b	.LBB164_1
.LBB164_18:
	fld.d	$fs2, $sp, 136                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 144                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 152                  # 8-byte Folded Reload
	addi.d	$sp, $sp, 160
	ret
.Lfunc_end164:
	.size	_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_, .Lfunc_end164-_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3,"axG",@progbits,_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3,comdat
	.weak	_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3 # -- Begin function _ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3
	.p2align	5
	.type	_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3,@function
_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3: # @_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3
# %bb.0:
	ret
.Lfunc_end165:
	.size	_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3, .Lfunc_end165-_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZNK24btSoftBodyCollisionShape15getLocalScalingEv
.LCPI166_0:
	.word	0x3f800000                      # float 1
	.word	0x3f800000                      # float 1
	.word	0x3f800000                      # float 1
	.word	0x00000000                      # float 0
	.section	.text._ZNK24btSoftBodyCollisionShape15getLocalScalingEv,"axG",@progbits,_ZNK24btSoftBodyCollisionShape15getLocalScalingEv,comdat
	.weak	_ZNK24btSoftBodyCollisionShape15getLocalScalingEv
	.p2align	5
	.type	_ZNK24btSoftBodyCollisionShape15getLocalScalingEv,@function
_ZNK24btSoftBodyCollisionShape15getLocalScalingEv: # @_ZNK24btSoftBodyCollisionShape15getLocalScalingEv
	.cfi_startproc
# %bb.0:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	dbar	20
	beqz	$a0, .LBB166_2
.LBB166_1:
	pcalau12i	$a0, %pc_hi20(_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	addi.d	$a0, $a0, %pc_lo12(_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	ret
.LBB166_2:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	pcalau12i	$a0, %pc_hi20(_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB166_4
# %bb.3:
	pcalau12i	$a0, %pc_hi20(.LCPI166_0)
	vld	$vr0, $a0, %pc_lo12(.LCPI166_0)
	pcalau12i	$a0, %pc_hi20(_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	vst	$vr0, $a0, %pc_lo12(_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	pcalau12i	$a0, %pc_hi20(_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
.LBB166_4:
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	b	.LBB166_1
.Lfunc_end166:
	.size	_ZNK24btSoftBodyCollisionShape15getLocalScalingEv, .Lfunc_end166-_ZNK24btSoftBodyCollisionShape15getLocalScalingEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3,"axG",@progbits,_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3,comdat
	.weak	_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3 # -- Begin function _ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3
	.p2align	5
	.type	_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3,@function
_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3: # @_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3
# %bb.0:
	ret
.Lfunc_end167:
	.size	_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3, .Lfunc_end167-_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3
                                        # -- End function
	.section	.text._ZNK24btSoftBodyCollisionShape7getNameEv,"axG",@progbits,_ZNK24btSoftBodyCollisionShape7getNameEv,comdat
	.weak	_ZNK24btSoftBodyCollisionShape7getNameEv # -- Begin function _ZNK24btSoftBodyCollisionShape7getNameEv
	.p2align	5
	.type	_ZNK24btSoftBodyCollisionShape7getNameEv,@function
_ZNK24btSoftBodyCollisionShape7getNameEv: # @_ZNK24btSoftBodyCollisionShape7getNameEv
# %bb.0:
	pcalau12i	$a0, %pc_hi20(.L.str.3)
	addi.d	$a0, $a0, %pc_lo12(.L.str.3)
	ret
.Lfunc_end168:
	.size	_ZNK24btSoftBodyCollisionShape7getNameEv, .Lfunc_end168-_ZNK24btSoftBodyCollisionShape7getNameEv
                                        # -- End function
	.section	.text._ZN14btConcaveShape9setMarginEf,"axG",@progbits,_ZN14btConcaveShape9setMarginEf,comdat
	.weak	_ZN14btConcaveShape9setMarginEf # -- Begin function _ZN14btConcaveShape9setMarginEf
	.p2align	5
	.type	_ZN14btConcaveShape9setMarginEf,@function
_ZN14btConcaveShape9setMarginEf:        # @_ZN14btConcaveShape9setMarginEf
# %bb.0:
	fst.s	$fa0, $a0, 24
	ret
.Lfunc_end169:
	.size	_ZN14btConcaveShape9setMarginEf, .Lfunc_end169-_ZN14btConcaveShape9setMarginEf
                                        # -- End function
	.section	.text._ZNK14btConcaveShape9getMarginEv,"axG",@progbits,_ZNK14btConcaveShape9getMarginEv,comdat
	.weak	_ZNK14btConcaveShape9getMarginEv # -- Begin function _ZNK14btConcaveShape9getMarginEv
	.p2align	5
	.type	_ZNK14btConcaveShape9getMarginEv,@function
_ZNK14btConcaveShape9getMarginEv:       # @_ZNK14btConcaveShape9getMarginEv
# %bb.0:
	fld.s	$fa0, $a0, 24
	ret
.Lfunc_end170:
	.size	_ZNK14btConcaveShape9getMarginEv, .Lfunc_end170-_ZNK14btConcaveShape9getMarginEv
                                        # -- End function
	.section	.text._ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_,"axG",@progbits,_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_,comdat
	.weak	_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_ # -- Begin function _ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_
	.p2align	5
	.type	_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_,@function
_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_: # @_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_
# %bb.0:
	ret
.Lfunc_end171:
	.size	_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_, .Lfunc_end171-_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_
                                        # -- End function
	.section	.text._ZN11btTransform11getIdentityEv,"axG",@progbits,_ZN11btTransform11getIdentityEv,comdat
	.weak	_ZN11btTransform11getIdentityEv # -- Begin function _ZN11btTransform11getIdentityEv
	.p2align	5
	.type	_ZN11btTransform11getIdentityEv,@function
_ZN11btTransform11getIdentityEv:        # @_ZN11btTransform11getIdentityEv
.Lfunc_begin19:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception19
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	dbar	20
	beqz	$a0, .LBB172_2
.LBB172_1:
	pcalau12i	$a0, %pc_hi20(_ZZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZZN11btTransform11getIdentityEvE17identityTransform)
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.LBB172_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB172_1
# %bb.3:
.Ltmp449:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btMatrix3x311getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp450:                               # EH_LABEL
# %bb.4:
	pcalau12i	$a1, %pc_hi20(_ZZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a1, $a1, %pc_lo12(_ZZN11btTransform11getIdentityEvE17identityTransform)
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vst	$vr0, $a1, 0
	vst	$vr1, $a1, 16
	vst	$vr2, $a1, 32
	vrepli.b	$vr0, 0
	vst	$vr0, $a1, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB172_1
.LBB172_5:
.Ltmp451:                               # EH_LABEL
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end172:
	.size	_ZN11btTransform11getIdentityEv, .Lfunc_end172-_ZN11btTransform11getIdentityEv
	.cfi_endproc
	.section	.gcc_except_table._ZN11btTransform11getIdentityEv,"aG",@progbits,_ZN11btTransform11getIdentityEv,comdat
	.p2align	2, 0x0
GCC_except_table172:
.Lexception19:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end19-.Lcst_begin19
.Lcst_begin19:
	.uleb128 .Lfunc_begin19-.Lfunc_begin19  # >> Call Site 1 <<
	.uleb128 .Ltmp449-.Lfunc_begin19        #   Call between .Lfunc_begin19 and .Ltmp449
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp449-.Lfunc_begin19        # >> Call Site 2 <<
	.uleb128 .Ltmp450-.Ltmp449              #   Call between .Ltmp449 and .Ltmp450
	.uleb128 .Ltmp451-.Lfunc_begin19        #     jumps to .Ltmp451
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp450-.Lfunc_begin19        # >> Call Site 3 <<
	.uleb128 .Lfunc_end172-.Ltmp450         #   Call between .Ltmp450 and .Lfunc_end172
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end19:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN11btMatrix3x311getIdentityEv,"axG",@progbits,_ZN11btMatrix3x311getIdentityEv,comdat
	.weak	_ZN11btMatrix3x311getIdentityEv # -- Begin function _ZN11btMatrix3x311getIdentityEv
	.p2align	5
	.type	_ZN11btMatrix3x311getIdentityEv,@function
_ZN11btMatrix3x311getIdentityEv:        # @_ZN11btMatrix3x311getIdentityEv
	.cfi_startproc
# %bb.0:
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix)
	dbar	20
	beqz	$a0, .LBB173_2
.LBB173_1:
	pcalau12i	$a0, %pc_hi20(_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
	addi.d	$a0, $a0, %pc_lo12(_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
	ret
.LBB173_2:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB173_4
# %bb.3:
	pcalau12i	$a0, %pc_hi20(_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
	addi.d	$a0, $a0, %pc_lo12(_ZZN11btMatrix3x311getIdentityEvE14identityMatrix)
	lu12i.w	$a1, 260096
	st.w	$a1, $a0, 0
	vrepli.b	$vr0, 0
	vst	$vr0, $a0, 4
	st.w	$a1, $a0, 20
	vst	$vr0, $a0, 24
	st.d	$a1, $a0, 40
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
.LBB173_4:
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	b	.LBB173_1
.Lfunc_end173:
	.size	_ZN11btMatrix3x311getIdentityEv, .Lfunc_end173-_ZN11btMatrix3x311getIdentityEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev,"axG",@progbits,_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev,comdat
	.weak	_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev # -- Begin function _ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev,@function
_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev: # @_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -16
	.cfi_def_cfa_offset 16
	st.d	$ra, $sp, 8                     # 8-byte Folded Spill
	st.d	$fp, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	move	$fp, $a0
	ld.d	$a0, $a0, 16
	beqz	$a0, .LBB174_3
# %bb.1:
	ld.b	$a1, $fp, 24
	andi	$a1, $a1, 1
	beqz	$a1, .LBB174_3
# %bb.2:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB174_3:                              # %_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEE5clearEv.exit
	ori	$a0, $zero, 1
	st.b	$a0, $fp, 24
	st.d	$zero, $fp, 16
	st.d	$zero, $fp, 4
	ld.d	$fp, $sp, 0                     # 8-byte Folded Reload
	ld.d	$ra, $sp, 8                     # 8-byte Folded Reload
	addi.d	$sp, $sp, 16
	ret
.Lfunc_end174:
	.size	_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev, .Lfunc_end174-_ZN20btAlignedObjectArrayIPN10btSoftBody4NodeEED2Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode,"axG",@progbits,_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode,comdat
	.weak	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode # -- Begin function _ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode
	.p2align	5
	.type	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode,@function
_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode: # @_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode
# %bb.0:
	ret
.Lfunc_end175:
	.size	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode, .Lfunc_end175-_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode
                                        # -- End function
	.section	.text._ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_,"axG",@progbits,_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_,comdat
	.weak	_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_ # -- Begin function _ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_
	.p2align	5
	.type	_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_,@function
_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_: # @_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	st.d	$s1, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	move	$s1, $a0
	ld.d	$a0, $a0, 8
	move	$fp, $a2
	move	$s0, $a1
	beqz	$a0, .LBB176_2
# %bb.1:
	move	$a1, $s0
	move	$a2, $fp
	pcaddu18i	$ra, %call36(_ZN11btRigidBody12applyImpulseERK9btVector3S2_)
	jirl	$ra, $ra, 0
.LBB176_2:
	ld.d	$a0, $s1, 0
	beqz	$a0, .LBB176_4
# %bb.3:
	fld.s	$fa3, $s0, 0
	fld.s	$fa0, $a0, 164
	fld.s	$fa4, $s0, 4
	fld.s	$fa5, $s0, 8
	fmul.s	$fa2, $fa3, $fa0
	fmul.s	$fa1, $fa0, $fa4
	fmul.s	$fa0, $fa0, $fa5
	fld.s	$fa6, $fp, 8
	fld.s	$fa7, $fp, 4
	fneg.s	$ft0, $fa4
	fld.s	$ft1, $fp, 0
	fmul.s	$ft0, $fa6, $ft0
	fmadd.s	$ft0, $fa7, $fa5, $ft0
	fneg.s	$fa5, $fa5
	fmul.s	$fa5, $ft1, $fa5
	fmadd.s	$fa5, $fa6, $fa3, $fa5
	fneg.s	$fa3, $fa3
	fld.s	$fa6, $a0, 220
	fmul.s	$fa3, $fa7, $fa3
	fld.s	$fa7, $a0, 216
	fmadd.s	$fa3, $ft1, $fa4, $fa3
	fmul.s	$fa4, $fa6, $fa5
	fld.s	$fa6, $a0, 236
	fmadd.s	$fa4, $fa7, $ft0, $fa4
	fld.s	$fa7, $a0, 232
	fld.s	$ft1, $a0, 252
	fmul.s	$fa6, $fa5, $fa6
	fld.s	$ft2, $a0, 248
	fmadd.s	$fa6, $fa7, $ft0, $fa6
	fmul.s	$fa5, $fa5, $ft1
	fld.s	$fa7, $a0, 224
	fmadd.s	$fa5, $ft2, $ft0, $fa5
	fld.s	$ft0, $a0, 240
	fld.s	$ft1, $a0, 256
	fmadd.s	$fa4, $fa7, $fa3, $fa4
	fld.s	$fa7, $a0, 280
	fmadd.s	$fa6, $ft0, $fa3, $fa6
	fmadd.s	$fa3, $ft1, $fa3, $fa5
	fld.s	$fa5, $a0, 284
	fadd.s	$fa7, $fa2, $fa7
	fst.s	$fa7, $a0, 280
	fld.s	$fa7, $a0, 288
	fadd.s	$fa5, $fa1, $fa5
	fst.s	$fa5, $a0, 284
	fld.s	$fa5, $a0, 352
	fadd.s	$fa7, $fa0, $fa7
	fst.s	$fa7, $a0, 288
	fld.s	$fa7, $a0, 356
	fadd.s	$fa2, $fa2, $fa5
	fst.s	$fa2, $a0, 352
	fld.s	$fa2, $a0, 360
	fadd.s	$fa1, $fa1, $fa7
	fst.s	$fa1, $a0, 356
	fld.s	$fa1, $a0, 296
	fadd.s	$fa0, $fa0, $fa2
	fst.s	$fa0, $a0, 360
	fld.s	$fa0, $a0, 300
	fadd.s	$fa1, $fa4, $fa1
	fst.s	$fa1, $a0, 296
	fld.s	$fa1, $a0, 304
	fadd.s	$fa0, $fa6, $fa0
	fst.s	$fa0, $a0, 300
	fld.s	$fa0, $a0, 368
	fadd.s	$fa1, $fa3, $fa1
	fst.s	$fa1, $a0, 304
	fld.s	$fa1, $a0, 372
	fadd.s	$fa0, $fa4, $fa0
	fst.s	$fa0, $a0, 368
	fld.s	$fa0, $a0, 376
	fadd.s	$fa1, $fa6, $fa1
	ld.w	$a1, $a0, 344
	fst.s	$fa1, $a0, 372
	fadd.s	$fa0, $fa3, $fa0
	fst.s	$fa0, $a0, 376
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 344
.LBB176_4:
	ld.d	$s1, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	ret
.Lfunc_end176:
	.size	_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_, .Lfunc_end176-_ZNK10btSoftBody4Body13applyVImpulseERK9btVector3S3_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3,"axG",@progbits,_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3,comdat
	.weak	_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3 # -- Begin function _ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3
	.p2align	5
	.type	_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3,@function
_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3: # @_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3
	.cfi_startproc
# %bb.0:
	ld.d	$a2, $a0, 8
	beqz	$a2, .LBB177_2
# %bb.1:
	fld.s	$fa0, $a2, 284
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a2, 280
	fld.s	$fa3, $a1, 0
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa4, $a2, 288
	fld.s	$fa5, $a1, 8
	fld.s	$fa6, $a2, 300
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fld.s	$fa2, $a2, 296
	fmadd.s	$fa0, $fa4, $fa5, $fa0
	fmul.s	$fa4, $fa1, $fa6
	fld.s	$fa6, $a2, 304
	fmadd.s	$fa2, $fa2, $fa3, $fa4
	fld.s	$fa4, $a2, 316
	fld.s	$fa7, $a2, 312
	fmadd.s	$fa2, $fa6, $fa5, $fa2
	fld.s	$fa6, $a2, 320
	fmul.s	$fa1, $fa1, $fa4
	fmadd.s	$fa1, $fa7, $fa3, $fa1
	fld.s	$fa3, $a2, 364
	fmadd.s	$fa1, $fa6, $fa5, $fa1
	fld.s	$fa4, $a2, 368
	fld.s	$fa5, $a2, 372
	fmul.s	$fa0, $fa0, $fa3
	fld.s	$fa3, $a2, 344
	fmul.s	$fa2, $fa2, $fa4
	fmul.s	$fa1, $fa1, $fa5
	fld.s	$fa4, $a2, 348
	fadd.s	$fa0, $fa0, $fa3
	fld.s	$fa3, $a2, 352
	fst.s	$fa0, $a2, 344
	fadd.s	$fa0, $fa2, $fa4
	fst.s	$fa0, $a2, 348
	fadd.s	$fa0, $fa1, $fa3
	fst.s	$fa0, $a2, 352
.LBB177_2:
	ld.d	$a0, $a0, 0
	beqz	$a0, .LBB177_4
# %bb.3:
	fld.s	$fa0, $a0, 220
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a0, 216
	fld.s	$fa3, $a1, 0
	fld.s	$fa4, $a0, 236
	fmul.s	$fa0, $fa0, $fa1
	fld.s	$fa5, $a0, 232
	fmadd.s	$fa0, $fa2, $fa3, $fa0
	fmul.s	$fa2, $fa1, $fa4
	fld.s	$fa4, $a0, 252
	fmadd.s	$fa2, $fa5, $fa3, $fa2
	fld.s	$fa5, $a0, 248
	fld.s	$fa6, $a0, 224
	fmul.s	$fa1, $fa1, $fa4
	fld.s	$fa4, $a1, 8
	fmadd.s	$fa1, $fa5, $fa3, $fa1
	fld.s	$fa3, $a0, 240
	fld.s	$fa5, $a0, 256
	fmadd.s	$fa0, $fa6, $fa4, $fa0
	fld.s	$fa6, $a0, 296
	fmadd.s	$fa2, $fa3, $fa4, $fa2
	fmadd.s	$fa1, $fa5, $fa4, $fa1
	fld.s	$fa3, $a0, 300
	fadd.s	$fa4, $fa0, $fa6
	fst.s	$fa4, $a0, 296
	fld.s	$fa4, $a0, 304
	fadd.s	$fa3, $fa2, $fa3
	fst.s	$fa3, $a0, 300
	fld.s	$fa3, $a0, 368
	fadd.s	$fa4, $fa1, $fa4
	fst.s	$fa4, $a0, 304
	fld.s	$fa4, $a0, 372
	fadd.s	$fa0, $fa0, $fa3
	fst.s	$fa0, $a0, 368
	fld.s	$fa0, $a0, 376
	fadd.s	$fa2, $fa2, $fa4
	ld.w	$a1, $a0, 344
	fst.s	$fa2, $a0, 372
	fadd.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $a0, 376
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, 344
.LBB177_4:
	ret
.Lfunc_end177:
	.size	_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3, .Lfunc_end177-_ZNK10btSoftBody4Body14applyVAImpulseERK9btVector3
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15btSoftColliders13CollideSDF_RSD0Ev,"axG",@progbits,_ZN15btSoftColliders13CollideSDF_RSD0Ev,comdat
	.weak	_ZN15btSoftColliders13CollideSDF_RSD0Ev # -- Begin function _ZN15btSoftColliders13CollideSDF_RSD0Ev
	.p2align	5
	.type	_ZN15btSoftColliders13CollideSDF_RSD0Ev,@function
_ZN15btSoftColliders13CollideSDF_RSD0Ev: # @_ZN15btSoftColliders13CollideSDF_RSD0Ev
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.Lfunc_end178:
	.size	_ZN15btSoftColliders13CollideSDF_RSD0Ev, .Lfunc_end178-_ZN15btSoftColliders13CollideSDF_RSD0Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode,"axG",@progbits,_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode,comdat
	.weak	_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode # -- Begin function _ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode
	.p2align	5
	.type	_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode,@function
_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode: # @_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode
	.cfi_startproc
# %bb.0:
	ld.d	$a1, $a1, 40
	pcaddu18i	$t8, %call36(_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE)
	jr	$t8
.Lfunc_end179:
	.size	_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode, .Lfunc_end179-_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE,"axG",@progbits,_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE,comdat
	.weak	_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE # -- Begin function _ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE
	.p2align	5
	.type	_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE,@function
_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE: # @_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -336
	.cfi_def_cfa_offset 336
	st.d	$ra, $sp, 328                   # 8-byte Folded Spill
	st.d	$fp, $sp, 320                   # 8-byte Folded Spill
	st.d	$s0, $sp, 312                   # 8-byte Folded Spill
	st.d	$s1, $sp, 304                   # 8-byte Folded Spill
	st.d	$s2, $sp, 296                   # 8-byte Folded Spill
	st.d	$s3, $sp, 288                   # 8-byte Folded Spill
	st.d	$s4, $sp, 280                   # 8-byte Folded Spill
	st.d	$s5, $sp, 272                   # 8-byte Folded Spill
	st.d	$s6, $sp, 264                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 256                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 248                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 240                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 232                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 224                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 216                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 208                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 200                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 56, -80
	.cfi_offset 57, -88
	.cfi_offset 58, -96
	.cfi_offset 59, -104
	.cfi_offset 60, -112
	.cfi_offset 61, -120
	.cfi_offset 62, -128
	.cfi_offset 63, -136
	move	$s0, $a1
	ld.bu	$a1, $a1, 112
	andi	$a1, $a1, 1
	bnez	$a1, .LBB180_25
# %bb.1:
	move	$fp, $a0
	fld.s	$fa0, $s0, 96
	movgr2fr.w	$fs2, $zero
	fcmp.clt.s	$fcc0, $fs2, $fa0
	ori	$a0, $zero, 36
	movcf2gr	$a1, $fcc0
	masknez	$a0, $a0, $a1
	ori	$a2, $zero, 32
	maskeqz	$a1, $a2, $a1
	or	$a0, $a1, $a0
	fldx.s	$fa0, $fp, $a0
	ld.d	$a0, $fp, 8
	ld.d	$a1, $fp, 16
	addi.d	$a2, $s0, 16
	addi.d	$a3, $sp, 80
	pcaddu18i	$ra, %call36(_ZNK10btSoftBody12checkContactEP17btCollisionObjectRK9btVector3fRNS_4sCtiE)
	jirl	$ra, $ra, 0
	beqz	$a0, .LBB180_25
# %bb.2:
	ld.d	$a0, $fp, 24
	fld.s	$fs0, $s0, 96
	beqz	$a0, .LBB180_5
# %bb.3:                                # %.thread
	fld.s	$fa2, $a0, 360
	fadd.s	$fa0, $fs0, $fa2
	fcmp.cule.s	$fcc0, $fa0, $fs2
	bcnez	$fcc0, .LBB180_25
# %bb.4:
	addi.d	$s1, $a0, 72
	b	.LBB180_7
.LBB180_5:
	movgr2fr.w	$fa2, $zero
	fcmp.clt.s	$fcc0, $fa2, $fs0
	bceqz	$fcc0, .LBB180_25
# %bb.6:
	ld.d	$a0, $fp, 16
	addi.d	$s1, $a0, 8
.LBB180_7:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic)
	addi.d	$s2, $a1, %pc_lo12(_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic)
	beqz	$a0, .LBB180_26
.LBB180_8:
	ld.d	$a0, $fp, 24
	sltui	$a1, $a0, 1
	addi.d	$a2, $a0, 280
	masknez	$a2, $a2, $a1
	maskeqz	$a1, $s2, $a1
	fld.s	$fa0, $s0, 16
	fld.s	$fa4, $s1, 48
	fld.s	$fa1, $s0, 20
	fld.s	$fa6, $s1, 52
	fld.s	$fa3, $s0, 24
	fld.s	$fa7, $s1, 56
	or	$a1, $a1, $a2
	fsub.s	$fa5, $fa0, $fa4
	fsub.s	$fa4, $fa1, $fa6
	fsub.s	$fa6, $fa3, $fa7
	movfr2gr.s	$a2, $fa5
	movfr2gr.s	$a3, $fa4
	bstrins.d	$a2, $a3, 63, 32
	movfr2gr.s	$a3, $fa6
	ld.d	$s1, $fp, 8
	bstrpick.d	$a3, $a3, 31, 0
	st.d	$a2, $sp, 64
	st.d	$a3, $sp, 72
	beqz	$a0, .LBB180_10
# %bb.9:
	fld.s	$fa7, $a0, 352
	fld.s	$ft0, $a0, 348
	fneg.s	$ft1, $fa4
	fld.s	$ft2, $a0, 344
	fmul.s	$ft1, $fa7, $ft1
	fmadd.s	$ft1, $ft0, $fa6, $ft1
	fneg.s	$fa6, $fa6
	fmul.s	$fa6, $ft2, $fa6
	fmadd.s	$fa6, $fa7, $fa5, $fa6
	fneg.s	$fa5, $fa5
	fmul.s	$fa5, $ft0, $fa5
	fmadd.s	$fa4, $ft2, $fa4, $fa5
	fld.s	$fa5, $a0, 328
	fld.s	$fa7, $a0, 332
	fld.s	$ft0, $a0, 336
	fld.s	$fs1, $s1, 512
	fadd.s	$fa5, $ft1, $fa5
	fadd.s	$fa6, $fa7, $fa6
	fadd.s	$fa4, $fa4, $ft0
	fmul.s	$fa5, $fa5, $fs1
	fmul.s	$fa6, $fa6, $fs1
	fmul.s	$fa4, $fa4, $fs1
	b	.LBB180_11
.LBB180_10:                             # %._crit_edge
	fld.s	$fs1, $s1, 512
	fmov.s	$fa4, $fs2
	fmov.s	$fa5, $fs2
	fmov.s	$fa6, $fs2
.LBB180_11:
	fld.s	$fa7, $s0, 32
	fld.s	$ft0, $s0, 36
	fld.s	$ft1, $s0, 40
	fsub.s	$fa0, $fa0, $fa7
	fsub.s	$fa1, $fa1, $ft0
	fsub.s	$fa3, $fa3, $ft1
	fsub.s	$fa0, $fa0, $fa5
	fsub.s	$fa1, $fa1, $fa6
	fld.s	$fa5, $sp, 92
	fld.s	$fa6, $sp, 88
	fld.s	$fa7, $sp, 96
	fsub.s	$fa3, $fa3, $fa4
	fmul.s	$fa4, $fa1, $fa5
	fmadd.s	$fa4, $fa0, $fa6, $fa4
	fmadd.s	$fs3, $fa3, $fa7, $fa4
	fmul.s	$fa4, $fa6, $fs3
	ld.d	$s6, $fp, 16
	fmul.s	$fa5, $fa5, $fs3
	fsub.s	$fs4, $fa0, $fa4
	fld.s	$fa0, $s1, 340
	fld.s	$fa4, $s6, 236
	fsub.s	$fs5, $fa1, $fa5
	fmul.s	$fa1, $fa7, $fs3
	fsub.s	$fs6, $fa3, $fa1
	fmul.s	$fs7, $fa0, $fa4
	st.d	$s0, $sp, 112
	addi.d	$a0, $sp, 16
	addi.d	$a2, $sp, 64
	fmov.s	$fa0, $fs1
	fmov.s	$fa1, $fs0
	pcaddu18i	$ra, %call36(_ZL13ImpulseMatrixfffRK11btMatrix3x3RK9btVector3)
	jirl	$ra, $ra, 0
	vld	$vr0, $sp, 16
	vld	$vr1, $sp, 32
	vld	$vr2, $sp, 48
	vst	$vr0, $sp, 120
	vst	$vr1, $sp, 136
	addi.d	$s3, $sp, 120
	vst	$vr2, $sp, 152
	vld	$vr0, $sp, 64
	addi.d	$s5, $sp, 136
	addi.d	$s4, $sp, 152
	addi.d	$s2, $sp, 168
	vst	$vr0, $sp, 168
	fmul.s	$fa0, $fs0, $fs1
	fst.s	$fa0, $sp, 184
	fmul.s	$fa0, $fs5, $fs5
	fmadd.s	$fa0, $fs4, $fs4, $fa0
	fmadd.s	$fa0, $fs6, $fs6, $fa0
	fabs.s	$fa1, $fs3
	ld.wu	$a0, $s6, 216
	fmul.s	$fa1, $fa1, $fs7
	vldi	$vr2, -1168
	fsub.s	$fa2, $fa2, $fs7
	andi	$a0, $a0, 3
	sltui	$a0, $a0, 1
	ori	$a1, $zero, 352
	masknez	$a1, $a1, $a0
	ori	$a2, $zero, 348
	maskeqz	$a0, $a2, $a0
	or	$a0, $a0, $a1
	fldx.s	$fa3, $s1, $a0
	ld.w	$a1, $s1, 980
	ld.w	$a0, $s1, 984
	fcmp.clt.s	$fcc0, $fa0, $fa1
	fsel	$fa0, $fa2, $fs2, $fcc0
	fst.s	$fa0, $sp, 188
	fst.s	$fa3, $sp, 192
	bne	$a1, $a0, .LBB180_23
# %bb.12:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s6, $a0, $a2
	bge	$a1, $s6, .LBB180_23
# %bb.13:
	beqz	$s6, .LBB180_15
# %bb.14:
	ori	$a0, $zero, 120
	mul.d	$a0, $s6, $a0
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a1, $s1, 980
	move	$s0, $a0
	b	.LBB180_16
.LBB180_15:
	move	$s0, $zero
.LBB180_16:                             # %_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEE8allocateEi.exit.i.i
	blez	$a1, .LBB180_19
# %bb.17:                               # %.lr.ph.i.i.i
	move	$a0, $zero
	ori	$a2, $zero, 120
	mul.d	$a1, $a1, $a2
	.p2align	4, , 16
.LBB180_18:                             # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $s1, 992
	vldx	$vr0, $a2, $a0
	add.d	$a2, $a2, $a0
	vstx	$vr0, $s0, $a0
	ld.d	$a3, $a2, 32
	add.d	$a4, $s0, $a0
	st.d	$a3, $a4, 32
	vld	$vr0, $a2, 16
	vst	$vr0, $a4, 16
	vld	$vr0, $a2, 40
	vst	$vr0, $a4, 40
	vld	$vr0, $a2, 56
	vst	$vr0, $a4, 56
	vld	$vr0, $a2, 72
	vst	$vr0, $a4, 72
	ld.d	$a3, $a2, 88
	st.d	$a3, $a4, 88
	ld.w	$a3, $a2, 112
	st.w	$a3, $a4, 112
	vld	$vr0, $a2, 96
	addi.d	$a0, $a0, 120
	vst	$vr0, $a4, 96
	bne	$a1, $a0, .LBB180_18
.LBB180_19:                             # %_ZNK20btAlignedObjectArrayIN10btSoftBody8RContactEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $s1, 992
	beqz	$a0, .LBB180_22
# %bb.20:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8RContactEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $s1, 1000
	andi	$a1, $a1, 1
	beqz	$a1, .LBB180_22
# %bb.21:
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB180_22:                             # %_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$a1, $s1, 980
	st.b	$a0, $s1, 1000
	st.d	$s0, $s1, 992
	st.w	$s6, $s1, 984
.LBB180_23:                             # %_ZN20btAlignedObjectArrayIN10btSoftBody8RContactEE9push_backERKS1_.exit
	ld.d	$a0, $s1, 992
	ori	$a2, $zero, 120
	vld	$vr0, $sp, 80
	mul.d	$a1, $a1, $a2
	add.d	$a2, $a0, $a1
	vld	$vr1, $sp, 96
	vstx	$vr0, $a0, $a1
	vld	$vr0, $s3, 0
	vld	$vr2, $s5, 0
	vst	$vr1, $a2, 16
	vld	$vr1, $s4, 0
	vst	$vr0, $a2, 40
	vst	$vr2, $a2, 56
	ld.d	$a0, $sp, 112
	vst	$vr1, $a2, 72
	ld.d	$a1, $s2, 16
	ld.w	$a3, $s2, 24
	vld	$vr0, $s2, 0
	st.d	$a0, $a2, 32
	st.d	$a1, $a2, 104
	st.w	$a3, $a2, 112
	vst	$vr0, $a2, 88
	ld.w	$a1, $s1, 980
	ld.d	$a0, $fp, 24
	addi.d	$a1, $a1, 1
	st.w	$a1, $s1, 980
	beqz	$a0, .LBB180_25
# %bb.24:
	move	$a1, $zero
	pcaddu18i	$ra, %call36(_ZN17btCollisionObject8activateEb)
	jirl	$ra, $ra, 0
.LBB180_25:
	fld.d	$fs7, $sp, 200                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 208                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 216                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 224                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 232                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 240                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 248                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 256                  # 8-byte Folded Reload
	ld.d	$s6, $sp, 264                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 272                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 280                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 288                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 296                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 304                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 312                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 320                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 328                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 336
	ret
.LBB180_26:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic)
	fmov.s	$fs1, $fa2
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	fmov.s	$fa2, $fs1
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB180_8
# %bb.27:
	vrepli.b	$vr0, 0
	vst	$vr0, $s2, 32
	vst	$vr0, $s2, 16
	vst	$vr0, $s2, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	fmov.s	$fa2, $fs1
	b	.LBB180_8
.Lfunc_end180:
	.size	_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE, .Lfunc_end180-_ZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeE
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15btSoftColliders12CollideCL_RSD0Ev,"axG",@progbits,_ZN15btSoftColliders12CollideCL_RSD0Ev,comdat
	.weak	_ZN15btSoftColliders12CollideCL_RSD0Ev # -- Begin function _ZN15btSoftColliders12CollideCL_RSD0Ev
	.p2align	5
	.type	_ZN15btSoftColliders12CollideCL_RSD0Ev,@function
_ZN15btSoftColliders12CollideCL_RSD0Ev: # @_ZN15btSoftColliders12CollideCL_RSD0Ev
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.Lfunc_end181:
	.size	_ZN15btSoftColliders12CollideCL_RSD0Ev, .Lfunc_end181-_ZN15btSoftColliders12CollideCL_RSD0Ev
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function _ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode
.LCPI182_0:
	.word	0x3f800000                      # float 1
	.word	0x00000000                      # float 0
	.word	0x00000000                      # float 0
	.word	0x00000000                      # float 0
	.section	.text._ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode,"axG",@progbits,_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode,comdat
	.weak	_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode
	.p2align	5
	.type	_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode,@function
_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode: # @_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode
.Lfunc_begin20:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception20
# %bb.0:
	addi.d	$sp, $sp, -496
	.cfi_def_cfa_offset 496
	st.d	$ra, $sp, 488                   # 8-byte Folded Spill
	st.d	$fp, $sp, 480                   # 8-byte Folded Spill
	st.d	$s0, $sp, 472                   # 8-byte Folded Spill
	st.d	$s1, $sp, 464                   # 8-byte Folded Spill
	st.d	$s2, $sp, 456                   # 8-byte Folded Spill
	st.d	$s3, $sp, 448                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	ld.d	$s1, $a1, 40
	move	$fp, $a0
	addi.d	$a0, $sp, 376
	pcaddu18i	$ra, %call36(_ZN21btConvexInternalShapeC2Ev)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZTV27btSoftClusterCollisionShape+16)
	addi.d	$a0, $a0, %pc_lo12(_ZTV27btSoftClusterCollisionShape+16)
	ld.d	$a1, $fp, 40
	ld.bu	$a2, $a1, 216
	st.d	$a0, $sp, 376
	ld.d	$s0, $a1, 200
	st.d	$s1, $sp, 440
	andi	$a0, $a2, 3
	st.w	$zero, $sp, 432
	beqz	$a0, .LBB182_2
# %bb.1:
	ld.bu	$a0, $s1, 416
	bnez	$a0, .LBB182_28
.LBB182_2:
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	ld.b	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	dbar	20
	beqz	$a0, .LBB182_29
.LBB182_3:                              # %_ZN11btTransform11getIdentityEv.exit
	ld.d	$a0, $fp, 40
	pcalau12i	$a1, %pc_hi20(.LCPI182_0)
	vld	$vr0, $a1, %pc_lo12(.LCPI182_0)
	addi.d	$a3, $a0, 72
	vst	$vr0, $sp, 64
.Ltmp455:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a1, $a0, %pc_lo12(_ZZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $sp, 376
	addi.d	$a4, $sp, 64
	addi.d	$a5, $sp, 320
	move	$a2, $s0
	pcaddu18i	$ra, %call36(_ZN15btGjkEpaSolver214SignedDistanceEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsE)
	jirl	$ra, $ra, 0
.Ltmp456:                               # EH_LABEL
# %bb.4:
	beqz	$a0, .LBB182_28
# %bb.5:
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 104
	vst	$vr0, $sp, 88
	vst	$vr0, $sp, 72
	st.b	$zero, $sp, 244
	pcalau12i	$a0, %pc_hi20(_ZTVN10btSoftBody6CJointE+16)
	addi.d	$s3, $a0, %pc_lo12(_ZTVN10btSoftBody6CJointE+16)
	ld.d	$a0, $fp, 40
	st.d	$s3, $sp, 64
	st.d	$s1, $sp, 40
	ld.w	$a1, $a0, 256
	vst	$vr0, $sp, 48
	st.d	$zero, $sp, 16
	st.d	$a0, $sp, 32
	addi.d	$a1, $a1, -2
	sltui	$a1, $a1, 1
	maskeqz	$a0, $a0, $a1
	st.d	$a0, $sp, 24
.Ltmp458:                               # EH_LABEL
	addi.d	$a1, $sp, 320
	addi.d	$a2, $sp, 40
	addi.d	$a3, $sp, 16
	addi.d	$a4, $sp, 64
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE)
	jirl	$ra, $ra, 0
.Ltmp459:                               # EH_LABEL
# %bb.6:
	beqz	$a0, .LBB182_28
# %bb.7:
.Ltmp461:                               # EH_LABEL
	ori	$a0, $zero, 248
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp462:                               # EH_LABEL
# %bb.8:
	move	$s0, $a0
	addi.d	$s1, $sp, 72
	addi.d	$s2, $a0, 8
	ori	$a2, $zero, 240
	move	$a0, $s2
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	st.d	$s3, $s0, 0
	ori	$a2, $zero, 124
	move	$a0, $s2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	vld	$vr0, $sp, 196
	vst	$vr0, $s0, 132
	vld	$vr0, $sp, 212
	vst	$vr0, $s0, 148
	vld	$vr0, $sp, 228
	vst	$vr0, $s0, 164
	ld.b	$a0, $sp, 244
	st.b	$a0, $s0, 180
	vld	$vr0, $sp, 256
	vst	$vr0, $s0, 192
	vld	$vr0, $sp, 272
	vst	$vr0, $s0, 208
	vld	$vr0, $sp, 288
	vst	$vr0, $s0, 224
	ld.w	$a0, $sp, 304
	st.w	$a0, $s0, 240
	ld.d	$a0, $sp, 248
	st.d	$a0, $s0, 184
	ld.d	$s2, $fp, 32
	ld.w	$a1, $s2, 1044
	ld.w	$a0, $s2, 1048
	bne	$a1, $a0, .LBB182_27
# %bb.9:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s3, $a0, $a2
	bge	$a1, $s3, .LBB182_27
# %bb.10:
	beqz	$s3, .LBB182_21
# %bb.11:
	slli.d	$a0, $s3, 3
.Ltmp464:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp465:                               # EH_LABEL
# %bb.12:                               # %.noexc
	move	$s1, $a0
	ld.w	$a1, $s2, 1044
	ld.d	$a0, $s2, 1056
	blez	$a1, .LBB182_22
.LBB182_13:                             # %.lr.ph.i.i.i
	ori	$a3, $zero, 4
	move	$a2, $zero
	bltu	$a1, $a3, .LBB182_18
# %bb.14:                               # %.lr.ph.i.i.i
	sub.d	$a3, $s1, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB182_18
# %bb.15:                               # %vector.ph
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s1, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB182_16:                             # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB182_16
# %bb.17:                               # %middle.block
	beq	$a2, $a1, .LBB182_20
.LBB182_18:                             # %scalar.ph.preheader
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s1, 3
	.p2align	4, , 16
.LBB182_19:                             # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB182_19
.LBB182_20:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.thread.i.i
	ld.bu	$a2, $s2, 1064
	bnez	$a2, .LBB182_24
	b	.LBB182_26
.LBB182_21:
	move	$s1, $zero
	ld.d	$a0, $s2, 1056
	bgtz	$a1, .LBB182_13
.LBB182_22:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.i.i
	beqz	$a0, .LBB182_26
# %bb.23:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.i.i
	ld.b	$a2, $s2, 1064
	andi	$a2, $a2, 1
	beqz	$a2, .LBB182_26
.LBB182_24:
.Ltmp466:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp467:                               # EH_LABEL
# %bb.25:                               # %.noexc22
	ld.w	$a1, $s2, 1044
.LBB182_26:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $s2, 1064
	st.d	$s1, $s2, 1056
	st.w	$s3, $s2, 1048
.LBB182_27:                             # %.sink.split
	ld.d	$a0, $s2, 1056
	slli.d	$a2, $a1, 3
	stx.d	$s0, $a0, $a2
	addi.d	$a0, $a1, 1
	st.w	$a0, $s2, 1044
	ld.d	$a0, $fp, 40
	ld.wu	$a0, $a0, 216
	andi	$a0, $a0, 3
	sltui	$a0, $a0, 1
	ld.d	$a1, $fp, 32
	fld.s	$fa0, $s0, 92
	ori	$a2, $zero, 368
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 364
	maskeqz	$a3, $a3, $a0
	or	$a2, $a3, $a2
	ori	$a3, $zero, 380
	masknez	$a3, $a3, $a0
	fldx.s	$fa1, $a1, $a2
	ori	$a2, $zero, 376
	maskeqz	$a0, $a2, $a0
	or	$a0, $a0, $a3
	fmul.s	$fa0, $fa1, $fa0
	fst.s	$fa0, $s0, 92
	fldx.s	$fa0, $a1, $a0
	fld.s	$fa1, $s0, 96
	fmul.s	$fa0, $fa0, $fa1
	fst.s	$fa0, $s0, 96
.LBB182_28:
	addi.d	$a0, $sp, 376
	pcaddu18i	$ra, %call36(_ZN13btConvexShapeD2Ev)
	jirl	$ra, $ra, 0
	ld.d	$s3, $sp, 448                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 456                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 464                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 472                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 480                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 488                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 496
	ret
.LBB182_29:
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB182_3
# %bb.30:
.Ltmp452:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btMatrix3x311getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp453:                               # EH_LABEL
# %bb.31:
	pcalau12i	$a1, %pc_hi20(_ZZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a1, $a1, %pc_lo12(_ZZN11btTransform11getIdentityEvE17identityTransform)
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vst	$vr0, $a1, 0
	vst	$vr1, $a1, 16
	vst	$vr2, $a1, 32
	vrepli.b	$vr0, 0
	vst	$vr0, $a1, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB182_3
.LBB182_32:
.Ltmp454:                               # EH_LABEL
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	b	.LBB182_38
.LBB182_33:
.Ltmp468:                               # EH_LABEL
	b	.LBB182_37
.LBB182_34:
.Ltmp463:                               # EH_LABEL
	b	.LBB182_37
.LBB182_35:
.Ltmp460:                               # EH_LABEL
	b	.LBB182_37
.LBB182_36:
.Ltmp457:                               # EH_LABEL
.LBB182_37:                             # %.body
	move	$fp, $a0
.LBB182_38:                             # %.body
.Ltmp469:                               # EH_LABEL
	addi.d	$a0, $sp, 376
	pcaddu18i	$ra, %call36(_ZN13btConvexShapeD2Ev)
	jirl	$ra, $ra, 0
.Ltmp470:                               # EH_LABEL
# %bb.39:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB182_40:
.Ltmp471:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end182:
	.size	_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode, .Lfunc_end182-_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode
	.cfi_endproc
	.section	.gcc_except_table._ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode,"aG",@progbits,_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode,comdat
	.p2align	2, 0x0
GCC_except_table182:
.Lexception20:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase14-.Lttbaseref14
.Lttbaseref14:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end20-.Lcst_begin20
.Lcst_begin20:
	.uleb128 .Lfunc_begin20-.Lfunc_begin20  # >> Call Site 1 <<
	.uleb128 .Ltmp455-.Lfunc_begin20        #   Call between .Lfunc_begin20 and .Ltmp455
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp455-.Lfunc_begin20        # >> Call Site 2 <<
	.uleb128 .Ltmp456-.Ltmp455              #   Call between .Ltmp455 and .Ltmp456
	.uleb128 .Ltmp457-.Lfunc_begin20        #     jumps to .Ltmp457
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp458-.Lfunc_begin20        # >> Call Site 3 <<
	.uleb128 .Ltmp459-.Ltmp458              #   Call between .Ltmp458 and .Ltmp459
	.uleb128 .Ltmp460-.Lfunc_begin20        #     jumps to .Ltmp460
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp461-.Lfunc_begin20        # >> Call Site 4 <<
	.uleb128 .Ltmp462-.Ltmp461              #   Call between .Ltmp461 and .Ltmp462
	.uleb128 .Ltmp463-.Lfunc_begin20        #     jumps to .Ltmp463
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp462-.Lfunc_begin20        # >> Call Site 5 <<
	.uleb128 .Ltmp464-.Ltmp462              #   Call between .Ltmp462 and .Ltmp464
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp464-.Lfunc_begin20        # >> Call Site 6 <<
	.uleb128 .Ltmp467-.Ltmp464              #   Call between .Ltmp464 and .Ltmp467
	.uleb128 .Ltmp468-.Lfunc_begin20        #     jumps to .Ltmp468
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp467-.Lfunc_begin20        # >> Call Site 7 <<
	.uleb128 .Ltmp452-.Ltmp467              #   Call between .Ltmp467 and .Ltmp452
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp452-.Lfunc_begin20        # >> Call Site 8 <<
	.uleb128 .Ltmp453-.Ltmp452              #   Call between .Ltmp452 and .Ltmp453
	.uleb128 .Ltmp454-.Lfunc_begin20        #     jumps to .Ltmp454
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp453-.Lfunc_begin20        # >> Call Site 9 <<
	.uleb128 .Ltmp469-.Ltmp453              #   Call between .Ltmp453 and .Ltmp469
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp469-.Lfunc_begin20        # >> Call Site 10 <<
	.uleb128 .Ltmp470-.Ltmp469              #   Call between .Ltmp469 and .Ltmp470
	.uleb128 .Ltmp471-.Lfunc_begin20        #     jumps to .Ltmp471
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp470-.Lfunc_begin20        # >> Call Site 11 <<
	.uleb128 .Lfunc_end182-.Ltmp470         #   Call between .Ltmp470 and .Lfunc_end182
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end20:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase14:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE,"axG",@progbits,_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE,comdat
	.weak	_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE # -- Begin function _ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE
	.p2align	5
	.type	_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE,@function
_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE: # @_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE
.Lfunc_begin21:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception21
# %bb.0:
	addi.d	$sp, $sp, -256
	.cfi_def_cfa_offset 256
	st.d	$ra, $sp, 248                   # 8-byte Folded Spill
	st.d	$fp, $sp, 240                   # 8-byte Folded Spill
	st.d	$s0, $sp, 232                   # 8-byte Folded Spill
	st.d	$s1, $sp, 224                   # 8-byte Folded Spill
	st.d	$s2, $sp, 216                   # 8-byte Folded Spill
	st.d	$s3, $sp, 208                   # 8-byte Folded Spill
	st.d	$s4, $sp, 200                   # 8-byte Folded Spill
	st.d	$s5, $sp, 192                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 184                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 176                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 168                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 160                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 152                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 144                  # 8-byte Folded Spill
	fst.d	$fs6, $sp, 136                  # 8-byte Folded Spill
	fst.d	$fs7, $sp, 128                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	.cfi_offset 60, -104
	.cfi_offset 61, -112
	.cfi_offset 62, -120
	.cfi_offset 63, -128
	fld.s	$fa0, $a1, 52
	fld.s	$fa1, $a0, 16
	fcmp.cule.s	$fcc0, $fa1, $fa0
	bcnez	$fcc0, .LBB183_30
# %bb.1:
	move	$s3, $a1
	move	$s2, $a0
	move	$fp, $a4
	move	$s0, $a3
	move	$s1, $a2
	fst.s	$fa1, $sp, 72                   # 4-byte Folded Spill
	fst.s	$fa0, $sp, 76                   # 4-byte Folded Spill
	fld.s	$fa0, $a1, 36
	fst.s	$fa0, $sp, 64                   # 4-byte Folded Spill
	fld.s	$fa0, $a1, 40
	fst.s	$fa0, $sp, 60                   # 4-byte Folded Spill
	fld.s	$fa0, $a1, 44
	fst.s	$fa0, $sp, 56                   # 4-byte Folded Spill
	fld.s	$fa0, $a1, 48
	fst.s	$fa0, $sp, 68                   # 4-byte Folded Spill
	pcalau12i	$s5, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	ld.b	$a0, $s5, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$s4, $a1, %pc_lo12(_ZZNK10btSoftBody4Body5xformEvE8identity)
	beqz	$a0, .LBB183_31
.LBB183_2:                              # %_ZNK10btSoftBody4Body5xformEv.exit
	ld.d	$a0, $s1, 16
	ld.d	$a1, $s1, 0
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s4, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fs0, $s3, 4
	fld.s	$fs1, $a0, 48
	fld.s	$fs2, $s3, 8
	fld.s	$fs3, $a0, 52
	fld.s	$fs4, $s3, 12
	fld.s	$fs5, $a0, 56
	ld.b	$a0, $s5, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	beqz	$a0, .LBB183_34
.LBB183_3:                              # %_ZNK10btSoftBody4Body5xformEv.exit64
	ld.d	$a1, $s0, 16
	ld.d	$a0, $s0, 0
	sltui	$a2, $a1, 1
	addi.d	$a1, $a1, 72
	sltui	$a3, $a0, 1
	addi.d	$a4, $a0, 96
	masknez	$a4, $a4, $a3
	maskeqz	$a3, $s4, $a3
	or	$a3, $a3, $a4
	maskeqz	$a3, $a3, $a2
	masknez	$a1, $a1, $a2
	or	$a2, $a3, $a1
	fld.s	$fa0, $s3, 20
	fld.s	$fa1, $a2, 48
	fld.s	$fa2, $s3, 24
	fld.s	$fa3, $a2, 52
	fld.s	$fa4, $s3, 28
	ld.d	$a1, $s1, 8
	fld.s	$fa5, $a2, 56
	fsub.s	$fs6, $fs0, $fs1
	fsub.s	$fs7, $fs2, $fs3
	fsub.s	$fs2, $fs4, $fs5
	beqz	$a1, .LBB183_5
# %bb.4:
	fld.s	$fa6, $a1, 328
	fst.s	$fa6, $sp, 48                   # 4-byte Folded Spill
	fld.s	$fa6, $a1, 332
	fst.s	$fa6, $sp, 52                   # 4-byte Folded Spill
	fld.s	$fa6, $a1, 336
	fst.s	$fa6, $sp, 44                   # 4-byte Folded Spill
	fld.s	$fa6, $a1, 352
	fld.s	$fa7, $a1, 348
	fneg.s	$ft0, $fs7
	fld.s	$ft1, $a1, 344
	b	.LBB183_7
.LBB183_5:
	ld.d	$a1, $s1, 0
	beqz	$a1, .LBB183_19
# %bb.6:
	fld.s	$fa6, $a1, 352
	fst.s	$fa6, $sp, 48                   # 4-byte Folded Spill
	fld.s	$fa6, $a1, 356
	fst.s	$fa6, $sp, 52                   # 4-byte Folded Spill
	fld.s	$fa6, $a1, 360
	fst.s	$fa6, $sp, 44                   # 4-byte Folded Spill
	fld.s	$fa6, $a1, 376
	fld.s	$fa7, $a1, 372
	fneg.s	$ft0, $fs7
	fld.s	$ft1, $a1, 368
.LBB183_7:                              # %_ZNK10btSoftBody4Body8velocityERK9btVector3.exit
	fmul.s	$ft0, $fa6, $ft0
	fmadd.s	$ft0, $fa7, $fs2, $ft0
	fst.s	$ft0, $sp, 40                   # 4-byte Folded Spill
	fneg.s	$ft0, $fs2
	fmul.s	$ft0, $ft1, $ft0
	fmadd.s	$fa6, $fa6, $fs6, $ft0
	fst.s	$fa6, $sp, 36                   # 4-byte Folded Spill
	fneg.s	$fa6, $fs6
	fmul.s	$fa6, $fa7, $fa6
	fmadd.s	$fa6, $ft1, $fs7, $fa6
.LBB183_8:                              # %_ZNK10btSoftBody4Body8velocityERK9btVector3.exit
	fst.s	$fa6, $sp, 32                   # 4-byte Folded Spill
	ld.d	$a1, $s0, 8
	fsub.s	$fs3, $fa0, $fa1
	fsub.s	$fs4, $fa2, $fa3
	fsub.s	$fs5, $fa4, $fa5
	beqz	$a1, .LBB183_10
# %bb.9:
	fld.s	$fa0, $a1, 328
	fst.s	$fa0, $sp, 28                   # 4-byte Folded Spill
	fld.s	$fs1, $a1, 332
	fld.s	$fa0, $a1, 336
	fst.s	$fa0, $sp, 24                   # 4-byte Folded Spill
	fld.s	$fa0, $a1, 352
	fld.s	$fa1, $a1, 348
	fneg.s	$fa2, $fs4
	fld.s	$fa3, $a1, 344
	b	.LBB183_12
.LBB183_10:
	beqz	$a0, .LBB183_20
# %bb.11:
	fld.s	$fa0, $a0, 352
	fst.s	$fa0, $sp, 28                   # 4-byte Folded Spill
	fld.s	$fs1, $a0, 356
	fld.s	$fa0, $a0, 360
	fst.s	$fa0, $sp, 24                   # 4-byte Folded Spill
	fld.s	$fa0, $a0, 376
	fld.s	$fa1, $a0, 372
	fneg.s	$fa2, $fs4
	fld.s	$fa3, $a0, 368
.LBB183_12:                             # %_ZNK10btSoftBody4Body8velocityERK9btVector3.exit96
	fmul.s	$fa2, $fa0, $fa2
	fmadd.s	$fa2, $fa1, $fs5, $fa2
	fst.s	$fa2, $sp, 20                   # 4-byte Folded Spill
	fneg.s	$fa2, $fs5
	fmul.s	$fa2, $fa3, $fa2
	fmadd.s	$fa0, $fa0, $fs3, $fa2
	fst.s	$fa0, $sp, 16                   # 4-byte Folded Spill
	fneg.s	$fa0, $fs3
	fmul.s	$fa0, $fa1, $fa0
	fmadd.s	$fa0, $fa3, $fs4, $fa0
	fst.s	$fa0, $sp, 12                   # 4-byte Folded Spill
.LBB183_13:                             # %_ZNK10btSoftBody4Body8velocityERK9btVector3.exit96
	ld.d	$a0, $s1, 16
	fld.s	$fa0, $s3, 52
	fst.s	$fa0, $sp, 8                    # 4-byte Folded Spill
	fld.s	$fs0, $s2, 16
	st.d	$a0, $fp, 24
	vld	$vr0, $s1, 0
	vst	$vr0, $fp, 8
	vld	$vr0, $s0, 8
	vst	$vr0, $fp, 40
	ld.d	$a0, $s0, 0
	st.d	$a0, $fp, 32
	ld.b	$a0, $s5, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	beqz	$a0, .LBB183_37
.LBB183_14:                             # %_ZNK10btSoftBody4Body5xformEv.exit123
	ld.d	$a0, $s1, 16
	ld.d	$a1, $s1, 0
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s4, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$fa0, $a0, 16
	fld.s	$fa1, $a0, 0
	fmul.s	$fa0, $fs7, $fa0
	fld.s	$fa2, $a0, 32
	fld.s	$fa3, $a0, 20
	fld.s	$fa4, $a0, 4
	fmadd.s	$fa0, $fa1, $fs6, $fa0
	fmadd.s	$fa0, $fa2, $fs2, $fa0
	fmul.s	$fa1, $fs7, $fa3
	fmadd.s	$fa1, $fa4, $fs6, $fa1
	fld.s	$fa2, $a0, 36
	fld.s	$fa3, $a0, 24
	fld.s	$fa4, $a0, 8
	fld.s	$fa5, $a0, 40
	fmadd.s	$fa1, $fa2, $fs2, $fa1
	fmul.s	$fa2, $fs7, $fa3
	fmadd.s	$fa2, $fa4, $fs6, $fa2
	fmadd.s	$fa2, $fa5, $fs2, $fa2
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa2
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 56
	st.d	$a1, $fp, 64
	ld.b	$a0, $s5, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	dbar	20
	beqz	$a0, .LBB183_40
.LBB183_15:                             # %_ZNK10btSoftBody4Body5xformEv.exit136
	fld.s	$fa3, $sp, 60                   # 4-byte Folded Reload
	fmul.s	$fa0, $fa3, $fa3
	fld.s	$fa1, $sp, 64                   # 4-byte Folded Reload
	fmadd.s	$fa0, $fa1, $fa1, $fa0
	fld.s	$fa4, $sp, 56                   # 4-byte Folded Reload
	fmadd.s	$fa0, $fa4, $fa4, $fa0
	frsqrt.s	$fa2, $fa0
	fmul.s	$fa0, $fa1, $fa2
	fmul.s	$fa1, $fa3, $fa2
	fmul.s	$fa2, $fa4, $fa2
	fld.s	$fa3, $sp, 48                   # 4-byte Folded Reload
	fld.s	$fa4, $sp, 40                   # 4-byte Folded Reload
	fadd.s	$fa3, $fa3, $fa4
	fld.s	$fa4, $sp, 52                   # 4-byte Folded Reload
	fld.s	$fa5, $sp, 36                   # 4-byte Folded Reload
	fadd.s	$fa4, $fa4, $fa5
	fld.s	$fa5, $sp, 44                   # 4-byte Folded Reload
	fld.s	$fa6, $sp, 32                   # 4-byte Folded Reload
	fadd.s	$fa5, $fa5, $fa6
	fld.s	$fa6, $sp, 28                   # 4-byte Folded Reload
	fld.s	$fa7, $sp, 20                   # 4-byte Folded Reload
	fadd.s	$fa6, $fa6, $fa7
	fld.s	$fa7, $sp, 16                   # 4-byte Folded Reload
	fadd.s	$fa7, $fs1, $fa7
	fld.s	$ft0, $sp, 24                   # 4-byte Folded Reload
	fld.s	$ft1, $sp, 12                   # 4-byte Folded Reload
	fadd.s	$ft0, $ft0, $ft1
	fsub.s	$fa6, $fa3, $fa6
	fsub.s	$fa7, $fa4, $fa7
	fsub.s	$ft0, $fa5, $ft0
	fmul.s	$fa3, $fa1, $fa7
	fmadd.s	$fa3, $fa6, $fa0, $fa3
	fmadd.s	$fa3, $ft0, $fa2, $fa3
	fld.s	$fa4, $sp, 8                    # 4-byte Folded Reload
	fsub.s	$fa5, $fa4, $fs0
	fmul.s	$fa4, $fa0, $fa3
	fmul.s	$ft1, $fa1, $fa3
	ld.d	$a0, $s0, 16
	fmul.s	$ft2, $fa2, $fa3
	ld.d	$a1, $s0, 0
	fsub.s	$fa4, $fa6, $fa4
	sltui	$a2, $a0, 1
	addi.d	$a0, $a0, 72
	sltui	$a3, $a1, 1
	addi.d	$a1, $a1, 96
	masknez	$a1, $a1, $a3
	maskeqz	$a3, $s4, $a3
	or	$a1, $a3, $a1
	maskeqz	$a1, $a1, $a2
	masknez	$a0, $a0, $a2
	or	$a0, $a1, $a0
	fld.s	$ft3, $a0, 16
	fsub.s	$fa7, $fa7, $ft1
	fsub.s	$fa6, $ft0, $ft2
	fld.s	$ft0, $a0, 0
	fmul.s	$ft1, $fs4, $ft3
	fld.s	$ft2, $a0, 32
	fld.s	$ft3, $a0, 20
	fld.s	$ft4, $a0, 4
	fmadd.s	$ft0, $ft0, $fs3, $ft1
	fmadd.s	$ft0, $ft2, $fs5, $ft0
	fmul.s	$ft1, $fs4, $ft3
	fmadd.s	$ft1, $ft4, $fs3, $ft1
	fld.s	$ft2, $a0, 36
	fld.s	$ft3, $a0, 24
	fld.s	$ft4, $a0, 8
	fld.s	$ft5, $a0, 40
	fmadd.s	$ft1, $ft2, $fs5, $ft1
	fmul.s	$ft2, $fs4, $ft3
	fmadd.s	$ft2, $ft4, $fs3, $ft2
	fmadd.s	$ft2, $ft5, $fs5, $ft2
	movfr2gr.s	$a0, $ft0
	movfr2gr.s	$a1, $ft1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $ft2
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 72
	st.d	$a1, $fp, 80
	fst.s	$fs6, $fp, 192
	fst.s	$fs7, $fp, 196
	fst.s	$fs2, $fp, 200
	st.w	$zero, $fp, 204
	fst.s	$fs3, $fp, 208
	fst.s	$fs4, $fp, 212
	fst.s	$fs5, $fp, 216
	st.w	$zero, $fp, 220
	lu12i.w	$a0, 260096
	lu52i.d	$a1, $a0, 1016
	st.d	$a1, $fp, 88
	st.d	$zero, $fp, 184
	st.w	$a0, $fp, 96
	fmul.s	$ft0, $fa0, $fa5
	fmul.s	$ft1, $fa1, $fa5
	fmul.s	$fa5, $fa2, $fa5
	movfr2gr.s	$a0, $ft0
	movfr2gr.s	$a1, $ft1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa5
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $fp, 100
	st.d	$a1, $fp, 108
	fst.s	$fa0, $fp, 224
	fst.s	$fa1, $fp, 228
	fst.s	$fa2, $fp, 232
	fld.s	$fa0, $sp, 68                   # 4-byte Folded Reload
	fst.s	$fa0, $fp, 236
	st.b	$zero, $fp, 180
	fmul.s	$fa0, $fa7, $fa7
	fld.s	$fa1, $s2, 20
	fmadd.s	$fa0, $fa4, $fa4, $fa0
	fmadd.s	$fa0, $fa6, $fa6, $fa0
	fneg.s	$fa2, $fa3
	fmul.s	$fa2, $fa1, $fa2
	ld.d	$a0, $s1, 8
	fcmp.clt.s	$fcc0, $fa0, $fa2
	vldi	$vr0, -1168
	fsel	$fa0, $fa1, $fa0, $fcc0
	fst.s	$fa0, $fp, 240
	beqz	$a0, .LBB183_17
# %bb.16:
	fld.s	$fa0, $a0, 360
	b	.LBB183_22
.LBB183_17:
	ld.d	$a0, $s1, 0
	beqz	$a0, .LBB183_21
# %bb.18:
	fld.s	$fa0, $a0, 164
	b	.LBB183_22
.LBB183_19:
	movgr2fr.w	$fa6, $zero
	fst.s	$fa6, $sp, 48                   # 4-byte Folded Spill
	fst.s	$fa6, $sp, 44                   # 4-byte Folded Spill
	fst.s	$fa6, $sp, 40                   # 4-byte Folded Spill
	fst.s	$fa6, $sp, 36                   # 4-byte Folded Spill
	fst.s	$fa6, $sp, 52                   # 4-byte Folded Spill
	b	.LBB183_8
.LBB183_20:
	movgr2fr.w	$fs1, $zero
	fst.s	$fs1, $sp, 28                   # 4-byte Folded Spill
	fst.s	$fs1, $sp, 24                   # 4-byte Folded Spill
	fst.s	$fs1, $sp, 20                   # 4-byte Folded Spill
	fst.s	$fs1, $sp, 16                   # 4-byte Folded Spill
	fst.s	$fs1, $sp, 12                   # 4-byte Folded Spill
	b	.LBB183_13
.LBB183_21:
	movgr2fr.w	$fa0, $zero
.LBB183_22:                             # %_ZNK10btSoftBody4Body7invMassEv.exit
	pcalau12i	$s3, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	ld.b	$a0, $s3, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$s2, $a1, %pc_lo12(_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	beqz	$a0, .LBB183_43
.LBB183_23:                             # %_ZNK10btSoftBody4Body15invWorldInertiaEv.exit
	ld.d	$a0, $s1, 8
	ld.d	$a1, $s1, 0
	sltui	$a3, $a0, 1
	addi.d	$a4, $a0, 280
	sltui	$a0, $a1, 1
	addi.d	$a1, $a1, 216
	masknez	$a1, $a1, $a0
	ld.d	$a2, $s0, 8
	maskeqz	$a0, $s2, $a0
	or	$a0, $a0, $a1
	maskeqz	$a0, $a0, $a3
	masknez	$a1, $a4, $a3
	beqz	$a2, .LBB183_25
# %bb.24:
	fld.s	$fa1, $a2, 360
	b	.LBB183_28
.LBB183_25:
	ld.d	$a2, $s0, 0
	beqz	$a2, .LBB183_27
# %bb.26:
	fld.s	$fa1, $a2, 164
	b	.LBB183_28
.LBB183_27:
	movgr2fr.w	$fa1, $zero
.LBB183_28:                             # %_ZNK10btSoftBody4Body7invMassEv.exit157
	ld.b	$a3, $s3, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a2, $fp, 192
	addi.d	$a4, $fp, 208
	or	$a1, $a0, $a1
	dbar	20
	beqz	$a3, .LBB183_45
.LBB183_29:                             # %_ZNK10btSoftBody4Body15invWorldInertiaEv.exit163
	ld.d	$a0, $s0, 8
	ld.d	$a3, $s0, 0
	sltui	$a5, $a0, 1
	addi.d	$a0, $a0, 280
	sltui	$a6, $a3, 1
	addi.d	$a3, $a3, 216
	masknez	$a3, $a3, $a6
	maskeqz	$a6, $s2, $a6
	or	$a3, $a6, $a3
	maskeqz	$a3, $a3, $a5
	masknez	$a0, $a0, $a5
	or	$a3, $a3, $a0
	addi.d	$a0, $sp, 80
	pcaddu18i	$ra, %call36(_ZL13ImpulseMatrixfRK11btMatrix3x3RK9btVector3fS1_S4_)
	jirl	$ra, $ra, 0
	vld	$vr0, $sp, 80
	vld	$vr1, $sp, 96
	vld	$vr2, $sp, 112
	vst	$vr0, $fp, 132
	vst	$vr1, $fp, 148
	vst	$vr2, $fp, 164
	fld.s	$fa0, $sp, 76                   # 4-byte Folded Reload
	fld.s	$fa1, $sp, 72                   # 4-byte Folded Reload
.LBB183_30:
	fcmp.clt.s	$fcc0, $fa0, $fa1
	movcf2gr	$a0, $fcc0
	fld.d	$fs7, $sp, 128                  # 8-byte Folded Reload
	fld.d	$fs6, $sp, 136                  # 8-byte Folded Reload
	fld.d	$fs5, $sp, 144                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 152                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 160                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 168                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 176                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 184                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 192                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 200                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 208                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 216                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 224                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 232                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 240                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 248                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 256
	ret
.LBB183_31:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB183_2
# %bb.32:
.Ltmp472:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp473:                               # EH_LABEL
# %bb.33:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s4, 0
	vst	$vr1, $s4, 16
	vst	$vr2, $s4, 32
	vst	$vr3, $s4, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB183_2
.LBB183_34:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB183_3
# %bb.35:
.Ltmp475:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp476:                               # EH_LABEL
# %bb.36:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s4, 0
	vst	$vr1, $s4, 16
	vst	$vr2, $s4, 32
	vst	$vr3, $s4, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB183_3
.LBB183_37:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB183_14
# %bb.38:
.Ltmp478:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp479:                               # EH_LABEL
# %bb.39:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s4, 0
	vst	$vr1, $s4, 16
	vst	$vr2, $s4, 32
	vst	$vr3, $s4, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB183_14
.LBB183_40:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB183_15
# %bb.41:
.Ltmp481:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btTransform11getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp482:                               # EH_LABEL
# %bb.42:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vld	$vr3, $a0, 48
	vst	$vr0, $s4, 0
	vst	$vr1, $s4, 16
	vst	$vr2, $s4, 32
	vst	$vr3, $s4, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB183_15
.LBB183_43:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	fmov.s	$fs0, $fa0
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	fmov.s	$fa0, $fs0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB183_23
# %bb.44:
	vrepli.b	$vr0, 0
	vst	$vr0, $s2, 32
	vst	$vr0, $s2, 16
	vst	$vr0, $s2, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	fmov.s	$fa0, $fs0
	b	.LBB183_23
.LBB183_45:
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	fmov.s	$fs0, $fa0
	fmov.s	$fs1, $fa1
	move	$s3, $a4
	move	$s4, $a2
	move	$s1, $a1
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	move	$a1, $s1
	move	$a2, $s4
	move	$a4, $s3
	fmov.s	$fa1, $fs1
	fmov.s	$fa0, $fs0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB183_29
# %bb.46:
	vrepli.b	$vr0, 0
	vst	$vr0, $s2, 32
	vst	$vr0, $s2, 16
	vst	$vr0, $s2, 0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	move	$a1, $s1
	move	$a2, $s4
	move	$a4, $s3
	fmov.s	$fa1, $fs1
	fmov.s	$fa0, $fs0
	b	.LBB183_29
.LBB183_47:
.Ltmp483:                               # EH_LABEL
	b	.LBB183_51
.LBB183_48:
.Ltmp480:                               # EH_LABEL
	b	.LBB183_51
.LBB183_49:
.Ltmp477:                               # EH_LABEL
	b	.LBB183_51
.LBB183_50:
.Ltmp474:                               # EH_LABEL
.LBB183_51:                             # %common.resume
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZNK10btSoftBody4Body5xformEvE8identity)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.Lfunc_end183:
	.size	_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE, .Lfunc_end183-_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE
	.cfi_endproc
	.section	.gcc_except_table._ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE,"aG",@progbits,_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE,comdat
	.p2align	2, 0x0
GCC_except_table183:
.Lexception21:
	.byte	255                             # @LPStart Encoding = omit
	.byte	255                             # @TType Encoding = omit
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end21-.Lcst_begin21
.Lcst_begin21:
	.uleb128 .Lfunc_begin21-.Lfunc_begin21  # >> Call Site 1 <<
	.uleb128 .Ltmp472-.Lfunc_begin21        #   Call between .Lfunc_begin21 and .Ltmp472
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp472-.Lfunc_begin21        # >> Call Site 2 <<
	.uleb128 .Ltmp473-.Ltmp472              #   Call between .Ltmp472 and .Ltmp473
	.uleb128 .Ltmp474-.Lfunc_begin21        #     jumps to .Ltmp474
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp473-.Lfunc_begin21        # >> Call Site 3 <<
	.uleb128 .Ltmp475-.Ltmp473              #   Call between .Ltmp473 and .Ltmp475
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp475-.Lfunc_begin21        # >> Call Site 4 <<
	.uleb128 .Ltmp476-.Ltmp475              #   Call between .Ltmp475 and .Ltmp476
	.uleb128 .Ltmp477-.Lfunc_begin21        #     jumps to .Ltmp477
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp476-.Lfunc_begin21        # >> Call Site 5 <<
	.uleb128 .Ltmp478-.Ltmp476              #   Call between .Ltmp476 and .Ltmp478
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp478-.Lfunc_begin21        # >> Call Site 6 <<
	.uleb128 .Ltmp479-.Ltmp478              #   Call between .Ltmp478 and .Ltmp479
	.uleb128 .Ltmp480-.Lfunc_begin21        #     jumps to .Ltmp480
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp479-.Lfunc_begin21        # >> Call Site 7 <<
	.uleb128 .Ltmp481-.Ltmp479              #   Call between .Ltmp479 and .Ltmp481
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp481-.Lfunc_begin21        # >> Call Site 8 <<
	.uleb128 .Ltmp482-.Ltmp481              #   Call between .Ltmp481 and .Ltmp482
	.uleb128 .Ltmp483-.Lfunc_begin21        #     jumps to .Ltmp483
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp482-.Lfunc_begin21        # >> Call Site 9 <<
	.uleb128 .Lfunc_end183-.Ltmp482         #   Call between .Ltmp482 and .Lfunc_end183
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end21:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN27btSoftClusterCollisionShapeD0Ev,"axG",@progbits,_ZN27btSoftClusterCollisionShapeD0Ev,comdat
	.weak	_ZN27btSoftClusterCollisionShapeD0Ev # -- Begin function _ZN27btSoftClusterCollisionShapeD0Ev
	.p2align	5
	.type	_ZN27btSoftClusterCollisionShapeD0Ev,@function
_ZN27btSoftClusterCollisionShapeD0Ev:   # @_ZN27btSoftClusterCollisionShapeD0Ev
.Lfunc_begin22:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception22
# %bb.0:
	addi.d	$sp, $sp, -32
	.cfi_def_cfa_offset 32
	st.d	$ra, $sp, 24                    # 8-byte Folded Spill
	st.d	$fp, $sp, 16                    # 8-byte Folded Spill
	st.d	$s0, $sp, 8                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	move	$fp, $a0
.Ltmp484:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN13btConvexShapeD2Ev)
	jirl	$ra, $ra, 0
.Ltmp485:                               # EH_LABEL
# %bb.1:
	move	$a0, $fp
	ld.d	$s0, $sp, 8                     # 8-byte Folded Reload
	ld.d	$fp, $sp, 16                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 24                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 32
	pcaddu18i	$t8, %call36(_Z21btAlignedFreeInternalPv)
	jr	$t8
.LBB184_2:
.Ltmp486:                               # EH_LABEL
	move	$s0, $a0
.Ltmp487:                               # EH_LABEL
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp488:                               # EH_LABEL
# %bb.3:                                # %_ZN13btConvexShapedlEPv.exit
	move	$a0, $s0
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB184_4:
.Ltmp489:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end184:
	.size	_ZN27btSoftClusterCollisionShapeD0Ev, .Lfunc_end184-_ZN27btSoftClusterCollisionShapeD0Ev
	.cfi_endproc
	.section	.gcc_except_table._ZN27btSoftClusterCollisionShapeD0Ev,"aG",@progbits,_ZN27btSoftClusterCollisionShapeD0Ev,comdat
	.p2align	2, 0x0
GCC_except_table184:
.Lexception22:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase15-.Lttbaseref15
.Lttbaseref15:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end22-.Lcst_begin22
.Lcst_begin22:
	.uleb128 .Ltmp484-.Lfunc_begin22        # >> Call Site 1 <<
	.uleb128 .Ltmp485-.Ltmp484              #   Call between .Ltmp484 and .Ltmp485
	.uleb128 .Ltmp486-.Lfunc_begin22        #     jumps to .Ltmp486
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp485-.Lfunc_begin22        # >> Call Site 2 <<
	.uleb128 .Ltmp487-.Ltmp485              #   Call between .Ltmp485 and .Ltmp487
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp487-.Lfunc_begin22        # >> Call Site 3 <<
	.uleb128 .Ltmp488-.Ltmp487              #   Call between .Ltmp487 and .Ltmp488
	.uleb128 .Ltmp489-.Lfunc_begin22        #     jumps to .Ltmp489
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp488-.Lfunc_begin22        # >> Call Site 4 <<
	.uleb128 .Lfunc_end184-.Ltmp488         #   Call between .Ltmp488 and .Lfunc_end184
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end22:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase15:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_,"axG",@progbits,_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_,comdat
	.weak	_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_ # -- Begin function _ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_
	.p2align	5
	.type	_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_,@function
_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_: # @_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_
# %bb.0:
	ret
.Lfunc_end185:
	.size	_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_, .Lfunc_end185-_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_
                                        # -- End function
	.section	.text._ZNK21btConvexInternalShape15getLocalScalingEv,"axG",@progbits,_ZNK21btConvexInternalShape15getLocalScalingEv,comdat
	.weak	_ZNK21btConvexInternalShape15getLocalScalingEv # -- Begin function _ZNK21btConvexInternalShape15getLocalScalingEv
	.p2align	5
	.type	_ZNK21btConvexInternalShape15getLocalScalingEv,@function
_ZNK21btConvexInternalShape15getLocalScalingEv: # @_ZNK21btConvexInternalShape15getLocalScalingEv
# %bb.0:
	addi.d	$a0, $a0, 24
	ret
.Lfunc_end186:
	.size	_ZNK21btConvexInternalShape15getLocalScalingEv, .Lfunc_end186-_ZNK21btConvexInternalShape15getLocalScalingEv
                                        # -- End function
	.section	.text._ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3,"axG",@progbits,_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3,comdat
	.weak	_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3 # -- Begin function _ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3
	.p2align	5
	.type	_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3,@function
_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3: # @_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3
# %bb.0:
	ret
.Lfunc_end187:
	.size	_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3, .Lfunc_end187-_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3
                                        # -- End function
	.section	.text._ZNK27btSoftClusterCollisionShape7getNameEv,"axG",@progbits,_ZNK27btSoftClusterCollisionShape7getNameEv,comdat
	.weak	_ZNK27btSoftClusterCollisionShape7getNameEv # -- Begin function _ZNK27btSoftClusterCollisionShape7getNameEv
	.p2align	5
	.type	_ZNK27btSoftClusterCollisionShape7getNameEv,@function
_ZNK27btSoftClusterCollisionShape7getNameEv: # @_ZNK27btSoftClusterCollisionShape7getNameEv
# %bb.0:
	pcalau12i	$a0, %pc_hi20(.L.str.4)
	addi.d	$a0, $a0, %pc_lo12(.L.str.4)
	ret
.Lfunc_end188:
	.size	_ZNK27btSoftClusterCollisionShape7getNameEv, .Lfunc_end188-_ZNK27btSoftClusterCollisionShape7getNameEv
                                        # -- End function
	.section	.text._ZN27btSoftClusterCollisionShape9setMarginEf,"axG",@progbits,_ZN27btSoftClusterCollisionShape9setMarginEf,comdat
	.weak	_ZN27btSoftClusterCollisionShape9setMarginEf # -- Begin function _ZN27btSoftClusterCollisionShape9setMarginEf
	.p2align	5
	.type	_ZN27btSoftClusterCollisionShape9setMarginEf,@function
_ZN27btSoftClusterCollisionShape9setMarginEf: # @_ZN27btSoftClusterCollisionShape9setMarginEf
	.cfi_startproc
# %bb.0:
	fst.s	$fa0, $a0, 56
	ret
.Lfunc_end189:
	.size	_ZN27btSoftClusterCollisionShape9setMarginEf, .Lfunc_end189-_ZN27btSoftClusterCollisionShape9setMarginEf
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK27btSoftClusterCollisionShape9getMarginEv,"axG",@progbits,_ZNK27btSoftClusterCollisionShape9getMarginEv,comdat
	.weak	_ZNK27btSoftClusterCollisionShape9getMarginEv # -- Begin function _ZNK27btSoftClusterCollisionShape9getMarginEv
	.p2align	5
	.type	_ZNK27btSoftClusterCollisionShape9getMarginEv,@function
_ZNK27btSoftClusterCollisionShape9getMarginEv: # @_ZNK27btSoftClusterCollisionShape9getMarginEv
	.cfi_startproc
# %bb.0:
	ld.d	$a1, $a0, 0
	ld.d	$a1, $a1, 88
	jr	$a1
.Lfunc_end190:
	.size	_ZNK27btSoftClusterCollisionShape9getMarginEv, .Lfunc_end190-_ZNK27btSoftClusterCollisionShape9getMarginEv
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3,"axG",@progbits,_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3,comdat
	.weak	_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3 # -- Begin function _ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3
	.p2align	5
	.type	_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3,@function
_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3: # @_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3
	.cfi_startproc
# %bb.0:
	ld.d	$a2, $a0, 64
	ld.d	$a0, $a2, 16
	ld.w	$a3, $a2, 4
	ld.d	$a2, $a0, 0
	ori	$a4, $zero, 2
	blt	$a3, $a4, .LBB191_4
# %bb.1:                                # %.lr.ph.preheader
	fld.s	$fa0, $a1, 0
	fld.s	$fa1, $a1, 4
	fld.s	$fa2, $a1, 8
	fld.s	$fa3, $a2, 20
	fld.s	$fa4, $a2, 16
	fld.s	$fa5, $a2, 24
	move	$a1, $zero
	fmul.s	$fa3, $fa1, $fa3
	fmadd.s	$fa3, $fa0, $fa4, $fa3
	fmadd.s	$fa3, $fa2, $fa5, $fa3
	addi.d	$a2, $a0, 8
	addi.d	$a3, $a3, -1
	ori	$a4, $zero, 1
	.p2align	4, , 16
.LBB191_2:                              # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a2, 0
	fld.s	$fa4, $a5, 20
	fld.s	$fa5, $a5, 16
	fld.s	$fa6, $a5, 24
	fmul.s	$fa4, $fa1, $fa4
	fmadd.s	$fa4, $fa0, $fa5, $fa4
	fmadd.s	$fa4, $fa2, $fa6, $fa4
	fcmp.clt.s	$fcc0, $fa3, $fa4
	fsel	$fa3, $fa3, $fa4, $fcc0
	movcf2gr	$a5, $fcc0
	masknez	$a1, $a1, $a5
	maskeqz	$a5, $a4, $a5
	or	$a1, $a5, $a1
	addi.d	$a2, $a2, 8
	addi.d	$a3, $a3, -1
	addi.w	$a4, $a4, 1
	bnez	$a3, .LBB191_2
# %bb.3:                                # %._crit_edge.loopexit
	bstrpick.d	$a1, $a1, 31, 0
	slli.d	$a1, $a1, 3
	ldx.d	$a2, $a0, $a1
.LBB191_4:                              # %._crit_edge
	ld.d	$a0, $a2, 16
	ld.d	$a1, $a2, 24
	ret
.Lfunc_end191:
	.size	_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3, .Lfunc_end191-_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3,"axG",@progbits,_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3,comdat
	.weak	_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3 # -- Begin function _ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3
	.p2align	5
	.type	_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3,@function
_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3: # @_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3
	.cfi_startproc
# %bb.0:
	ld.d	$a2, $a0, 0
	ld.d	$a2, $a2, 96
	jr	$a2
.Lfunc_end192:
	.size	_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3, .Lfunc_end192-_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3
	.cfi_endproc
                                        # -- End function
	.section	.text._ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,"axG",@progbits,_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,comdat
	.weak	_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i # -- Begin function _ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i
	.p2align	5
	.type	_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i,@function
_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i: # @_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i
# %bb.0:
	ret
.Lfunc_end193:
	.size	_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i, .Lfunc_end193-_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i
                                        # -- End function
	.section	.text._ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv,"axG",@progbits,_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv,comdat
	.weak	_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv # -- Begin function _ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv
	.p2align	5
	.type	_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv,@function
_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv: # @_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv
# %bb.0:
	move	$a0, $zero
	ret
.Lfunc_end194:
	.size	_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv, .Lfunc_end194-_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv
                                        # -- End function
	.section	.text._ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3,"axG",@progbits,_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3,comdat
	.weak	_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3 # -- Begin function _ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3
	.p2align	5
	.type	_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3,@function
_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3: # @_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3
# %bb.0:
	ret
.Lfunc_end195:
	.size	_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3, .Lfunc_end195-_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3
                                        # -- End function
	.section	.text._ZNK27btSoftClusterCollisionShape12getShapeTypeEv,"axG",@progbits,_ZNK27btSoftClusterCollisionShape12getShapeTypeEv,comdat
	.weak	_ZNK27btSoftClusterCollisionShape12getShapeTypeEv # -- Begin function _ZNK27btSoftClusterCollisionShape12getShapeTypeEv
	.p2align	5
	.type	_ZNK27btSoftClusterCollisionShape12getShapeTypeEv,@function
_ZNK27btSoftClusterCollisionShape12getShapeTypeEv: # @_ZNK27btSoftClusterCollisionShape12getShapeTypeEv
# %bb.0:
	ori	$a0, $zero, 32
	ret
.Lfunc_end196:
	.size	_ZNK27btSoftClusterCollisionShape12getShapeTypeEv, .Lfunc_end196-_ZNK27btSoftClusterCollisionShape12getShapeTypeEv
                                        # -- End function
	.section	.text._ZN15btSoftColliders12CollideCL_SSD0Ev,"axG",@progbits,_ZN15btSoftColliders12CollideCL_SSD0Ev,comdat
	.weak	_ZN15btSoftColliders12CollideCL_SSD0Ev # -- Begin function _ZN15btSoftColliders12CollideCL_SSD0Ev
	.p2align	5
	.type	_ZN15btSoftColliders12CollideCL_SSD0Ev,@function
_ZN15btSoftColliders12CollideCL_SSD0Ev: # @_ZN15btSoftColliders12CollideCL_SSD0Ev
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.Lfunc_end197:
	.size	_ZN15btSoftColliders12CollideCL_SSD0Ev, .Lfunc_end197-_ZN15btSoftColliders12CollideCL_SSD0Ev
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_,"axG",@progbits,_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_,comdat
	.weak	_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_ # -- Begin function _ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_
	.p2align	5
	.type	_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_,@function
_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_: # @_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_
.Lfunc_begin23:
	.cfi_startproc
	.cfi_personality 155, DW.ref.__gxx_personality_v0
	.cfi_lsda 27, .Lexception23
# %bb.0:
	addi.d	$sp, $sp, -560
	.cfi_def_cfa_offset 560
	st.d	$ra, $sp, 552                   # 8-byte Folded Spill
	st.d	$fp, $sp, 544                   # 8-byte Folded Spill
	st.d	$s0, $sp, 536                   # 8-byte Folded Spill
	st.d	$s1, $sp, 528                   # 8-byte Folded Spill
	st.d	$s2, $sp, 520                   # 8-byte Folded Spill
	st.d	$s3, $sp, 512                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	move	$fp, $a0
	ld.d	$s0, $a1, 40
	ld.d	$a0, $a0, 32
	ld.d	$a1, $fp, 40
	ld.d	$s1, $a2, 40
	beq	$a0, $a1, .LBB198_22
.LBB198_1:                              # %.critedge
	addi.d	$a0, $sp, 440
	pcaddu18i	$ra, %call36(_ZN21btConvexInternalShapeC2Ev)
	jirl	$ra, $ra, 0
	pcalau12i	$a0, %pc_hi20(_ZTV27btSoftClusterCollisionShape+16)
	addi.d	$s2, $a0, %pc_lo12(_ZTV27btSoftClusterCollisionShape+16)
	st.d	$s2, $sp, 440
	st.d	$s0, $sp, 504
	st.w	$zero, $sp, 496
.Ltmp490:                               # EH_LABEL
	addi.d	$a0, $sp, 368
	pcaddu18i	$ra, %call36(_ZN21btConvexInternalShapeC2Ev)
	jirl	$ra, $ra, 0
.Ltmp491:                               # EH_LABEL
# %bb.2:
	st.d	$s2, $sp, 368
	st.d	$s1, $sp, 432
	st.w	$zero, $sp, 424
	pcalau12i	$s3, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	ld.b	$a0, $s3, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	dbar	20
	pcalau12i	$a1, %pc_hi20(_ZZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$s2, $a1, %pc_lo12(_ZZN11btTransform11getIdentityEvE17identityTransform)
	beqz	$a0, .LBB198_36
.LBB198_3:                              # %_ZN11btTransform11getIdentityEv.exit
	ld.b	$a0, $s3, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	dbar	20
	beqz	$a0, .LBB198_39
.LBB198_4:
	fld.s	$fa0, $s0, 264
	fld.s	$fa1, $s1, 264
	fld.s	$fa2, $s0, 268
	fld.s	$fa3, $s1, 268
	fld.s	$fa4, $s0, 272
	fld.s	$fa5, $s1, 272
	fsub.s	$fa0, $fa0, $fa1
	fsub.s	$fa1, $fa2, $fa3
	fsub.s	$fa2, $fa4, $fa5
	movfr2gr.s	$a0, $fa0
	movfr2gr.s	$a1, $fa1
	bstrins.d	$a0, $a1, 63, 32
	movfr2gr.s	$a1, $fa2
	bstrpick.d	$a1, $a1, 31, 0
	st.d	$a0, $sp, 64
	st.d	$a1, $sp, 72
.Ltmp498:                               # EH_LABEL
	pcalau12i	$a0, %pc_hi20(_ZZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a1, $a0, %pc_lo12(_ZZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $sp, 440
	addi.d	$a2, $sp, 368
	addi.d	$a4, $sp, 64
	addi.d	$a5, $sp, 312
	move	$a3, $a1
	pcaddu18i	$ra, %call36(_ZN15btGjkEpaSolver214SignedDistanceEPK13btConvexShapeRK11btTransformS2_S5_RK9btVector3RNS_8sResultsE)
	jirl	$ra, $ra, 0
.Ltmp499:                               # EH_LABEL
# %bb.5:
	beqz	$a0, .LBB198_33
# %bb.6:
	vrepli.b	$vr0, 0
	vst	$vr0, $sp, 104
	vst	$vr0, $sp, 88
	vst	$vr0, $sp, 72
	st.b	$zero, $sp, 244
	pcalau12i	$a0, %pc_hi20(_ZTVN10btSoftBody6CJointE+16)
	addi.d	$s3, $a0, %pc_lo12(_ZTVN10btSoftBody6CJointE+16)
	st.d	$s3, $sp, 64
	st.d	$s0, $sp, 40
	vst	$vr0, $sp, 48
	st.d	$s1, $sp, 16
	vst	$vr0, $sp, 24
.Ltmp501:                               # EH_LABEL
	addi.d	$a1, $sp, 312
	addi.d	$a2, $sp, 40
	addi.d	$a3, $sp, 16
	addi.d	$a4, $sp, 64
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_ZN15btSoftColliders11ClusterBase12SolveContactERKN15btGjkEpaSolver28sResultsEN10btSoftBody4BodyES6_RNS5_6CJointE)
	jirl	$ra, $ra, 0
.Ltmp502:                               # EH_LABEL
# %bb.7:
	beqz	$a0, .LBB198_33
# %bb.8:
.Ltmp504:                               # EH_LABEL
	ori	$a0, $zero, 248
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp505:                               # EH_LABEL
# %bb.9:
	move	$s0, $a0
	addi.d	$s1, $sp, 72
	addi.d	$s2, $a0, 8
	ori	$a2, $zero, 240
	move	$a0, $s2
	move	$a1, $zero
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	st.d	$s3, $s0, 0
	ori	$a2, $zero, 124
	move	$a0, $s2
	move	$a1, $s1
	pcaddu18i	$ra, %call36(memcpy)
	jirl	$ra, $ra, 0
	vld	$vr0, $sp, 196
	vst	$vr0, $s0, 132
	vld	$vr0, $sp, 212
	vst	$vr0, $s0, 148
	vld	$vr0, $sp, 228
	vst	$vr0, $s0, 164
	ld.b	$a0, $sp, 244
	st.b	$a0, $s0, 180
	vld	$vr0, $sp, 256
	vst	$vr0, $s0, 192
	vld	$vr0, $sp, 272
	vst	$vr0, $s0, 208
	vld	$vr0, $sp, 288
	vst	$vr0, $s0, 224
	ld.w	$a0, $sp, 304
	st.w	$a0, $s0, 240
	ld.d	$a0, $sp, 248
	st.d	$a0, $s0, 184
	ld.d	$s2, $fp, 32
	ld.w	$a1, $s2, 1044
	ld.w	$a0, $s2, 1048
	bne	$a1, $a0, .LBB198_25
# %bb.10:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s3, $a0, $a2
	bge	$a1, $s3, .LBB198_25
# %bb.11:
	beqz	$s3, .LBB198_26
# %bb.12:
	slli.d	$a0, $s3, 3
.Ltmp507:                               # EH_LABEL
	ori	$a1, $zero, 16
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
.Ltmp508:                               # EH_LABEL
# %bb.13:                               # %.noexc
	move	$s1, $a0
	ld.w	$a1, $s2, 1044
	ld.d	$a0, $s2, 1056
	blez	$a1, .LBB198_27
.LBB198_14:                             # %.lr.ph.i.i.i
	ori	$a3, $zero, 4
	move	$a2, $zero
	bltu	$a1, $a3, .LBB198_19
# %bb.15:                               # %.lr.ph.i.i.i
	sub.d	$a3, $s1, $a0
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB198_19
# %bb.16:                               # %vector.ph
	bstrpick.d	$a2, $a1, 30, 2
	slli.d	$a2, $a2, 2
	addi.d	$a3, $a0, 16
	addi.d	$a4, $s1, 16
	move	$a5, $a2
	.p2align	4, , 16
.LBB198_17:                             # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -4
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB198_17
# %bb.18:                               # %middle.block
	beq	$a2, $a1, .LBB198_21
.LBB198_19:                             # %scalar.ph.preheader
	sub.d	$a3, $a1, $a2
	alsl.d	$a4, $a2, $a0, 3
	alsl.d	$a2, $a2, $s1, 3
	.p2align	4, , 16
.LBB198_20:                             # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.d	$a5, $a4, 0
	st.d	$a5, $a2, 0
	addi.d	$a3, $a3, -1
	addi.d	$a4, $a4, 8
	addi.d	$a2, $a2, 8
	bnez	$a3, .LBB198_20
.LBB198_21:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.thread.i.i
	ld.bu	$a2, $s2, 1064
	bnez	$a2, .LBB198_29
	b	.LBB198_31
.LBB198_22:
	ld.w	$a1, $a0, 1372
	beqz	$a1, .LBB198_1
# %bb.23:
	ld.w	$a1, $a0, 1340
	ld.w	$a2, $s1, 420
	ld.w	$a3, $s0, 420
	ld.d	$a0, $a0, 1384
	mul.d	$a1, $a2, $a1
	add.w	$a1, $a1, $a3
	ldx.bu	$a0, $a0, $a1
	beqz	$a0, .LBB198_1
# %bb.24:
	pcalau12i	$a0, %pc_hi20(_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count)
	ld.w	$a1, $a0, %pc_lo12(_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count)
	addi.d	$a1, $a1, 1
	st.w	$a1, $a0, %pc_lo12(_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count)
	b	.LBB198_35
.LBB198_25:
	move	$a0, $s2
	b	.LBB198_32
.LBB198_26:
	move	$s1, $zero
	ld.d	$a0, $s2, 1056
	bgtz	$a1, .LBB198_14
.LBB198_27:                             # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.i.i
	beqz	$a0, .LBB198_31
# %bb.28:                               # %_ZNK20btAlignedObjectArrayIPN10btSoftBody5JointEE4copyEiiPS2_.exit.i.i
	ld.b	$a2, $s2, 1064
	andi	$a2, $a2, 1
	beqz	$a2, .LBB198_31
.LBB198_29:
.Ltmp509:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.Ltmp510:                               # EH_LABEL
# %bb.30:                               # %.noexc35
	ld.w	$a1, $s2, 1044
.LBB198_31:                             # %_ZN20btAlignedObjectArrayIPN10btSoftBody5JointEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	st.b	$a0, $s2, 1064
	st.d	$s1, $s2, 1056
	st.w	$s3, $s2, 1048
	ld.d	$a0, $fp, 32
.LBB198_32:
	ld.d	$a2, $s2, 1056
	slli.d	$a3, $a1, 3
	stx.d	$s0, $a2, $a3
	addi.d	$a1, $a1, 1
	st.w	$a1, $s2, 1044
	ld.d	$a1, $fp, 40
	fld.s	$fa0, $a0, 372
	fld.s	$fa1, $a1, 372
	fld.s	$fa2, $s0, 92
	fcmp.clt.s	$fcc0, $fa1, $fa0
	fsel	$fa0, $fa1, $fa0, $fcc0
	fmul.s	$fa0, $fa2, $fa0
	fst.s	$fa0, $s0, 92
	fld.s	$fa0, $a0, 384
	fld.s	$fa1, $a1, 384
	fld.s	$fa2, $s0, 96
	fadd.s	$fa0, $fa0, $fa1
	vldi	$vr1, -1184
	fmul.s	$fa0, $fa0, $fa1
	fmul.s	$fa0, $fa2, $fa0
	fst.s	$fa0, $s0, 96
.LBB198_33:
.Ltmp514:                               # EH_LABEL
	addi.d	$a0, $sp, 368
	pcaddu18i	$ra, %call36(_ZN13btConvexShapeD2Ev)
	jirl	$ra, $ra, 0
.Ltmp515:                               # EH_LABEL
# %bb.34:
	addi.d	$a0, $sp, 440
	pcaddu18i	$ra, %call36(_ZN13btConvexShapeD2Ev)
	jirl	$ra, $ra, 0
.LBB198_35:
	ld.d	$s3, $sp, 512                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 520                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 528                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 536                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 544                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 552                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 560
	ret
.LBB198_36:
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB198_3
# %bb.37:
.Ltmp492:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btMatrix3x311getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp493:                               # EH_LABEL
# %bb.38:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vst	$vr0, $s2, 0
	vst	$vr1, $s2, 16
	vst	$vr2, $s2, 32
	vrepli.b	$vr0, 0
	vst	$vr0, $s2, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB198_3
.LBB198_39:
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_acquire)
	jirl	$ra, $ra, 0
	addi.w	$a0, $a0, 0
	beqz	$a0, .LBB198_4
# %bb.40:
.Ltmp495:                               # EH_LABEL
	pcaddu18i	$ra, %call36(_ZN11btMatrix3x311getIdentityEv)
	jirl	$ra, $ra, 0
.Ltmp496:                               # EH_LABEL
# %bb.41:
	vld	$vr0, $a0, 0
	vld	$vr1, $a0, 16
	vld	$vr2, $a0, 32
	vst	$vr0, $s2, 0
	vst	$vr1, $s2, 16
	vst	$vr2, $s2, 32
	vrepli.b	$vr0, 0
	vst	$vr0, $s2, 48
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_release)
	jirl	$ra, $ra, 0
	b	.LBB198_4
.LBB198_42:
.Ltmp497:                               # EH_LABEL
	b	.LBB198_44
.LBB198_43:
.Ltmp494:                               # EH_LABEL
.LBB198_44:                             # %.body
	move	$fp, $a0
	pcalau12i	$a0, %pc_hi20(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	addi.d	$a0, $a0, %pc_lo12(_ZGVZN11btTransform11getIdentityEvE17identityTransform)
	pcaddu18i	$ra, %call36(__cxa_guard_abort)
	jirl	$ra, $ra, 0
	b	.LBB198_50
.LBB198_45:
.Ltmp511:                               # EH_LABEL
	b	.LBB198_49
.LBB198_46:
.Ltmp506:                               # EH_LABEL
	b	.LBB198_49
.LBB198_47:
.Ltmp503:                               # EH_LABEL
	b	.LBB198_49
.LBB198_48:
.Ltmp500:                               # EH_LABEL
.LBB198_49:                             # %.body
	move	$fp, $a0
.LBB198_50:                             # %.body
.Ltmp512:                               # EH_LABEL
	addi.d	$a0, $sp, 368
	pcaddu18i	$ra, %call36(_ZN13btConvexShapeD2Ev)
	jirl	$ra, $ra, 0
.Ltmp513:                               # EH_LABEL
	b	.LBB198_52
.LBB198_51:
.Ltmp516:                               # EH_LABEL
	move	$fp, $a0
.LBB198_52:
.Ltmp517:                               # EH_LABEL
	addi.d	$a0, $sp, 440
	pcaddu18i	$ra, %call36(_ZN13btConvexShapeD2Ev)
	jirl	$ra, $ra, 0
.Ltmp518:                               # EH_LABEL
# %bb.53:
	move	$a0, $fp
	pcaddu18i	$ra, %call36(_Unwind_Resume)
	jirl	$ra, $ra, 0
.LBB198_54:
.Ltmp519:                               # EH_LABEL
	pcaddu18i	$ra, %call36(__clang_call_terminate)
	jirl	$ra, $ra, 0
.Lfunc_end198:
	.size	_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_, .Lfunc_end198-_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_
	.cfi_endproc
	.section	.gcc_except_table._ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_,"aG",@progbits,_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_,comdat
	.p2align	2, 0x0
GCC_except_table198:
.Lexception23:
	.byte	255                             # @LPStart Encoding = omit
	.byte	155                             # @TType Encoding = indirect pcrel sdata4
	.uleb128 .Lttbase16-.Lttbaseref16
.Lttbaseref16:
	.byte	1                               # Call site Encoding = uleb128
	.uleb128 .Lcst_end23-.Lcst_begin23
.Lcst_begin23:
	.uleb128 .Lfunc_begin23-.Lfunc_begin23  # >> Call Site 1 <<
	.uleb128 .Ltmp490-.Lfunc_begin23        #   Call between .Lfunc_begin23 and .Ltmp490
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp490-.Lfunc_begin23        # >> Call Site 2 <<
	.uleb128 .Ltmp491-.Ltmp490              #   Call between .Ltmp490 and .Ltmp491
	.uleb128 .Ltmp516-.Lfunc_begin23        #     jumps to .Ltmp516
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp498-.Lfunc_begin23        # >> Call Site 3 <<
	.uleb128 .Ltmp499-.Ltmp498              #   Call between .Ltmp498 and .Ltmp499
	.uleb128 .Ltmp500-.Lfunc_begin23        #     jumps to .Ltmp500
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp501-.Lfunc_begin23        # >> Call Site 4 <<
	.uleb128 .Ltmp502-.Ltmp501              #   Call between .Ltmp501 and .Ltmp502
	.uleb128 .Ltmp503-.Lfunc_begin23        #     jumps to .Ltmp503
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp504-.Lfunc_begin23        # >> Call Site 5 <<
	.uleb128 .Ltmp505-.Ltmp504              #   Call between .Ltmp504 and .Ltmp505
	.uleb128 .Ltmp506-.Lfunc_begin23        #     jumps to .Ltmp506
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp505-.Lfunc_begin23        # >> Call Site 6 <<
	.uleb128 .Ltmp507-.Ltmp505              #   Call between .Ltmp505 and .Ltmp507
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp507-.Lfunc_begin23        # >> Call Site 7 <<
	.uleb128 .Ltmp510-.Ltmp507              #   Call between .Ltmp507 and .Ltmp510
	.uleb128 .Ltmp511-.Lfunc_begin23        #     jumps to .Ltmp511
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp514-.Lfunc_begin23        # >> Call Site 8 <<
	.uleb128 .Ltmp515-.Ltmp514              #   Call between .Ltmp514 and .Ltmp515
	.uleb128 .Ltmp516-.Lfunc_begin23        #     jumps to .Ltmp516
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp515-.Lfunc_begin23        # >> Call Site 9 <<
	.uleb128 .Ltmp492-.Ltmp515              #   Call between .Ltmp515 and .Ltmp492
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp492-.Lfunc_begin23        # >> Call Site 10 <<
	.uleb128 .Ltmp493-.Ltmp492              #   Call between .Ltmp492 and .Ltmp493
	.uleb128 .Ltmp494-.Lfunc_begin23        #     jumps to .Ltmp494
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp493-.Lfunc_begin23        # >> Call Site 11 <<
	.uleb128 .Ltmp495-.Ltmp493              #   Call between .Ltmp493 and .Ltmp495
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp495-.Lfunc_begin23        # >> Call Site 12 <<
	.uleb128 .Ltmp496-.Ltmp495              #   Call between .Ltmp495 and .Ltmp496
	.uleb128 .Ltmp497-.Lfunc_begin23        #     jumps to .Ltmp497
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp496-.Lfunc_begin23        # >> Call Site 13 <<
	.uleb128 .Ltmp512-.Ltmp496              #   Call between .Ltmp496 and .Ltmp512
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
	.uleb128 .Ltmp512-.Lfunc_begin23        # >> Call Site 14 <<
	.uleb128 .Ltmp518-.Ltmp512              #   Call between .Ltmp512 and .Ltmp518
	.uleb128 .Ltmp519-.Lfunc_begin23        #     jumps to .Ltmp519
	.byte	1                               #   On action: 1
	.uleb128 .Ltmp518-.Lfunc_begin23        # >> Call Site 15 <<
	.uleb128 .Lfunc_end198-.Ltmp518         #   Call between .Ltmp518 and .Lfunc_end198
	.byte	0                               #     has no landing pad
	.byte	0                               #   On action: cleanup
.Lcst_end23:
	.byte	1                               # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                               #   No further actions
	.p2align	2, 0x0
                                        # >> Catch TypeInfos <<
	.word	0                               # TypeInfo 1
.Lttbase16:
	.p2align	2, 0x0
                                        # -- End function
	.section	.text._ZN15btSoftColliders12CollideVF_SSD0Ev,"axG",@progbits,_ZN15btSoftColliders12CollideVF_SSD0Ev,comdat
	.weak	_ZN15btSoftColliders12CollideVF_SSD0Ev # -- Begin function _ZN15btSoftColliders12CollideVF_SSD0Ev
	.p2align	5
	.type	_ZN15btSoftColliders12CollideVF_SSD0Ev,@function
_ZN15btSoftColliders12CollideVF_SSD0Ev: # @_ZN15btSoftColliders12CollideVF_SSD0Ev
	.cfi_startproc
# %bb.0:
	pcaddu18i	$t8, %call36(_ZdlPv)
	jr	$t8
.Lfunc_end199:
	.size	_ZN15btSoftColliders12CollideVF_SSD0Ev, .Lfunc_end199-_ZN15btSoftColliders12CollideVF_SSD0Ev
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0                          # -- Begin function _ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_
.LCPI200_0:
	.word	0x7f7fffff                      # float 3.40282347E+38
.LCPI200_1:
	.word	0x34000000                      # float 1.1920929E-7
	.section	.text._ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_,"axG",@progbits,_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_,comdat
	.weak	_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_
	.p2align	5
	.type	_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_,@function
_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_: # @_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -192
	.cfi_def_cfa_offset 192
	st.d	$ra, $sp, 184                   # 8-byte Folded Spill
	st.d	$fp, $sp, 176                   # 8-byte Folded Spill
	st.d	$s0, $sp, 168                   # 8-byte Folded Spill
	st.d	$s1, $sp, 160                   # 8-byte Folded Spill
	st.d	$s2, $sp, 152                   # 8-byte Folded Spill
	st.d	$s3, $sp, 144                   # 8-byte Folded Spill
	st.d	$s4, $sp, 136                   # 8-byte Folded Spill
	st.d	$s5, $sp, 128                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 120                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 112                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 104                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 96                   # 8-byte Folded Spill
	fst.d	$fs4, $sp, 88                   # 8-byte Folded Spill
	fst.d	$fs5, $sp, 80                   # 8-byte Folded Spill
	fst.d	$fs6, $sp, 72                   # 8-byte Folded Spill
	fst.d	$fs7, $sp, 64                   # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 56, -72
	.cfi_offset 57, -80
	.cfi_offset 58, -88
	.cfi_offset 59, -96
	.cfi_offset 60, -104
	.cfi_offset 61, -112
	.cfi_offset 62, -120
	.cfi_offset 63, -128
	ld.d	$s0, $a2, 40
	ld.d	$s1, $a1, 40
	ld.d	$a1, $s0, 16
	fld.s	$fa2, $s1, 16
	fld.s	$fa3, $s1, 20
	fld.s	$ft2, $a1, 16
	fld.s	$fa4, $s1, 24
	fld.s	$ft3, $a1, 20
	ld.d	$a2, $s0, 24
	fsub.s	$ft8, $ft2, $fa2
	fld.s	$fa0, $a1, 24
	fsub.s	$ft9, $ft3, $fa3
	fld.s	$fa1, $a2, 16
	fld.s	$fa5, $a2, 20
	fst.s	$fa0, $sp, 40                   # 4-byte Folded Spill
	fsub.s	$ft10, $fa0, $fa4
	ld.d	$a3, $s0, 32
	fst.s	$fa1, $sp, 36                   # 4-byte Folded Spill
	fsub.s	$ft12, $fa1, $fa2
	fst.s	$fa5, $sp, 32                   # 4-byte Folded Spill
	fsub.s	$ft13, $fa5, $fa3
	fld.s	$fa6, $a2, 24
	fld.s	$fa5, $a3, 16
	fld.s	$fa0, $a3, 20
	fld.s	$fa1, $a3, 24
	fst.s	$fa6, $sp, 24                   # 4-byte Folded Spill
	fsub.s	$ft14, $fa6, $fa4
	fst.s	$fa5, $sp, 28                   # 4-byte Folded Spill
	fsub.s	$ft5, $fa5, $fa2
	fst.s	$fa0, $sp, 48                   # 4-byte Folded Spill
	fsub.s	$ft6, $fa0, $fa3
	fst.s	$fa1, $sp, 44                   # 4-byte Folded Spill
	fsub.s	$ft7, $fa1, $fa4
	fsub.s	$fs3, $ft12, $ft8
	fsub.s	$fs4, $ft13, $ft9
	fsub.s	$fs5, $ft14, $ft10
	fsub.s	$fa0, $ft5, $ft8
	fsub.s	$fa1, $ft6, $ft9
	fsub.s	$fa5, $ft7, $ft10
	fneg.s	$fa6, $fa1
	fmul.s	$fa6, $fs5, $fa6
	fmadd.s	$fs6, $fs4, $fa5, $fa6
	fneg.s	$fa5, $fa5
	fmul.s	$fa5, $fs3, $fa5
	fmadd.s	$fs7, $fs5, $fa0, $fa5
	fneg.s	$fa0, $fa0
	fmul.s	$fa0, $fs4, $fa0
	fmadd.s	$fs0, $fs3, $fa1, $fa0
	pcalau12i	$a4, %pc_hi20(.LCPI200_1)
	fld.s	$ft11, $a4, %pc_lo12(.LCPI200_1)
	fmul.s	$fa0, $fs7, $fs7
	fmadd.s	$fa0, $fs6, $fs6, $fa0
	fmadd.s	$fa0, $fs0, $fs0, $fa0
	fcmp.cule.s	$fcc0, $fa0, $ft11
	pcalau12i	$a4, %pc_hi20(.LCPI200_0)
	bcnez	$fcc0, .LBB200_8
# %bb.1:
	frsqrt.s	$fa0, $fa0
	fmul.s	$fa1, $fs6, $fa0
	fmul.s	$fa5, $fs7, $fa0
	fmul.s	$fa6, $fs0, $fa0
	fmul.s	$fa7, $ft9, $fa5
	fld.s	$fa0, $a4, %pc_lo12(.LCPI200_0)
	fmadd.s	$fa7, $ft8, $fa1, $fa7
	fmadd.s	$fa7, $ft10, $fa6, $fa7
	fmul.s	$fs1, $fa7, $fa7
	fcmp.cule.s	$fcc0, $fa0, $fs1
                                        # implicit-def: $f8
                                        # kill: killed $f8
                                        # implicit-def: $f8
                                        # kill: killed $f8
                                        # implicit-def: $f8
                                        # kill: killed $f8
	bcnez	$fcc0, .LBB200_9
# %bb.2:
	fmul.s	$ft0, $fa1, $fa7
	fmul.s	$fa5, $fa5, $fa7
	fmul.s	$fa6, $fa6, $fa7
	fsub.s	$fs2, $ft8, $ft0
	fsub.s	$fa0, $ft9, $fa5
	fsub.s	$fa1, $ft10, $fa6
	fst.s	$ft0, $sp, 52                   # 4-byte Folded Spill
	fsub.s	$ft15, $ft12, $ft0
	fst.s	$fa5, $sp, 60                   # 4-byte Folded Spill
	fsub.s	$fa5, $ft13, $fa5
	fst.s	$fa6, $sp, 56                   # 4-byte Folded Spill
	fsub.s	$fa7, $ft14, $fa6
	fneg.s	$fa6, $fa5
	fmul.s	$fa6, $fa1, $fa6
	fmadd.s	$fa6, $fa0, $fa7, $fa6
	fneg.s	$ft0, $fa7
	fmul.s	$ft0, $fs2, $ft0
	fmadd.s	$ft0, $fa1, $ft15, $ft0
	fneg.s	$ft1, $ft15
	fmul.s	$ft1, $fa0, $ft1
	fmadd.s	$ft1, $fs2, $fa5, $ft1
	fmul.s	$ft0, $fs7, $ft0
	fmadd.s	$fa6, $fa6, $fs6, $ft0
	fmadd.s	$fa6, $ft1, $fs0, $fa6
	movgr2fr.w	$ft4, $zero
	fcmp.cule.s	$fcc0, $fa6, $ft4
	bcnez	$fcc0, .LBB200_5
# %bb.3:
	fld.s	$fa6, $sp, 52                   # 4-byte Folded Reload
	fsub.s	$fa6, $ft5, $fa6
	fld.s	$ft0, $sp, 60                   # 4-byte Folded Reload
	fsub.s	$ft0, $ft6, $ft0
	fld.s	$ft1, $sp, 56                   # 4-byte Folded Reload
	fsub.s	$ft1, $ft7, $ft1
	fst.s	$ft2, $sp, 20                   # 4-byte Folded Spill
	fneg.s	$ft2, $ft0
	fmul.s	$ft2, $fa7, $ft2
	fmadd.s	$ft2, $fa5, $ft1, $ft2
	fst.s	$ft2, $sp, 16                   # 4-byte Folded Spill
	fmov.s	$ft2, $ft3
	fneg.s	$ft3, $ft1
	fmul.s	$ft3, $ft15, $ft3
	fmadd.s	$fa7, $fa7, $fa6, $ft3
	fneg.s	$ft3, $fa6
	fmul.s	$fa5, $fa5, $ft3
	fmov.s	$ft3, $ft2
	fmadd.s	$fa5, $ft15, $ft0, $fa5
	fmul.s	$fa7, $fs7, $fa7
	fld.s	$ft2, $sp, 16                   # 4-byte Folded Reload
	fmadd.s	$fa7, $ft2, $fs6, $fa7
	fld.s	$ft2, $sp, 20                   # 4-byte Folded Reload
	fmadd.s	$fa5, $fa5, $fs0, $fa7
	fcmp.cule.s	$fcc0, $fa5, $ft4
	bcnez	$fcc0, .LBB200_5
# %bb.4:
	fneg.s	$fa5, $fa0
	fmul.s	$fa5, $ft1, $fa5
	fmadd.s	$fa5, $ft0, $fa1, $fa5
	fneg.s	$fa1, $fa1
	fmul.s	$fa1, $fa6, $fa1
	fmadd.s	$fa1, $ft1, $fs2, $fa1
	fneg.s	$fa7, $fs2
	fmul.s	$fa7, $ft0, $fa7
	fmadd.s	$fa0, $fa6, $fa0, $fa7
	fmul.s	$fa1, $fs7, $fa1
	fmadd.s	$fa1, $fa5, $fs6, $fa1
	fmadd.s	$fa0, $fa0, $fs0, $fa1
	fcmp.clt.s	$fcc0, $ft4, $fa0
	fmov.s	$fa0, $fs1
	bcnez	$fcc0, .LBB200_9
.LBB200_5:                              # %.critedge.i
	fmov.s	$fs0, $ft4
	fmul.s	$fa0, $fs4, $fs4
	fmadd.s	$fa0, $fs3, $fs3, $fa0
	fmadd.s	$fa0, $fs5, $fs5, $fa0
	fcmp.cule.s	$fcc0, $fa0, $ft11
	bcnez	$fcc0, .LBB200_16
# %bb.6:
	fmul.s	$fa1, $ft9, $fs4
	fmadd.s	$fa1, $ft8, $fs3, $fa1
	fnmadd.s	$fa1, $ft10, $fs5, $fa1
	fdiv.s	$fa0, $fa1, $fa0
	vldi	$vr1, -1168
	fcmp.clt.s	$fcc0, $fa1, $fa0
	fsel	$fa1, $fa0, $fa1, $fcc0
	fcmp.clt.s	$fcc0, $fa0, $fs0
	fsel	$fa0, $fa1, $fs0, $fcc0
	fmul.s	$fa1, $fs3, $fa0
	fmul.s	$fa5, $fs4, $fa0
	fmul.s	$fa0, $fs5, $fa0
	fadd.s	$ft4, $ft8, $fa1
	fadd.s	$ft1, $ft9, $fa5
	fadd.s	$ft15, $ft10, $fa0
	fld.s	$fa0, $a4, %pc_lo12(.LCPI200_0)
	fmul.s	$fa1, $ft1, $ft1
	fmadd.s	$fa1, $ft4, $ft4, $fa1
	fmadd.s	$fa1, $ft15, $ft15, $fa1
	fcmp.cule.s	$fcc0, $fa0, $fa1
	bcnez	$fcc0, .LBB200_17
# %bb.7:
	fmov.s	$fa0, $fa1
	b	.LBB200_17
.LBB200_8:
	fld.s	$fa0, $a4, %pc_lo12(.LCPI200_0)
                                        # implicit-def: $f1
                                        # kill: killed $f1
                                        # implicit-def: $f1
                                        # kill: killed $f1
                                        # implicit-def: $f1
                                        # kill: killed $f1
.LBB200_9:                              # %_ZL13ProjectOriginRK9btVector3S1_S1_RS_Rf.exit
	fld.s	$fa1, $s1, 32
	fld.s	$fa5, $s1, 36
	fld.s	$fa6, $s1, 40
	fld.s	$fa7, $a0, 24
	fsub.s	$fa1, $fa2, $fa1
	fsub.s	$fa5, $fa3, $fa5
	fsub.s	$fa6, $fa4, $fa6
	fmul.s	$fa5, $fa5, $fa5
	fmadd.s	$fa1, $fa1, $fa1, $fa5
	fmadd.s	$fa1, $fa6, $fa6, $fa1
	fsqrt.s	$fa1, $fa1
	vldi	$vr5, -1280
	fmadd.s	$fs3, $fa1, $fa5, $fa7
	fmul.s	$fa1, $fs3, $fs3
	fcmp.cule.s	$fcc0, $fa1, $fa0
	fld.s	$fs2, $sp, 52                   # 4-byte Folded Reload
	fld.s	$ft5, $sp, 60                   # 4-byte Folded Reload
	fld.s	$ft6, $sp, 56                   # 4-byte Folded Reload
	bcnez	$fcc0, .LBB200_31
# %bb.10:
	fadd.s	$fa1, $fa2, $fs2
	fadd.s	$fa2, $fa3, $ft5
	fadd.s	$fa3, $fa4, $ft6
	fsub.s	$fa4, $ft2, $fa1
	fsub.s	$fa5, $ft3, $fa2
	fld.s	$fa6, $sp, 40                   # 4-byte Folded Reload
	fsub.s	$fa6, $fa6, $fa3
	fld.s	$fa7, $sp, 36                   # 4-byte Folded Reload
	fsub.s	$fa7, $fa7, $fa1
	fld.s	$ft0, $sp, 32                   # 4-byte Folded Reload
	fsub.s	$ft0, $ft0, $fa2
	fld.s	$ft1, $sp, 24                   # 4-byte Folded Reload
	fsub.s	$ft1, $ft1, $fa3
	fneg.s	$ft2, $ft0
	fmul.s	$ft2, $fa6, $ft2
	fmadd.s	$ft2, $fa5, $ft1, $ft2
	fneg.s	$ft3, $ft1
	fmul.s	$ft3, $fa4, $ft3
	fmadd.s	$ft3, $fa6, $fa7, $ft3
	fneg.s	$ft4, $fa7
	fmul.s	$ft4, $fa5, $ft4
	fmadd.s	$ft4, $fa4, $ft0, $ft4
	fmul.s	$ft3, $ft3, $ft3
	fmadd.s	$ft2, $ft2, $ft2, $ft3
	fmadd.s	$ft2, $ft4, $ft4, $ft2
	fsqrt.s	$ft2, $ft2
	fld.s	$ft3, $sp, 28                   # 4-byte Folded Reload
	fsub.s	$fa1, $ft3, $fa1
	fld.s	$ft3, $sp, 48                   # 4-byte Folded Reload
	fsub.s	$fa2, $ft3, $fa2
	fld.s	$ft3, $sp, 44                   # 4-byte Folded Reload
	fsub.s	$fa3, $ft3, $fa3
	fneg.s	$ft3, $fa2
	fmul.s	$ft3, $ft1, $ft3
	fmadd.s	$ft3, $ft0, $fa3, $ft3
	fneg.s	$ft4, $fa3
	fmul.s	$ft4, $fa7, $ft4
	fmadd.s	$ft1, $ft1, $fa1, $ft4
	fneg.s	$ft4, $fa1
	fmul.s	$ft0, $ft0, $ft4
	fmadd.s	$fa7, $fa7, $fa2, $ft0
	fmul.s	$ft0, $ft1, $ft1
	fmadd.s	$ft0, $ft3, $ft3, $ft0
	fmadd.s	$fa7, $fa7, $fa7, $ft0
	fsqrt.s	$fa7, $fa7
	fneg.s	$ft0, $fa5
	fmul.s	$ft0, $fa3, $ft0
	fmadd.s	$ft0, $fa2, $fa6, $ft0
	fneg.s	$fa6, $fa6
	fmul.s	$fa6, $fa1, $fa6
	fmadd.s	$fa3, $fa3, $fa4, $fa6
	fneg.s	$fa4, $fa4
	fmul.s	$fa2, $fa2, $fa4
	fmadd.s	$fa1, $fa1, $fa5, $fa2
	fmul.s	$fa2, $fa3, $fa3
	fmadd.s	$fa2, $ft0, $ft0, $fa2
	fmadd.s	$fa1, $fa1, $fa1, $fa2
	fsqrt.s	$fa1, $fa1
	fadd.s	$fa2, $ft2, $fa7
	fadd.s	$fa2, $fa1, $fa2
	frecip.s	$fa2, $fa2
	fmul.s	$fs4, $fa7, $fa2
	fmul.s	$fs5, $fa1, $fa2
	fmul.s	$fs6, $ft2, $fa2
	fld.s	$fa1, $a2, 96
	fld.s	$fa2, $a1, 96
	fld.s	$fa3, $a3, 96
	fld.s	$fs1, $s1, 96
	fmul.s	$fa4, $fs5, $fa1
	fmadd.s	$fa4, $fa2, $fs4, $fa4
	fmadd.s	$fa4, $fa3, $fs6, $fa4
	fmin.s	$fa1, $fa2, $fa1
	movgr2fr.w	$fa2, $zero
	fcmp.cult.s	$fcc0, $fa2, $fa3
	fsel	$fa3, $fa2, $fa4, $fcc0
	fcmp.cult.s	$fcc0, $fa2, $fa1
	fsel	$fs7, $fa2, $fa3, $fcc0
	fadd.s	$fs0, $fs1, $fs7
	fcmp.cule.s	$fcc0, $fs0, $fa2
	bcnez	$fcc0, .LBB200_31
# %bb.11:
	fsqrt.s	$fa1, $fa0
	fcmp.cor.s	$fcc0, $fa1, $fa1
	bceqz	$fcc0, .LBB200_32
.LBB200_12:                             # %.split
	vldi	$vr0, -1040
	fdiv.s	$fa0, $fa0, $fa1
	fmul.s	$fa1, $fs2, $fa0
	fmul.s	$fa2, $ft5, $fa0
	fmul.s	$fa0, $ft6, $fa0
	ld.d	$s2, $a0, 8
	ld.d	$a0, $a0, 16
	movfr2gr.s	$s3, $fa1
	movfr2gr.s	$a1, $fa2
	fld.s	$fa1, $s2, 340
	fld.s	$fa2, $a0, 340
	bstrins.d	$s3, $a1, 63, 32
	movfr2gr.s	$a1, $fa0
	bstrpick.d	$s4, $a1, 31, 0
	fcmp.clt.s	$fcc0, $fa2, $fa1
	fsel	$fa3, $fa2, $fa1, $fcc0
	fld.s	$fa0, $s2, 356
	fld.s	$fa1, $a0, 356
	ld.w	$a1, $s2, 1012
	ld.w	$a0, $s2, 1016
	fdiv.s	$fa2, $fs1, $fs0
	fmul.s	$fs1, $fa2, $fa0
	fdiv.s	$fa0, $fs7, $fs0
	fmul.s	$fs2, $fa0, $fa1
	bne	$a1, $a0, .LBB200_30
# %bb.13:
	sltui	$a0, $a1, 1
	slli.w	$a2, $a1, 1
	masknez	$a2, $a2, $a0
	ori	$a3, $zero, 1
	maskeqz	$a0, $a3, $a0
	or	$s5, $a0, $a2
	bge	$a1, $s5, .LBB200_30
# %bb.14:
	beqz	$s5, .LBB200_23
# %bb.15:
	slli.d	$a0, $s5, 6
	ori	$a1, $zero, 16
	fmov.s	$fs0, $fa3
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	fmov.s	$fa3, $fs0
	ld.w	$a1, $s2, 1012
	move	$fp, $a0
	bgtz	$a1, .LBB200_24
	b	.LBB200_26
.LBB200_16:
	fld.s	$fa0, $a4, %pc_lo12(.LCPI200_0)
                                        # implicit-def: $f12
                                        # implicit-def: $f9
                                        # implicit-def: $f23
.LBB200_17:                             # %_ZL13ProjectOriginRK9btVector3S1_RS_Rf.exit.i
	fsub.s	$fa1, $ft5, $ft12
	fsub.s	$fa5, $ft6, $ft13
	fsub.s	$fa6, $ft7, $ft14
	fmul.s	$fa7, $fa5, $fa5
	fmadd.s	$fa7, $fa1, $fa1, $fa7
	fmadd.s	$fa7, $fa6, $fa6, $fa7
	fcmp.cule.s	$fcc0, $fa7, $ft11
	bcnez	$fcc0, .LBB200_20
# %bb.18:
	fmul.s	$ft0, $ft13, $fa5
	fmadd.s	$ft0, $ft12, $fa1, $ft0
	fnmadd.s	$ft0, $ft14, $fa6, $ft0
	fdiv.s	$fa7, $ft0, $fa7
	vldi	$vr8, -1168
	fcmp.clt.s	$fcc0, $ft0, $fa7
	fsel	$ft0, $fa7, $ft0, $fcc0
	fcmp.clt.s	$fcc0, $fa7, $fs0
	fsel	$fa7, $ft0, $fs0, $fcc0
	fmul.s	$fa1, $fa1, $fa7
	fmul.s	$fa5, $fa5, $fa7
	fmul.s	$fa6, $fa6, $fa7
	fadd.s	$fa1, $ft12, $fa1
	fadd.s	$fa5, $ft13, $fa5
	fadd.s	$fa6, $ft14, $fa6
	fmul.s	$fa7, $fa5, $fa5
	fmadd.s	$fa7, $fa1, $fa1, $fa7
	fmadd.s	$fa7, $fa6, $fa6, $fa7
	fcmp.cule.s	$fcc0, $fa0, $fa7
	bcnez	$fcc0, .LBB200_20
# %bb.19:
	fmov.s	$fa0, $fa7
	fmov.s	$ft4, $fa1
	fmov.s	$ft1, $fa5
	fmov.s	$ft15, $fa6
.LBB200_20:                             # %_ZL13ProjectOriginRK9btVector3S1_RS_Rf.exit176.i
	fst.s	$ft4, $sp, 52                   # 4-byte Folded Spill
	fst.s	$ft15, $sp, 56                  # 4-byte Folded Spill
	fst.s	$ft1, $sp, 60                   # 4-byte Folded Spill
	fsub.s	$fa1, $ft8, $ft5
	fsub.s	$fa5, $ft9, $ft6
	fsub.s	$fa6, $ft10, $ft7
	fmul.s	$fa7, $fa5, $fa5
	fmadd.s	$fa7, $fa1, $fa1, $fa7
	fmadd.s	$fa7, $fa6, $fa6, $fa7
	fcmp.cule.s	$fcc0, $fa7, $ft11
	bcnez	$fcc0, .LBB200_9
# %bb.21:
	fmul.s	$ft0, $ft6, $fa5
	fmadd.s	$ft0, $ft5, $fa1, $ft0
	fnmadd.s	$ft0, $ft7, $fa6, $ft0
	fdiv.s	$fa7, $ft0, $fa7
	vldi	$vr8, -1168
	fcmp.clt.s	$fcc0, $ft0, $fa7
	fsel	$ft0, $fa7, $ft0, $fcc0
	fcmp.clt.s	$fcc0, $fa7, $fs0
	fsel	$fa7, $ft0, $fs0, $fcc0
	fmul.s	$fa1, $fa1, $fa7
	fmul.s	$fa5, $fa5, $fa7
	fmul.s	$fa6, $fa6, $fa7
	fadd.s	$fa1, $ft5, $fa1
	fadd.s	$fa5, $ft6, $fa5
	fadd.s	$fa6, $ft7, $fa6
	fmul.s	$fa7, $fa5, $fa5
	fmadd.s	$fa7, $fa1, $fa1, $fa7
	fmadd.s	$fa7, $fa6, $fa6, $fa7
	fcmp.cule.s	$fcc0, $fa0, $fa7
	bcnez	$fcc0, .LBB200_9
# %bb.22:                               # %_ZL13ProjectOriginRK9btVector3S1_RS_Rf.exit181.sink.split.i
	fmov.s	$fa0, $fa7
	fst.s	$fa1, $sp, 52                   # 4-byte Folded Spill
	fst.s	$fa5, $sp, 60                   # 4-byte Folded Spill
	fst.s	$fa6, $sp, 56                   # 4-byte Folded Spill
	b	.LBB200_9
.LBB200_23:
	move	$fp, $zero
	blez	$a1, .LBB200_26
.LBB200_24:                             # %.lr.ph.i.i.i
	move	$a0, $zero
	slli.d	$a1, $a1, 6
	.p2align	4, , 16
.LBB200_25:                             # =>This Inner Loop Header: Depth=1
	ld.d	$a2, $s2, 1024
	vldx	$vr0, $a2, $a0
	add.d	$a2, $a2, $a0
	vstx	$vr0, $fp, $a0
	vld	$vr0, $a2, 48
	add.d	$a3, $fp, $a0
	vst	$vr0, $a3, 48
	vld	$vr0, $a2, 32
	vst	$vr0, $a3, 32
	vld	$vr0, $a2, 16
	addi.d	$a0, $a0, 64
	vst	$vr0, $a3, 16
	bne	$a1, $a0, .LBB200_25
.LBB200_26:                             # %_ZNK20btAlignedObjectArrayIN10btSoftBody8SContactEE4copyEiiPS1_.exit.i.i
	ld.d	$a0, $s2, 1024
	beqz	$a0, .LBB200_29
# %bb.27:                               # %_ZNK20btAlignedObjectArrayIN10btSoftBody8SContactEE4copyEiiPS1_.exit.i.i
	ld.b	$a1, $s2, 1032
	andi	$a1, $a1, 1
	beqz	$a1, .LBB200_29
# %bb.28:
	fmov.s	$fs0, $fa3
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
	fmov.s	$fa3, $fs0
.LBB200_29:                             # %_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEE10deallocateEv.exit.i.i
	ori	$a0, $zero, 1
	ld.w	$a1, $s2, 1012
	st.b	$a0, $s2, 1032
	st.d	$fp, $s2, 1024
	st.w	$s5, $s2, 1016
.LBB200_30:                             # %_ZN20btAlignedObjectArrayIN10btSoftBody8SContactEE9push_backERKS1_.exit
	ld.d	$a0, $s2, 1024
	slli.d	$a1, $a1, 6
	add.d	$a2, $a0, $a1
	stx.d	$s1, $a0, $a1
	fst.s	$fs4, $a2, 16
	fst.s	$fs5, $a2, 20
	fst.s	$fs6, $a2, 24
	st.w	$zero, $a2, 28
	st.d	$s3, $a2, 32
	st.d	$s4, $a2, 40
	fst.s	$fs1, $a2, 56
	fst.s	$fs2, $a2, 60
	ld.w	$a0, $s2, 1012
	st.d	$s0, $a2, 8
	fst.s	$fs3, $a2, 48
	fst.s	$fa3, $a2, 52
	addi.d	$a0, $a0, 1
	st.w	$a0, $s2, 1012
.LBB200_31:
	fld.d	$fs7, $sp, 64                   # 8-byte Folded Reload
	fld.d	$fs6, $sp, 72                   # 8-byte Folded Reload
	fld.d	$fs5, $sp, 80                   # 8-byte Folded Reload
	fld.d	$fs4, $sp, 88                   # 8-byte Folded Reload
	fld.d	$fs3, $sp, 96                   # 8-byte Folded Reload
	fld.d	$fs2, $sp, 104                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 112                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 120                  # 8-byte Folded Reload
	ld.d	$s5, $sp, 128                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 136                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 144                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 152                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 160                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 168                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 176                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 184                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 192
	ret
.LBB200_32:                             # %call.sqrt
	move	$fp, $a0
	pcaddu18i	$ra, %call36(sqrtf)
	jirl	$ra, $ra, 0
	fld.s	$ft6, $sp, 56                   # 4-byte Folded Reload
	fld.s	$ft5, $sp, 60                   # 4-byte Folded Reload
	move	$a0, $fp
	fmov.s	$fa1, $fa0
	b	.LBB200_12
.Lfunc_end200:
	.size	_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_, .Lfunc_end200-_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN20btAlignedObjectArrayIiEC2ERKS0_,"axG",@progbits,_ZN20btAlignedObjectArrayIiEC2ERKS0_,comdat
	.weak	_ZN20btAlignedObjectArrayIiEC2ERKS0_ # -- Begin function _ZN20btAlignedObjectArrayIiEC2ERKS0_
	.p2align	5
	.type	_ZN20btAlignedObjectArrayIiEC2ERKS0_,@function
_ZN20btAlignedObjectArrayIiEC2ERKS0_:   # @_ZN20btAlignedObjectArrayIiEC2ERKS0_
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -48
	.cfi_def_cfa_offset 48
	st.d	$ra, $sp, 40                    # 8-byte Folded Spill
	st.d	$fp, $sp, 32                    # 8-byte Folded Spill
	st.d	$s0, $sp, 24                    # 8-byte Folded Spill
	st.d	$s1, $sp, 16                    # 8-byte Folded Spill
	st.d	$s2, $sp, 8                     # 8-byte Folded Spill
	st.d	$s3, $sp, 0                     # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	move	$s0, $a0
	st.d	$zero, $a0, 4
	ld.w	$s3, $a1, 4
	ori	$a0, $zero, 1
	st.b	$a0, $s0, 24
	st.d	$zero, $s0, 16
	blez	$s3, .LBB201_10
# %bb.1:                                # %_ZN20btAlignedObjectArrayIiE8allocateEi.exit.i.i
	move	$s1, $a1
	slli.d	$s2, $s3, 2
	ori	$a1, $zero, 16
	move	$a0, $s2
	pcaddu18i	$ra, %call36(_Z22btAlignedAllocInternalmi)
	jirl	$ra, $ra, 0
	ld.w	$a2, $s0, 4
	ld.d	$a1, $s0, 16
	move	$fp, $a0
	blez	$a2, .LBB201_11
# %bb.2:                                # %.lr.ph.i.i.i
	ori	$a3, $zero, 8
	move	$a0, $zero
	bltu	$a2, $a3, .LBB201_7
# %bb.3:                                # %.lr.ph.i.i.i
	sub.d	$a3, $fp, $a1
	ori	$a4, $zero, 32
	bltu	$a3, $a4, .LBB201_7
# %bb.4:                                # %vector.ph
	bstrpick.d	$a0, $a2, 30, 3
	slli.d	$a0, $a0, 3
	addi.d	$a3, $a1, 16
	addi.d	$a4, $fp, 16
	move	$a5, $a0
	.p2align	4, , 16
.LBB201_5:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a3, -16
	vld	$vr1, $a3, 0
	vst	$vr0, $a4, -16
	vst	$vr1, $a4, 0
	addi.d	$a5, $a5, -8
	addi.d	$a3, $a3, 32
	addi.d	$a4, $a4, 32
	bnez	$a5, .LBB201_5
# %bb.6:                                # %middle.block
	beq	$a0, $a2, .LBB201_9
.LBB201_7:                              # %scalar.ph.preheader
	sub.d	$a2, $a2, $a0
	alsl.d	$a3, $a0, $a1, 2
	alsl.d	$a0, $a0, $fp, 2
	.p2align	4, , 16
.LBB201_8:                              # %scalar.ph
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a4, $a3, 0
	st.w	$a4, $a0, 0
	addi.d	$a2, $a2, -1
	addi.d	$a3, $a3, 4
	addi.d	$a0, $a0, 4
	bnez	$a2, .LBB201_8
.LBB201_9:                              # %_ZNK20btAlignedObjectArrayIiE4copyEiiPi.exit.thread.i.i
	ld.bu	$a0, $s0, 24
	bnez	$a0, .LBB201_13
	b	.LBB201_14
.LBB201_10:                             # %_ZN20btAlignedObjectArrayIiE6resizeEiRKi.exit
	st.w	$s3, $s0, 4
	b	.LBB201_21
.LBB201_11:                             # %_ZNK20btAlignedObjectArrayIiE4copyEiiPi.exit.i.i
	beqz	$a1, .LBB201_14
# %bb.12:                               # %_ZNK20btAlignedObjectArrayIiE4copyEiiPi.exit.i.i
	ld.b	$a0, $s0, 24
	andi	$a0, $a0, 1
	beqz	$a0, .LBB201_14
.LBB201_13:
	move	$a0, $a1
	pcaddu18i	$ra, %call36(_Z21btAlignedFreeInternalPv)
	jirl	$ra, $ra, 0
.LBB201_14:                             # %.lr.ph.i
	ori	$a0, $zero, 1
	st.b	$a0, $s0, 24
	st.d	$fp, $s0, 16
	st.w	$s3, $s0, 8
	move	$a0, $fp
	move	$a1, $zero
	move	$a2, $s2
	pcaddu18i	$ra, %call36(memset)
	jirl	$ra, $ra, 0
	ld.d	$a0, $s1, 16
	move	$a1, $zero
	ori	$a2, $zero, 8
	st.w	$s3, $s0, 4
	bltu	$s3, $a2, .LBB201_19
# %bb.15:                               # %.lr.ph.i
	sub.d	$a2, $fp, $a0
	ori	$a3, $zero, 32
	bltu	$a2, $a3, .LBB201_19
# %bb.16:                               # %vector.ph14
	bstrpick.d	$a1, $s3, 30, 3
	slli.d	$a1, $a1, 3
	addi.d	$a2, $a0, 16
	addi.d	$a3, $fp, 16
	move	$a4, $a1
	.p2align	4, , 16
.LBB201_17:                             # %vector.body17
                                        # =>This Inner Loop Header: Depth=1
	vld	$vr0, $a2, -16
	vld	$vr1, $a2, 0
	vst	$vr0, $a3, -16
	vst	$vr1, $a3, 0
	addi.d	$a4, $a4, -8
	addi.d	$a2, $a2, 32
	addi.d	$a3, $a3, 32
	bnez	$a4, .LBB201_17
# %bb.18:                               # %middle.block22
	beq	$a1, $s3, .LBB201_21
.LBB201_19:                             # %scalar.ph12.preheader
	sub.d	$a2, $s3, $a1
	alsl.d	$a0, $a1, $a0, 2
	alsl.d	$a1, $a1, $fp, 2
	.p2align	4, , 16
.LBB201_20:                             # %scalar.ph12
                                        # =>This Inner Loop Header: Depth=1
	ld.w	$a3, $a0, 0
	st.w	$a3, $a1, 0
	addi.d	$a2, $a2, -1
	addi.d	$a0, $a0, 4
	addi.d	$a1, $a1, 4
	bnez	$a2, .LBB201_20
.LBB201_21:                             # %_ZNK20btAlignedObjectArrayIiE4copyEiiPi.exit
	ld.d	$s3, $sp, 0                     # 8-byte Folded Reload
	ld.d	$s2, $sp, 8                     # 8-byte Folded Reload
	ld.d	$s1, $sp, 16                    # 8-byte Folded Reload
	ld.d	$s0, $sp, 24                    # 8-byte Folded Reload
	ld.d	$fp, $sp, 32                    # 8-byte Folded Reload
	ld.d	$ra, $sp, 40                    # 8-byte Folded Reload
	addi.d	$sp, $sp, 48
	ret
.Lfunc_end201:
	.size	_ZN20btAlignedObjectArrayIiEC2ERKS0_, .Lfunc_end201-_ZN20btAlignedObjectArrayIiEC2ERKS0_
	.cfi_endproc
                                        # -- End function
	.section	.text._ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE,"axG",@progbits,_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE,comdat
	.weak	_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE # -- Begin function _ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE
	.p2align	5
	.type	_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE,@function
_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE: # @_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE
	.cfi_startproc
# %bb.0:
	addi.d	$sp, $sp, -304
	.cfi_def_cfa_offset 304
	st.d	$ra, $sp, 296                   # 8-byte Folded Spill
	st.d	$fp, $sp, 288                   # 8-byte Folded Spill
	st.d	$s0, $sp, 280                   # 8-byte Folded Spill
	st.d	$s1, $sp, 272                   # 8-byte Folded Spill
	st.d	$s2, $sp, 264                   # 8-byte Folded Spill
	st.d	$s3, $sp, 256                   # 8-byte Folded Spill
	st.d	$s4, $sp, 248                   # 8-byte Folded Spill
	st.d	$s5, $sp, 240                   # 8-byte Folded Spill
	st.d	$s6, $sp, 232                   # 8-byte Folded Spill
	st.d	$s7, $sp, 224                   # 8-byte Folded Spill
	st.d	$s8, $sp, 216                   # 8-byte Folded Spill
	fst.d	$fs0, $sp, 208                  # 8-byte Folded Spill
	fst.d	$fs1, $sp, 200                  # 8-byte Folded Spill
	fst.d	$fs2, $sp, 192                  # 8-byte Folded Spill
	fst.d	$fs3, $sp, 184                  # 8-byte Folded Spill
	fst.d	$fs4, $sp, 176                  # 8-byte Folded Spill
	fst.d	$fs5, $sp, 168                  # 8-byte Folded Spill
	.cfi_offset 1, -8
	.cfi_offset 22, -16
	.cfi_offset 23, -24
	.cfi_offset 24, -32
	.cfi_offset 25, -40
	.cfi_offset 26, -48
	.cfi_offset 27, -56
	.cfi_offset 28, -64
	.cfi_offset 29, -72
	.cfi_offset 30, -80
	.cfi_offset 31, -88
	.cfi_offset 56, -96
	.cfi_offset 57, -104
	.cfi_offset 58, -112
	.cfi_offset 59, -120
	.cfi_offset 60, -128
	.cfi_offset 61, -136
	move	$fp, $a1
	ld.w	$a1, $a1, 256
	move	$s0, $a0
	move	$a2, $zero
	ld.w	$a0, $fp, 260
	movgr2fr.w	$fa0, $a1
	ld.w	$a1, $fp, 264
	ffint.s.w	$fa0, $fa0
	movgr2fr.w	$fa1, $a0
	ffint.s.w	$fa1, $fa1
	movgr2fr.w	$fa2, $a1
	ffint.s.w	$fa2, $fa2
	vldi	$vr4, -1272
	fld.s	$fa3, $s0, 32
	fmul.s	$fa0, $fa0, $fa4
	fmul.s	$fa1, $fa1, $fa4
	fmul.s	$fa2, $fa2, $fa4
	fmul.s	$fs1, $fa0, $fa3
	fmul.s	$fs2, $fa3, $fa1
	fmul.s	$fs3, $fa3, $fa2
	addi.d	$a3, $sp, 108
	addi.d	$s3, $sp, 128
	addi.d	$s4, $sp, 148
	addi.d	$s5, $fp, 64
	movgr2fr.w	$fs0, $zero
	lu12i.w	$s6, 260096
	vrepli.b	$vr3, 0
	ori	$s7, $zero, 19
	vst	$vr3, $sp, 16                   # 16-byte Folded Spill
	b	.LBB202_2
	.p2align	4, , 16
.LBB202_1:                              #   in Loop: Header=BB202_2 Depth=1
	ld.d	$a2, $sp, 8                     # 8-byte Folded Reload
	addi.d	$a2, $a2, 1
	addi.d	$s5, $s5, 4
	ori	$a0, $zero, 4
	beq	$a2, $a0, .LBB202_15
.LBB202_2:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_4 Depth 2
	move	$s1, $zero
	move	$s8, $zero
	srli.d	$a0, $a2, 1
	andi	$a1, $a2, 1
	or	$a0, $a1, $a0
	slti	$a1, $a2, 0
	movgr2fr.d	$fa0, $a0
	movgr2cf	$fcc0, $a1
	fld.s	$fa1, $s0, 32
	ffint.s.l	$fa0, $fa0
	fadd.s	$fa0, $fa0, $fa0
	st.d	$a2, $sp, 8                     # 8-byte Folded Spill
	movgr2fr.d	$fa2, $a2
	ffint.s.l	$fa2, $fa2
	fsel	$fa0, $fa2, $fa0, $fcc0
	fmadd.s	$fs4, $fa1, $fa0, $fs3
	b	.LBB202_4
	.p2align	4, , 16
.LBB202_3:                              # %_ZN11btSparseSdfILi3EE15DistanceToShapeERK9btVector3P16btCollisionShape.exit.3
                                        #   in Loop: Header=BB202_4 Depth=2
	fst.s	$fa0, $s2, 128
	addi.d	$s1, $s1, 16
	addi.w	$s8, $s8, 1
	ori	$a0, $zero, 64
	beq	$s1, $a0, .LBB202_1
.LBB202_4:                              #   Parent Loop BB202_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	fld.s	$fa0, $s0, 32
	bstrpick.d	$a0, $s8, 31, 0
	movgr2fr.d	$fa1, $a0
	ffint.s.l	$fa1, $fa1
	fmadd.s	$fs5, $fa0, $fa1, $fs2
	fmadd.s	$fa0, $fa0, $fs0, $fs1
	fst.s	$fa0, $sp, 32
	fst.s	$fs5, $sp, 36
	fst.s	$fs4, $sp, 40
	ld.d	$a1, $fp, 280
	vst	$vr3, $a3, 0
	vst	$vr3, $s3, 0
	vst	$vr3, $s4, 0
	st.w	$zero, $s4, 16
	ld.w	$a0, $a1, 8
	st.w	$zero, $sp, 44
	st.w	$s6, $sp, 104
	st.w	$s6, $sp, 124
	st.w	$s6, $sp, 144
	blt	$s7, $a0, .LBB202_6
# %bb.5:                                #   in Loop: Header=BB202_4 Depth=2
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 104
	addi.d	$a3, $sp, 48
	fmov.s	$fa0, $fs0
	pcaddu18i	$ra, %call36(_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE)
	jirl	$ra, $ra, 0
	vld	$vr3, $sp, 16                   # 16-byte Folded Reload
	addi.d	$a3, $sp, 108
	ld.d	$a1, $fp, 280
	b	.LBB202_7
	.p2align	4, , 16
.LBB202_6:                              #   in Loop: Header=BB202_4 Depth=2
	fmov.s	$fa0, $fs0
.LBB202_7:                              # %_ZN11btSparseSdfILi3EE15DistanceToShapeERK9btVector3P16btCollisionShape.exit
                                        #   in Loop: Header=BB202_4 Depth=2
	add.d	$s2, $s5, $s1
	fst.s	$fa0, $s2, -64
	fld.s	$fa0, $s0, 32
	fadd.s	$fa0, $fa0, $fs1
	fst.s	$fa0, $sp, 32
	fst.s	$fs5, $sp, 36
	fst.s	$fs4, $sp, 40
	vst	$vr3, $a3, 0
	vst	$vr3, $s3, 0
	vst	$vr3, $s4, 0
	st.w	$zero, $s4, 16
	ld.w	$a0, $a1, 8
	st.w	$zero, $sp, 44
	st.w	$s6, $sp, 104
	st.w	$s6, $sp, 124
	st.w	$s6, $sp, 144
	blt	$s7, $a0, .LBB202_9
# %bb.8:                                #   in Loop: Header=BB202_4 Depth=2
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 104
	addi.d	$a3, $sp, 48
	fmov.s	$fa0, $fs0
	pcaddu18i	$ra, %call36(_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE)
	jirl	$ra, $ra, 0
	vld	$vr3, $sp, 16                   # 16-byte Folded Reload
	addi.d	$a3, $sp, 108
	ld.d	$a1, $fp, 280
	b	.LBB202_10
	.p2align	4, , 16
.LBB202_9:                              #   in Loop: Header=BB202_4 Depth=2
	fmov.s	$fa0, $fs0
.LBB202_10:                             # %_ZN11btSparseSdfILi3EE15DistanceToShapeERK9btVector3P16btCollisionShape.exit.1
                                        #   in Loop: Header=BB202_4 Depth=2
	fstx.s	$fa0, $s5, $s1
	fld.s	$fa0, $s0, 32
	vldi	$vr1, -1280
	fmadd.s	$fa0, $fa0, $fa1, $fs1
	fst.s	$fa0, $sp, 32
	fst.s	$fs5, $sp, 36
	fst.s	$fs4, $sp, 40
	vst	$vr3, $a3, 0
	vst	$vr3, $s3, 0
	vst	$vr3, $s4, 0
	st.w	$zero, $s4, 16
	ld.w	$a0, $a1, 8
	st.w	$zero, $sp, 44
	st.w	$s6, $sp, 104
	st.w	$s6, $sp, 124
	st.w	$s6, $sp, 144
	blt	$s7, $a0, .LBB202_12
# %bb.11:                               #   in Loop: Header=BB202_4 Depth=2
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 104
	addi.d	$a3, $sp, 48
	fmov.s	$fa0, $fs0
	pcaddu18i	$ra, %call36(_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE)
	jirl	$ra, $ra, 0
	vld	$vr3, $sp, 16                   # 16-byte Folded Reload
	addi.d	$a3, $sp, 108
	ld.d	$a1, $fp, 280
	b	.LBB202_13
	.p2align	4, , 16
.LBB202_12:                             #   in Loop: Header=BB202_4 Depth=2
	fmov.s	$fa0, $fs0
.LBB202_13:                             # %_ZN11btSparseSdfILi3EE15DistanceToShapeERK9btVector3P16btCollisionShape.exit.2
                                        #   in Loop: Header=BB202_4 Depth=2
	fst.s	$fa0, $s2, 64
	fld.s	$fa0, $s0, 32
	vldi	$vr1, -1272
	fmadd.s	$fa0, $fa0, $fa1, $fs1
	fst.s	$fa0, $sp, 32
	fst.s	$fs5, $sp, 36
	fst.s	$fs4, $sp, 40
	vst	$vr3, $a3, 0
	vst	$vr3, $s3, 0
	vst	$vr3, $s4, 0
	st.w	$zero, $s4, 16
	ld.w	$a0, $a1, 8
	st.w	$zero, $sp, 44
	st.w	$s6, $sp, 104
	st.w	$s6, $sp, 124
	st.w	$s6, $sp, 144
	fmov.s	$fa0, $fs0
	blt	$s7, $a0, .LBB202_3
# %bb.14:                               #   in Loop: Header=BB202_4 Depth=2
	addi.d	$a0, $sp, 32
	addi.d	$a2, $sp, 104
	addi.d	$a3, $sp, 48
	fmov.s	$fa0, $fs0
	pcaddu18i	$ra, %call36(_ZN15btGjkEpaSolver214SignedDistanceERK9btVector3fPK13btConvexShapeRK11btTransformRNS_8sResultsE)
	jirl	$ra, $ra, 0
	vld	$vr3, $sp, 16                   # 16-byte Folded Reload
	addi.d	$a3, $sp, 108
	b	.LBB202_3
.LBB202_15:
	fld.d	$fs5, $sp, 168                  # 8-byte Folded Reload
	fld.d	$fs4, $sp, 176                  # 8-byte Folded Reload
	fld.d	$fs3, $sp, 184                  # 8-byte Folded Reload
	fld.d	$fs2, $sp, 192                  # 8-byte Folded Reload
	fld.d	$fs1, $sp, 200                  # 8-byte Folded Reload
	fld.d	$fs0, $sp, 208                  # 8-byte Folded Reload
	ld.d	$s8, $sp, 216                   # 8-byte Folded Reload
	ld.d	$s7, $sp, 224                   # 8-byte Folded Reload
	ld.d	$s6, $sp, 232                   # 8-byte Folded Reload
	ld.d	$s5, $sp, 240                   # 8-byte Folded Reload
	ld.d	$s4, $sp, 248                   # 8-byte Folded Reload
	ld.d	$s3, $sp, 256                   # 8-byte Folded Reload
	ld.d	$s2, $sp, 264                   # 8-byte Folded Reload
	ld.d	$s1, $sp, 272                   # 8-byte Folded Reload
	ld.d	$s0, $sp, 280                   # 8-byte Folded Reload
	ld.d	$fp, $sp, 288                   # 8-byte Folded Reload
	ld.d	$ra, $sp, 296                   # 8-byte Folded Reload
	addi.d	$sp, $sp, 304
	ret
.Lfunc_end202:
	.size	_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE, .Lfunc_end202-_ZN11btSparseSdfILi3EE9BuildCellERNS0_4CellE
	.cfi_endproc
                                        # -- End function
	.type	_ZTV10btSoftBody,@object        # @_ZTV10btSoftBody
	.section	.data.rel.ro,"aw",@progbits
	.globl	_ZTV10btSoftBody
	.p2align	3, 0x0
_ZTV10btSoftBody:
	.dword	0
	.dword	_ZTI10btSoftBody
	.dword	_ZN17btCollisionObject24checkCollideWithOverrideEPS_
	.dword	_ZN10btSoftBodyD2Ev
	.dword	_ZN10btSoftBodyD0Ev
	.dword	_ZN10btSoftBody17setCollisionShapeEP16btCollisionShape
	.dword	_ZNK10btSoftBody7getAabbER9btVector3S1_
	.size	_ZTV10btSoftBody, 56

	.type	_ZTVN10btSoftBody15RayFromToCasterE,@object # @_ZTVN10btSoftBody15RayFromToCasterE
	.globl	_ZTVN10btSoftBody15RayFromToCasterE
	.p2align	3, 0x0
_ZTVN10btSoftBody15RayFromToCasterE:
	.dword	0
	.dword	_ZTIN10btSoftBody15RayFromToCasterE
	.dword	_ZN6btDbvt8ICollideD2Ev
	.dword	_ZN10btSoftBody15RayFromToCasterD0Ev
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_
	.dword	_ZN10btSoftBody15RayFromToCaster7ProcessEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef
	.dword	_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode
	.size	_ZTVN10btSoftBody15RayFromToCasterE, 72

	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"UpdateClusters"
	.size	.L.str, 15

	.type	.L.str.1,@object                # @.str.1
.L.str.1:
	.asciz	"ApplyClusters"
	.size	.L.str.1, 14

	.type	.L.str.2,@object                # @.str.2
.L.str.2:
	.asciz	"SoftBody applyForces"
	.size	.L.str.2, 21

	.type	_ZTVN10btSoftBody5JointE,@object # @_ZTVN10btSoftBody5JointE
	.section	.data.rel.ro,"aw",@progbits
	.globl	_ZTVN10btSoftBody5JointE
	.p2align	3, 0x0
_ZTVN10btSoftBody5JointE:
	.dword	0
	.dword	_ZTIN10btSoftBody5JointE
	.dword	_ZN10btSoftBody5JointD2Ev
	.dword	_ZN10btSoftBody5JointD0Ev
	.dword	_ZN10btSoftBody5Joint7PrepareEfi
	.dword	__cxa_pure_virtual
	.dword	__cxa_pure_virtual
	.dword	__cxa_pure_virtual
	.size	_ZTVN10btSoftBody5JointE, 64

	.type	_ZTIN10btSoftBody5JointE,@object # @_ZTIN10btSoftBody5JointE
	.globl	_ZTIN10btSoftBody5JointE
	.p2align	3, 0x0
_ZTIN10btSoftBody5JointE:
	.dword	_ZTVN10__cxxabiv117__class_type_infoE+16
	.dword	_ZTSN10btSoftBody5JointE
	.size	_ZTIN10btSoftBody5JointE, 16

	.type	_ZTSN10btSoftBody5JointE,@object # @_ZTSN10btSoftBody5JointE
	.section	.rodata,"a",@progbits
	.globl	_ZTSN10btSoftBody5JointE
_ZTSN10btSoftBody5JointE:
	.asciz	"N10btSoftBody5JointE"
	.size	_ZTSN10btSoftBody5JointE, 21

	.type	_ZTVN10btSoftBody6CJointE,@object # @_ZTVN10btSoftBody6CJointE
	.section	.data.rel.ro,"aw",@progbits
	.globl	_ZTVN10btSoftBody6CJointE
	.p2align	3, 0x0
_ZTVN10btSoftBody6CJointE:
	.dword	0
	.dword	_ZTIN10btSoftBody6CJointE
	.dword	_ZN10btSoftBody5JointD2Ev
	.dword	_ZN10btSoftBody6CJointD0Ev
	.dword	_ZN10btSoftBody6CJoint7PrepareEfi
	.dword	_ZN10btSoftBody6CJoint5SolveEff
	.dword	_ZN10btSoftBody6CJoint9TerminateEf
	.dword	_ZNK10btSoftBody6CJoint4TypeEv
	.size	_ZTVN10btSoftBody6CJointE, 64

	.type	_ZTIN10btSoftBody6CJointE,@object # @_ZTIN10btSoftBody6CJointE
	.globl	_ZTIN10btSoftBody6CJointE
	.p2align	3, 0x0
_ZTIN10btSoftBody6CJointE:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTSN10btSoftBody6CJointE
	.dword	_ZTIN10btSoftBody5JointE
	.size	_ZTIN10btSoftBody6CJointE, 24

	.type	_ZTSN10btSoftBody6CJointE,@object # @_ZTSN10btSoftBody6CJointE
	.section	.rodata,"a",@progbits
	.globl	_ZTSN10btSoftBody6CJointE
_ZTSN10btSoftBody6CJointE:
	.asciz	"N10btSoftBody6CJointE"
	.size	_ZTSN10btSoftBody6CJointE, 22

	.type	_ZTI10btSoftBody,@object        # @_ZTI10btSoftBody
	.section	.data.rel.ro,"aw",@progbits
	.globl	_ZTI10btSoftBody
	.p2align	3, 0x0
_ZTI10btSoftBody:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTS10btSoftBody
	.dword	_ZTI17btCollisionObject
	.size	_ZTI10btSoftBody, 24

	.type	_ZTS10btSoftBody,@object        # @_ZTS10btSoftBody
	.section	.rodata,"a",@progbits
	.globl	_ZTS10btSoftBody
_ZTS10btSoftBody:
	.asciz	"10btSoftBody"
	.size	_ZTS10btSoftBody, 13

	.type	_ZTVN10btSoftBody6LJointE,@object # @_ZTVN10btSoftBody6LJointE
	.section	.data.rel.ro,"aw",@progbits
	.globl	_ZTVN10btSoftBody6LJointE
	.p2align	3, 0x0
_ZTVN10btSoftBody6LJointE:
	.dword	0
	.dword	_ZTIN10btSoftBody6LJointE
	.dword	_ZN10btSoftBody5JointD2Ev
	.dword	_ZN10btSoftBody6LJointD0Ev
	.dword	_ZN10btSoftBody6LJoint7PrepareEfi
	.dword	_ZN10btSoftBody6LJoint5SolveEff
	.dword	_ZN10btSoftBody6LJoint9TerminateEf
	.dword	_ZNK10btSoftBody6LJoint4TypeEv
	.size	_ZTVN10btSoftBody6LJointE, 64

	.type	_ZTIN10btSoftBody6LJointE,@object # @_ZTIN10btSoftBody6LJointE
	.globl	_ZTIN10btSoftBody6LJointE
	.p2align	3, 0x0
_ZTIN10btSoftBody6LJointE:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTSN10btSoftBody6LJointE
	.dword	_ZTIN10btSoftBody5JointE
	.size	_ZTIN10btSoftBody6LJointE, 24

	.type	_ZTSN10btSoftBody6LJointE,@object # @_ZTSN10btSoftBody6LJointE
	.section	.rodata,"a",@progbits
	.globl	_ZTSN10btSoftBody6LJointE
_ZTSN10btSoftBody6LJointE:
	.asciz	"N10btSoftBody6LJointE"
	.size	_ZTSN10btSoftBody6LJointE, 22

	.type	_ZTVN10btSoftBody6AJointE,@object # @_ZTVN10btSoftBody6AJointE
	.section	.data.rel.ro,"aw",@progbits
	.globl	_ZTVN10btSoftBody6AJointE
	.p2align	3, 0x0
_ZTVN10btSoftBody6AJointE:
	.dword	0
	.dword	_ZTIN10btSoftBody6AJointE
	.dword	_ZN10btSoftBody5JointD2Ev
	.dword	_ZN10btSoftBody6AJointD0Ev
	.dword	_ZN10btSoftBody6AJoint7PrepareEfi
	.dword	_ZN10btSoftBody6AJoint5SolveEff
	.dword	_ZN10btSoftBody6AJoint9TerminateEf
	.dword	_ZNK10btSoftBody6AJoint4TypeEv
	.size	_ZTVN10btSoftBody6AJointE, 64

	.type	_ZTIN10btSoftBody6AJointE,@object # @_ZTIN10btSoftBody6AJointE
	.globl	_ZTIN10btSoftBody6AJointE
	.p2align	3, 0x0
_ZTIN10btSoftBody6AJointE:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTSN10btSoftBody6AJointE
	.dword	_ZTIN10btSoftBody5JointE
	.size	_ZTIN10btSoftBody6AJointE, 24

	.type	_ZTSN10btSoftBody6AJointE,@object # @_ZTSN10btSoftBody6AJointE
	.section	.rodata,"a",@progbits
	.globl	_ZTSN10btSoftBody6AJointE
_ZTSN10btSoftBody6AJointE:
	.asciz	"N10btSoftBody6AJointE"
	.size	_ZTSN10btSoftBody6AJointE, 22

	.type	_ZTIN10btSoftBody15RayFromToCasterE,@object # @_ZTIN10btSoftBody15RayFromToCasterE
	.section	.data.rel.ro,"aw",@progbits
	.globl	_ZTIN10btSoftBody15RayFromToCasterE
	.p2align	3, 0x0
_ZTIN10btSoftBody15RayFromToCasterE:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTSN10btSoftBody15RayFromToCasterE
	.dword	_ZTIN6btDbvt8ICollideE
	.size	_ZTIN10btSoftBody15RayFromToCasterE, 24

	.type	_ZTSN10btSoftBody15RayFromToCasterE,@object # @_ZTSN10btSoftBody15RayFromToCasterE
	.section	.rodata,"a",@progbits
	.globl	_ZTSN10btSoftBody15RayFromToCasterE
_ZTSN10btSoftBody15RayFromToCasterE:
	.asciz	"N10btSoftBody15RayFromToCasterE"
	.size	_ZTSN10btSoftBody15RayFromToCasterE, 32

	.type	_ZTIN6btDbvt8ICollideE,@object  # @_ZTIN6btDbvt8ICollideE
	.section	.data.rel.ro._ZTIN6btDbvt8ICollideE,"awG",@progbits,_ZTIN6btDbvt8ICollideE,comdat
	.weak	_ZTIN6btDbvt8ICollideE
	.p2align	3, 0x0
_ZTIN6btDbvt8ICollideE:
	.dword	_ZTVN10__cxxabiv117__class_type_infoE+16
	.dword	_ZTSN6btDbvt8ICollideE
	.size	_ZTIN6btDbvt8ICollideE, 16

	.type	_ZTSN6btDbvt8ICollideE,@object  # @_ZTSN6btDbvt8ICollideE
	.section	.rodata._ZTSN6btDbvt8ICollideE,"aG",@progbits,_ZTSN6btDbvt8ICollideE,comdat
	.weak	_ZTSN6btDbvt8ICollideE
_ZTSN6btDbvt8ICollideE:
	.asciz	"N6btDbvt8ICollideE"
	.size	_ZTSN6btDbvt8ICollideE, 19

	.type	_ZTV24btSoftBodyCollisionShape,@object # @_ZTV24btSoftBodyCollisionShape
	.section	.data.rel.ro._ZTV24btSoftBodyCollisionShape,"awG",@progbits,_ZTV24btSoftBodyCollisionShape,comdat
	.weak	_ZTV24btSoftBodyCollisionShape
	.p2align	3, 0x0
_ZTV24btSoftBodyCollisionShape:
	.dword	0
	.dword	_ZTI24btSoftBodyCollisionShape
	.dword	_ZN14btConcaveShapeD2Ev
	.dword	_ZN24btSoftBodyCollisionShapeD0Ev
	.dword	_ZNK24btSoftBodyCollisionShape7getAabbERK11btTransformR9btVector3S4_
	.dword	_ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf
	.dword	_ZNK16btCollisionShape20getAngularMotionDiscEv
	.dword	_ZNK16btCollisionShape27getContactBreakingThresholdEv
	.dword	_ZN24btSoftBodyCollisionShape15setLocalScalingERK9btVector3
	.dword	_ZNK24btSoftBodyCollisionShape15getLocalScalingEv
	.dword	_ZNK24btSoftBodyCollisionShape21calculateLocalInertiaEfR9btVector3
	.dword	_ZNK24btSoftBodyCollisionShape7getNameEv
	.dword	_ZN14btConcaveShape9setMarginEf
	.dword	_ZNK14btConcaveShape9getMarginEv
	.dword	_ZNK24btSoftBodyCollisionShape19processAllTrianglesEP18btTriangleCallbackRK9btVector3S4_
	.size	_ZTV24btSoftBodyCollisionShape, 120

	.type	_ZTI24btSoftBodyCollisionShape,@object # @_ZTI24btSoftBodyCollisionShape
	.section	.data.rel.ro._ZTI24btSoftBodyCollisionShape,"awG",@progbits,_ZTI24btSoftBodyCollisionShape,comdat
	.weak	_ZTI24btSoftBodyCollisionShape
	.p2align	3, 0x0
_ZTI24btSoftBodyCollisionShape:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTS24btSoftBodyCollisionShape
	.dword	_ZTI14btConcaveShape
	.size	_ZTI24btSoftBodyCollisionShape, 24

	.type	_ZTS24btSoftBodyCollisionShape,@object # @_ZTS24btSoftBodyCollisionShape
	.section	.rodata._ZTS24btSoftBodyCollisionShape,"aG",@progbits,_ZTS24btSoftBodyCollisionShape,comdat
	.weak	_ZTS24btSoftBodyCollisionShape
_ZTS24btSoftBodyCollisionShape:
	.asciz	"24btSoftBodyCollisionShape"
	.size	_ZTS24btSoftBodyCollisionShape, 27

	.type	_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy,@object # @_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy
	.section	.bss._ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy,"awG",@nobits,_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy,comdat
	.weak	_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy
	.p2align	2, 0x0
_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy:
	.space	16
	.size	_ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy, 16

	.type	_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy,@object # @_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy
	.section	.bss._ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy,"awG",@nobits,_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy,comdat
	.weak	_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy
	.p2align	3, 0x0
_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy:
	.dword	0                               # 0x0
	.size	_ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy, 8

	.type	.L.str.3,@object                # @.str.3
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.3:
	.asciz	"SoftBody"
	.size	.L.str.3, 9

	.type	_ZZNK10btSoftBody4Body5xformEvE8identity,@object # @_ZZNK10btSoftBody4Body5xformEvE8identity
	.section	.bss._ZZNK10btSoftBody4Body5xformEvE8identity,"awG",@nobits,_ZZNK10btSoftBody4Body5xformEvE8identity,comdat
	.weak	_ZZNK10btSoftBody4Body5xformEvE8identity
	.p2align	2, 0x0
_ZZNK10btSoftBody4Body5xformEvE8identity:
	.space	64
	.size	_ZZNK10btSoftBody4Body5xformEvE8identity, 64

	.type	_ZGVZNK10btSoftBody4Body5xformEvE8identity,@object # @_ZGVZNK10btSoftBody4Body5xformEvE8identity
	.section	.bss._ZGVZNK10btSoftBody4Body5xformEvE8identity,"awG",@nobits,_ZGVZNK10btSoftBody4Body5xformEvE8identity,comdat
	.weak	_ZGVZNK10btSoftBody4Body5xformEvE8identity
	.p2align	3, 0x0
_ZGVZNK10btSoftBody4Body5xformEvE8identity:
	.dword	0                               # 0x0
	.size	_ZGVZNK10btSoftBody4Body5xformEvE8identity, 8

	.type	_ZZN11btTransform11getIdentityEvE17identityTransform,@object # @_ZZN11btTransform11getIdentityEvE17identityTransform
	.section	.bss._ZZN11btTransform11getIdentityEvE17identityTransform,"awG",@nobits,_ZZN11btTransform11getIdentityEvE17identityTransform,comdat
	.weak	_ZZN11btTransform11getIdentityEvE17identityTransform
	.p2align	2, 0x0
_ZZN11btTransform11getIdentityEvE17identityTransform:
	.space	64
	.size	_ZZN11btTransform11getIdentityEvE17identityTransform, 64

	.type	_ZGVZN11btTransform11getIdentityEvE17identityTransform,@object # @_ZGVZN11btTransform11getIdentityEvE17identityTransform
	.section	.bss._ZGVZN11btTransform11getIdentityEvE17identityTransform,"awG",@nobits,_ZGVZN11btTransform11getIdentityEvE17identityTransform,comdat
	.weak	_ZGVZN11btTransform11getIdentityEvE17identityTransform
	.p2align	3, 0x0
_ZGVZN11btTransform11getIdentityEvE17identityTransform:
	.dword	0                               # 0x0
	.size	_ZGVZN11btTransform11getIdentityEvE17identityTransform, 8

	.type	_ZZN11btMatrix3x311getIdentityEvE14identityMatrix,@object # @_ZZN11btMatrix3x311getIdentityEvE14identityMatrix
	.section	.bss._ZZN11btMatrix3x311getIdentityEvE14identityMatrix,"awG",@nobits,_ZZN11btMatrix3x311getIdentityEvE14identityMatrix,comdat
	.weak	_ZZN11btMatrix3x311getIdentityEvE14identityMatrix
	.p2align	2, 0x0
_ZZN11btMatrix3x311getIdentityEvE14identityMatrix:
	.space	48
	.size	_ZZN11btMatrix3x311getIdentityEvE14identityMatrix, 48

	.type	_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix,@object # @_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix
	.section	.bss._ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix,"awG",@nobits,_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix,comdat
	.weak	_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix
	.p2align	3, 0x0
_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix:
	.dword	0                               # 0x0
	.size	_ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix, 8

	.type	_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi,@object # @_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi
	.section	.bss._ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi,"awG",@nobits,_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi,comdat
	.weak	_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi
	.p2align	2, 0x0
_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi:
	.space	48
	.size	_ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, 48

	.type	_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi,@object # @_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi
	.section	.bss._ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi,"awG",@nobits,_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi,comdat
	.weak	_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi
	.p2align	3, 0x0
_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi:
	.dword	0                               # 0x0
	.size	_ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi, 8

	.type	_ZTVN15btSoftColliders13CollideSDF_RSE,@object # @_ZTVN15btSoftColliders13CollideSDF_RSE
	.section	.data.rel.ro._ZTVN15btSoftColliders13CollideSDF_RSE,"awG",@progbits,_ZTVN15btSoftColliders13CollideSDF_RSE,comdat
	.weak	_ZTVN15btSoftColliders13CollideSDF_RSE
	.p2align	3, 0x0
_ZTVN15btSoftColliders13CollideSDF_RSE:
	.dword	0
	.dword	_ZTIN15btSoftColliders13CollideSDF_RSE
	.dword	_ZN6btDbvt8ICollideD2Ev
	.dword	_ZN15btSoftColliders13CollideSDF_RSD0Ev
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_
	.dword	_ZN15btSoftColliders13CollideSDF_RS7ProcessEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef
	.dword	_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode
	.size	_ZTVN15btSoftColliders13CollideSDF_RSE, 72

	.type	_ZTIN15btSoftColliders13CollideSDF_RSE,@object # @_ZTIN15btSoftColliders13CollideSDF_RSE
	.section	.data.rel.ro._ZTIN15btSoftColliders13CollideSDF_RSE,"awG",@progbits,_ZTIN15btSoftColliders13CollideSDF_RSE,comdat
	.weak	_ZTIN15btSoftColliders13CollideSDF_RSE
	.p2align	3, 0x0
_ZTIN15btSoftColliders13CollideSDF_RSE:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTSN15btSoftColliders13CollideSDF_RSE
	.dword	_ZTIN6btDbvt8ICollideE
	.size	_ZTIN15btSoftColliders13CollideSDF_RSE, 24

	.type	_ZTSN15btSoftColliders13CollideSDF_RSE,@object # @_ZTSN15btSoftColliders13CollideSDF_RSE
	.section	.rodata._ZTSN15btSoftColliders13CollideSDF_RSE,"aG",@progbits,_ZTSN15btSoftColliders13CollideSDF_RSE,comdat
	.weak	_ZTSN15btSoftColliders13CollideSDF_RSE
_ZTSN15btSoftColliders13CollideSDF_RSE:
	.asciz	"N15btSoftColliders13CollideSDF_RSE"
	.size	_ZTSN15btSoftColliders13CollideSDF_RSE, 35

	.type	_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic,@object # @_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic
	.section	.bss._ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic,"awG",@nobits,_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic,comdat
	.weak	_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic
	.p2align	2, 0x0
_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic:
	.space	48
	.size	_ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic, 48

	.type	_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic,@object # @_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic
	.section	.bss._ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic,"awG",@nobits,_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic,comdat
	.weak	_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic
	.p2align	3, 0x0
_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic:
	.dword	0                               # 0x0
	.size	_ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic, 8

	.type	_ZTVN15btSoftColliders12CollideCL_RSE,@object # @_ZTVN15btSoftColliders12CollideCL_RSE
	.section	.data.rel.ro._ZTVN15btSoftColliders12CollideCL_RSE,"awG",@progbits,_ZTVN15btSoftColliders12CollideCL_RSE,comdat
	.weak	_ZTVN15btSoftColliders12CollideCL_RSE
	.p2align	3, 0x0
_ZTVN15btSoftColliders12CollideCL_RSE:
	.dword	0
	.dword	_ZTIN15btSoftColliders12CollideCL_RSE
	.dword	_ZN6btDbvt8ICollideD2Ev
	.dword	_ZN15btSoftColliders12CollideCL_RSD0Ev
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodeS3_
	.dword	_ZN15btSoftColliders12CollideCL_RS7ProcessEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef
	.dword	_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode
	.size	_ZTVN15btSoftColliders12CollideCL_RSE, 72

	.type	_ZTIN15btSoftColliders12CollideCL_RSE,@object # @_ZTIN15btSoftColliders12CollideCL_RSE
	.section	.data.rel.ro._ZTIN15btSoftColliders12CollideCL_RSE,"awG",@progbits,_ZTIN15btSoftColliders12CollideCL_RSE,comdat
	.weak	_ZTIN15btSoftColliders12CollideCL_RSE
	.p2align	3, 0x0
_ZTIN15btSoftColliders12CollideCL_RSE:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTSN15btSoftColliders12CollideCL_RSE
	.dword	_ZTIN15btSoftColliders11ClusterBaseE
	.size	_ZTIN15btSoftColliders12CollideCL_RSE, 24

	.type	_ZTSN15btSoftColliders12CollideCL_RSE,@object # @_ZTSN15btSoftColliders12CollideCL_RSE
	.section	.rodata._ZTSN15btSoftColliders12CollideCL_RSE,"aG",@progbits,_ZTSN15btSoftColliders12CollideCL_RSE,comdat
	.weak	_ZTSN15btSoftColliders12CollideCL_RSE
_ZTSN15btSoftColliders12CollideCL_RSE:
	.asciz	"N15btSoftColliders12CollideCL_RSE"
	.size	_ZTSN15btSoftColliders12CollideCL_RSE, 34

	.type	_ZTIN15btSoftColliders11ClusterBaseE,@object # @_ZTIN15btSoftColliders11ClusterBaseE
	.section	.data.rel.ro._ZTIN15btSoftColliders11ClusterBaseE,"awG",@progbits,_ZTIN15btSoftColliders11ClusterBaseE,comdat
	.weak	_ZTIN15btSoftColliders11ClusterBaseE
	.p2align	3, 0x0
_ZTIN15btSoftColliders11ClusterBaseE:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTSN15btSoftColliders11ClusterBaseE
	.dword	_ZTIN6btDbvt8ICollideE
	.size	_ZTIN15btSoftColliders11ClusterBaseE, 24

	.type	_ZTSN15btSoftColliders11ClusterBaseE,@object # @_ZTSN15btSoftColliders11ClusterBaseE
	.section	.rodata._ZTSN15btSoftColliders11ClusterBaseE,"aG",@progbits,_ZTSN15btSoftColliders11ClusterBaseE,comdat
	.weak	_ZTSN15btSoftColliders11ClusterBaseE
_ZTSN15btSoftColliders11ClusterBaseE:
	.asciz	"N15btSoftColliders11ClusterBaseE"
	.size	_ZTSN15btSoftColliders11ClusterBaseE, 33

	.type	_ZTV27btSoftClusterCollisionShape,@object # @_ZTV27btSoftClusterCollisionShape
	.section	.data.rel.ro._ZTV27btSoftClusterCollisionShape,"awG",@progbits,_ZTV27btSoftClusterCollisionShape,comdat
	.weak	_ZTV27btSoftClusterCollisionShape
	.p2align	3, 0x0
_ZTV27btSoftClusterCollisionShape:
	.dword	0
	.dword	_ZTI27btSoftClusterCollisionShape
	.dword	_ZN13btConvexShapeD2Ev
	.dword	_ZN27btSoftClusterCollisionShapeD0Ev
	.dword	_ZNK27btSoftClusterCollisionShape7getAabbERK11btTransformR9btVector3S4_
	.dword	_ZNK16btCollisionShape17getBoundingSphereER9btVector3Rf
	.dword	_ZNK16btCollisionShape20getAngularMotionDiscEv
	.dword	_ZNK16btCollisionShape27getContactBreakingThresholdEv
	.dword	_ZN21btConvexInternalShape15setLocalScalingERK9btVector3
	.dword	_ZNK21btConvexInternalShape15getLocalScalingEv
	.dword	_ZNK27btSoftClusterCollisionShape21calculateLocalInertiaEfR9btVector3
	.dword	_ZNK27btSoftClusterCollisionShape7getNameEv
	.dword	_ZN27btSoftClusterCollisionShape9setMarginEf
	.dword	_ZNK27btSoftClusterCollisionShape9getMarginEv
	.dword	_ZNK27btSoftClusterCollisionShape24localGetSupportingVertexERK9btVector3
	.dword	_ZNK27btSoftClusterCollisionShape37localGetSupportingVertexWithoutMarginERK9btVector3
	.dword	_ZNK27btSoftClusterCollisionShape49batchedUnitVectorGetSupportingVertexWithoutMarginEPK9btVector3PS0_i
	.dword	_ZNK21btConvexInternalShape11getAabbSlowERK11btTransformR9btVector3S4_
	.dword	_ZNK21btConvexInternalShape36getNumPreferredPenetrationDirectionsEv
	.dword	_ZNK21btConvexInternalShape32getPreferredPenetrationDirectionEiR9btVector3
	.dword	_ZNK27btSoftClusterCollisionShape12getShapeTypeEv
	.size	_ZTV27btSoftClusterCollisionShape, 168

	.type	_ZTI27btSoftClusterCollisionShape,@object # @_ZTI27btSoftClusterCollisionShape
	.section	.data.rel.ro._ZTI27btSoftClusterCollisionShape,"awG",@progbits,_ZTI27btSoftClusterCollisionShape,comdat
	.weak	_ZTI27btSoftClusterCollisionShape
	.p2align	3, 0x0
_ZTI27btSoftClusterCollisionShape:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTS27btSoftClusterCollisionShape
	.dword	_ZTI21btConvexInternalShape
	.size	_ZTI27btSoftClusterCollisionShape, 24

	.type	_ZTS27btSoftClusterCollisionShape,@object # @_ZTS27btSoftClusterCollisionShape
	.section	.rodata._ZTS27btSoftClusterCollisionShape,"aG",@progbits,_ZTS27btSoftClusterCollisionShape,comdat
	.weak	_ZTS27btSoftClusterCollisionShape
_ZTS27btSoftClusterCollisionShape:
	.asciz	"27btSoftClusterCollisionShape"
	.size	_ZTS27btSoftClusterCollisionShape, 30

	.type	.L.str.4,@object                # @.str.4
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.4:
	.asciz	"SOFTCLUSTER"
	.size	.L.str.4, 12

	.type	_ZTVN15btSoftColliders12CollideCL_SSE,@object # @_ZTVN15btSoftColliders12CollideCL_SSE
	.section	.data.rel.ro._ZTVN15btSoftColliders12CollideCL_SSE,"awG",@progbits,_ZTVN15btSoftColliders12CollideCL_SSE,comdat
	.weak	_ZTVN15btSoftColliders12CollideCL_SSE
	.p2align	3, 0x0
_ZTVN15btSoftColliders12CollideCL_SSE:
	.dword	0
	.dword	_ZTIN15btSoftColliders12CollideCL_SSE
	.dword	_ZN6btDbvt8ICollideD2Ev
	.dword	_ZN15btSoftColliders12CollideCL_SSD0Ev
	.dword	_ZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef
	.dword	_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode
	.size	_ZTVN15btSoftColliders12CollideCL_SSE, 72

	.type	_ZTIN15btSoftColliders12CollideCL_SSE,@object # @_ZTIN15btSoftColliders12CollideCL_SSE
	.section	.data.rel.ro._ZTIN15btSoftColliders12CollideCL_SSE,"awG",@progbits,_ZTIN15btSoftColliders12CollideCL_SSE,comdat
	.weak	_ZTIN15btSoftColliders12CollideCL_SSE
	.p2align	3, 0x0
_ZTIN15btSoftColliders12CollideCL_SSE:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTSN15btSoftColliders12CollideCL_SSE
	.dword	_ZTIN15btSoftColliders11ClusterBaseE
	.size	_ZTIN15btSoftColliders12CollideCL_SSE, 24

	.type	_ZTSN15btSoftColliders12CollideCL_SSE,@object # @_ZTSN15btSoftColliders12CollideCL_SSE
	.section	.rodata._ZTSN15btSoftColliders12CollideCL_SSE,"aG",@progbits,_ZTSN15btSoftColliders12CollideCL_SSE,comdat
	.weak	_ZTSN15btSoftColliders12CollideCL_SSE
_ZTSN15btSoftColliders12CollideCL_SSE:
	.asciz	"N15btSoftColliders12CollideCL_SSE"
	.size	_ZTSN15btSoftColliders12CollideCL_SSE, 34

	.type	_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count,@object # @_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count
	.section	.bss._ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count,"awG",@nobits,_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count,comdat
	.weak	_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count
	.p2align	2, 0x0
_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count:
	.word	0                               # 0x0
	.size	_ZZN15btSoftColliders12CollideCL_SS7ProcessEPK10btDbvtNodeS3_E5count, 4

	.type	_ZTVN15btSoftColliders12CollideVF_SSE,@object # @_ZTVN15btSoftColliders12CollideVF_SSE
	.section	.data.rel.ro._ZTVN15btSoftColliders12CollideVF_SSE,"awG",@progbits,_ZTVN15btSoftColliders12CollideVF_SSE,comdat
	.weak	_ZTVN15btSoftColliders12CollideVF_SSE
	.p2align	3, 0x0
_ZTVN15btSoftColliders12CollideVF_SSE:
	.dword	0
	.dword	_ZTIN15btSoftColliders12CollideVF_SSE
	.dword	_ZN6btDbvt8ICollideD2Ev
	.dword	_ZN15btSoftColliders12CollideVF_SSD0Ev
	.dword	_ZN15btSoftColliders12CollideVF_SS7ProcessEPK10btDbvtNodeS3_
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide7ProcessEPK10btDbvtNodef
	.dword	_ZN6btDbvt8ICollide7DescentEPK10btDbvtNode
	.dword	_ZN6btDbvt8ICollide9AllLeavesEPK10btDbvtNode
	.size	_ZTVN15btSoftColliders12CollideVF_SSE, 72

	.type	_ZTIN15btSoftColliders12CollideVF_SSE,@object # @_ZTIN15btSoftColliders12CollideVF_SSE
	.section	.data.rel.ro._ZTIN15btSoftColliders12CollideVF_SSE,"awG",@progbits,_ZTIN15btSoftColliders12CollideVF_SSE,comdat
	.weak	_ZTIN15btSoftColliders12CollideVF_SSE
	.p2align	3, 0x0
_ZTIN15btSoftColliders12CollideVF_SSE:
	.dword	_ZTVN10__cxxabiv120__si_class_type_infoE+16
	.dword	_ZTSN15btSoftColliders12CollideVF_SSE
	.dword	_ZTIN6btDbvt8ICollideE
	.size	_ZTIN15btSoftColliders12CollideVF_SSE, 24

	.type	_ZTSN15btSoftColliders12CollideVF_SSE,@object # @_ZTSN15btSoftColliders12CollideVF_SSE
	.section	.rodata._ZTSN15btSoftColliders12CollideVF_SSE,"aG",@progbits,_ZTSN15btSoftColliders12CollideVF_SSE,comdat
	.weak	_ZTSN15btSoftColliders12CollideVF_SSE
_ZTSN15btSoftColliders12CollideVF_SSE:
	.asciz	"N15btSoftColliders12CollideVF_SSE"
	.size	_ZTSN15btSoftColliders12CollideVF_SSE, 34

	.type	_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy,@object # @_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy
	.local	_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy
	.comm	_ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy,120,8
	.type	_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy,@object # @_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy
	.local	_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy
	.comm	_ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy,8,8
	.type	_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy,@object # @_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy
	.local	_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy
	.comm	_ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy,24,8
	.type	_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy,@object # @_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy
	.local	_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy
	.comm	_ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy,8,8
	.type	_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy,@object # @_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy
	.local	_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy
	.comm	_ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy,88,8
	.type	_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy,@object # @_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy
	.local	_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy
	.comm	_ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy,8,8
	.type	_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy,@object # @_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy
	.local	_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy
	.comm	_ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy,72,8
	.type	_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy,@object # @_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy
	.local	_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy
	.comm	_ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy,8,8
	.type	_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy,@object # @_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy
	.local	_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy
	.comm	_ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy,72,8
	.type	_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy,@object # @_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy
	.local	_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy
	.comm	_ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy,8,8
	.type	_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy,@object # @_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy
	.local	_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy
	.comm	_ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy,136,8
	.type	_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy,@object # @_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy
	.local	_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy
	.comm	_ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy,8,8
	.type	.Lswitch.table._ZN10btSoftBody11staticSolveEi,@object # @switch.table._ZN10btSoftBody11staticSolveEi
	.section	.data.rel.ro,"aw",@progbits
	.p2align	3, 0x0
.Lswitch.table._ZN10btSoftBody11staticSolveEi:
	.dword	_ZN10btSoftBody12PSolve_LinksEPS_ff
	.dword	_ZN10btSoftBody14PSolve_AnchorsEPS_ff
	.dword	_ZN10btSoftBody16PSolve_RContactsEPS_ff
	.dword	_ZN10btSoftBody16PSolve_SContactsEPS_ff
	.size	.Lswitch.table._ZN10btSoftBody11staticSolveEi, 32

	.globl	_ZN10btSoftBodyC1EP19btSoftBodyWorldInfoiPK9btVector3PKf
	.type	_ZN10btSoftBodyC1EP19btSoftBodyWorldInfoiPK9btVector3PKf,@function
_ZN10btSoftBodyC1EP19btSoftBodyWorldInfoiPK9btVector3PKf = _ZN10btSoftBodyC2EP19btSoftBodyWorldInfoiPK9btVector3PKf
	.globl	_ZN10btSoftBodyD1Ev
	.type	_ZN10btSoftBodyD1Ev,@function
_ZN10btSoftBodyD1Ev = _ZN10btSoftBodyD2Ev
	.globl	_ZN10btSoftBody15RayFromToCasterC1ERK9btVector3S3_f
	.type	_ZN10btSoftBody15RayFromToCasterC1ERK9btVector3S3_f,@function
_ZN10btSoftBody15RayFromToCasterC1ERK9btVector3S3_f = _ZN10btSoftBody15RayFromToCasterC2ERK9btVector3S3_f
	.hidden	DW.ref.__gxx_personality_v0
	.weak	DW.ref.__gxx_personality_v0
	.section	.data.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,comdat
	.p2align	3, 0x0
	.type	DW.ref.__gxx_personality_v0,@object
	.size	DW.ref.__gxx_personality_v0, 8
DW.ref.__gxx_personality_v0:
	.dword	__gxx_personality_v0
	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym __gxx_personality_v0
	.addrsig_sym _ZN10btSoftBody14PSolve_AnchorsEPS_ff
	.addrsig_sym _ZN10btSoftBody16PSolve_RContactsEPS_ff
	.addrsig_sym _ZN10btSoftBody16PSolve_SContactsEPS_ff
	.addrsig_sym _ZN10btSoftBody12PSolve_LinksEPS_ff
	.addrsig_sym _ZN10btSoftBody12VSolve_LinksEPS_f
	.addrsig_sym _Unwind_Resume
	.addrsig_sym _ZTIN10btSoftBody5JointE
	.addrsig_sym _ZTVN10__cxxabiv117__class_type_infoE
	.addrsig_sym _ZTSN10btSoftBody5JointE
	.addrsig_sym _ZTIN10btSoftBody6CJointE
	.addrsig_sym _ZTVN10__cxxabiv120__si_class_type_infoE
	.addrsig_sym _ZTSN10btSoftBody6CJointE
	.addrsig_sym _ZTI10btSoftBody
	.addrsig_sym _ZTS10btSoftBody
	.addrsig_sym _ZTI17btCollisionObject
	.addrsig_sym _ZTIN10btSoftBody6LJointE
	.addrsig_sym _ZTSN10btSoftBody6LJointE
	.addrsig_sym _ZTIN10btSoftBody6AJointE
	.addrsig_sym _ZTSN10btSoftBody6AJointE
	.addrsig_sym _ZTIN10btSoftBody15RayFromToCasterE
	.addrsig_sym _ZTSN10btSoftBody15RayFromToCasterE
	.addrsig_sym _ZTIN6btDbvt8ICollideE
	.addrsig_sym _ZTSN6btDbvt8ICollideE
	.addrsig_sym _ZTI24btSoftBodyCollisionShape
	.addrsig_sym _ZTS24btSoftBodyCollisionShape
	.addrsig_sym _ZTI14btConcaveShape
	.addrsig_sym _ZZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy
	.addrsig_sym _ZGVZNK24btSoftBodyCollisionShape15getLocalScalingEvE5dummy
	.addrsig_sym _ZZNK10btSoftBody4Body5xformEvE8identity
	.addrsig_sym _ZGVZNK10btSoftBody4Body5xformEvE8identity
	.addrsig_sym _ZZN11btTransform11getIdentityEvE17identityTransform
	.addrsig_sym _ZGVZN11btTransform11getIdentityEvE17identityTransform
	.addrsig_sym _ZZN11btMatrix3x311getIdentityEvE14identityMatrix
	.addrsig_sym _ZGVZN11btMatrix3x311getIdentityEvE14identityMatrix
	.addrsig_sym _ZZNK10btSoftBody4Body15invWorldInertiaEvE3iwi
	.addrsig_sym _ZGVZNK10btSoftBody4Body15invWorldInertiaEvE3iwi
	.addrsig_sym _ZTIN15btSoftColliders13CollideSDF_RSE
	.addrsig_sym _ZTSN15btSoftColliders13CollideSDF_RSE
	.addrsig_sym _ZZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic
	.addrsig_sym _ZGVZNK15btSoftColliders13CollideSDF_RS6DoNodeERN10btSoftBody4NodeEE9iwiStatic
	.addrsig_sym _ZTIN15btSoftColliders12CollideCL_RSE
	.addrsig_sym _ZTSN15btSoftColliders12CollideCL_RSE
	.addrsig_sym _ZTIN15btSoftColliders11ClusterBaseE
	.addrsig_sym _ZTSN15btSoftColliders11ClusterBaseE
	.addrsig_sym _ZTI27btSoftClusterCollisionShape
	.addrsig_sym _ZTS27btSoftClusterCollisionShape
	.addrsig_sym _ZTI21btConvexInternalShape
	.addrsig_sym _ZTIN15btSoftColliders12CollideCL_SSE
	.addrsig_sym _ZTSN15btSoftColliders12CollideCL_SSE
	.addrsig_sym _ZTIN15btSoftColliders12CollideVF_SSE
	.addrsig_sym _ZTSN15btSoftColliders12CollideVF_SSE
	.addrsig_sym _ZZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy
	.addrsig_sym _ZGVZL14ZeroInitializeIN10btSoftBody4NodeEEvRT_E9zerodummy
	.addrsig_sym _ZZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy
	.addrsig_sym _ZGVZL14ZeroInitializeIN10btSoftBody8MaterialEEvRT_E9zerodummy
	.addrsig_sym _ZZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy
	.addrsig_sym _ZGVZL14ZeroInitializeIN10btSoftBody4NoteEEvRT_E9zerodummy
	.addrsig_sym _ZZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy
	.addrsig_sym _ZGVZL14ZeroInitializeIN10btSoftBody4LinkEEvRT_E9zerodummy
	.addrsig_sym _ZZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy
	.addrsig_sym _ZGVZL14ZeroInitializeIN10btSoftBody4FaceEEvRT_E9zerodummy
	.addrsig_sym _ZZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy
	.addrsig_sym _ZGVZL14ZeroInitializeIN10btSoftBody5TetraEEvRT_E9zerodummy
